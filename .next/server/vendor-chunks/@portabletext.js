"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/./node_modules/@portabletext/block-tools/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@portabletext/block-tools/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlToBlocks: () => (/* binding */ htmlToBlocks),\n/* harmony export */   normalizeBlock: () => (/* binding */ normalizeBlock),\n/* harmony export */   randomKey: () => (/* binding */ randomKey)\n/* harmony export */ });\n/* harmony import */ var _portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @portabletext/sanity-bridge */ \"(ssr)/./node_modules/@portabletext/sanity-bridge/dist/index.js\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n\n\n\n\n\nfunction isArbitraryTypedObject(object) {\n  return isRecord(object) && typeof object._type == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction isTextBlock(schema, block) {\n  return !(!isArbitraryTypedObject(block) || block._type !== schema.block.name || !Array.isArray(block.children));\n}\nfunction isSpan(schema, child) {\n  return !(!isArbitraryTypedObject(child) || child._type !== schema.span.name || typeof child.text != \"string\");\n}\nfunction keyGenerator() {\n  return randomKey(12);\n}\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(rnds8), rnds8;\n}\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i)\n  byteToHex[i] = (i + 256).toString(16).slice(1);\nfunction randomKey(length) {\n  return whatwgRNG(length).reduce((str, n) => str + byteToHex[n], \"\").slice(0, length);\n}\nconst objectToString = Object.prototype.toString;\nfunction resolveJsType(val) {\n  switch (objectToString.call(val)) {\n    case \"[object Function]\":\n      return \"function\";\n    case \"[object Date]\":\n      return \"date\";\n    case \"[object RegExp]\":\n      return \"regexp\";\n    case \"[object Arguments]\":\n      return \"arguments\";\n    case \"[object Array]\":\n      return \"array\";\n    case \"[object String]\":\n      return \"string\";\n  }\n  return val === null ? \"null\" : val === void 0 ? \"undefined\" : val && typeof val == \"object\" && \"nodeType\" in val && val.nodeType === 1 ? \"element\" : val === Object(val) ? \"object\" : typeof val;\n}\nvar s = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, c = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 };\nnew Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nObject.fromEntries(Object.entries(c).map((t) => t.reverse()));\nObject.fromEntries(Object.entries(s).map((t) => t.reverse()));\nvar S = `${Object.values(s).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n  var e;\n  return { cleaned: t.replace(f, \"\"), encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\" };\n}\nfunction O(t) {\n  return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nconst PRESERVE_WHITESPACE_TAGS = [\"pre\", \"textarea\", \"code\"], BLOCK_DEFAULT_STYLE = \"normal\", DEFAULT_BLOCK = Object.freeze({\n  _type: \"block\",\n  markDefs: [],\n  style: BLOCK_DEFAULT_STYLE\n}), DEFAULT_SPAN = Object.freeze({\n  _type: \"span\",\n  marks: []\n}), HTML_BLOCK_TAGS = {\n  p: DEFAULT_BLOCK,\n  blockquote: { ...DEFAULT_BLOCK, style: \"blockquote\" }\n}, HTML_SPAN_TAGS = {\n  span: { object: \"text\" }\n}, HTML_LIST_CONTAINER_TAGS = {\n  ol: { object: null },\n  ul: { object: null }\n}, HTML_HEADER_TAGS = {\n  h1: { ...DEFAULT_BLOCK, style: \"h1\" },\n  h2: { ...DEFAULT_BLOCK, style: \"h2\" },\n  h3: { ...DEFAULT_BLOCK, style: \"h3\" },\n  h4: { ...DEFAULT_BLOCK, style: \"h4\" },\n  h5: { ...DEFAULT_BLOCK, style: \"h5\" },\n  h6: { ...DEFAULT_BLOCK, style: \"h6\" }\n}, HTML_MISC_TAGS = {\n  br: { ...DEFAULT_BLOCK, style: BLOCK_DEFAULT_STYLE }\n}, HTML_DECORATOR_TAGS = {\n  b: \"strong\",\n  strong: \"strong\",\n  i: \"em\",\n  em: \"em\",\n  u: \"underline\",\n  s: \"strike-through\",\n  strike: \"strike-through\",\n  del: \"strike-through\",\n  code: \"code\",\n  sup: \"sup\",\n  sub: \"sub\",\n  ins: \"ins\",\n  mark: \"mark\",\n  small: \"small\"\n}, HTML_LIST_ITEM_TAGS = {\n  li: {\n    ...DEFAULT_BLOCK,\n    style: BLOCK_DEFAULT_STYLE,\n    level: 1,\n    listItem: \"bullet\"\n  }\n}, ELEMENT_MAP = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_SPAN_TAGS,\n  ...HTML_LIST_CONTAINER_TAGS,\n  ...HTML_LIST_ITEM_TAGS,\n  ...HTML_HEADER_TAGS,\n  ...HTML_MISC_TAGS\n};\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__(\n  Object.values(ELEMENT_MAP).filter((tag) => \"style\" in tag).map((tag) => tag.style)\n);\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__(\n  Object.values(HTML_DECORATOR_TAGS)\n);\nconst _XPathResult = {\n  BOOLEAN_TYPE: 3,\n  ORDERED_NODE_ITERATOR_TYPE: 5,\n  UNORDERED_NODE_SNAPSHOT_TYPE: 6\n};\nvar preprocessGDocs = (_html, doc, options) => {\n  const whitespaceOnPasteMode = options?.unstable_whitespaceOnPasteMode || \"preserve\";\n  let gDocsRootOrSiblingNode = doc.evaluate(\n    '//*[@id and contains(@id, \"docs-internal-guid\")]',\n    doc,\n    null,\n    _XPathResult.ORDERED_NODE_ITERATOR_TYPE,\n    null\n  ).iterateNext();\n  if (gDocsRootOrSiblingNode) {\n    const isWrappedRootTag = tagName(gDocsRootOrSiblingNode) === \"b\";\n    switch (isWrappedRootTag || (gDocsRootOrSiblingNode = doc.body), whitespaceOnPasteMode) {\n      case \"normalize\":\n        normalizeWhitespace(gDocsRootOrSiblingNode);\n        break;\n      case \"remove\":\n        removeAllWhitespace(gDocsRootOrSiblingNode);\n        break;\n    }\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--) {\n      const elm = childNodes.snapshotItem(i);\n      elm?.setAttribute(\"data-is-google-docs\", \"true\"), (elm?.parentElement === gDocsRootOrSiblingNode || !isWrappedRootTag && elm.parentElement === doc.body) && (elm?.setAttribute(\"data-is-root-node\", \"true\"), tagName(elm)), tagName(elm) === \"li\" && elm.firstChild && tagName(elm?.firstChild) === \"img\" && elm.removeChild(elm.firstChild);\n    }\n    return isWrappedRootTag && doc.body.firstElementChild?.replaceWith(\n      ...Array.from(gDocsRootOrSiblingNode.childNodes)\n    ), doc;\n  }\n  return doc;\n};\nconst unwantedWordDocumentPaths = [\n  \"/html/text()\",\n  \"/html/head/text()\",\n  \"/html/body/text()\",\n  \"/html/body/ul/text()\",\n  \"/html/body/ol/text()\",\n  \"//comment()\",\n  \"//style\",\n  \"//xml\",\n  \"//script\",\n  \"//meta\",\n  \"//link\"\n];\nvar preprocessHTML = (_html, doc) => {\n  const bodyTextNodes = doc.evaluate(\n    \"/html/body/text()\",\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = bodyTextNodes.snapshotLength - 1; i >= 0; i--) {\n    const node = bodyTextNodes.snapshotItem(i), text = node.textContent || \"\";\n    if (text.replace(/[^\\S\\n]+$/g, \"\")) {\n      const newNode = doc.createElement(\"span\");\n      newNode.appendChild(doc.createTextNode(text)), node.parentNode?.replaceChild(newNode, node);\n    } else\n      node.parentNode?.removeChild(node);\n  }\n  const unwantedNodes = doc.evaluate(\n    unwantedWordDocumentPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted && unwanted.parentNode?.removeChild(unwanted);\n  }\n  return doc;\n}, preprocessNotion = (html, doc) => {\n  const NOTION_REGEX = /<!-- notionvc:.*?-->/g;\n  if (html.match(NOTION_REGEX)) {\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--)\n      childNodes.snapshotItem(i)?.setAttribute(\"data-is-notion\", \"true\");\n    return doc;\n  }\n  return doc;\n}, preprocessWhitespace = (_2, doc) => {\n  function processNode(node) {\n    if (node.nodeType === _XPathResult.BOOLEAN_TYPE && !PRESERVE_WHITESPACE_TAGS.includes(\n      node.parentElement?.tagName.toLowerCase() || \"\"\n    ))\n      node.textContent = node.textContent?.replace(/\\s\\s+/g, \" \").replace(/[\\r\\n]+/g, \" \") || \"\";\n    else\n      for (let i = 0; i < node.childNodes.length; i++)\n        processNode(node.childNodes[i]);\n  }\n  return processNode(doc.body), doc;\n};\nconst WORD_HTML_REGEX = /(class=\"?Mso|style=(?:\"|')[^\"]*?\\bmso-|w:WordDocument|<o:\\w+>|<\\/font>)/, unwantedPaths = [\n  \"//o:p\",\n  \"//span[@style='mso-list:Ignore']\",\n  \"//span[@style='mso-list: Ignore']\"\n], mappedPaths = [\n  \"//p[@class='MsoTocHeading']\",\n  \"//p[@class='MsoTitle']\",\n  \"//p[@class='MsoToaHeading']\",\n  \"//p[@class='MsoSubtitle']\",\n  \"//span[@class='MsoSubtleEmphasis']\",\n  \"//span[@class='MsoIntenseEmphasis']\"\n], elementMap = {\n  MsoTocHeading: [\"h3\"],\n  MsoTitle: [\"h1\"],\n  MsoToaHeading: [\"h2\"],\n  MsoSubtitle: [\"h5\"],\n  MsoSubtleEmphasis: [\"span\", \"em\"],\n  MsoIntenseEmphasis: [\"span\", \"em\", \"strong\"]\n  // Remove cruft\n};\nfunction isWordHtml(html) {\n  return WORD_HTML_REGEX.test(html);\n}\nvar preprocessWord = (html, doc) => {\n  if (!isWordHtml(html))\n    return doc;\n  const unwantedNodes = doc.evaluate(\n    unwantedPaths.join(\"|\"),\n    doc,\n    (prefix) => prefix === \"o\" ? \"urn:schemas-microsoft-com:office:office\" : null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted?.parentNode && unwanted.parentNode.removeChild(unwanted);\n  }\n  const mappedElements = doc.evaluate(\n    mappedPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = mappedElements.snapshotLength - 1; i >= 0; i--) {\n    const mappedElm = mappedElements.snapshotItem(i), tags = elementMap[mappedElm.className], text = doc.createTextNode(mappedElm.textContent || \"\");\n    if (!tags)\n      continue;\n    const parentElement = doc.createElement(tags[0]);\n    let parent = parentElement, child = parentElement;\n    tags.slice(1).forEach((tag) => {\n      child = doc.createElement(tag), parent.appendChild(child), parent = child;\n    }), child.appendChild(text), mappedElm?.parentNode?.replaceChild(parentElement, mappedElm);\n  }\n  return doc;\n}, preprocessors = [\n  preprocessWhitespace,\n  preprocessNotion,\n  preprocessWord,\n  preprocessGDocs,\n  preprocessHTML\n];\nfunction tagName(el) {\n  if (el && \"tagName\" in el)\n    return el.tagName.toLowerCase();\n}\nfunction preprocess(html, parseHtml, options) {\n  const cleanHTML = O(html), doc = parseHtml(normalizeHtmlBeforePreprocess(cleanHTML));\n  return preprocessors.forEach((processor) => {\n    processor(cleanHTML, doc, options);\n  }), doc;\n}\nfunction normalizeHtmlBeforePreprocess(html) {\n  return html.trim();\n}\nfunction defaultParseHtml() {\n  if (resolveJsType(DOMParser) === \"undefined\")\n    throw new Error(\n      \"The native `DOMParser` global which the `Html` deserializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.\"\n    );\n  return (html) => new DOMParser().parseFromString(html, \"text/html\");\n}\nfunction flattenNestedBlocks(context, blocks2) {\n  let depth = 0;\n  const flattened = [], traverse = (nodes) => {\n    const toRemove = [];\n    nodes.forEach((node) => {\n      if (depth === 0)\n        if (context.schema.blockObjects.length > 0 && isTextBlock(context.schema, node)) {\n          const hasBlockObjects = node.children.some((child) => context.schema.blockObjects.some(\n            (blockObject) => blockObject.name === child._type\n          )), hasBlocks = node.children.some(\n            (child) => child._type === \"__block\"\n          );\n          if (hasBlockObjects || hasBlocks) {\n            node.children.reduce(\n              (slices, child) => {\n                const knownInlineObject = context.schema.inlineObjects.some(\n                  (inlineObject) => inlineObject.name === child._type\n                ), knownBlockObject = context.schema.blockObjects.some(\n                  (blockObject) => blockObject.name === child._type\n                ), lastSlice = slices.pop();\n                return !isSpan(context.schema, child) && !knownInlineObject && knownBlockObject ? [\n                  ...slices,\n                  ...lastSlice ? [lastSlice] : [],\n                  { type: \"block object\", block: child }\n                ] : child._type === \"__block\" ? [\n                  ...slices,\n                  ...lastSlice ? [lastSlice] : [],\n                  {\n                    type: \"block object\",\n                    block: child.block\n                  }\n                ] : lastSlice && lastSlice.type === \"children\" ? [\n                  ...slices,\n                  {\n                    type: \"children\",\n                    children: [...lastSlice.children, child]\n                  }\n                ] : [\n                  ...slices,\n                  ...lastSlice ? [lastSlice] : [],\n                  { type: \"children\", children: [child] }\n                ];\n              },\n              []\n            ).forEach((slice) => {\n              if (slice.type === \"block object\")\n                flattened.push(slice.block);\n              else if (slice.children.length > 0) {\n                const newBlock = {\n                  ...node,\n                  children: slice.children\n                };\n                flattened.push(newBlock);\n              }\n            });\n            return;\n          } else\n            flattened.push(node);\n        } else\n          flattened.push(node);\n      isTextBlock(context.schema, node) && (depth > 0 && (toRemove.push(node), flattened.push(node)), depth++, traverse(node.children)), node._type === \"__block\" && (toRemove.push(node), flattened.push(node.block));\n    }), toRemove.forEach((node) => {\n      nodes.splice(nodes.indexOf(node), 1);\n    }), depth--;\n  };\n  return traverse(blocks2), flattened;\n}\nfunction nextSpan(block, index) {\n  const next = block.children[index + 1];\n  return next && next._type === \"span\" ? next : null;\n}\nfunction prevSpan(block, index) {\n  const prev = block.children[index - 1];\n  return prev && prev._type === \"span\" ? prev : null;\n}\nfunction isWhiteSpaceChar(text) {\n  return [\"\\xA0\", \" \"].includes(text);\n}\nfunction trimWhitespace(schema, blocks2) {\n  return blocks2.forEach((block) => {\n    isTextBlock(schema, block) && block.children.forEach((child, index) => {\n      if (!isMinimalSpan(child))\n        return;\n      const nextChild = nextSpan(block, index), prevChild = prevSpan(block, index);\n      index === 0 && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), index === block.children.length - 1 && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(Math.max(0, child.text.length - 1))) && nextChild && isMinimalSpan(nextChild) && /\\s/.test(nextChild.text.slice(0, 1)) && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(0, 1)) && prevChild && isMinimalSpan(prevChild) && /\\s/.test(prevChild.text.slice(Math.max(0, prevChild.text.length - 1))) && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), child.text || block.children.splice(index, 1), prevChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(prevChild.marks, child.marks) && isWhiteSpaceChar(child.text) ? (prevChild.text += \" \", block.children.splice(index, 1)) : nextChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(nextChild.marks, child.marks) && isWhiteSpaceChar(child.text) && (nextChild.text = ` ${nextChild.text}`, block.children.splice(index, 1));\n    });\n  }), blocks2;\n}\nfunction ensureRootIsBlocks(schema, blocks2) {\n  return blocks2.reduce((memo, node, i, original) => {\n    if (node._type === \"block\")\n      return memo.push(node), memo;\n    if (node._type === \"__block\")\n      return memo.push(node.block), memo;\n    const lastBlock = memo[memo.length - 1];\n    if (i > 0 && !isTextBlock(schema, original[i - 1]) && isTextBlock(schema, lastBlock))\n      return lastBlock.children.push(node), memo;\n    const block = {\n      ...DEFAULT_BLOCK,\n      children: [node]\n    };\n    return memo.push(block), memo;\n  }, []);\n}\nfunction isNodeList(node) {\n  return Object.prototype.toString.call(node) === \"[object NodeList]\";\n}\nfunction isMinimalSpan(node) {\n  return node._type === \"span\";\n}\nfunction isMinimalBlock(node) {\n  return node._type === \"block\";\n}\nfunction isPlaceholderDecorator(node) {\n  return node._type === \"__decorator\";\n}\nfunction isPlaceholderAnnotation(node) {\n  return node._type === \"__annotation\";\n}\nfunction isElement(node) {\n  return node.nodeType === 1;\n}\nfunction normalizeWhitespace(rootNode) {\n  let emptyBlockCount = 0, lastParent = null;\n  const nodesToRemove = [];\n  for (let child = rootNode.firstChild; child; child = child.nextSibling) {\n    if (!isElement(child)) {\n      normalizeWhitespace(child), emptyBlockCount = 0;\n      continue;\n    }\n    const elm = child;\n    isWhitespaceBlock(elm) ? (lastParent && elm.parentElement === lastParent ? (emptyBlockCount++, emptyBlockCount > 1 && nodesToRemove.push(elm)) : emptyBlockCount = 1, lastParent = elm.parentElement) : (normalizeWhitespace(child), emptyBlockCount = 0);\n  }\n  nodesToRemove.forEach((node) => node.parentElement?.removeChild(node));\n}\nfunction removeAllWhitespace(rootNode) {\n  const nodesToRemove = [];\n  function collectNodesToRemove(currentNode) {\n    if (isElement(currentNode)) {\n      const elm = currentNode;\n      if (tagName(elm) === \"br\" && (tagName(elm.nextElementSibling) === \"p\" || tagName(elm.previousElementSibling) === \"p\")) {\n        nodesToRemove.push(elm);\n        return;\n      }\n      if ((tagName(elm) === \"p\" || tagName(elm) === \"br\") && elm?.firstChild?.textContent?.trim() === \"\") {\n        nodesToRemove.push(elm);\n        return;\n      }\n      for (let child = elm.firstChild; child; child = child.nextSibling)\n        collectNodesToRemove(child);\n    }\n  }\n  collectNodesToRemove(rootNode), nodesToRemove.forEach((node) => node.parentElement?.removeChild(node));\n}\nfunction isWhitespaceBlock(elm) {\n  return [\"p\", \"br\"].includes(tagName(elm) || \"\") && !elm.textContent?.trim();\n}\nconst LIST_CONTAINER_TAGS = Object.keys(HTML_LIST_CONTAINER_TAGS);\nfunction isEmphasis$1(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-style\\s*:\\s*italic/.test(style || \"\");\n}\nfunction isStrong$1(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-weight\\s*:\\s*700/.test(style || \"\");\n}\nfunction isUnderline$1(el) {\n  if (!isElement(el) || tagName(el.parentNode) === \"a\")\n    return !1;\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*underline/.test(style || \"\");\n}\nfunction isStrikethrough(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*(?:.*line-through.*;)/.test(style || \"\");\n}\nfunction isGoogleDocs(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-google-docs\");\n}\nfunction isRootNode(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-root-node\");\n}\nfunction getListItemStyle$1(el) {\n  const parentTag = tagName(el.parentNode);\n  if (!(parentTag && !LIST_CONTAINER_TAGS.includes(parentTag)))\n    return tagName(el.parentNode) === \"ul\" ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel$1(el) {\n  let level = 0;\n  if (tagName(el) === \"li\") {\n    let parentNode = el.parentNode;\n    for (; parentNode; ) {\n      const parentTag = tagName(parentNode);\n      parentTag && LIST_CONTAINER_TAGS.includes(parentTag) && level++, parentNode = parentNode.parentNode;\n    }\n  } else\n    level = 1;\n  return level;\n}\nconst blocks = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_HEADER_TAGS\n};\nfunction getBlockStyle(schema, el) {\n  const childTag = tagName(el.firstChild), block = childTag && blocks[childTag];\n  return block && schema.styles.some((style) => style.name === block.style) ? block.style : BLOCK_DEFAULT_STYLE;\n}\nfunction createGDocsRules(schema) {\n  return [\n    {\n      deserialize(el, next) {\n        if (isElement(el) && tagName(el) === \"span\" && isGoogleDocs(el)) {\n          if (!el.textContent)\n            return !el.previousSibling && !el.nextSibling && el.setAttribute(\"data-lonely-child\", \"true\"), next(el.childNodes);\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong$1(el) && span.marks.push(\"strong\"), isUnderline$1(el) && span.marks.push(\"underline\"), isStrikethrough(el) && span.marks.push(\"strike-through\"), isEmphasis$1(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    },\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"li\" && isGoogleDocs(el))\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle$1(el),\n            level: getListItemLevel$1(el),\n            style: getBlockStyle(schema, el),\n            children: next(el.firstChild?.childNodes || [])\n          };\n      }\n    },\n    {\n      deserialize(el) {\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && el.classList.contains(\"apple-interchange-newline\"))\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && el?.parentNode?.textContent === \"\")\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && isRootNode(el))\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n      }\n    }\n  ];\n}\nconst whitespaceTextNodeRule = {\n  deserialize(node) {\n    return node.nodeName === \"#text\" && isWhitespaceTextNode(node) ? {\n      ...DEFAULT_SPAN,\n      marks: [],\n      text: (node.textContent ?? \"\").replace(/\\s\\s+/g, \" \")\n    } : void 0;\n  }\n};\nfunction isWhitespaceTextNode(node) {\n  return (node.nodeType === 3 && (node.textContent || \"\").replace(/[\\r\\n]/g, \" \").replace(/\\s\\s+/g, \" \") === \" \" && node.nextSibling && node.nextSibling.nodeType !== 3 && node.previousSibling && node.previousSibling.nodeType !== 3 || node.textContent !== \" \") && tagName(node.parentNode) !== \"body\";\n}\nfunction resolveListItem(schema, listNodeTagName) {\n  if (listNodeTagName === \"ul\" && schema.lists.some((list) => list.name === \"bullet\"))\n    return \"bullet\";\n  if (listNodeTagName === \"ol\" && schema.lists.some((list) => list.name === \"number\"))\n    return \"number\";\n}\nfunction createHTMLRules(schema, options) {\n  return [\n    whitespaceTextNodeRule,\n    {\n      // Pre element\n      deserialize(el) {\n        if (tagName(el) !== \"pre\")\n          return;\n        const isCodeEnabled = schema.styles.some(\n          (style) => style.name === \"code\"\n        );\n        return {\n          _type: \"block\",\n          style: \"normal\",\n          markDefs: [],\n          children: [\n            {\n              ...DEFAULT_SPAN,\n              marks: isCodeEnabled ? [\"code\"] : [],\n              text: el.textContent || \"\"\n            }\n          ]\n        };\n      }\n    },\n    // Blockquote element\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== \"blockquote\")\n          return;\n        const blocks2 = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS\n        };\n        delete blocks2.blockquote;\n        const nonBlockquoteBlocks = Object.keys(blocks2), children = [];\n        return el.childNodes.forEach((node, index) => {\n          if (el.ownerDocument)\n            if (node.nodeType === 1 && nonBlockquoteBlocks.includes(\n              node.localName.toLowerCase()\n            )) {\n              const span = el.ownerDocument.createElement(\"span\"), previousChild = children[children.length - 1];\n              previousChild && previousChild.nodeType === 3 && previousChild.textContent?.trim() && span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), node.childNodes.forEach((cn) => {\n                span.appendChild(cn.cloneNode(!0));\n              }), index !== el.childNodes.length && span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), children.push(span);\n            } else\n              children.push(node);\n        }), {\n          _type: \"block\",\n          style: \"blockquote\",\n          markDefs: [],\n          children: next(children)\n        };\n      }\n    },\n    // Block elements\n    {\n      deserialize(el, next) {\n        const blocks2 = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS\n        }, tag = tagName(el);\n        let block = tag ? blocks2[tag] : void 0;\n        if (!block)\n          return;\n        if (el.parentNode && tagName(el.parentNode) === \"li\")\n          return next(el.childNodes);\n        const blockStyle = block.style;\n        return schema.styles.some((style) => style.name === blockStyle) || (block = DEFAULT_BLOCK), {\n          ...block,\n          children: next(el.childNodes)\n        };\n      }\n    },\n    // Ignore span tags\n    {\n      deserialize(el, next) {\n        const tag = tagName(el);\n        if (!(!tag || !(tag in HTML_SPAN_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Ignore div tags\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"div\")\n          return next(el.childNodes);\n      }\n    },\n    // Ignore list containers\n    {\n      deserialize(el, next) {\n        const tag = tagName(el);\n        if (!(!tag || !(tag in HTML_LIST_CONTAINER_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Deal with br's\n    {\n      deserialize(el) {\n        if (tagName(el) === \"br\")\n          return {\n            ...DEFAULT_SPAN,\n            text: `\n`\n          };\n      }\n    },\n    // Deal with list items\n    {\n      deserialize(el, next, block) {\n        const tag = tagName(el), listItem = tag ? HTML_LIST_ITEM_TAGS[tag] : void 0, parentTag = tagName(el.parentNode) || \"\";\n        if (!listItem || !el.parentNode || !HTML_LIST_CONTAINER_TAGS[parentTag])\n          return;\n        const enabledListItem = resolveListItem(schema, parentTag);\n        return enabledListItem ? (listItem.listItem = enabledListItem, {\n          ...listItem,\n          children: next(el.childNodes)\n        }) : block({ _type: \"block\", children: next(el.childNodes) });\n      }\n    },\n    // Deal with decorators - this is a limited set of known html elements that we know how to deserialize\n    {\n      deserialize(el, next) {\n        const decorator = HTML_DECORATOR_TAGS[tagName(el) || \"\"];\n        if (!(!decorator || !schema.decorators.some(\n          (decoratorType) => decoratorType.name === decorator\n        )))\n          return {\n            _type: \"__decorator\",\n            name: decorator,\n            children: next(el.childNodes)\n          };\n      }\n    },\n    // Special case for hyperlinks, add annotation (if allowed by schema),\n    // If not supported just write out the link text and href in plain text.\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== \"a\")\n          return;\n        const linkEnabled = schema.annotations.some(\n          (annotation) => annotation.name === \"link\"\n        ), href = isElement(el) && el.getAttribute(\"href\");\n        return href ? linkEnabled ? {\n          _type: \"__annotation\",\n          markDef: {\n            _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n            _type: \"link\",\n            href\n          },\n          children: next(el.childNodes)\n        } : el.appendChild(el.ownerDocument.createTextNode(` (${href})`)) && next(el.childNodes) : next(el.childNodes);\n      }\n    },\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === \"img\") {\n          const src = el.getAttribute(\"src\") ?? void 0, alt = el.getAttribute(\"alt\") ?? void 0, props = Object.fromEntries(\n            Array.from(el.attributes).map((attr) => [attr.name, attr.value])\n          ), ancestorOfLonelyChild = el?.parentElement?.parentElement?.getAttribute(\"data-lonely-child\"), ancestorOfListItem = el.closest(\"li\") !== null;\n          if (ancestorOfLonelyChild && !ancestorOfListItem) {\n            const image2 = options.matchers?.image?.({\n              context: {\n                schema,\n                keyGenerator: options.keyGenerator ?? keyGenerator\n              },\n              props: {\n                ...props,\n                ...src ? { src } : {},\n                ...alt ? { alt } : {}\n              }\n            });\n            if (image2)\n              return {\n                _type: \"__block\",\n                block: image2\n              };\n          }\n          const inlineImage = options.matchers?.inlineImage?.({\n            context: {\n              schema,\n              keyGenerator: options.keyGenerator ?? keyGenerator\n            },\n            props: {\n              ...props,\n              ...src ? { src } : {},\n              ...alt ? { alt } : {}\n            }\n          });\n          if (inlineImage)\n            return inlineImage;\n          const image = options.matchers?.image?.({\n            context: {\n              schema,\n              keyGenerator: options.keyGenerator ?? keyGenerator\n            },\n            props: {\n              ...props,\n              ...src ? { src } : {},\n              ...alt ? { alt } : {}\n            }\n          });\n          if (image)\n            return {\n              _type: \"__block\",\n              block: image\n            };\n        }\n      }\n    }\n  ];\n}\nfunction isEmphasis(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-style:italic/.test(style || \"\");\n}\nfunction isStrong(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-weight:700/.test(style || \"\") || /font-weight:600/.test(style || \"\");\n}\nfunction isUnderline(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration:underline/.test(style || \"\");\n}\nfunction isNotion(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-notion\");\n}\nfunction createNotionRules() {\n  return [\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === \"span\" && isNotion(el)) {\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong(el) && span.marks.push(\"strong\"), isUnderline(el) && span.marks.push(\"underline\"), isEmphasis(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    }\n  ];\n}\nfunction getListItemStyle(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  if (style && style.match(/lfo\\d+/))\n    return style.match(\"lfo1\") ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  if (!style)\n    return;\n  const levelMatch = style.match(/level\\d+/);\n  if (!levelMatch)\n    return;\n  const [level] = levelMatch[0].match(/\\d/) || [];\n  return (level ? Number.parseInt(level, 10) : 1) || 1;\n}\nfunction isWordListElement(el) {\n  return isElement(el) && el.className ? el.className === \"MsoListParagraphCxSpFirst\" || el.className === \"MsoListParagraphCxSpMiddle\" || el.className === \"MsoListParagraphCxSpLast\" : !1;\n}\nfunction createWordRules() {\n  return [\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"p\" && isWordListElement(el))\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle(el),\n            level: getListItemLevel(el),\n            style: BLOCK_DEFAULT_STYLE,\n            children: next(el.childNodes)\n          };\n      }\n    }\n  ];\n}\nfunction createRules(schema, options) {\n  return [\n    ...createWordRules(),\n    ...createNotionRules(),\n    ...createGDocsRules(schema),\n    ...createHTMLRules(schema, options)\n  ];\n}\nclass HtmlDeserializer {\n  keyGenerator;\n  schema;\n  rules;\n  parseHtml;\n  _markDefs = [];\n  /**\n   * Create a new serializer respecting a Sanity block content type's schema\n   *\n   * @param blockContentType - Schema type for array containing _at least_ a block child type\n   * @param options - Options for the deserialization process\n   */\n  constructor(schema, options = {}) {\n    const { rules = [], unstable_whitespaceOnPasteMode = \"preserve\" } = options, standardRules = createRules(schema, {\n      keyGenerator: options.keyGenerator,\n      matchers: options.matchers\n    });\n    this.schema = schema, this.keyGenerator = options.keyGenerator ?? keyGenerator, this.rules = [...rules, ...standardRules];\n    const parseHtml = options.parseHtml || defaultParseHtml();\n    this.parseHtml = (html) => preprocess(html, parseHtml, { unstable_whitespaceOnPasteMode }).body;\n  }\n  /**\n   * Deserialize HTML.\n   *\n   * @param html - The HTML to deserialize, as a string\n   * @returns Array of blocks - either portable text blocks or other allowed blocks\n   */\n  deserialize = (html) => {\n    this._markDefs = [];\n    const { parseHtml } = this, fragment = parseHtml(html), children = Array.from(fragment.childNodes), blocks2 = trimWhitespace(\n      this.schema,\n      flattenNestedBlocks(\n        { schema: this.schema },\n        ensureRootIsBlocks(\n          this.schema,\n          this.deserializeElements(children)\n        )\n      )\n    );\n    return this._markDefs.length > 0 && blocks2.filter((block) => isTextBlock(this.schema, block)).forEach((block) => {\n      block.markDefs = block.markDefs || [], block.markDefs = block.markDefs.concat(\n        this._markDefs.filter((def) => lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__(\n          block.children.map((child) => child.marks || [])\n        ).includes(def._key))\n      );\n    }), blocks2.map((block) => (block._type === \"block\" && (block._type = this.schema.block.name), block));\n  };\n  /**\n   * Deserialize an array of DOM elements.\n   *\n   * @param elements - Array of DOM elements to deserialize\n   * @returns\n   */\n  deserializeElements = (elements = []) => {\n    let nodes = [];\n    return elements.forEach((element) => {\n      nodes = nodes.concat(this.deserializeElement(element));\n    }), nodes;\n  };\n  /**\n   * Deserialize a DOM element\n   *\n   * @param element - Deserialize a DOM element\n   * @returns\n   */\n  deserializeElement = (element) => {\n    const next = (elements) => {\n      if (isNodeList(elements))\n        return this.deserializeElements(Array.from(elements));\n      if (Array.isArray(elements))\n        return this.deserializeElements(elements);\n      if (elements)\n        return this.deserializeElement(elements);\n    }, block = (props) => ({\n      _type: \"__block\",\n      block: props\n    });\n    let node;\n    for (let i = 0; i < this.rules.length; i++) {\n      const rule = this.rules[i];\n      if (!rule.deserialize)\n        continue;\n      const ret = rule.deserialize(element, next, block), type = resolveJsType(ret);\n      if (type !== \"array\" && type !== \"object\" && type !== \"null\" && type !== \"undefined\")\n        throw new Error(\n          `A rule returned an invalid deserialized representation: \"${node}\".`\n        );\n      if (ret !== void 0) {\n        {\n          if (ret === null)\n            throw new Error(\"Deserializer rule returned `null`\");\n          Array.isArray(ret) ? node = ret : isPlaceholderDecorator(ret) ? node = this.deserializeDecorator(ret) : isPlaceholderAnnotation(ret) ? node = this.deserializeAnnotation(ret) : node = ret;\n        }\n        if (ret && !Array.isArray(ret) && isMinimalBlock(ret) && \"listItem\" in ret) {\n          let parent = element.parentNode?.parentNode;\n          for (; parent && tagName(parent) === \"li\"; )\n            parent = parent.parentNode?.parentNode, ret.level = ret.level ? ret.level + 1 : 1;\n        }\n        ret && !Array.isArray(ret) && isMinimalBlock(ret) && ret.style === \"blockquote\" && ret.children.forEach((child, index) => {\n          isMinimalSpan(child) && child.text === \"\\r\" && (child.text = `\n`, (index === 0 || index === ret.children.length - 1) && ret.children.splice(index, 1));\n        });\n        break;\n      }\n    }\n    return node || next(element.childNodes) || [];\n  };\n  /**\n   * Deserialize a `__decorator` type\n   * (an internal made up type to process decorators exclusively)\n   *\n   * @param decorator -\n   * @returns array of ...\n   */\n  deserializeDecorator = (decorator) => {\n    const { name } = decorator, applyDecorator = (node) => {\n      if (isPlaceholderDecorator(node))\n        return this.deserializeDecorator(node);\n      if (isMinimalSpan(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(name);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyDecorator);\n      }\n      return node;\n    };\n    return decorator.children.reduce((children, node) => {\n      const ret = applyDecorator(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n  /**\n   * Deserialize a `__annotation` object.\n   * (an internal made up type to process annotations exclusively)\n   *\n   * @param annotation -\n   * @returns Array of...\n   */\n  deserializeAnnotation = (annotation) => {\n    const { markDef } = annotation;\n    this._markDefs.push(markDef);\n    const applyAnnotation = (node) => {\n      if (isPlaceholderAnnotation(node))\n        return this.deserializeAnnotation(node);\n      if (isMinimalSpan(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(markDef._key);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyAnnotation);\n      }\n      return node;\n    };\n    return annotation.children.reduce((children, node) => {\n      const ret = applyAnnotation(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n}\nfunction normalizeBlock(node, options = {}) {\n  const schema = {\n    span: {\n      name: \"span\"\n    }\n  };\n  if (node._type !== (options.blockTypeName || \"block\"))\n    return \"_key\" in node ? node : {\n      ...node,\n      _key: options.keyGenerator ? options.keyGenerator() : keyGenerator()\n    };\n  const block = {\n    _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n    children: [],\n    markDefs: [],\n    ...node\n  }, lastChild = block.children[block.children.length - 1];\n  if (!lastChild)\n    return block.children = [\n      {\n        _type: \"span\",\n        _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n        text: \"\",\n        marks: []\n      }\n    ], block;\n  const usedMarkDefs = [], allowedDecorators = options.allowedDecorators && Array.isArray(options.allowedDecorators) ? options.allowedDecorators : !1;\n  return block.children = block.children.reduce(\n    (acc, child) => {\n      const previousChild = acc[acc.length - 1];\n      return previousChild && isSpan(schema, child) && isSpan(schema, previousChild) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(previousChild.marks, child.marks) ? (lastChild && lastChild === child && child.text === \"\" && block.children.length > 1 || (previousChild.text += child.text), acc) : (acc.push(child), acc);\n    },\n    []\n  ).map((child) => {\n    if (!child)\n      throw new Error(\"missing child\");\n    return child._key = options.keyGenerator ? options.keyGenerator() : keyGenerator(), isSpan(schema, child) && (child.marks ? allowedDecorators && (child.marks = child.marks.filter((mark) => {\n      const isAllowed = allowedDecorators.includes(mark), isUsed = block.markDefs?.some((def) => def._key === mark);\n      return isAllowed || isUsed;\n    })) : child.marks = [], usedMarkDefs.push(...child.marks)), child;\n  }), block.markDefs = (block.markDefs || []).filter(\n    (markDef) => usedMarkDefs.includes(markDef._key)\n  ), block;\n}\nfunction htmlToBlocks(html, schemaType, options = {}) {\n  const schema = isSanitySchema(schemaType) ? (0,_portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_4__.sanitySchemaToPortableTextSchema)(schemaType) : schemaType;\n  return new HtmlDeserializer(schema, options).deserialize(html).map((block) => normalizeBlock(block, { keyGenerator: options.keyGenerator }));\n}\nfunction isSanitySchema(schema) {\n  return schema.hasOwnProperty(\"jsonType\");\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/block-tools/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockTextBefore: () => (/* binding */ getBlockTextBefore)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.is-selection-expanded.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\");\n\n\nconst getBlockTextBefore = (snapshot) => {\n  if (!snapshot.context.selection)\n    return \"\";\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(snapshot.context.selection), block = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlock)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint\n      }\n    }\n  });\n  if (!block)\n    return \"\";\n  const startOfBlock = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockStartPoint)({\n    context: snapshot.context,\n    block\n  });\n  return (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: startPoint\n      }\n    }\n  });\n};\n\n//# sourceMappingURL=selector.get-text-before.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRjtBQUNFO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2RUFBc0Isc0NBQXNDLGlGQUFhO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHVCQUF1Qix5RUFBa0I7QUFDekM7QUFDQTtBQUNBLEdBQUc7QUFDSCxTQUFTLG9GQUFnQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxGaXJzdCBBeW9cXERlc2t0b3BcXENyYWZ0ZWQtVGVtcGxhdGVcXGNyYWZ0ZWQtc2l0ZVxcbm9kZV9tb2R1bGVzXFxAcG9ydGFibGV0ZXh0XFxlZGl0b3JcXGxpYlxcX2NodW5rcy1lc1xcc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFNlbGVjdGlvblN0YXJ0UG9pbnQsIGdldEJsb2NrU3RhcnRQb2ludCB9IGZyb20gXCIuL3V0aWwuc2xpY2UtYmxvY2tzLmpzXCI7XG5pbXBvcnQgeyBnZXRGb2N1c0Jsb2NrLCBnZXRTZWxlY3Rpb25UZXh0IH0gZnJvbSBcIi4vc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWV4cGFuZGVkLmpzXCI7XG5jb25zdCBnZXRCbG9ja1RleHRCZWZvcmUgPSAoc25hcHNob3QpID0+IHtcbiAgaWYgKCFzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm4gXCJcIjtcbiAgY29uc3Qgc3RhcnRQb2ludCA9IGdldFNlbGVjdGlvblN0YXJ0UG9pbnQoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pLCBibG9jayA9IGdldEZvY3VzQmxvY2soe1xuICAgIC4uLnNuYXBzaG90LFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiBzdGFydFBvaW50LFxuICAgICAgICBmb2N1czogc3RhcnRQb2ludFxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGlmICghYmxvY2spXG4gICAgcmV0dXJuIFwiXCI7XG4gIGNvbnN0IHN0YXJ0T2ZCbG9jayA9IGdldEJsb2NrU3RhcnRQb2ludCh7XG4gICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICBibG9ja1xuICB9KTtcbiAgcmV0dXJuIGdldFNlbGVjdGlvblRleHQoe1xuICAgIC4uLnNuYXBzaG90LFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiBzdGFydE9mQmxvY2ssXG4gICAgICAgIGZvY3VzOiBzdGFydFBvaW50XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5leHBvcnQge1xuICBnZXRCbG9ja1RleHRCZWZvcmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3Rvci5nZXQtdGV4dC1iZWZvcmUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActiveAnnotations: () => (/* binding */ getActiveAnnotations),\n/* harmony export */   getActiveAnnotationsMarks: () => (/* binding */ getActiveAnnotationsMarks),\n/* harmony export */   getActiveDecorators: () => (/* binding */ getActiveDecorators),\n/* harmony export */   getActiveListItem: () => (/* binding */ getActiveListItem),\n/* harmony export */   getActiveStyle: () => (/* binding */ getActiveStyle),\n/* harmony export */   getCaretWordSelection: () => (/* binding */ getCaretWordSelection),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusInlineObject: () => (/* binding */ getFocusInlineObject),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getMarkState: () => (/* binding */ getMarkState),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getNextInlineObject: () => (/* binding */ getNextInlineObject),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectedSpans: () => (/* binding */ getSelectedSpans),\n/* harmony export */   getSelectedTextBlocks: () => (/* binding */ getSelectedTextBlocks),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionEndPoint: () => (/* binding */ getSelectionEndPoint),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   getTrimmedSelection: () => (/* binding */ getTrimmedSelection),\n/* harmony export */   isActiveAnnotation: () => (/* binding */ isActiveAnnotation),\n/* harmony export */   isActiveDecorator: () => (/* binding */ isActiveDecorator),\n/* harmony export */   isActiveListItem: () => (/* binding */ isActiveListItem),\n/* harmony export */   isActiveStyle: () => (/* binding */ isActiveStyle),\n/* harmony export */   isAtTheEndOfBlock: () => (/* binding */ isAtTheEndOfBlock),\n/* harmony export */   isAtTheStartOfBlock: () => (/* binding */ isAtTheStartOfBlock),\n/* harmony export */   isOverlappingSelection: () => (/* binding */ isOverlappingSelection),\n/* harmony export */   isPointAfterSelection: () => (/* binding */ isPointAfterSelection),\n/* harmony export */   isPointBeforeSelection: () => (/* binding */ isPointBeforeSelection),\n/* harmony export */   isSelectingEntireBlocks: () => (/* binding */ isSelectingEntireBlocks)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js\");\n/* harmony import */ var _selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selector.is-selection-expanded.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\n\n\n\nfunction isSelectionExpanded(selection) {\n  return selection ? !(0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(selection) : !1;\n}\nconst getSelectionEndBlock = (snapshot) => {\n  const endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection);\n  if (endPoint)\n    return (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: endPoint,\n          focus: endPoint\n        }\n      }\n    });\n}, getSelectionEndPoint = (snapshot) => {\n  if (snapshot.context.selection)\n    return snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus;\n}, getNextSpan = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot), selectionEndPoint = getSelectionEndPoint(snapshot);\n  if (!selectionEndBlock || !selectionEndPoint || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, selectionEndBlock.node))\n    return;\n  const selectionEndPointChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(selectionEndPoint);\n  let endPointChildFound = !1, nextSpan;\n  for (const child of selectionEndBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = !0;\n      continue;\n    }\n    if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && endPointChildFound) {\n      nextSpan = {\n        node: child,\n        path: [...selectionEndBlock.path, \"children\", {\n          _key: child._key\n        }]\n      };\n      break;\n    }\n  }\n  return nextSpan;\n}, getSelectionStartBlock = (snapshot) => {\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection);\n  if (startPoint)\n    return (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: startPoint,\n          focus: startPoint\n        }\n      }\n    });\n}, getPreviousSpan = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot), selectionStartPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot);\n  if (!selectionStartBlock || !selectionStartPoint || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, selectionStartBlock.node))\n    return;\n  const selectionStartPointChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(selectionStartPoint);\n  let previousSpan;\n  for (const child of selectionStartBlock.node.children) {\n    if (child._key === selectionStartPointChildKey)\n      break;\n    (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && (previousSpan = {\n      node: child,\n      path: [...selectionStartBlock.path, \"children\", {\n        _key: child._key\n      }]\n    });\n  }\n  return previousSpan;\n}, getSelectedSpans = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedSpans = [], startPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot), endPoint = getSelectionEndPoint(snapshot);\n  if (!startPoint || !endPoint)\n    return selectedSpans;\n  const startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint), startSpanKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(startPoint), endSpanKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return selectedSpans;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedSpans;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  let startBlockFound = !1;\n  for (const block of slicedValue)\n    if (block._key === startBlockKey && (startBlockFound = !0), !!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block)) {\n      if (block._key === startBlockKey) {\n        for (const child of block.children)\n          if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child)) {\n            if (startSpanKey && child._key === startSpanKey) {\n              if (startPoint.offset < child.text.length && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              }), startSpanKey === endSpanKey)\n                break;\n              continue;\n            }\n            if (endSpanKey && child._key === endSpanKey) {\n              endPoint.offset > 0 && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.length > 0 && selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (block._key === endBlockKey) {\n        for (const child of block.children)\n          if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child)) {\n            if (endSpanKey && child._key === endSpanKey) {\n              endPoint.offset > 0 && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        break;\n      }\n      if (startBlockFound)\n        for (const child of block.children)\n          (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && selectedSpans.push({\n            node: child,\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }]\n          });\n    }\n  return selectedSpans;\n}, getMarkState = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)(snapshot), focusSpan = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusSpan)(snapshot);\n  if (!focusTextBlock || !focusSpan)\n    return;\n  if (isSelectionExpanded(snapshot.context.selection)) {\n    const selectedSpans = getSelectedSpans(snapshot);\n    let index = 0, marks2 = [];\n    for (const span of selectedSpans) {\n      if (index === 0)\n        marks2 = span.node.marks ?? [];\n      else {\n        if (span.node.marks?.length === 0) {\n          marks2 = [];\n          continue;\n        }\n        marks2 = marks2.filter((mark) => (span.node.marks ?? []).some((spanMark) => spanMark === mark));\n      }\n      index++;\n    }\n    return {\n      state: \"unchanged\",\n      marks: marks2\n    };\n  }\n  const decorators = snapshot.context.schema.decorators.map((decorator) => decorator.name), marks = focusSpan.node.marks ?? [], marksWithoutAnnotations = marks.filter((mark) => decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = focusSpan.node.text.length === 0, atTheBeginningOfSpan = snapshot.context.selection.anchor.offset === 0, atTheEndOfSpan = snapshot.context.selection.anchor.offset === focusSpan.node.text.length, previousSpan = getPreviousSpan(snapshot), nextSpan = getNextSpan(snapshot), nextSpanAnnotations = nextSpan?.node?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark) => !decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.node.marks?.filter((mark) => !decorators.includes(mark)).every((mark) => marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.node.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) => nextSpanAnnotations?.includes(mark));\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks)\n        return {\n          state: \"changed\",\n          marks: previousSpan?.node.marks ?? []\n        };\n      if (previousSpanHasSameAnnotations)\n        return {\n          state: \"changed\",\n          marks: previousSpan?.node.marks ?? []\n        };\n      if (previousSpanHasSameAnnotation)\n        return {\n          state: \"unchanged\",\n          marks: focusSpan.node.marks ?? []\n        };\n      if (!previousSpan)\n        return {\n          state: \"changed\",\n          marks: []\n        };\n    }\n    if (atTheEndOfSpan) {\n      if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations)\n        return {\n          state: \"changed\",\n          marks: nextSpan?.node.marks ?? []\n        };\n      if (!nextSpan)\n        return {\n          state: \"changed\",\n          marks: []\n        };\n    }\n  }\n  return atTheBeginningOfSpan && !spanIsEmpty && previousSpan ? previousSpanHasAnnotations ? {\n    state: \"changed\",\n    marks: []\n  } : {\n    state: \"changed\",\n    marks: (previousSpan?.node.marks ?? []).filter((mark) => decorators.includes(mark))\n  } : {\n    state: \"unchanged\",\n    marks: focusSpan.node.marks ?? []\n  };\n}, getSelectedBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedBlocks = [], startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection), startKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), endKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startKey || !endKey)\n    return selectedBlocks;\n  const startBlockIndex = snapshot.blockIndexMap.get(startKey), endBlockIndex = snapshot.blockIndexMap.get(endKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedBlocks;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  for (const block of slicedValue) {\n    if (block._key === startKey) {\n      if (selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedBlocks.length > 0 && selectedBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedBlocks;\n}, getActiveAnnotations = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedBlocks = getSelectedBlocks(snapshot), activeAnnotations = (getMarkState(snapshot)?.marks ?? []).filter((mark) => !snapshot.context.schema.decorators.map((decorator) => decorator.name).includes(mark));\n  return selectedBlocks.flatMap((block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block.node) ? block.node.markDefs ?? [] : []).filter((markDef) => activeAnnotations.includes(markDef._key));\n}, getActiveListItem = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const selectedTextBlocks = getSelectedBlocks(snapshot).map((block) => block.node).filter((block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block)), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstListItem = firstTextBlock.listItem;\n  if (firstListItem && selectedTextBlocks.every((block) => block.listItem === firstListItem))\n    return firstListItem;\n}, getActiveStyle = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const selectedTextBlocks = getSelectedBlocks(snapshot).map((block) => block.node).filter((block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block)), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstStyle = firstTextBlock.style;\n  if (firstStyle && selectedTextBlocks.every((block) => block.style === firstStyle))\n    return firstStyle;\n}, getNextInlineObject = (snapshot) => {\n  const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)(snapshot), selectionEndPoint = getSelectionEndPoint(snapshot), selectionEndPointChildKey = selectionEndPoint && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isKeySegment)(selectionEndPoint.path[2]) ? selectionEndPoint.path[2]._key : void 0;\n  if (!focusTextBlock || !selectionEndPointChildKey)\n    return;\n  let endPointChildFound = !1, inlineObject;\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = !0;\n      continue;\n    }\n    if (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan$1)(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, \"children\", {\n          _key: child._key\n        }]\n      };\n      break;\n    }\n  }\n  return inlineObject;\n}, getCaretWordSelection = (snapshot) => {\n  if (!snapshot.context.selection || !(0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionCollapsed)(snapshot))\n    return null;\n  const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)(snapshot), selectionStartPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot), selectionStartOffset = selectionStartPoint ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.spanSelectionPointToBlockOffset)({\n    context: snapshot.context,\n    selectionPoint: selectionStartPoint\n  }) : void 0;\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset)\n    return null;\n  const previousInlineObject = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getPreviousInlineObject)(snapshot), blockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)({\n    context: snapshot.context,\n    block: focusTextBlock\n  }), textDirectlyBefore = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject ? {\n          path: previousInlineObject.path,\n          offset: 0\n        } : blockStartPoint,\n        focus: selectionStartPoint\n      }\n    }\n  }).split(/\\s+/).at(-1), nextInlineObject = getNextInlineObject(snapshot), blockEndPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getBlockEndPoint)({\n    context: snapshot.context,\n    block: focusTextBlock\n  }), textDirectlyAfter = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject ? {\n          path: nextInlineObject.path,\n          offset: 0\n        } : blockEndPoint\n      }\n    }\n  }).split(/\\s+/).at(0);\n  if ((textDirectlyBefore === void 0 || textDirectlyBefore === \"\") && (textDirectlyAfter === void 0 || textDirectlyAfter === \"\"))\n    return null;\n  const caretWordStartOffset = textDirectlyBefore ? {\n    ...selectionStartOffset,\n    offset: selectionStartOffset.offset - textDirectlyBefore.length\n  } : selectionStartOffset, caretWordEndOffset = textDirectlyAfter ? {\n    ...selectionStartOffset,\n    offset: selectionStartOffset.offset + textDirectlyAfter.length\n  } : selectionStartOffset, caretWordStartSelectionPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.blockOffsetToSpanSelectionPoint)({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: \"backward\"\n  }), caretWordEndSelectionPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.blockOffsetToSpanSelectionPoint)({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: \"forward\"\n  });\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint)\n    return null;\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint\n  };\n  return (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionExpanded)({\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection\n    }\n  }) ? caretWordSelection : null;\n}, getFirstBlock = (snapshot) => {\n  const node = snapshot.context.value[0];\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getFocusBlockObject = (snapshot) => {\n  const focusBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusBlock)(snapshot);\n  return focusBlock && !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusInlineObject = (snapshot) => {\n  const focusChild = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusChild)(snapshot);\n  return focusChild && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getFocusListBlock = (snapshot) => {\n  const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)(snapshot);\n  return focusTextBlock && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isListBlock)(snapshot.context, focusTextBlock.node) ? {\n    node: focusTextBlock.node,\n    path: focusTextBlock.path\n  } : void 0;\n}, getLastBlock = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1] ? snapshot.context.value[snapshot.context.value.length - 1] : void 0;\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getNextBlock = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot);\n  if (!selectionEndBlock)\n    return;\n  const index = snapshot.blockIndexMap.get(selectionEndBlock.node._key);\n  if (index === void 0 || index === snapshot.context.value.length - 1)\n    return;\n  const nextBlock = snapshot.context.value.at(index + 1);\n  return nextBlock ? {\n    node: nextBlock,\n    path: [{\n      _key: nextBlock._key\n    }]\n  } : void 0;\n}, getPreviousBlock = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot);\n  if (!selectionStartBlock)\n    return;\n  const index = snapshot.blockIndexMap.get(selectionStartBlock.node._key);\n  if (index === void 0 || index === 0)\n    return;\n  const previousBlock = snapshot.context.value.at(index - 1);\n  return previousBlock ? {\n    node: previousBlock,\n    path: [{\n      _key: previousBlock._key\n    }]\n  } : void 0;\n}, getSelectedTextBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedTextBlocks = [], startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection), startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return selectedTextBlocks;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedTextBlocks;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startBlockKey === endBlockKey)\n        break;\n      continue;\n    }\n    if (block._key === endBlockKey) {\n      (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedTextBlocks.length > 0 && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedTextBlocks;\n}, getTrimmedSelection = (snapshot) => {\n  if (!snapshot.context.selection)\n    return snapshot.context.selection;\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection), startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), startChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint), endChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return snapshot.context.selection;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return snapshot.context.selection;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  let startBlockFound = !1, adjustedStartPoint, trimStartPoint = !1, adjustedEndPoint, trimEndPoint = !1, previousPotentialEndpoint;\n  for (const block of slicedValue)\n    if (!(block._key === startBlockKey && (startBlockFound = !0, (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) && (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEmptyTextBlock)(snapshot.context, block))) && startBlockFound && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block)) {\n      if (block._key === endBlockKey && (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEmptyTextBlock)(snapshot.context, block))\n        break;\n      for (const child of block.children) {\n        if (child._key === endChildKey && (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) || endPoint.offset === 0)) {\n          adjustedEndPoint = previousPotentialEndpoint ? {\n            path: [{\n              _key: previousPotentialEndpoint.blockKey\n            }, \"children\", {\n              _key: previousPotentialEndpoint.span._key\n            }],\n            offset: previousPotentialEndpoint.span.text.length\n          } : void 0, trimEndPoint = !0;\n          break;\n        }\n        if (trimStartPoint) {\n          const lonelySpan = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && block.children.length === 1;\n          ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && child.text.length > 0 || lonelySpan) && (adjustedStartPoint = {\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }],\n            offset: 0\n          }, previousPotentialEndpoint = {\n            blockKey: block._key,\n            span: child\n          }, trimStartPoint = !1);\n          continue;\n        }\n        if (child._key === startChildKey) {\n          if (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child)) {\n            trimStartPoint = !0;\n            continue;\n          }\n          if (startPoint.offset === child.text.length) {\n            trimStartPoint = !0, previousPotentialEndpoint = child.text.length > 0 ? {\n              blockKey: block._key,\n              span: child\n            } : previousPotentialEndpoint;\n            continue;\n          }\n        }\n        previousPotentialEndpoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && child.text.length > 0 ? {\n          blockKey: block._key,\n          span: child\n        } : previousPotentialEndpoint;\n      }\n      if (block._key === endBlockKey)\n        break;\n    }\n  const trimmedSelection = snapshot.context.selection.backward ? {\n    anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n    focus: adjustedStartPoint ?? startPoint,\n    backward: !0\n  } : {\n    anchor: adjustedStartPoint ?? startPoint,\n    focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint\n  };\n  if ((0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionCollapsed)({\n    context: {\n      ...snapshot.context,\n      selection: trimmedSelection\n    }\n  })) {\n    const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection\n      }\n    });\n    if (focusTextBlock && !(0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node))\n      return null;\n  }\n  return trimmedSelection;\n};\nfunction getActiveAnnotationsMarks(snapshot) {\n  const schema = snapshot.context.schema;\n  return (getMarkState(snapshot)?.marks ?? []).filter((mark) => !schema.decorators.map((decorator) => decorator.name).includes(mark));\n}\nfunction isActiveAnnotation(annotation) {\n  return (snapshot) => {\n    const selectionMarkDefs = getSelectedBlocks(snapshot).flatMap((block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block.node) ? block.node.markDefs ?? [] : []), activeAnnotations = getActiveAnnotationsMarks(snapshot);\n    return selectionMarkDefs.filter((markDef) => markDef._type === annotation && activeAnnotations.includes(markDef._key)).length > 0;\n  };\n}\nfunction getActiveDecorators(snapshot) {\n  const schema = snapshot.context.schema, decoratorState = snapshot.decoratorState, markState = getMarkState(snapshot), decorators = schema.decorators.map((decorator) => decorator.name);\n  let activeDecorators = (markState?.marks ?? []).filter((mark) => decorators.includes(mark));\n  for (const decorator in decoratorState)\n    decoratorState[decorator] === !1 ? activeDecorators = activeDecorators.filter((activeDecorator) => activeDecorator !== decorator) : decoratorState[decorator] === !0 && (activeDecorators.includes(decorator) || activeDecorators.push(decorator));\n  return activeDecorators;\n}\nfunction isActiveDecorator(decorator) {\n  return (snapshot) => {\n    if ((0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionExpanded)(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot);\n      return selectedSpans.length > 0 && selectedSpans.every((span) => span.node.marks?.includes(decorator));\n    }\n    return getActiveDecorators(snapshot).includes(decorator);\n  };\n}\nfunction isActiveListItem(listItem) {\n  return (snapshot) => getActiveListItem(snapshot) === listItem;\n}\nfunction isActiveStyle(style) {\n  return (snapshot) => getActiveStyle(snapshot) === style;\n}\nfunction isAtTheEndOfBlock(block) {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !(0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const blockEndPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getBlockEndPoint)({\n      context: snapshot.context,\n      block\n    });\n    return (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(snapshot.context.selection.focus, blockEndPoint);\n  };\n}\nfunction isAtTheStartOfBlock(block) {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !(0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const blockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)({\n      context: snapshot.context,\n      block\n    });\n    return (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(snapshot.context.selection.focus, blockStartPoint);\n  };\n}\nfunction isPointAfterSelection(point) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint), endChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(endPoint), pointBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(point), pointChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(point);\n    if (!pointBlockKey || !endBlockKey)\n      return !1;\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n    if (pointBlockIndex === void 0 || endBlockIndex === void 0)\n      return !1;\n    if (pointBlockIndex > endBlockIndex)\n      return !0;\n    if (pointBlockIndex < endBlockIndex)\n      return !1;\n    const pointBlock = snapshot.context.value.at(pointBlockIndex);\n    if (!pointBlock || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, pointBlock))\n      return !1;\n    let pointChildIndex, endChildIndex, childIndex = -1;\n    for (const child of pointBlock.children) {\n      if (childIndex++, child._key === pointChildKey && child._key === endChildKey)\n        return point.offset > endPoint.offset;\n      if (child._key === pointChildKey && (pointChildIndex = childIndex), child._key === endChildKey && (endChildIndex = childIndex), pointChildIndex !== void 0 && endChildIndex !== void 0)\n        break;\n    }\n    return pointChildIndex === void 0 || endChildIndex === void 0 ? !1 : pointChildIndex > endChildIndex;\n  };\n}\nfunction isPointBeforeSelection(point) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection), startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), startChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(startPoint), pointBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(point), pointChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(point);\n    if (!pointBlockKey || !startBlockKey)\n      return !1;\n    const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey);\n    if (startBlockIndex === void 0 || pointBlockIndex === void 0)\n      return !1;\n    if (pointBlockIndex < startBlockIndex)\n      return !0;\n    if (pointBlockIndex > startBlockIndex)\n      return !1;\n    const pointBlock = snapshot.context.value.at(pointBlockIndex);\n    if (!pointBlock || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, pointBlock))\n      return !1;\n    let pointChildIndex, startChildIndex, childIndex = -1;\n    for (const child of pointBlock.children) {\n      if (childIndex++, child._key === pointChildKey && child._key === startChildKey)\n        return point.offset < startPoint.offset;\n      if (child._key === pointChildKey && (pointChildIndex = childIndex), child._key === startChildKey && (startChildIndex = childIndex), pointChildIndex !== void 0 && startChildIndex !== void 0)\n        break;\n    }\n    return pointChildIndex === void 0 || startChildIndex === void 0 ? !1 : pointChildIndex < startChildIndex;\n  };\n}\nfunction isOverlappingSelection(selection) {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection)\n      return !1;\n    const selectionStartPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)({\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    }), selectionEndPoint = getSelectionEndPoint({\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    }), originalSelectionStartPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot), originalSelectionEndPoint = getSelectionEndPoint(snapshot);\n    if (!selectionStartPoint || !selectionEndPoint || !originalSelectionStartPoint || !originalSelectionEndPoint)\n      return !1;\n    const startPointBeforeSelection = isPointBeforeSelection(selectionStartPoint)(snapshot), startPointAfterSelection = isPointAfterSelection(selectionStartPoint)(snapshot), endPointBeforeSelection = isPointBeforeSelection(selectionEndPoint)(snapshot), endPointAfterSelection = isPointAfterSelection(selectionEndPoint)(snapshot), originalStartPointBeforeStartPoint = isPointBeforeSelection(originalSelectionStartPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint\n        }\n      }\n    }), originalStartPointAfterStartPoint = isPointAfterSelection(originalSelectionStartPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint\n        }\n      }\n    }), originalEndPointBeforeEndPoint = isPointBeforeSelection(originalSelectionEndPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }), originalEndPointAfterEndPoint = isPointAfterSelection(originalSelectionEndPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }), endPointEqualToOriginalStartPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(selectionEndPoint, originalSelectionStartPoint), startPointEqualToOriginalEndPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(selectionStartPoint, originalSelectionEndPoint);\n    return !endPointEqualToOriginalStartPoint && !startPointEqualToOriginalEndPoint && !originalStartPointBeforeStartPoint && !originalStartPointAfterStartPoint && !originalEndPointBeforeEndPoint && !originalEndPointAfterEndPoint || endPointBeforeSelection && !endPointEqualToOriginalStartPoint || startPointAfterSelection && !startPointEqualToOriginalEndPoint ? !1 : !originalStartPointBeforeStartPoint && originalStartPointAfterStartPoint && !originalEndPointBeforeEndPoint && originalEndPointAfterEndPoint ? !endPointEqualToOriginalStartPoint : originalStartPointBeforeStartPoint && !originalStartPointAfterStartPoint && originalEndPointBeforeEndPoint && !originalEndPointAfterEndPoint ? !startPointEqualToOriginalEndPoint : !startPointAfterSelection || !startPointBeforeSelection || !endPointAfterSelection || !endPointBeforeSelection;\n  };\n}\nconst isSelectingEntireBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return !1;\n  const startPoint = snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor, endPoint = snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus, startBlock = getSelectionStartBlock(snapshot), endBlock = getSelectionEndBlock(snapshot);\n  if (!startBlock || !endBlock)\n    return !1;\n  const startBlockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)({\n    context: snapshot.context,\n    block: startBlock\n  }), endBlockEndPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getBlockEndPoint)({\n    context: snapshot.context,\n    block: endBlock\n  });\n  return (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(startBlockStartPoint, startPoint) && (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(endBlockEndPoint, endPoint);\n};\n\n//# sourceMappingURL=selector.is-selecting-entire-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getPreviousInlineObject: () => (/* binding */ getPreviousInlineObject),\n/* harmony export */   getSelectedValue: () => (/* binding */ getSelectedValue),\n/* harmony export */   getSelectionStartPoint: () => (/* binding */ getSelectionStartPoint),\n/* harmony export */   getSelectionText: () => (/* binding */ getSelectionText),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed),\n/* harmony export */   isSelectionExpanded: () => (/* binding */ isSelectionExpanded)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\n\nconst getFocusBlock = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const key = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(snapshot.context.selection.focus), index = key ? snapshot.blockIndexMap.get(key) : void 0, node = index !== void 0 ? snapshot.context.value.at(index) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getFocusTextBlock = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot);\n  return focusBlock && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(snapshot.context, focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusChild = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const focusBlock = getFocusTextBlock(snapshot);\n  if (!focusBlock)\n    return;\n  const key = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(snapshot.context.selection.focus), node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [...focusBlock.path, \"children\", {\n      _key: key\n    }]\n  } : void 0;\n}, getFocusSpan = (snapshot) => {\n  const focusChild = getFocusChild(snapshot);\n  return focusChild && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(snapshot.context, focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getSelectionStartPoint = (snapshot) => {\n  if (snapshot.context.selection)\n    return snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor;\n}, getPreviousInlineObject = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot), selectionStartPoint = getSelectionStartPoint(snapshot), selectionStartPointChildKey = selectionStartPoint && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_1__.isKeySegment)(selectionStartPoint.path[2]) ? selectionStartPoint.path[2]._key : void 0;\n  if (!focusTextBlock || !selectionStartPointChildKey)\n    return;\n  let inlineObject;\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey)\n      break;\n    (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan$1)(snapshot.context, child) || (inlineObject = {\n      node: child,\n      path: [...focusTextBlock.path, \"children\", {\n        _key: child._key\n      }]\n    });\n  }\n  return inlineObject;\n}, getSelectedValue = (snapshot) => {\n  const selection = snapshot.context.selection;\n  if (!selection)\n    return [];\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionEndPoint)(selection), startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return [];\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return [];\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.sliceBlocks)({\n    context: snapshot.context,\n    blocks: slicedValue\n  });\n}, getSelectionText = (snapshot) => getSelectedValue(snapshot).reduce((text, block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(snapshot.context, block) ? text + block.children.reduce((text2, child) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(snapshot.context, child) ? text2 + child.text : text2, \"\") : text, \"\"), isSelectionCollapsed = (snapshot) => snapshot.context.selection ? JSON.stringify(snapshot.context.selection.anchor.path) === JSON.stringify(snapshot.context.selection.focus.path) && snapshot.context.selection?.anchor.offset === snapshot.context.selection?.focus.offset : !1, isSelectionExpanded = (snapshot) => !isSelectionCollapsed(snapshot);\n\n//# sourceMappingURL=selector.is-selection-expanded.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWV4cGFuZGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUE0TjtBQUMvSztBQUM3QztBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUE2QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsdUJBQXVCLGtFQUFXO0FBQ2xDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUE2QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsdUJBQXVCLDZEQUFNO0FBQzdCO0FBQ0E7QUFDQSxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUtBQW1LLDJEQUFZO0FBQy9LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksK0RBQVE7QUFDWjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDZFQUF3Qix3QkFBd0IsMkVBQW9CLDZCQUE2QixvRkFBNkIsNEJBQTRCLG9GQUE2QjtBQUM1TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtFQUFXO0FBQ3BCO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxzRkFBc0Ysa0VBQVcsMkVBQTJFLDZEQUFNO0FBWWpMO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcRmlyc3QgQXlvXFxEZXNrdG9wXFxDcmFmdGVkLVRlbXBsYXRlXFxjcmFmdGVkLXNpdGVcXG5vZGVfbW9kdWxlc1xcQHBvcnRhYmxldGV4dFxcZWRpdG9yXFxsaWJcXF9jaHVua3MtZXNcXHNlbGVjdG9yLmlzLXNlbGVjdGlvbi1leHBhbmRlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludCwgaXNUZXh0QmxvY2ssIGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50LCBpc1NwYW4sIGlzU3BhbiQxLCBzbGljZUJsb2NrcywgZ2V0U2VsZWN0aW9uU3RhcnRQb2ludCBhcyBnZXRTZWxlY3Rpb25TdGFydFBvaW50JDEsIGdldFNlbGVjdGlvbkVuZFBvaW50IH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmltcG9ydCB7IGlzS2V5U2VnbWVudCB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5jb25zdCBnZXRGb2N1c0Jsb2NrID0gKHNuYXBzaG90KSA9PiB7XG4gIGlmICghc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBrZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludChzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5mb2N1cyksIGluZGV4ID0ga2V5ID8gc25hcHNob3QuYmxvY2tJbmRleE1hcC5nZXQoa2V5KSA6IHZvaWQgMCwgbm9kZSA9IGluZGV4ICE9PSB2b2lkIDAgPyBzbmFwc2hvdC5jb250ZXh0LnZhbHVlLmF0KGluZGV4KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IGtleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRGb2N1c1RleHRCbG9jayA9IChzbmFwc2hvdCkgPT4ge1xuICBjb25zdCBmb2N1c0Jsb2NrID0gZ2V0Rm9jdXNCbG9jayhzbmFwc2hvdCk7XG4gIHJldHVybiBmb2N1c0Jsb2NrICYmIGlzVGV4dEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIGZvY3VzQmxvY2subm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNCbG9jay5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQmxvY2sucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNDaGlsZCA9IChzbmFwc2hvdCkgPT4ge1xuICBpZiAoIXNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3QgZm9jdXNCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KTtcbiAgaWYgKCFmb2N1c0Jsb2NrKVxuICAgIHJldHVybjtcbiAgY29uc3Qga2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uZm9jdXMpLCBub2RlID0ga2V5ID8gZm9jdXNCbG9jay5ub2RlLmNoaWxkcmVuLmZpbmQoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogWy4uLmZvY3VzQmxvY2sucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICBfa2V5OiBrZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNTcGFuID0gKHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IGZvY3VzQ2hpbGQgPSBnZXRGb2N1c0NoaWxkKHNuYXBzaG90KTtcbiAgcmV0dXJuIGZvY3VzQ2hpbGQgJiYgaXNTcGFuKHNuYXBzaG90LmNvbnRleHQsIGZvY3VzQ2hpbGQubm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNDaGlsZC5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQ2hpbGQucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0U2VsZWN0aW9uU3RhcnRQb2ludCA9IChzbmFwc2hvdCkgPT4ge1xuICBpZiAoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuIHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmJhY2t3YXJkID8gc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uZm9jdXMgOiBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5hbmNob3I7XG59LCBnZXRQcmV2aW91c0lubGluZU9iamVjdCA9IChzbmFwc2hvdCkgPT4ge1xuICBjb25zdCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KSwgc2VsZWN0aW9uU3RhcnRQb2ludCA9IGdldFNlbGVjdGlvblN0YXJ0UG9pbnQoc25hcHNob3QpLCBzZWxlY3Rpb25TdGFydFBvaW50Q2hpbGRLZXkgPSBzZWxlY3Rpb25TdGFydFBvaW50ICYmIGlzS2V5U2VnbWVudChzZWxlY3Rpb25TdGFydFBvaW50LnBhdGhbMl0pID8gc2VsZWN0aW9uU3RhcnRQb2ludC5wYXRoWzJdLl9rZXkgOiB2b2lkIDA7XG4gIGlmICghZm9jdXNUZXh0QmxvY2sgfHwgIXNlbGVjdGlvblN0YXJ0UG9pbnRDaGlsZEtleSlcbiAgICByZXR1cm47XG4gIGxldCBpbmxpbmVPYmplY3Q7XG4gIGZvciAoY29uc3QgY2hpbGQgb2YgZm9jdXNUZXh0QmxvY2subm9kZS5jaGlsZHJlbikge1xuICAgIGlmIChjaGlsZC5fa2V5ID09PSBzZWxlY3Rpb25TdGFydFBvaW50Q2hpbGRLZXkpXG4gICAgICBicmVhaztcbiAgICBpc1NwYW4kMShzbmFwc2hvdC5jb250ZXh0LCBjaGlsZCkgfHwgKGlubGluZU9iamVjdCA9IHtcbiAgICAgIG5vZGU6IGNoaWxkLFxuICAgICAgcGF0aDogWy4uLmZvY3VzVGV4dEJsb2NrLnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICB9XVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBpbmxpbmVPYmplY3Q7XG59LCBnZXRTZWxlY3RlZFZhbHVlID0gKHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IHNlbGVjdGlvbiA9IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uO1xuICBpZiAoIXNlbGVjdGlvbilcbiAgICByZXR1cm4gW107XG4gIGNvbnN0IHN0YXJ0UG9pbnQgPSBnZXRTZWxlY3Rpb25TdGFydFBvaW50JDEoc2VsZWN0aW9uKSwgZW5kUG9pbnQgPSBnZXRTZWxlY3Rpb25FbmRQb2ludChzZWxlY3Rpb24pLCBzdGFydEJsb2NrS2V5ID0gZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc3RhcnRQb2ludCksIGVuZEJsb2NrS2V5ID0gZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQoZW5kUG9pbnQpO1xuICBpZiAoIXN0YXJ0QmxvY2tLZXkgfHwgIWVuZEJsb2NrS2V5KVxuICAgIHJldHVybiBbXTtcbiAgY29uc3Qgc3RhcnRCbG9ja0luZGV4ID0gc25hcHNob3QuYmxvY2tJbmRleE1hcC5nZXQoc3RhcnRCbG9ja0tleSksIGVuZEJsb2NrSW5kZXggPSBzbmFwc2hvdC5ibG9ja0luZGV4TWFwLmdldChlbmRCbG9ja0tleSk7XG4gIGlmIChzdGFydEJsb2NrSW5kZXggPT09IHZvaWQgMCB8fCBlbmRCbG9ja0luZGV4ID09PSB2b2lkIDApXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCBzbGljZWRWYWx1ZSA9IHNuYXBzaG90LmNvbnRleHQudmFsdWUuc2xpY2Uoc3RhcnRCbG9ja0luZGV4LCBlbmRCbG9ja0luZGV4ICsgMSk7XG4gIHJldHVybiBzbGljZUJsb2Nrcyh7XG4gICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICBibG9ja3M6IHNsaWNlZFZhbHVlXG4gIH0pO1xufSwgZ2V0U2VsZWN0aW9uVGV4dCA9IChzbmFwc2hvdCkgPT4gZ2V0U2VsZWN0ZWRWYWx1ZShzbmFwc2hvdCkucmVkdWNlKCh0ZXh0LCBibG9jaykgPT4gaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgYmxvY2spID8gdGV4dCArIGJsb2NrLmNoaWxkcmVuLnJlZHVjZSgodGV4dDIsIGNoaWxkKSA9PiBpc1NwYW4oc25hcHNob3QuY29udGV4dCwgY2hpbGQpID8gdGV4dDIgKyBjaGlsZC50ZXh0IDogdGV4dDIsIFwiXCIpIDogdGV4dCwgXCJcIiksIGlzU2VsZWN0aW9uQ29sbGFwc2VkID0gKHNuYXBzaG90KSA9PiBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbiA/IEpTT04uc3RyaW5naWZ5KHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoKSA9PT0gSlNPTi5zdHJpbmdpZnkoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aCkgJiYgc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24/LmFuY2hvci5vZmZzZXQgPT09IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uPy5mb2N1cy5vZmZzZXQgOiAhMSwgaXNTZWxlY3Rpb25FeHBhbmRlZCA9IChzbmFwc2hvdCkgPT4gIWlzU2VsZWN0aW9uQ29sbGFwc2VkKHNuYXBzaG90KTtcbmV4cG9ydCB7XG4gIGdldEZvY3VzQmxvY2ssXG4gIGdldEZvY3VzQ2hpbGQsXG4gIGdldEZvY3VzU3BhbixcbiAgZ2V0Rm9jdXNUZXh0QmxvY2ssXG4gIGdldFByZXZpb3VzSW5saW5lT2JqZWN0LFxuICBnZXRTZWxlY3RlZFZhbHVlLFxuICBnZXRTZWxlY3Rpb25TdGFydFBvaW50LFxuICBnZXRTZWxlY3Rpb25UZXh0LFxuICBpc1NlbGVjdGlvbkNvbGxhcHNlZCxcbiAgaXNTZWxlY3Rpb25FeHBhbmRlZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdG9yLmlzLXNlbGVjdGlvbi1leHBhbmRlZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js":
/*!************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorContext: () => (/* binding */ EditorContext),\n/* harmony export */   useEditor: () => (/* binding */ useEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction getGlobalScope() {\n  if (typeof globalThis < \"u\") return globalThis;\n  if (typeof window < \"u\") return window;\n  if (typeof self < \"u\") return self;\n  if (typeof global < \"u\") return global;\n  throw new Error(\"@portabletext/editor: could not locate global scope\");\n}\nconst globalScope = getGlobalScope();\nfunction createGloballyScopedContext(key, defaultValue) {\n  const symbol = Symbol.for(key);\n  return typeof document > \"u\" ? (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultValue) : (globalScope[symbol] = globalScope[symbol] ?? (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultValue), globalScope[symbol]);\n}\nconst EditorContext = createGloballyScopedContext(\"@portabletext/editor/context/editor\", null);\nfunction useEditor() {\n  const editor = react__WEBPACK_IMPORTED_MODULE_0__.useContext(EditorContext);\n  if (!editor)\n    throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n  return editor;\n}\n\n//# sourceMappingURL=use-editor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXNlLWVkaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0RBQWEsK0RBQStELG9EQUFhO0FBQzFIO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2Q0FBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEZpcnN0IEF5b1xcRGVza3RvcFxcQ3JhZnRlZC1UZW1wbGF0ZVxcY3JhZnRlZC1zaXRlXFxub2RlX21vZHVsZXNcXEBwb3J0YWJsZXRleHRcXGVkaXRvclxcbGliXFxfY2h1bmtzLWVzXFx1c2UtZWRpdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBnZXRHbG9iYWxTY29wZSgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzIDwgXCJ1XCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICBpZiAodHlwZW9mIHdpbmRvdyA8IFwidVwiKSByZXR1cm4gd2luZG93O1xuICBpZiAodHlwZW9mIHNlbGYgPCBcInVcIikgcmV0dXJuIHNlbGY7XG4gIGlmICh0eXBlb2YgZ2xvYmFsIDwgXCJ1XCIpIHJldHVybiBnbG9iYWw7XG4gIHRocm93IG5ldyBFcnJvcihcIkBwb3J0YWJsZXRleHQvZWRpdG9yOiBjb3VsZCBub3QgbG9jYXRlIGdsb2JhbCBzY29wZVwiKTtcbn1cbmNvbnN0IGdsb2JhbFNjb3BlID0gZ2V0R2xvYmFsU2NvcGUoKTtcbmZ1bmN0aW9uIGNyZWF0ZUdsb2JhbGx5U2NvcGVkQ29udGV4dChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICBjb25zdCBzeW1ib2wgPSBTeW1ib2wuZm9yKGtleSk7XG4gIHJldHVybiB0eXBlb2YgZG9jdW1lbnQgPiBcInVcIiA/IGNyZWF0ZUNvbnRleHQoZGVmYXVsdFZhbHVlKSA6IChnbG9iYWxTY29wZVtzeW1ib2xdID0gZ2xvYmFsU2NvcGVbc3ltYm9sXSA/PyBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSksIGdsb2JhbFNjb3BlW3N5bWJvbF0pO1xufVxuY29uc3QgRWRpdG9yQ29udGV4dCA9IGNyZWF0ZUdsb2JhbGx5U2NvcGVkQ29udGV4dChcIkBwb3J0YWJsZXRleHQvZWRpdG9yL2NvbnRleHQvZWRpdG9yXCIsIG51bGwpO1xuZnVuY3Rpb24gdXNlRWRpdG9yKCkge1xuICBjb25zdCBlZGl0b3IgPSBSZWFjdC51c2VDb250ZXh0KEVkaXRvckNvbnRleHQpO1xuICBpZiAoIWVkaXRvcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBFZGl0b3Igc2V0LiBVc2UgRWRpdG9yUHJvdmlkZXIgdG8gc2V0IG9uZS5cIik7XG4gIHJldHVybiBlZGl0b3I7XG59XG5leHBvcnQge1xuICBFZGl0b3JDb250ZXh0LFxuICB1c2VFZGl0b3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtZWRpdG9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToBlockSelectionPoint: () => (/* binding */ blockOffsetToBlockSelectionPoint),\n/* harmony export */   blockOffsetToSelectionPoint: () => (/* binding */ blockOffsetToSelectionPoint),\n/* harmony export */   blockOffsetsToSelection: () => (/* binding */ blockOffsetsToSelection),\n/* harmony export */   childSelectionPointToBlockOffset: () => (/* binding */ childSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n\nfunction blockOffsetToBlockSelectionPoint({\n  context,\n  blockOffset\n}) {\n  let selectionPoint;\n  for (const block of context.value)\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{\n          _key: block._key\n        }],\n        offset: blockOffset.offset\n      };\n      break;\n    }\n  return selectionPoint;\n}\nfunction blockOffsetToSelectionPoint({\n  context,\n  blockOffset,\n  direction\n}) {\n  return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.blockOffsetToSpanSelectionPoint)({\n    context,\n    blockOffset,\n    direction\n  }) || blockOffsetToBlockSelectionPoint({\n    context,\n    blockOffset\n  });\n}\nfunction blockOffsetsToSelection({\n  context,\n  offsets,\n  backward\n}) {\n  const anchor = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.anchor,\n    direction: backward ? \"backward\" : \"forward\"\n  }), focus = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.focus,\n    direction: backward ? \"forward\" : \"backward\"\n  });\n  return !anchor || !focus ? null : {\n    anchor,\n    focus,\n    backward\n  };\n}\nfunction childSelectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(selectionPoint), childKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(selectionPoint);\n  if (!(!blockKey || !childKey)) {\n    for (const block of context.value)\n      if (block._key === blockKey && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block))\n        for (const child of block.children) {\n          if (child._key === childKey)\n            return {\n              path: [{\n                _key: block._key\n              }],\n              offset: offset + selectionPoint.offset\n            };\n          (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child) && (offset += child.text.length);\n        }\n  }\n}\n\n//# sourceMappingURL=util.child-selection-point-to-block-offset.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5jaGlsZC1zZWxlY3Rpb24tcG9pbnQtdG8tYmxvY2stb2Zmc2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRKO0FBQzVKO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsU0FBUyxzRkFBK0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsbUJBQW1CLG9GQUE2Qiw2QkFBNkIsb0ZBQTZCO0FBQzFHO0FBQ0E7QUFDQSxxQ0FBcUMsa0VBQVc7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsVUFBVSw2REFBTTtBQUNoQjtBQUNBO0FBQ0E7QUFNRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEZpcnN0IEF5b1xcRGVza3RvcFxcQ3JhZnRlZC1UZW1wbGF0ZVxcY3JhZnRlZC1zaXRlXFxub2RlX21vZHVsZXNcXEBwb3J0YWJsZXRleHRcXGVkaXRvclxcbGliXFxfY2h1bmtzLWVzXFx1dGlsLmNoaWxkLXNlbGVjdGlvbi1wb2ludC10by1ibG9jay1vZmZzZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmxvY2tPZmZzZXRUb1NwYW5TZWxlY3Rpb25Qb2ludCwgZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQsIGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50LCBpc1RleHRCbG9jaywgaXNTcGFuIH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmZ1bmN0aW9uIGJsb2NrT2Zmc2V0VG9CbG9ja1NlbGVjdGlvblBvaW50KHtcbiAgY29udGV4dCxcbiAgYmxvY2tPZmZzZXRcbn0pIHtcbiAgbGV0IHNlbGVjdGlvblBvaW50O1xuICBmb3IgKGNvbnN0IGJsb2NrIG9mIGNvbnRleHQudmFsdWUpXG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrT2Zmc2V0LnBhdGhbMF0uX2tleSkge1xuICAgICAgc2VsZWN0aW9uUG9pbnQgPSB7XG4gICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICB9XSxcbiAgICAgICAgb2Zmc2V0OiBibG9ja09mZnNldC5vZmZzZXRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICB9XG4gIHJldHVybiBzZWxlY3Rpb25Qb2ludDtcbn1cbmZ1bmN0aW9uIGJsb2NrT2Zmc2V0VG9TZWxlY3Rpb25Qb2ludCh7XG4gIGNvbnRleHQsXG4gIGJsb2NrT2Zmc2V0LFxuICBkaXJlY3Rpb25cbn0pIHtcbiAgcmV0dXJuIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQsXG4gICAgZGlyZWN0aW9uXG4gIH0pIHx8IGJsb2NrT2Zmc2V0VG9CbG9ja1NlbGVjdGlvblBvaW50KHtcbiAgICBjb250ZXh0LFxuICAgIGJsb2NrT2Zmc2V0XG4gIH0pO1xufVxuZnVuY3Rpb24gYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24oe1xuICBjb250ZXh0LFxuICBvZmZzZXRzLFxuICBiYWNrd2FyZFxufSkge1xuICBjb25zdCBhbmNob3IgPSBibG9ja09mZnNldFRvU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQ6IG9mZnNldHMuYW5jaG9yLFxuICAgIGRpcmVjdGlvbjogYmFja3dhcmQgPyBcImJhY2t3YXJkXCIgOiBcImZvcndhcmRcIlxuICB9KSwgZm9jdXMgPSBibG9ja09mZnNldFRvU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQ6IG9mZnNldHMuZm9jdXMsXG4gICAgZGlyZWN0aW9uOiBiYWNrd2FyZCA/IFwiZm9yd2FyZFwiIDogXCJiYWNrd2FyZFwiXG4gIH0pO1xuICByZXR1cm4gIWFuY2hvciB8fCAhZm9jdXMgPyBudWxsIDoge1xuICAgIGFuY2hvcixcbiAgICBmb2N1cyxcbiAgICBiYWNrd2FyZFxuICB9O1xufVxuZnVuY3Rpb24gY2hpbGRTZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICBjb250ZXh0LFxuICBzZWxlY3Rpb25Qb2ludFxufSkge1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgY29uc3QgYmxvY2tLZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludChzZWxlY3Rpb25Qb2ludCksIGNoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc2VsZWN0aW9uUG9pbnQpO1xuICBpZiAoISghYmxvY2tLZXkgfHwgIWNoaWxkS2V5KSkge1xuICAgIGZvciAoY29uc3QgYmxvY2sgb2YgY29udGV4dC52YWx1ZSlcbiAgICAgIGlmIChibG9jay5fa2V5ID09PSBibG9ja0tleSAmJiBpc1RleHRCbG9jayhjb250ZXh0LCBibG9jaykpXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoY2hpbGQuX2tleSA9PT0gY2hpbGRLZXkpXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICsgc2VsZWN0aW9uUG9pbnQub2Zmc2V0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIGlzU3Bhbihjb250ZXh0LCBjaGlsZCkgJiYgKG9mZnNldCArPSBjaGlsZC50ZXh0Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgfVxufVxuZXhwb3J0IHtcbiAgYmxvY2tPZmZzZXRUb0Jsb2NrU2VsZWN0aW9uUG9pbnQsXG4gIGJsb2NrT2Zmc2V0VG9TZWxlY3Rpb25Qb2ludCxcbiAgYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24sXG4gIGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5jaGlsZC1zZWxlY3Rpb24tcG9pbnQtdG8tYmxvY2stb2Zmc2V0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockEndPoint: () => (/* binding */ getBlockEndPoint),\n/* harmony export */   isEmptyTextBlock: () => (/* binding */ isEmptyTextBlock),\n/* harmony export */   isEqualSelectionPoints: () => (/* binding */ isEqualSelectionPoints),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n\nfunction getBlockEndPoint({\n  context,\n  block\n}) {\n  if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block.node)) {\n    const lastChild = block.node.children[block.node.children.length - 1];\n    if (lastChild)\n      return {\n        path: [...block.path, \"children\", {\n          _key: lastChild._key\n        }],\n        offset: (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, lastChild) ? lastChild.text.length : 0\n      };\n  }\n  return {\n    path: block.path,\n    offset: 0\n  };\n}\nfunction isEmptyTextBlock(context, block) {\n  if (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block))\n    return !1;\n  const onlyText = block.children.every((child) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)), blockText = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getTextBlockText)(block);\n  return onlyText && blockText === \"\";\n}\nfunction isEqualSelectionPoints(a, b) {\n  return a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path);\n}\nfunction isSelectionCollapsed(selection) {\n  return selection ? JSON.stringify(selection.anchor.path) === JSON.stringify(selection.focus.path) && selection.anchor.offset === selection.focus.offset : !1;\n}\n\n//# sourceMappingURL=util.is-selection-collapsed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1zZWxlY3Rpb24tY29sbGFwc2VkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxNQUFNLGtFQUFXO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsZ0JBQWdCLDZEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLGtFQUFXO0FBQ2xCO0FBQ0EsbURBQW1ELDZEQUFNLCtCQUErQix1RUFBZ0I7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcRmlyc3QgQXlvXFxEZXNrdG9wXFxDcmFmdGVkLVRlbXBsYXRlXFxjcmFmdGVkLXNpdGVcXG5vZGVfbW9kdWxlc1xcQHBvcnRhYmxldGV4dFxcZWRpdG9yXFxsaWJcXF9jaHVua3MtZXNcXHV0aWwuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1RleHRCbG9jaywgaXNTcGFuLCBnZXRUZXh0QmxvY2tUZXh0IH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmZ1bmN0aW9uIGdldEJsb2NrRW5kUG9pbnQoe1xuICBjb250ZXh0LFxuICBibG9ja1xufSkge1xuICBpZiAoaXNUZXh0QmxvY2soY29udGV4dCwgYmxvY2subm9kZSkpIHtcbiAgICBjb25zdCBsYXN0Q2hpbGQgPSBibG9jay5ub2RlLmNoaWxkcmVuW2Jsb2NrLm5vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxhc3RDaGlsZClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGg6IFsuLi5ibG9jay5wYXRoLCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICBfa2V5OiBsYXN0Q2hpbGQuX2tleVxuICAgICAgICB9XSxcbiAgICAgICAgb2Zmc2V0OiBpc1NwYW4oY29udGV4dCwgbGFzdENoaWxkKSA/IGxhc3RDaGlsZC50ZXh0Lmxlbmd0aCA6IDBcbiAgICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBibG9jay5wYXRoLFxuICAgIG9mZnNldDogMFxuICB9O1xufVxuZnVuY3Rpb24gaXNFbXB0eVRleHRCbG9jayhjb250ZXh0LCBibG9jaykge1xuICBpZiAoIWlzVGV4dEJsb2NrKGNvbnRleHQsIGJsb2NrKSlcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IG9ubHlUZXh0ID0gYmxvY2suY2hpbGRyZW4uZXZlcnkoKGNoaWxkKSA9PiBpc1NwYW4oY29udGV4dCwgY2hpbGQpKSwgYmxvY2tUZXh0ID0gZ2V0VGV4dEJsb2NrVGV4dChibG9jayk7XG4gIHJldHVybiBvbmx5VGV4dCAmJiBibG9ja1RleHQgPT09IFwiXCI7XG59XG5mdW5jdGlvbiBpc0VxdWFsU2VsZWN0aW9uUG9pbnRzKGEsIGIpIHtcbiAgcmV0dXJuIGEub2Zmc2V0ID09PSBiLm9mZnNldCAmJiBKU09OLnN0cmluZ2lmeShhLnBhdGgpID09PSBKU09OLnN0cmluZ2lmeShiLnBhdGgpO1xufVxuZnVuY3Rpb24gaXNTZWxlY3Rpb25Db2xsYXBzZWQoc2VsZWN0aW9uKSB7XG4gIHJldHVybiBzZWxlY3Rpb24gPyBKU09OLnN0cmluZ2lmeShzZWxlY3Rpb24uYW5jaG9yLnBhdGgpID09PSBKU09OLnN0cmluZ2lmeShzZWxlY3Rpb24uZm9jdXMucGF0aCkgJiYgc2VsZWN0aW9uLmFuY2hvci5vZmZzZXQgPT09IHNlbGVjdGlvbi5mb2N1cy5vZmZzZXQgOiAhMTtcbn1cbmV4cG9ydCB7XG4gIGdldEJsb2NrRW5kUG9pbnQsXG4gIGlzRW1wdHlUZXh0QmxvY2ssXG4gIGlzRXF1YWxTZWxlY3Rpb25Qb2ludHMsXG4gIGlzU2VsZWN0aW9uQ29sbGFwc2VkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5pcy1zZWxlY3Rpb24tY29sbGFwc2VkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTextBlock: () => (/* binding */ isTextBlock),\n/* harmony export */   mergeTextBlocks: () => (/* binding */ mergeTextBlocks)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n\nfunction isTextBlock(context, block) {\n  return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTypedObject)(block) && block._type === context.schema.block.name;\n}\nfunction mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock\n}) {\n  const parsedIncomingBlock = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.parseBlock)({\n    context,\n    block: incomingBlock,\n    options: {\n      refreshKeys: !1,\n      validateFields: !1\n    }\n  });\n  return !parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock) ? targetBlock : {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [...targetBlock.markDefs ?? [], ...parsedIncomingBlock.markDefs ?? []]\n  };\n}\n\n//# sourceMappingURL=util.merge-text-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5tZXJnZS10ZXh0LWJsb2Nrcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUU7QUFDbkU7QUFDQSxTQUFTLG9FQUFhO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOEJBQThCLGlFQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEZpcnN0IEF5b1xcRGVza3RvcFxcQ3JhZnRlZC1UZW1wbGF0ZVxcY3JhZnRlZC1zaXRlXFxub2RlX21vZHVsZXNcXEBwb3J0YWJsZXRleHRcXGVkaXRvclxcbGliXFxfY2h1bmtzLWVzXFx1dGlsLm1lcmdlLXRleHQtYmxvY2tzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVHlwZWRPYmplY3QsIHBhcnNlQmxvY2sgfSBmcm9tIFwiLi91dGlsLnNsaWNlLWJsb2Nrcy5qc1wiO1xuZnVuY3Rpb24gaXNUZXh0QmxvY2soY29udGV4dCwgYmxvY2spIHtcbiAgcmV0dXJuIGlzVHlwZWRPYmplY3QoYmxvY2spICYmIGJsb2NrLl90eXBlID09PSBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lO1xufVxuZnVuY3Rpb24gbWVyZ2VUZXh0QmxvY2tzKHtcbiAgY29udGV4dCxcbiAgdGFyZ2V0QmxvY2ssXG4gIGluY29taW5nQmxvY2tcbn0pIHtcbiAgY29uc3QgcGFyc2VkSW5jb21pbmdCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2s6IGluY29taW5nQmxvY2ssXG4gICAgb3B0aW9uczoge1xuICAgICAgcmVmcmVzaEtleXM6ICExLFxuICAgICAgdmFsaWRhdGVGaWVsZHM6ICExXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuICFwYXJzZWRJbmNvbWluZ0Jsb2NrIHx8ICFpc1RleHRCbG9jayhjb250ZXh0LCBwYXJzZWRJbmNvbWluZ0Jsb2NrKSA/IHRhcmdldEJsb2NrIDoge1xuICAgIC4uLnRhcmdldEJsb2NrLFxuICAgIGNoaWxkcmVuOiBbLi4udGFyZ2V0QmxvY2suY2hpbGRyZW4sIC4uLnBhcnNlZEluY29taW5nQmxvY2suY2hpbGRyZW5dLFxuICAgIG1hcmtEZWZzOiBbLi4udGFyZ2V0QmxvY2subWFya0RlZnMgPz8gW10sIC4uLnBhcnNlZEluY29taW5nQmxvY2subWFya0RlZnMgPz8gW11dXG4gIH07XG59XG5leHBvcnQge1xuICBpc1RleHRCbG9jayxcbiAgbWVyZ2VUZXh0QmxvY2tzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5tZXJnZS10ZXh0LWJsb2Nrcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   getBlockKeyFromSelectionPoint: () => (/* binding */ getBlockKeyFromSelectionPoint),\n/* harmony export */   getBlockStartPoint: () => (/* binding */ getBlockStartPoint),\n/* harmony export */   getChildKeyFromSelectionPoint: () => (/* binding */ getChildKeyFromSelectionPoint),\n/* harmony export */   getSelectionEndPoint: () => (/* binding */ getSelectionEndPoint),\n/* harmony export */   getSelectionStartPoint: () => (/* binding */ getSelectionStartPoint),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isKeyedSegment: () => (/* binding */ isKeyedSegment),\n/* harmony export */   isListBlock: () => (/* binding */ isListBlock),\n/* harmony export */   isSpan: () => (/* binding */ isSpan$1),\n/* harmony export */   isSpan$1: () => (/* binding */ isSpan),\n/* harmony export */   isTextBlock: () => (/* binding */ isTextBlock),\n/* harmony export */   isTypedObject: () => (/* binding */ isTypedObject),\n/* harmony export */   parseAnnotation: () => (/* binding */ parseAnnotation),\n/* harmony export */   parseBlock: () => (/* binding */ parseBlock),\n/* harmony export */   parseBlocks: () => (/* binding */ parseBlocks),\n/* harmony export */   parseInlineObject: () => (/* binding */ parseInlineObject),\n/* harmony export */   sliceBlocks: () => (/* binding */ sliceBlocks),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && segment !== null && \"_key\" in segment;\n}\nfunction getBlockKeyFromSelectionPoint(point) {\n  const blockPathSegment = point.path.at(0);\n  if (isKeyedSegment(blockPathSegment))\n    return blockPathSegment._key;\n}\nfunction getChildKeyFromSelectionPoint(point) {\n  const childPathSegment = point.path.at(2);\n  if (isKeyedSegment(childPathSegment))\n    return childPathSegment._key;\n}\nfunction isTypedObject(object) {\n  return isRecord(object) && typeof object._type == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction parseBlocks({\n  context,\n  blocks,\n  options\n}) {\n  return Array.isArray(blocks) ? blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({\n      context,\n      block,\n      options\n    });\n    return parsedBlock ? [parsedBlock] : [];\n  }) : [];\n}\nfunction parseBlock({\n  context,\n  block,\n  options\n}) {\n  return parseTextBlock({\n    block,\n    context,\n    options\n  }) ?? parseBlockObject({\n    blockObject: block,\n    context,\n    options\n  });\n}\nfunction parseBlockObject({\n  blockObject,\n  context,\n  options\n}) {\n  if (!isTypedObject(blockObject))\n    return;\n  const schemaType = context.schema.blockObjects.find(({\n    name\n  }) => name === blockObject._type);\n  if (schemaType)\n    return parseObject({\n      object: blockObject,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction isListBlock(context, block) {\n  return isTextBlock(context, block) && block.level !== void 0 && block.listItem !== void 0;\n}\nfunction isTextBlock(context, block) {\n  return !(!isTypedObject(block) || block._type !== context.schema.block.name || !Array.isArray(block.children));\n}\nfunction parseTextBlock({\n  block,\n  context,\n  options\n}) {\n  if (!isTypedObject(block))\n    return;\n  const customFields = {};\n  for (const key of Object.keys(block))\n    key !== \"_type\" && key !== \"_key\" && key !== \"children\" && key !== \"markDefs\" && key !== \"style\" && key !== \"listItem\" && key !== \"level\" && (customFields[key] = block[key]);\n  if (block._type !== context.schema.block.name)\n    return;\n  const _key = options.refreshKeys ? context.keyGenerator() : typeof block._key == \"string\" ? block._key : context.keyGenerator(), unparsedMarkDefs = Array.isArray(block.markDefs) ? block.markDefs : [], markDefKeyMap = /* @__PURE__ */ new Map(), markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef))\n      return [];\n    const schemaType = context.schema.annotations.find(({\n      name\n    }) => name === markDef._type);\n    if (!schemaType)\n      return [];\n    if (typeof markDef._key != \"string\")\n      return [];\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator\n      },\n      options\n    });\n    return parsedAnnotation ? (markDefKeyMap.set(markDef._key, parsedAnnotation._key), [parsedAnnotation]) : [];\n  }), children = (Array.isArray(block.children) ? block.children : []).map((child) => parseSpan({\n    span: child,\n    context,\n    markDefKeyMap,\n    options\n  }) ?? parseInlineObject({\n    inlineObject: child,\n    context,\n    options\n  })).filter((child) => child !== void 0), parsedBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children: children.length > 0 ? children : [{\n      _key: context.keyGenerator(),\n      _type: context.schema.span.name,\n      text: \"\",\n      marks: []\n    }],\n    markDefs,\n    ...options.validateFields ? {} : customFields\n  };\n  if (typeof block.style == \"string\" && context.schema.styles.find((style) => style.name === block.style))\n    parsedBlock.style = block.style;\n  else {\n    const defaultStyle = context.schema.styles.at(0)?.name;\n    defaultStyle !== void 0 ? parsedBlock.style = defaultStyle : console.error(\"Expected default style\");\n  }\n  return typeof block.listItem == \"string\" && context.schema.lists.find((list) => list.name === block.listItem) && (parsedBlock.listItem = block.listItem), typeof block.level == \"number\" && (parsedBlock.level = block.level), parsedBlock;\n}\nfunction isSpan$1(context, child) {\n  return !(!isTypedObject(child) || child._type !== context.schema.span.name || typeof child.text != \"string\");\n}\nfunction parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options\n}) {\n  if (!isTypedObject(span))\n    return;\n  const customFields = {};\n  for (const key of Object.keys(span))\n    key !== \"_type\" && key !== \"_key\" && key !== \"text\" && key !== \"marks\" && (customFields[key] = span[key]);\n  if (span._type !== context.schema.span.name || span._type !== \"span\")\n    return;\n  const marks = (Array.isArray(span.marks) ? span.marks : []).flatMap((mark) => {\n    if (typeof mark != \"string\")\n      return [];\n    const markDefKey = markDefKeyMap.get(mark);\n    return markDefKey !== void 0 ? [markDefKey] : context.schema.decorators.some((decorator) => decorator.name === mark) ? [mark] : [];\n  });\n  return {\n    _type: \"span\",\n    _key: options.refreshKeys ? context.keyGenerator() : typeof span._key == \"string\" ? span._key : context.keyGenerator(),\n    text: typeof span.text == \"string\" ? span.text : \"\",\n    marks,\n    ...options.validateFields ? {} : customFields\n  };\n}\nfunction parseInlineObject({\n  inlineObject,\n  context,\n  options\n}) {\n  if (!isTypedObject(inlineObject))\n    return;\n  const schemaType = context.schema.inlineObjects.find(({\n    name\n  }) => name === inlineObject._type);\n  if (schemaType)\n    return parseObject({\n      object: inlineObject,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction parseAnnotation({\n  annotation,\n  context,\n  options\n}) {\n  if (!isTypedObject(annotation))\n    return;\n  const schemaType = context.schema.annotations.find(({\n    name\n  }) => name === annotation._type);\n  if (schemaType)\n    return parseObject({\n      object: annotation,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction parseObject({\n  object,\n  context,\n  options\n}) {\n  const {\n    _type,\n    _key,\n    ...customFields\n  } = object, values = options.validateFields ? context.schemaType.fields.reduce((fieldValues, field) => {\n    const fieldValue = object[field.name];\n    return fieldValue !== void 0 && (fieldValues[field.name] = fieldValue), fieldValues;\n  }, {}) : customFields;\n  return {\n    _type: context.schemaType.name,\n    _key: options.refreshKeys ? context.keyGenerator() : typeof object._key == \"string\" ? object._key : context.keyGenerator(),\n    ...values\n  };\n}\nfunction blockOffsetToSpanSelectionPoint({\n  context,\n  blockOffset,\n  direction\n}) {\n  let offsetLeft = blockOffset.offset, selectionPoint, skippedInlineObject = !1;\n  for (const block of context.value)\n    if (block._key === blockOffset.path[0]._key && isTextBlock(context, block))\n      for (const child of block.children) {\n        if (direction === \"forward\") {\n          if (!isSpan$1(context, child))\n            continue;\n          if (offsetLeft <= child.text.length) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: offsetLeft\n            };\n            break;\n          }\n          offsetLeft -= child.text.length;\n          continue;\n        }\n        if (!isSpan$1(context, child)) {\n          skippedInlineObject = !0;\n          continue;\n        }\n        if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n          skippedInlineObject && (selectionPoint = {\n            path: [...blockOffset.path, \"children\", {\n              _key: child._key\n            }],\n            offset: 0\n          });\n          break;\n        }\n        if (offsetLeft > child.text.length) {\n          offsetLeft -= child.text.length;\n          continue;\n        }\n        if (offsetLeft <= child.text.length && (selectionPoint = {\n          path: [...blockOffset.path, \"children\", {\n            _key: child._key\n          }],\n          offset: offsetLeft\n        }, offsetLeft -= child.text.length, offsetLeft !== 0))\n          break;\n      }\n  return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint), spanKey = getChildKeyFromSelectionPoint(selectionPoint);\n  if (!(!blockKey || !spanKey)) {\n    for (const block of context.value)\n      if (block._key === blockKey && isTextBlock(context, block)) {\n        for (const child of block.children)\n          if (isSpan$1(context, child)) {\n            if (child._key === spanKey)\n              return {\n                path: [{\n                  _key: block._key\n                }],\n                offset: offset + selectionPoint.offset\n              };\n            offset += child.text.length;\n          }\n      }\n  }\n}\nfunction getBlockStartPoint({\n  context,\n  block\n}) {\n  return isTextBlock(context, block.node) ? {\n    path: [...block.path, \"children\", {\n      _key: block.node.children[0]._key\n    }],\n    offset: 0\n  } : {\n    path: block.path,\n    offset: 0\n  };\n}\nfunction getSelectionEndPoint(selection) {\n  return selection ? selection.backward ? selection.anchor : selection.focus : null;\n}\nfunction getSelectionStartPoint(selection) {\n  return selection ? selection.backward ? selection.focus : selection.anchor : null;\n}\nfunction getTextBlockText(block) {\n  return block.children.map((child) => child.text ?? \"\").join(\"\");\n}\nfunction isSpan(context, child) {\n  return child._type === context.schema.span.name;\n}\nfunction sliceBlocks({\n  context,\n  blocks\n}) {\n  const slice = [];\n  if (!context.selection)\n    return slice;\n  let startBlock;\n  const middleBlocks = [];\n  let endBlock;\n  const startPoint = getSelectionStartPoint(context.selection), endPoint = getSelectionEndPoint(context.selection), startBlockKey = getBlockKeyFromSelectionPoint(startPoint), startChildKey = getChildKeyFromSelectionPoint(startPoint), endBlockKey = getBlockKeyFromSelectionPoint(endPoint), endChildKey = getChildKeyFromSelectionPoint(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return slice;\n  for (const block of blocks) {\n    if (!isTextBlock(context, block) && block._key === startBlockKey && block._key === endBlockKey) {\n      startBlock = block;\n      break;\n    }\n    if (block._key === startBlockKey) {\n      if (!isTextBlock(context, block)) {\n        startBlock = block;\n        continue;\n      }\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isSpan$1(context, child)) {\n              const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);\n              startBlock = {\n                ...block,\n                children: [{\n                  ...child,\n                  text\n                }]\n              };\n            } else\n              startBlock = {\n                ...block,\n                children: [child]\n              };\n            if (startChildKey === endChildKey)\n              break;\n            continue;\n          }\n          if (startBlock && isTextBlock(context, startBlock) && (endChildKey && child._key === endChildKey && isSpan$1(context, child) ? startBlock.children.push({\n            ...child,\n            text: child.text.slice(0, endPoint.offset)\n          }) : startBlock.children.push(child), block._key === endBlockKey && endChildKey && child._key === endChildKey))\n            break;\n        }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (startBlock = block, startBlockKey === endBlockKey)\n        break;\n    }\n    if (block._key === endBlockKey) {\n      if (!isTextBlock(context, block)) {\n        endBlock = block;\n        break;\n      }\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: []\n        };\n        for (const child of block.children)\n          if (endBlock && isTextBlock(context, endBlock)) {\n            if (child._key === endChildKey && isSpan$1(context, child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset)\n              });\n              break;\n            }\n            if (endBlock.children.push(child), endChildKey && child._key === endChildKey)\n              break;\n          }\n        break;\n      }\n      endBlock = block;\n      break;\n    }\n    startBlock && middleBlocks.push(block);\n  }\n  return [...startBlock ? [startBlock] : [], ...middleBlocks, ...endBlock ? [endBlock] : []];\n}\n\n//# sourceMappingURL=util.slice-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectionPointToBlockOffset: () => (/* binding */ selectionPointToBlockOffset),\n/* harmony export */   sliceTextBlock: () => (/* binding */ sliceTextBlock)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.child-selection-point-to-block-offset.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n\n\nfunction selectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  const blockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(selectionPoint);\n  return selectionPoint.path.length === 1 && blockKey !== void 0 ? {\n    path: [{\n      _key: blockKey\n    }],\n    offset: selectionPoint.offset\n  } : (0,_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_1__.childSelectionPointToBlockOffset)({\n    context,\n    selectionPoint\n  });\n}\nfunction sliceTextBlock({\n  context,\n  block\n}) {\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(context.selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionEndPoint)(context.selection);\n  if (!startPoint || !endPoint)\n    return block;\n  const startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (startBlockKey !== endBlockKey || startBlockKey !== block._key)\n    return block;\n  const startChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(startPoint), endChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startChildKey || !endChildKey)\n    return block;\n  let startChildFound = !1;\n  const children = [];\n  for (const child of block.children) {\n    if (child._key === startChildKey) {\n      if (startChildFound = !0, (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)) {\n        const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);\n        children.push({\n          ...child,\n          text\n        });\n      } else\n        children.push(child);\n      if (startChildKey === endChildKey)\n        break;\n      continue;\n    }\n    if (child._key === endChildKey) {\n      (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child) ? children.push({\n        ...child,\n        text: child.text.slice(0, endPoint.offset)\n      }) : children.push(child);\n      break;\n    }\n    startChildFound && children.push(child);\n  }\n  return {\n    ...block,\n    children\n  };\n}\n\n//# sourceMappingURL=util.slice-text-block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5zbGljZS10ZXh0LWJsb2NrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEo7QUFDekQ7QUFDbkc7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQixvRkFBNkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSSxFQUFFLGdIQUFnQztBQUN0QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHFCQUFxQiw2RUFBc0IsZ0NBQWdDLDJFQUFvQjtBQUMvRjtBQUNBO0FBQ0Esd0JBQXdCLG9GQUE2Qiw0QkFBNEIsb0ZBQTZCO0FBQzlHO0FBQ0E7QUFDQSx3QkFBd0Isb0ZBQTZCLDRCQUE0QixvRkFBNkI7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDZEQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDZEQUFNO0FBQ1o7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEZpcnN0IEF5b1xcRGVza3RvcFxcQ3JhZnRlZC1UZW1wbGF0ZVxcY3JhZnRlZC1zaXRlXFxub2RlX21vZHVsZXNcXEBwb3J0YWJsZXRleHRcXGVkaXRvclxcbGliXFxfY2h1bmtzLWVzXFx1dGlsLnNsaWNlLXRleHQtYmxvY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQsIGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50LCBpc1NwYW4sIGdldFNlbGVjdGlvblN0YXJ0UG9pbnQsIGdldFNlbGVjdGlvbkVuZFBvaW50IH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmltcG9ydCB7IGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0IH0gZnJvbSBcIi4vdXRpbC5jaGlsZC1zZWxlY3Rpb24tcG9pbnQtdG8tYmxvY2stb2Zmc2V0LmpzXCI7XG5mdW5jdGlvbiBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICBjb250ZXh0LFxuICBzZWxlY3Rpb25Qb2ludFxufSkge1xuICBjb25zdCBibG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHNlbGVjdGlvblBvaW50KTtcbiAgcmV0dXJuIHNlbGVjdGlvblBvaW50LnBhdGgubGVuZ3RoID09PSAxICYmIGJsb2NrS2V5ICE9PSB2b2lkIDAgPyB7XG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgfV0sXG4gICAgb2Zmc2V0OiBzZWxlY3Rpb25Qb2ludC5vZmZzZXRcbiAgfSA6IGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0KHtcbiAgICBjb250ZXh0LFxuICAgIHNlbGVjdGlvblBvaW50XG4gIH0pO1xufVxuZnVuY3Rpb24gc2xpY2VUZXh0QmxvY2soe1xuICBjb250ZXh0LFxuICBibG9ja1xufSkge1xuICBjb25zdCBzdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludChjb250ZXh0LnNlbGVjdGlvbiksIGVuZFBvaW50ID0gZ2V0U2VsZWN0aW9uRW5kUG9pbnQoY29udGV4dC5zZWxlY3Rpb24pO1xuICBpZiAoIXN0YXJ0UG9pbnQgfHwgIWVuZFBvaW50KVxuICAgIHJldHVybiBibG9jaztcbiAgY29uc3Qgc3RhcnRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHN0YXJ0UG9pbnQpLCBlbmRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KGVuZFBvaW50KTtcbiAgaWYgKHN0YXJ0QmxvY2tLZXkgIT09IGVuZEJsb2NrS2V5IHx8IHN0YXJ0QmxvY2tLZXkgIT09IGJsb2NrLl9rZXkpXG4gICAgcmV0dXJuIGJsb2NrO1xuICBjb25zdCBzdGFydENoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc3RhcnRQb2ludCksIGVuZENoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoZW5kUG9pbnQpO1xuICBpZiAoIXN0YXJ0Q2hpbGRLZXkgfHwgIWVuZENoaWxkS2V5KVxuICAgIHJldHVybiBibG9jaztcbiAgbGV0IHN0YXJ0Q2hpbGRGb3VuZCA9ICExO1xuICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKSB7XG4gICAgaWYgKGNoaWxkLl9rZXkgPT09IHN0YXJ0Q2hpbGRLZXkpIHtcbiAgICAgIGlmIChzdGFydENoaWxkRm91bmQgPSAhMCwgaXNTcGFuKGNvbnRleHQsIGNoaWxkKSkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gY2hpbGQuX2tleSA9PT0gZW5kQ2hpbGRLZXkgPyBjaGlsZC50ZXh0LnNsaWNlKHN0YXJ0UG9pbnQub2Zmc2V0LCBlbmRQb2ludC5vZmZzZXQpIDogY2hpbGQudGV4dC5zbGljZShzdGFydFBvaW50Lm9mZnNldCk7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICBpZiAoc3RhcnRDaGlsZEtleSA9PT0gZW5kQ2hpbGRLZXkpXG4gICAgICAgIGJyZWFrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjaGlsZC5fa2V5ID09PSBlbmRDaGlsZEtleSkge1xuICAgICAgaXNTcGFuKGNvbnRleHQsIGNoaWxkKSA/IGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgdGV4dDogY2hpbGQudGV4dC5zbGljZSgwLCBlbmRQb2ludC5vZmZzZXQpXG4gICAgICB9KSA6IGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHN0YXJ0Q2hpbGRGb3VuZCAmJiBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLmJsb2NrLFxuICAgIGNoaWxkcmVuXG4gIH07XG59XG5leHBvcnQge1xuICBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQsXG4gIHNsaWNlVGV4dEJsb2NrXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5zbGljZS10ZXh0LWJsb2NrLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/behaviors/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/behaviors/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   effect: () => (/* binding */ effect),\n/* harmony export */   execute: () => (/* binding */ execute),\n/* harmony export */   forward: () => (/* binding */ forward),\n/* harmony export */   raise: () => (/* binding */ raise)\n/* harmony export */ });\nfunction execute(event) {\n  return {\n    type: \"execute\",\n    event\n  };\n}\nfunction forward(event) {\n  return {\n    type: \"forward\",\n    event\n  };\n}\nfunction raise(event) {\n  return {\n    type: \"raise\",\n    event\n  };\n}\nfunction effect(effect2) {\n  return {\n    type: \"effect\",\n    effect: effect2\n  };\n}\nfunction defineBehavior(behavior) {\n  return behavior;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL2JlaGF2aW9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9FO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcRmlyc3QgQXlvXFxEZXNrdG9wXFxDcmFmdGVkLVRlbXBsYXRlXFxjcmFmdGVkLXNpdGVcXG5vZGVfbW9kdWxlc1xcQHBvcnRhYmxldGV4dFxcZWRpdG9yXFxsaWJcXGJlaGF2aW9yc1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZXhlY3V0ZShldmVudCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiZXhlY3V0ZVwiLFxuICAgIGV2ZW50XG4gIH07XG59XG5mdW5jdGlvbiBmb3J3YXJkKGV2ZW50KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJmb3J3YXJkXCIsXG4gICAgZXZlbnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHJhaXNlKGV2ZW50KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJyYWlzZVwiLFxuICAgIGV2ZW50XG4gIH07XG59XG5mdW5jdGlvbiBlZmZlY3QoZWZmZWN0Mikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiZWZmZWN0XCIsXG4gICAgZWZmZWN0OiBlZmZlY3QyXG4gIH07XG59XG5mdW5jdGlvbiBkZWZpbmVCZWhhdmlvcihiZWhhdmlvcikge1xuICByZXR1cm4gYmVoYXZpb3I7XG59XG5leHBvcnQge1xuICBkZWZpbmVCZWhhdmlvcixcbiAgZWZmZWN0LFxuICBleGVjdXRlLFxuICBmb3J3YXJkLFxuICByYWlzZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/behaviors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* binding */ EditorEventListener),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _portabletext_schema__WEBPACK_IMPORTED_MODULE_38__.defineSchema),\n/* harmony export */   keyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* reexport safe */ _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_13__.useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./_chunks-es/use-editor.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/./node_modules/lodash/noop.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! slate-dom */ \"(ssr)/./node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var _chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./_chunks-es/util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./_chunks-es/util.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./_chunks-es/selector.is-selection-expanded.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\");\n/* harmony import */ var _chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./_chunks-es/selector.is-selecting-entire-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var _behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./behaviors/index.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/behaviors/index.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/cjs/index.js\");\n/* harmony import */ var _portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @portabletext/sanity-bridge */ \"(ssr)/./node_modules/@portabletext/sanity-bridge/dist/index.js\");\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/./node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/assign-55675fdf.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-752e55b8.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-3d0be313.development.esm.js\");\n/* harmony import */ var _portabletext_block_tools__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @portabletext/block-tools */ \"(ssr)/./node_modules/@portabletext/block-tools/lib/index.js\");\n/* harmony import */ var _portabletext_to_html__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @portabletext/to-html */ \"(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs\");\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/./node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/./node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var _chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./_chunks-es/util.child-selection-point-to-block-offset.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n/* harmony import */ var _chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./_chunks-es/util.slice-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/./node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @portabletext/keyboard-shortcuts */ \"(ssr)/./node_modules/@portabletext/keyboard-shortcuts/dist/index.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/./node_modules/lodash/isPlainObject.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction EditorEventListener(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_13__.useEditor)();\n  let t0, t1;\n  return $[0] !== editor || $[1] !== props.on ? (t0 = () => {\n    const subscription = editor.on(\"*\", props.on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editor, props.on], $[0] = editor, $[1] = props.on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_4__(rootName);\nfunction debugWithName(name) {\n  const namespace = `${rootName}${name}`;\n  return debug__WEBPACK_IMPORTED_MODULE_4__ && debug__WEBPACK_IMPORTED_MODULE_4__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_4__(namespace) : debug__WEBPACK_IMPORTED_MODULE_4__(rootName);\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n  const value = keyMap[object._key];\n  return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, {\n  schemaTypes\n}, keyMap = {}) {\n  return value && Array.isArray(value) ? value.map((block) => {\n    const {\n      _type,\n      _key,\n      ...rest\n    } = block;\n    if (block && block._type === schemaTypes.block.name) {\n      const textBlock = block;\n      let hasInlines = !1;\n      const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child) => {\n        const {\n          _type: cType,\n          _key: cKey,\n          ...cRest\n        } = child;\n        return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n          _type: cType,\n          _key: cKey,\n          children: [{\n            _key: VOID_CHILD_KEY,\n            _type: \"span\",\n            text: \"\",\n            marks: []\n          }],\n          value: cRest,\n          __inline: !0\n        }, keyMap)) : child;\n      });\n      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].name), keepObjectEquality({\n        _type,\n        _key,\n        ...rest,\n        children\n      }, keyMap));\n    }\n    return keepObjectEquality({\n      _type,\n      _key,\n      children: [{\n        _key: VOID_CHILD_KEY,\n        _type: \"span\",\n        text: \"\",\n        marks: []\n      }],\n      value: rest\n    }, keyMap);\n  }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n  return value.map((block) => {\n    const {\n      _key,\n      _type\n    } = block;\n    if (!_key || !_type)\n      throw new Error(\"Not a valid block\");\n    if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n      let hasInlines = !1;\n      const children = block.children.map((child) => {\n        const {\n          _type: _cType\n        } = child;\n        if (\"value\" in child && _cType !== \"span\") {\n          hasInlines = !0;\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child;\n          return keepObjectEquality({\n            ...rest,\n            ...v,\n            _key: k,\n            _type: t\n          }, keyMap);\n        }\n        return child;\n      });\n      return hasInlines ? keepObjectEquality({\n        ...block,\n        children,\n        _key,\n        _type\n      }, keyMap) : block;\n    }\n    const blockValue = \"value\" in block && block.value;\n    return keepObjectEquality({\n      _key,\n      _type,\n      ...typeof blockValue == \"object\" ? blockValue : {}\n    }, keyMap);\n  });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].name && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nfunction getBlockPath({\n  editor,\n  _key\n}) {\n  const [, blockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: [],\n    match: (n) => n._key === _key\n  })).at(0) ?? [void 0, void 0], blockIndex = blockPath?.at(0);\n  if (blockIndex !== void 0)\n    return [blockIndex];\n}\nfunction getFocusBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  try {\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFocusSpan({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  try {\n    const [node, path] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection.focus.path);\n    if (editor.isTextSpan(node))\n      return [node, path];\n  } catch {\n    return [void 0, void 0];\n  }\n  return [void 0, void 0];\n}\nfunction getSelectionStartBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  const selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.start(editor.selection);\n  return getPointBlock({\n    editor,\n    point: selectionStartPoint\n  });\n}\nfunction getSelectionEndBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  const selectionEndPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.end(editor.selection);\n  return getPointBlock({\n    editor,\n    point: selectionEndPoint\n  });\n}\nfunction getPointBlock({\n  editor,\n  point\n}) {\n  try {\n    const [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, point.path.slice(0, 1)) ?? [void 0, void 0];\n    return block ? [block, point.path.slice(0, 1)] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFocusChild({\n  editor\n}) {\n  const [focusBlock, focusBlockPath] = getFocusBlock({\n    editor\n  }), childIndex = editor.selection?.focus.path.at(1);\n  if (!focusBlock || !focusBlockPath || childIndex === void 0)\n    return [void 0, void 0];\n  try {\n    const focusChild = slate__WEBPACK_IMPORTED_MODULE_14__.Node.child(focusBlock, childIndex);\n    return focusChild ? [focusChild, [...focusBlockPath, childIndex]] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getPointChild({\n  editor,\n  point\n}) {\n  const [block, blockPath] = getPointBlock({\n    editor,\n    point\n  }), childIndex = point.path.at(1);\n  if (!block || !blockPath || childIndex === void 0)\n    return [void 0, void 0];\n  try {\n    const pointChild = slate__WEBPACK_IMPORTED_MODULE_14__.Node.child(block, childIndex);\n    return pointChild ? [pointChild, [...blockPath, childIndex]] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFirstBlock({\n  editor\n}) {\n  if (editor.children.length === 0)\n    return [void 0, void 0];\n  const firstBlockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, []).path.at(0);\n  try {\n    return firstBlockPath !== void 0 ? slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, [firstBlockPath]) ?? [void 0, void 0] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getLastBlock({\n  editor\n}) {\n  if (editor.children.length === 0)\n    return [void 0, void 0];\n  const lastBlockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, []).path.at(0);\n  try {\n    return lastBlockPath !== void 0 ? slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, [lastBlockPath]) ?? [void 0, void 0] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getNodeBlock({\n  editor,\n  schema,\n  node\n}) {\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(node))\n    return;\n  if (isBlockElement({\n    editor,\n    schema\n  }, node))\n    return elementToBlock({\n      schema,\n      element: node\n    });\n  const parent = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    mode: \"highest\",\n    at: [],\n    match: (n) => isBlockElement({\n      editor,\n      schema\n    }, n) && n.children.some((child) => child._key === node._key)\n  })).at(0)?.at(0);\n  return slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(parent) ? elementToBlock({\n    schema,\n    element: parent\n  }) : void 0;\n}\nfunction elementToBlock({\n  schema,\n  element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0);\n}\nfunction isBlockElement({\n  editor,\n  schema\n}, node) {\n  return slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node) && !editor.isInline(node) && (schema.block.name === node._type || schema.blockObjects.some((blockObject) => blockObject.name === node._type));\n}\nfunction isListItemActive({\n  editor,\n  listItem\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nfunction isStyleActive({\n  editor,\n  style\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => node.style === style) : !1;\n}\nfunction slateRangeToSelection({\n  schema,\n  editor,\n  range\n}) {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor\n  }), [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus\n  });\n  if (!anchorBlock || !focusBlock)\n    return null;\n  const [anchorChild] = anchorBlock._type === schema.block.name ? getPointChild({\n    editor,\n    point: range.anchor\n  }) : [void 0, void 0], [focusChild] = focusBlock._type === schema.block.name ? getPointChild({\n    editor,\n    point: range.focus\n  }) : [void 0, void 0], selection = {\n    anchor: {\n      path: [{\n        _key: anchorBlock._key\n      }],\n      offset: range.anchor.offset\n    },\n    focus: {\n      path: [{\n        _key: focusBlock._key\n      }],\n      offset: range.focus.offset\n    },\n    backward: slate__WEBPACK_IMPORTED_MODULE_14__.Range.isBackward(range)\n  };\n  return anchorChild && (selection.anchor.path.push(\"children\"), selection.anchor.path.push({\n    _key: anchorChild._key\n  })), focusChild && (selection.focus.path.push(\"children\"), selection.focus.path.push({\n    _key: focusChild._key\n  })), selection;\n}\nfunction getEventPosition({\n  editorActor,\n  slateEditor,\n  event\n}) {\n  if (editorActor.getSnapshot().matches({\n    setup: \"setting up\"\n  }))\n    return;\n  const eventNode = getEventNode({\n    slateEditor,\n    event\n  });\n  if (!eventNode)\n    return;\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode\n  }), eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event\n  }), eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event\n  });\n  if (eventBlock && eventPositionBlock && !eventSelection && !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(eventNode))\n    return {\n      block: eventPositionBlock,\n      isEditor: !1,\n      selection: {\n        anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        }),\n        focus: (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        })\n      }\n    };\n  if (!eventPositionBlock || !eventSelection)\n    return;\n  const eventSelectionFocusBlockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)(eventSelection.focus);\n  if (eventSelectionFocusBlockKey !== void 0)\n    return (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(eventSelection) && eventBlock && eventSelectionFocusBlockKey !== eventBlock._key ? {\n      block: eventPositionBlock,\n      isEditor: !1,\n      selection: {\n        anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        }),\n        focus: (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        })\n      }\n    } : {\n      block: eventPositionBlock,\n      isEditor: slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(eventNode),\n      selection: eventSelection\n    };\n}\nfunction getEventNode({\n  slateEditor,\n  event\n}) {\n  return slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.hasTarget(slateEditor, event.target) ? slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toSlateNode(slateEditor, event.target) : void 0;\n}\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event\n}) {\n  const [firstBlock] = getFirstBlock({\n    editor: slateEditor\n  });\n  if (!firstBlock)\n    return;\n  const firstBlockRect = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, firstBlock).getBoundingClientRect();\n  if (event.pageY < firstBlockRect.top)\n    return \"start\";\n  const [lastBlock] = getLastBlock({\n    editor: slateEditor\n  });\n  if (!lastBlock)\n    return;\n  const lastBlockRef = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, lastBlock).getBoundingClientRect();\n  if (event.pageY > lastBlockRef.bottom)\n    return \"end\";\n  const elementRect = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, node).getBoundingClientRect(), top = elementRect.top, height = elementRect.height;\n  return Math.abs(top - event.pageY) < height / 2 ? \"start\" : \"end\";\n}\nfunction getEventSelection({\n  schema,\n  slateEditor,\n  event\n}) {\n  const range = getSlateRangeFromEvent(slateEditor, event);\n  return range ? slateRangeToSelection({\n    schema,\n    editor: slateEditor,\n    range\n  }) : null;\n}\nfunction getSlateRangeFromEvent(editor, event) {\n  if (!event.target || !(0,slate_dom__WEBPACK_IMPORTED_MODULE_17__.isDOMNode)(event.target))\n    return;\n  const window2 = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.getWindow(editor);\n  let domRange;\n  if (window2.document.caretPositionFromPoint !== void 0) {\n    const position = window2.document.caretPositionFromPoint(event.clientX, event.clientY);\n    if (position)\n      try {\n        domRange = window2.document.createRange(), domRange.setStart(position.offsetNode, position.offset), domRange.setEnd(position.offsetNode, position.offset);\n      } catch {\n      }\n  } else if (window2.document.caretRangeFromPoint !== void 0)\n    domRange = window2.document.caretRangeFromPoint(event.clientX, event.clientY) ?? void 0;\n  else {\n    console.warn(\"Neither caretPositionFromPoint nor caretRangeFromPoint is supported\");\n    return;\n  }\n  if (!domRange)\n    return;\n  let range;\n  try {\n    range = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: !1,\n      // It can still throw even with this option set to true\n      suppressThrow: !1\n    });\n  } catch {\n  }\n  return range;\n}\nfunction normalizePoint(point, value) {\n  if (!point || !value)\n    return null;\n  const newPath = [];\n  let newOffset = point.offset || 0;\n  const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk) => blk._key === blockKey);\n  if (block)\n    newPath.push({\n      _key: block._key\n    });\n  else\n    return null;\n  if (block && point.path[1] === \"children\") {\n    if (!block.children || Array.isArray(block.children) && block.children.length === 0)\n      return null;\n    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);\n    if (child)\n      newPath.push(\"children\"), newPath.push({\n        _key: child._key\n      }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n    else\n      return null;\n  }\n  return {\n    path: newPath,\n    offset: newOffset\n  };\n}\nfunction normalizeSelection(selection, value) {\n  if (!selection || !value || value.length === 0)\n    return null;\n  let newAnchor = null, newFocus = null;\n  const {\n    anchor,\n    focus\n  } = selection;\n  return anchor && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n    _key: blk._key\n  }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n    _key: blk._key\n  }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n    anchor: newAnchor,\n    focus: newFocus,\n    backward: selection.backward\n  } : null;\n}\nfunction toSlateRange(snapshot) {\n  if (!snapshot.context.selection)\n    return null;\n  if ((0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(snapshot.context.selection.anchor, snapshot.context.selection.focus)) {\n    const anchorPoint2 = toSlateSelectionPoint(snapshot, snapshot.context.selection.anchor, snapshot.context.selection.backward ? \"forward\" : \"backward\");\n    return anchorPoint2 ? {\n      anchor: anchorPoint2,\n      focus: anchorPoint2\n    } : null;\n  }\n  const anchorPoint = toSlateSelectionPoint(snapshot, snapshot.context.selection.anchor, snapshot.context.selection.backward ? \"forward\" : \"backward\"), focusPoint = toSlateSelectionPoint(snapshot, snapshot.context.selection.focus, snapshot.context.selection.backward ? \"backward\" : \"forward\");\n  return !anchorPoint || !focusPoint ? null : {\n    anchor: anchorPoint,\n    focus: focusPoint\n  };\n}\nfunction toSlateSelectionPoint(snapshot, selectionPoint, direction) {\n  const blockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)(selectionPoint);\n  if (!blockKey)\n    return;\n  const blockIndex = snapshot.blockIndexMap.get(blockKey);\n  if (blockIndex === void 0)\n    return;\n  const block = snapshot.context.value.at(blockIndex);\n  if (!block)\n    return;\n  if (!(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, block))\n    return {\n      path: [blockIndex, 0],\n      offset: 0\n    };\n  let childKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getChildKeyFromSelectionPoint)({\n    path: selectionPoint.path\n  });\n  const spanSelectionPoint = childKey ? void 0 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      schema: snapshot.context.schema,\n      value: [block]\n    },\n    blockOffset: {\n      path: [{\n        _key: blockKey\n      }],\n      offset: selectionPoint.offset\n    },\n    direction\n  });\n  if (childKey = spanSelectionPoint ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getChildKeyFromSelectionPoint)(spanSelectionPoint) : childKey, !childKey)\n    return {\n      path: [blockIndex, 0],\n      offset: 0\n    };\n  let offset = spanSelectionPoint?.offset ?? selectionPoint.offset, childPath = [], childIndex = -1, pathChild;\n  for (const child of block.children)\n    if (childIndex++, child._key === childKey) {\n      pathChild = child, (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(snapshot.context, child) ? childPath = [childIndex] : (childPath = [childIndex, 0], offset = 0);\n      break;\n    }\n  return childPath.length === 0 ? {\n    path: [blockIndex, 0],\n    offset: 0\n  } : {\n    path: [blockIndex].concat(childPath),\n    offset: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(snapshot.context, pathChild) ? Math.min(pathChild.text.length, offset) : offset\n  };\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), EditorActorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nfunction DropIndicator() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { contentEditable: !1, className: \"pt-drop-indicator\", style: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 1,\n    borderBottom: \"1px solid currentColor\",\n    zIndex: 5\n  }, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {}) }), $[0] = t0) : t0 = $[0], t0;\n}\nfunction RenderDefaultBlockObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.blockObject._key || $[2] !== props.blockObject._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: t0, children: [\n    \"[\",\n    props.blockObject._type,\n    \": \",\n    props.blockObject._key,\n    \"]\"\n  ] }), $[1] = props.blockObject._key, $[2] = props.blockObject._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction RenderDefaultInlineObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.inlineObject._key || $[2] !== props.inlineObject._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { style: t0, children: [\n    \"[\",\n    props.inlineObject._type,\n    \": \",\n    props.inlineObject._key,\n    \"]\"\n  ] }), $[1] = props.inlineObject._key, $[2] = props.inlineObject._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction getDragSelection({\n  eventSelection,\n  snapshot\n}) {\n  let dragSelection = eventSelection;\n  if ((0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusInlineObject)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }))\n    return dragSelection;\n  const draggingCollapsedSelection = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)({\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }), draggedTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }), draggedSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusSpan)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  });\n  draggingCollapsedSelection && draggedTextBlock && draggedSpan && (dragSelection = {\n    anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: draggedTextBlock\n    }),\n    focus: (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: draggedTextBlock\n    })\n  });\n  const selectedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedBlocks)(snapshot);\n  if (snapshot.context.selection && (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionExpanded)(snapshot) && selectedBlocks.length > 1) {\n    const selectionStartBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionEndBlock)(snapshot);\n    if (!selectionStartBlock || !selectionEndBlock)\n      return dragSelection;\n    const selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: selectionStartBlock\n    }), selectionEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: selectionEndBlock\n    });\n    (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isOverlappingSelection)(eventSelection)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }) && (dragSelection = {\n      anchor: selectionStartPoint,\n      focus: selectionEndPoint\n    });\n  }\n  return dragSelection;\n}\nconst defaultKeyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nfunction createEditorPriority(config) {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference\n  };\n}\nconst corePriority = createEditorPriority({\n  name: \"core\"\n});\nfunction createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock\n}) {\n  return [{\n    behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n      on: \"drag.dragover\",\n      guard: ({\n        snapshot,\n        event\n      }) => {\n        const dropFocusBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusBlock)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: event.position.selection\n          }\n        });\n        if (!dropFocusBlock || dropFocusBlock.node._key !== key)\n          return !1;\n        const dragOrigin = event.dragOrigin;\n        if (!dragOrigin)\n          return !1;\n        const dragSelection = getDragSelection({\n          eventSelection: dragOrigin.selection,\n          snapshot\n        });\n        return (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedBlocks)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        }).some((draggedBlock) => draggedBlock.node._key === key) ? !1 : (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isSelectingEntireBlocks)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        });\n      },\n      actions: [({\n        event\n      }) => [{\n        type: \"effect\",\n        effect: () => {\n          onSetDragPositionBlock(event.position.block);\n        }\n      }]]\n    }),\n    priority: createEditorPriority({\n      reference: {\n        priority: corePriority,\n        importance: \"lower\"\n      }\n    })\n  }, {\n    behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n      on: \"drag.*\",\n      guard: ({\n        event\n      }) => event.type !== \"drag.dragover\",\n      actions: [({\n        event\n      }) => [{\n        type: \"effect\",\n        effect: () => {\n          onSetDragPositionBlock(void 0);\n        }\n      }, (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.forward)(event)]]\n    }),\n    priority: createEditorPriority({\n      reference: {\n        priority: corePriority,\n        importance: \"lower\"\n      }\n    })\n  }];\n}\nfunction useCoreBlockElementBehaviors(t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5), {\n    key,\n    onSetDragPositionBlock\n  } = t0, editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext);\n  let t1, t2;\n  $[0] !== editorActor || $[1] !== key || $[2] !== onSetDragPositionBlock ? (t1 = () => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock\n    });\n    for (const behaviorConfig of behaviorConfigs)\n      editorActor.send({\n        type: \"add behavior\",\n        behaviorConfig\n      });\n    return () => {\n      for (const behaviorConfig_0 of behaviorConfigs)\n        editorActor.send({\n          type: \"remove behavior\",\n          behaviorConfig: behaviorConfig_0\n        });\n    };\n  }, t2 = [editorActor, key, onSetDragPositionBlock], $[0] = editorActor, $[1] = key, $[2] = onSetDragPositionBlock, $[3] = t1, $[4] = t2) : (t1 = $[3], t2 = $[4]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t1, t2);\n}\nfunction RenderBlockObject(props) {\n  const [dragPositionBlock, setDragPositionBlock] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), blockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSelected)(), focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateSelector)((editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection));\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock\n  });\n  const legacySchemaType = props.legacySchema.blockObjects.find((schemaType) => schemaType.name === props.element._type);\n  legacySchemaType || console.error(`Unable to find Block Object \"${props.element._type}\" in Schema`);\n  const blockObject = props.blockObject ?? {\n    _key: props.element._key,\n    _type: props.element._type\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ...props.attributes, className: \"pt-block pt-object-block\", \"data-block-key\": props.element._key, \"data-block-name\": props.element._type, \"data-block-type\": \"object\", children: [\n    dragPositionBlock === \"start\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null,\n    props.children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: blockObjectRef, contentEditable: !1, draggable: !props.readOnly, children: props.renderBlock && legacySchemaType ? props.renderBlock({\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultBlockObject, { blockObject }),\n      editorElementRef: blockObjectRef,\n      focused,\n      path: [{\n        _key: props.element._key\n      }],\n      schemaType: legacySchemaType,\n      selected,\n      type: legacySchemaType,\n      value: blockObject\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultBlockObject, { blockObject }) }),\n    dragPositionBlock === \"end\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null\n  ] });\n}\nfunction RenderInlineObject(props) {\n  const inlineObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSelected)(), focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateSelector)((editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection)), legacySchemaType = props.legacySchema.inlineObjects.find((inlineObject) => inlineObject.name === props.element._type);\n  legacySchemaType || console.error(`Unable to find Inline Object \"${props.element._type}\" in Schema`);\n  const path = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.findPath(slateEditor, props.element), [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0\n    }\n  });\n  block || console.error(`Unable to find parent block of inline object ${props.element._key}`);\n  const inlineObject_0 = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...\"value\" in props.element && typeof props.element.value == \"object\" ? props.element.value : {}\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { ...props.attributes, draggable: !props.readOnly, className: \"pt-inline-object\", \"data-child-key\": inlineObject_0._key, \"data-child-name\": inlineObject_0._type, \"data-child-type\": \"object\", children: [\n    props.children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: inlineObjectRef, style: {\n      display: \"inline-block\"\n    }, children: props.renderChild && block && legacySchemaType ? props.renderChild({\n      annotations: [],\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultInlineObject, { inlineObject: inlineObject_0 }),\n      editorElementRef: inlineObjectRef,\n      selected,\n      focused,\n      path: [{\n        _key: block._key\n      }, \"children\", {\n        _key: props.element._key\n      }],\n      schemaType: legacySchemaType,\n      value: inlineObject_0,\n      type: legacySchemaType\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultInlineObject, { inlineObject: inlineObject_0 }) })\n  ] });\n}\nfunction RenderTextBlock(props) {\n  const [dragPositionBlock, setDragPositionBlock] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSelected)(), focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateSelector)((editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection));\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock\n  });\n  const listIndex = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateSelector)((editor_0) => editor_0.listIndexMap.get(props.textBlock._key));\n  let children = props.children;\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType = props.textBlock.style !== void 0 ? props.legacySchema.styles.find((style) => style.value === props.textBlock.style) : void 0;\n    legacyStyleSchemaType ? children = props.renderStyle({\n      block: props.textBlock,\n      children,\n      editorElementRef: blockRef,\n      focused,\n      path: [{\n        _key: props.textBlock._key\n      }],\n      schemaType: legacyStyleSchemaType,\n      selected,\n      value: props.textBlock.style\n    }) : console.error(`Unable to find Schema type for text block style ${props.textBlock.style}`);\n  }\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = props.legacySchema.lists.find((list) => list.value === props.textBlock.listItem);\n    legacyListItemSchemaType ? children = props.renderListItem({\n      block: props.textBlock,\n      children,\n      editorElementRef: blockRef,\n      focused,\n      level: props.textBlock.level ?? 1,\n      path: [{\n        _key: props.textBlock._key\n      }],\n      selected,\n      value: props.textBlock.listItem,\n      schemaType: legacyListItemSchemaType\n    }) : console.error(`Unable to find Schema type for text block list item ${props.textBlock.listItem}`);\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ...props.attributes, className: [\"pt-block\", \"pt-text-block\", ...props.textBlock.style ? [`pt-text-block-style-${props.textBlock.style}`] : [], ...props.textBlock.listItem ? [\"pt-list-item\", `pt-list-item-${props.textBlock.listItem}`, `pt-list-item-level-${props.textBlock.level ?? 1}`] : []].join(\" \"), spellCheck: props.spellCheck, \"data-block-key\": props.textBlock._key, \"data-block-name\": props.textBlock._type, \"data-block-type\": \"text\", ...props.textBlock.listItem !== void 0 ? {\n    \"data-list-item\": props.textBlock.listItem\n  } : {}, ...props.textBlock.level !== void 0 ? {\n    \"data-level\": props.textBlock.level\n  } : {}, ...props.textBlock.style !== void 0 ? {\n    \"data-style\": props.textBlock.style\n  } : {}, ...listIndex !== void 0 ? {\n    \"data-list-index\": listIndex\n  } : {}, children: [\n    dragPositionBlock === \"start\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: blockRef, children: props.renderBlock ? props.renderBlock({\n      children,\n      editorElementRef: blockRef,\n      focused,\n      level: props.textBlock.level,\n      listItem: props.textBlock.listItem,\n      path: [{\n        _key: props.textBlock._key\n      }],\n      selected,\n      schemaType: props.legacySchema.block,\n      style: props.textBlock.style,\n      type: props.legacySchema.block,\n      value: props.textBlock\n    }) : children }),\n    dragPositionBlock === \"end\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null\n  ] });\n}\nfunction RenderElement(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(34), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), schema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, _temp$1), legacySchema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, _temp2), slateStatic = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateStatic)();\n  if (\"__inline\" in props.element && props.element.__inline === !0) {\n    let t02;\n    return $[0] !== legacySchema || $[1] !== props.attributes || $[2] !== props.children || $[3] !== props.element || $[4] !== props.readOnly || $[5] !== props.renderChild || $[6] !== schema ? (t02 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderInlineObject, { attributes: props.attributes, element: props.element, legacySchema, readOnly: props.readOnly, renderChild: props.renderChild, schema, children: props.children }), $[0] = legacySchema, $[1] = props.attributes, $[2] = props.children, $[3] = props.element, $[4] = props.readOnly, $[5] = props.renderChild, $[6] = schema, $[7] = t02) : t02 = $[7], t02;\n  }\n  let block, t0;\n  if ($[8] !== props.element._key || $[9] !== schema || $[10] !== slateStatic.blockIndexMap || $[11] !== slateStatic.value) {\n    const blockIndex = slateStatic.blockIndexMap.get(props.element._key);\n    block = blockIndex !== void 0 ? slateStatic.value.at(blockIndex) : void 0, t0 = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n      schema\n    }, block), $[8] = props.element._key, $[9] = schema, $[10] = slateStatic.blockIndexMap, $[11] = slateStatic.value, $[12] = block, $[13] = t0;\n  } else\n    block = $[12], t0 = $[13];\n  if (t0) {\n    let t12;\n    return $[14] !== block || $[15] !== legacySchema || $[16] !== props.attributes || $[17] !== props.children || $[18] !== props.element || $[19] !== props.readOnly || $[20] !== props.renderBlock || $[21] !== props.renderListItem || $[22] !== props.renderStyle || $[23] !== props.spellCheck ? (t12 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderTextBlock, { attributes: props.attributes, element: props.element, legacySchema, readOnly: props.readOnly, renderBlock: props.renderBlock, renderListItem: props.renderListItem, renderStyle: props.renderStyle, spellCheck: props.spellCheck, textBlock: block, children: props.children }), $[14] = block, $[15] = legacySchema, $[16] = props.attributes, $[17] = props.children, $[18] = props.element, $[19] = props.readOnly, $[20] = props.renderBlock, $[21] = props.renderListItem, $[22] = props.renderStyle, $[23] = props.spellCheck, $[24] = t12) : t12 = $[24], t12;\n  }\n  let t1;\n  return $[25] !== block || $[26] !== legacySchema || $[27] !== props.attributes || $[28] !== props.children || $[29] !== props.element || $[30] !== props.readOnly || $[31] !== props.renderBlock || $[32] !== schema ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderBlockObject, { attributes: props.attributes, blockObject: block, element: props.element, legacySchema, readOnly: props.readOnly, renderBlock: props.renderBlock, schema, children: props.children }), $[25] = block, $[26] = legacySchema, $[27] = props.attributes, $[28] = props.children, $[29] = props.element, $[30] = props.readOnly, $[31] = props.renderBlock, $[32] = schema, $[33] = t1) : t1 = $[33], t1;\n}\nfunction _temp2(s_0) {\n  return s_0.context.getLegacySchema();\n}\nfunction _temp$1(s) {\n  return s.context.schema;\n}\nconst PortableTextEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null), usePortableTextEditor = () => {\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PortableTextEditorContext);\n  if (!editor)\n    throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n  return editor;\n}, forEachActor = (actorRef, callback) => {\n  callback(actorRef);\n  const children = actorRef.getSnapshot().children;\n  children && Object.values(children).forEach((child) => {\n    forEachActor(child, callback);\n  });\n};\nfunction stopActor(actorRef) {\n  const persistedSnapshots = [];\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()]), ref.observers = /* @__PURE__ */ new Set();\n  });\n  const systemSnapshot = actorRef.system.getSnapshot?.();\n  actorRef.stop(), actorRef.system._snapshot = systemSnapshot, persistedSnapshots.forEach(([ref, snapshot]) => {\n    ref._processingStatus = 0, ref._snapshot = snapshot;\n  });\n}\nconst converterJson = {\n  mimeType: \"application/json\",\n  serialize: ({\n    snapshot,\n    event\n  }) => {\n    const portableTextConverter = snapshot.context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.serialize({\n        snapshot,\n        event\n      }),\n      mimeType: \"application/json\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.failure\",\n      mimeType: \"application/json\",\n      originEvent: event.originEvent,\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  },\n  deserialize: ({\n    snapshot,\n    event\n  }) => {\n    const portableTextConverter = snapshot.context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.deserialize({\n        snapshot,\n        event\n      }),\n      mimeType: \"application/json\"\n    } : {\n      type: \"deserialization.failure\",\n      mimeType: \"application/json\",\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  }\n}, converterPortableText = {\n  mimeType: \"application/x-portable-text\",\n  serialize: ({\n    snapshot,\n    event\n  }) => {\n    if (!snapshot.context.selection)\n      return {\n        type: \"serialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        originEvent: event.originEvent,\n        reason: \"No selection\"\n      };\n    const blocks = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedValue)(snapshot);\n    return blocks.length === 0 ? {\n      type: \"serialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks serialized\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.success\",\n      data: JSON.stringify(blocks),\n      mimeType: \"application/x-portable-text\",\n      originEvent: event.originEvent\n    };\n  },\n  deserialize: ({\n    snapshot,\n    event\n  }) => {\n    const blocks = JSON.parse(event.data);\n    if (!Array.isArray(blocks))\n      return {\n        type: \"deserialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        reason: \"Data is not an array\"\n      };\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n        context: snapshot.context,\n        block,\n        options: {\n          refreshKeys: !1,\n          validateFields: !1\n        }\n      });\n      return parsedBlock ? [parsedBlock] : [];\n    });\n    return parsedBlocks.length === 0 && blocks.length > 0 ? {\n      type: \"deserialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks were parsed\"\n    } : {\n      type: \"deserialization.success\",\n      data: parsedBlocks,\n      mimeType: \"application/x-portable-text\"\n    };\n  }\n};\nfunction createConverterTextHtml(legacySchema) {\n  return {\n    mimeType: \"text/html\",\n    serialize: ({\n      snapshot,\n      event\n    }) => {\n      if (!snapshot.context.selection)\n        return {\n          type: \"serialization.failure\",\n          mimeType: \"text/html\",\n          originEvent: event.originEvent,\n          reason: \"No selection\"\n        };\n      const blocks = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedValue)(snapshot), html = (0,_portabletext_to_html__WEBPACK_IMPORTED_MODULE_24__.toHTML)(blocks, {\n        onMissingComponent: !1,\n        components: {\n          unknownType: ({\n            children\n          }) => children !== void 0 ? `${children}` : \"\"\n        }\n      });\n      return html === \"\" ? {\n        type: \"serialization.failure\",\n        mimeType: \"text/html\",\n        originEvent: event.originEvent,\n        reason: \"Serialized HTML is empty\"\n      } : {\n        type: \"serialization.success\",\n        data: html,\n        mimeType: \"text/html\",\n        originEvent: event.originEvent\n      };\n    },\n    deserialize: ({\n      snapshot,\n      event\n    }) => {\n      const parsedBlocks = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_25__.htmlToBlocks)(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode: legacySchema.block.options.unstable_whitespaceOnPasteMode\n      }).flatMap((block) => {\n        const parsedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: !1,\n            validateFields: !1\n          }\n        });\n        return parsedBlock ? [parsedBlock] : [];\n      });\n      return parsedBlocks.length === 0 ? {\n        type: \"deserialization.failure\",\n        mimeType: \"text/html\",\n        reason: \"No blocks deserialized\"\n      } : {\n        type: \"deserialization.success\",\n        data: parsedBlocks,\n        mimeType: \"text/html\"\n      };\n    }\n  };\n}\nfunction createConverterTextPlain(legacySchema) {\n  return {\n    mimeType: \"text/plain\",\n    serialize: ({\n      snapshot,\n      event\n    }) => snapshot.context.selection ? {\n      type: \"serialization.success\",\n      data: (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedValue)(snapshot).map((block) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, block) ? block.children.map((child) => child._type === snapshot.context.schema.span.name ? child.text : event.originEvent === \"drag.dragstart\" ? `[${snapshot.context.schema.inlineObjects.find((inlineObjectType) => inlineObjectType.name === child._type)?.title ?? \"Object\"}]` : \"\").join(\"\") : event.originEvent === \"drag.dragstart\" ? `[${snapshot.context.schema.blockObjects.find((blockObjectType) => blockObjectType.name === block._type)?.title ?? \"Object\"}]` : \"\").filter((block) => block !== \"\").join(`\n\n`),\n      mimeType: \"text/plain\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.failure\",\n      mimeType: \"text/plain\",\n      originEvent: event.originEvent,\n      reason: \"No selection\"\n    },\n    deserialize: ({\n      snapshot,\n      event\n    }) => {\n      const textToHtml = `<html><body>${escapeHtml(event.data).split(/\\n{2,}/).map((line) => line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`, parsedBlocks = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_25__.htmlToBlocks)(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator\n      }).flatMap((block) => {\n        const parsedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: !1,\n            validateFields: !1\n          }\n        });\n        return parsedBlock ? [parsedBlock] : [];\n      });\n      return parsedBlocks.length === 0 ? {\n        type: \"deserialization.failure\",\n        mimeType: \"text/plain\",\n        reason: \"No blocks deserialized\"\n      } : {\n        type: \"deserialization.success\",\n        data: parsedBlocks,\n        mimeType: \"text/plain\"\n      };\n    }\n  };\n}\nconst entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s) => entityMap[s]);\n}\nfunction createCoreConverters(legacySchema) {\n  return [converterJson, converterPortableText, createConverterTextHtml(legacySchema), createConverterTextPlain(legacySchema)];\n}\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_26__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst levelIndexMaps = /* @__PURE__ */ new Map();\nfunction buildIndexMaps(context, {\n  blockIndexMap,\n  listIndexMap\n}) {\n  blockIndexMap.clear(), listIndexMap.clear(), levelIndexMaps.clear();\n  let previousListItem;\n  for (let blockIndex = 0; blockIndex < context.value.length; blockIndex++) {\n    const block = context.value.at(blockIndex);\n    if (block === void 0)\n      continue;\n    if (blockIndexMap.set(block._key, blockIndex), !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(context, block)) {\n      levelIndexMaps.clear(), previousListItem = void 0;\n      continue;\n    }\n    if (block.listItem === void 0 || block.level === void 0) {\n      levelIndexMaps.clear(), previousListItem = void 0;\n      continue;\n    }\n    if (!previousListItem) {\n      const levelIndexMap2 = levelIndexMaps.get(block.listItem) ?? /* @__PURE__ */ new Map();\n      levelIndexMap2.set(block.level, 1), levelIndexMaps.set(block.listItem, levelIndexMap2), listIndexMap.set(block._key, 1), previousListItem = {\n        listItem: block.listItem,\n        level: block.level\n      };\n      continue;\n    }\n    if (previousListItem.listItem === block.listItem && previousListItem.level < block.level) {\n      const levelIndexMap2 = levelIndexMaps.get(block.listItem) ?? /* @__PURE__ */ new Map();\n      levelIndexMap2.set(block.level, 1), levelIndexMaps.set(block.listItem, levelIndexMap2), listIndexMap.set(block._key, 1), previousListItem = {\n        listItem: block.listItem,\n        level: block.level\n      };\n      continue;\n    }\n    levelIndexMaps.forEach((levelIndexMap2, listItem) => {\n      listItem !== block.listItem && levelIndexMap2.set(block.level, 0);\n    });\n    const levelIndexMap = levelIndexMaps.get(block.listItem) ?? /* @__PURE__ */ new Map(), levelCounter = levelIndexMap.get(block.level) ?? 0;\n    levelIndexMap.set(block.level, levelCounter + 1), listIndexMap.set(block._key, levelCounter + 1), previousListItem = {\n      listItem: block.listItem,\n      level: block.level\n    };\n  }\n}\nfunction createPlaceholderBlock(context) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? \"normal\",\n    markDefs: [],\n    children: [{\n      _type: context.schema.span.name,\n      _key: context.keyGenerator(),\n      text: \"\",\n      marks: []\n    }]\n  };\n}\nconst insertTextOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const snapshot = {\n    blockIndexMap: operation.editor.blockIndexMap,\n    context: {\n      value: operation.editor.value,\n      selection: operation.editor.selection ? slateRangeToSelection({\n        schema: context.schema,\n        editor: operation.editor,\n        range: operation.editor.selection\n      }) : null,\n      schema: context.schema,\n      keyGenerator: context.keyGenerator,\n      converters: [],\n      readOnly: !1\n    },\n    decoratorState: operation.editor.decoratorState\n  }, markState = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getMarkState)(snapshot), activeDecorators = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getActiveDecorators)(snapshot), activeAnnotations = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getActiveAnnotationsMarks)(snapshot), [focusSpan] = getFocusSpan({\n    editor: operation.editor\n  });\n  if (!focusSpan) {\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertText(operation.editor, operation.text);\n    return;\n  }\n  if (markState && markState.state === \"unchanged\") {\n    const markStateDecorators = (markState.marks ?? []).filter((mark) => context.schema.decorators.map((decorator) => decorator.name).includes(mark));\n    if (markStateDecorators.length === activeDecorators.length && markStateDecorators.every((mark) => activeDecorators.includes(mark))) {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertText(operation.editor, operation.text);\n      return;\n    }\n  }\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations]\n  }), slate_dom__WEBPACK_IMPORTED_MODULE_17__.EDITOR_TO_PENDING_SELECTION.set(operation.editor, operation.editor.selection), operation.editor.decoratorState = {};\n};\nfunction getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let previousSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath, {\n    reverse: !0\n  }))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isBefore(childPath, spanPath)) {\n      previousSpan = child;\n      break;\n    }\n  return previousSpan;\n}\nfunction getNextSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let nextSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isAfter(childPath, spanPath)) {\n      nextSpan = child;\n      break;\n    }\n  return nextSpan;\n}\nfunction withRemoteChanges(editor, fn) {\n  const prev = isChangingRemotely(editor) || !1;\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n  const prev = isUndoing(editor);\n  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n  return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n  IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n  const prev = isRedoing(editor);\n  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n  return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n  IS_REDOING.set(editor, isRedoing2);\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n  let t1;\n  return $[0] !== editor || $[1] !== selector ? (t1 = (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: editor._internal.slateEditor.instance\n    });\n    return selector(snapshot);\n  }, $[0] = editor, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editor._internal.editorActor, t1, compare);\n}\nfunction getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return {\n    blockIndexMap: slateEditorInstance.blockIndexMap,\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value\n    },\n    decoratorState: slateEditorInstance.decoratorState\n  };\n}\nconst debug$e = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor, decorators = editorActor.getSnapshot().context.schema.decorators.map((t) => t.name);\n    return editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry;\n      if (editor.isTextBlock(node)) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path);\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1];\n          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark) => nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark) => child.marks?.includes(mark))) {\n            debug$e(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: !0\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug$e(\"Adding .markDefs to block node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          markDefs: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug$e(\"Adding .marks to span node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, blockPath), decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), annotations = node.marks?.filter((mark) => !decorators2.includes(mark));\n        if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n          debug$e(\"Removing annotations from empty span node\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            marks: node.marks?.filter((mark) => decorators2.includes(mark))\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name);\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path))\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));\n            if (orphanedAnnotations.length > 0) {\n              debug$e(\"Removing orphaned annotations from span node\"), editorActor.send({\n                type: \"normalizing\"\n              }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n                marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n              }, {\n                at: childPath\n              }), editorActor.send({\n                type: \"done normalizing\"\n              });\n              return;\n            }\n          }\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, blockPath);\n        if (editor.isTextBlock(block)) {\n          const decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));\n          if (orphanedAnnotations.length > 0) {\n            debug$e(\"Removing orphaned annotations from span node\"), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n            }, {\n              at: path\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n        for (const markDef of markDefs)\n          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n        if (markDefs.length !== newMarkDefs.length) {\n          debug$e(\"Removing duplicate markDefs\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node) && !editor.operations.some((op) => op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n        if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(newMarkDefs, node.markDefs)) {\n          debug$e(\"Removing markDef not in use\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      normalizeNode(nodeEntry);\n    }, editor.apply = (op) => {\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"set_selection\" && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n        const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed({\n          anchor: op.properties.anchor,\n          focus: op.properties.focus\n        }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed({\n          anchor: op.newProperties.anchor,\n          focus: op.newProperties.focus\n        });\n        if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n          const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.properties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.newProperties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n          !movedToNextSpan && !movedToPreviousSpan && (editor.decoratorState = {});\n        }\n      }\n      if (op.type === \"insert_node\") {\n        const {\n          selection\n        } = editor;\n        if (selection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n            depth: 1\n          }), previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path\n          }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1]\n          }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation) => !nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;\n          if (atTheEndOfAnnotation && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(editorActor.getSnapshot().context, op.node) && op.node.marks?.some((mark) => annotationsEnding.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: op.node.marks?.filter((mark) => !annotationsEnding.includes(mark)) ?? []\n            });\n            return;\n          }\n          const annotationsStarting = nextSpanAnnotations?.filter((annotation) => !previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;\n          if (atTheStartOfAnnotation && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(editorActor.getSnapshot().context, op.node) && op.node.marks?.some((mark) => annotationsStarting.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: op.node.marks?.filter((mark) => !annotationsStarting.includes(mark)) ?? []\n            });\n            return;\n          }\n          const nextSpanDecorators = nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? [];\n          if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(editorActor.getSnapshot().context, op.node) && op.node.marks?.length === 0) {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"insert_text\") {\n        const snapshot = getEditorSnapshot({\n          editorActorSnapshot: editorActor.getSnapshot(),\n          slateEditorInstance: editor\n        }), markState = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getMarkState)(snapshot);\n        if (!markState) {\n          apply2(op);\n          return;\n        }\n        if (markState.state === \"unchanged\") {\n          apply2(op);\n          return;\n        }\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n          _type: \"span\",\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: markState.marks\n        });\n        return;\n      }\n      if (op.type === \"remove_text\") {\n        const {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection)) {\n          const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: {\n              path: op.path,\n              offset: op.offset\n            },\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0];\n          if (span && block && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(editorActor.getSnapshot().context, block)) {\n            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark) => markDefs.find((markDef) => markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), nextSpan = getNextSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1;\n            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor\n              });\n              slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n                apply2(op), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n                  marks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getActiveDecorators)(snapshot)\n                }, {\n                  at: op.path\n                });\n              }), editor.onChange();\n              return;\n            }\n          }\n        }\n      }\n      if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === editorActor.getSnapshot().context.schema.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n        const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, [op.path[0] - 1]);\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__([...oldDefs, ...op.properties.markDefs]);\n          debug$e(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: targetPath,\n            voids: !1\n          }), apply2(op);\n          return;\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst removeDecoratorOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, mark = operation.decorator, {\n    selection\n  } = editor;\n  if (selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection))\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n        split: !0,\n        hanging: !0\n      }), editor.selection && [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText\n      })].forEach(([node, path]) => {\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),\n          _type: \"span\"\n        }, {\n          at: path\n        });\n      });\n    else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else\n        editor.decoratorState[mark] = !1;\n    }\n    if (editor.selection) {\n      const selection2 = editor.selection;\n      editor.selection = {\n        ...selection2\n      };\n    }\n  }\n};\nfunction cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1) return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); ) x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;\n      else if (y1 > text2Length) k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); ) x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;\n      else if (y2 > text2Length) k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n    checkLines: !1,\n    deadline\n  }), diffsb = doDiff(text1b, text2b, {\n    checkLines: !1,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0) return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2) return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch) throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++) text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) return [[DIFF_INSERT, text2]];\n  if (!text2) return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1) return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1) return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2) return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText2] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText2, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++) diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; ) switch (diffs[pointer][0]) {\n    case DIFF_INSERT:\n      countInsert++, textInsert += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_DELETE:\n      countDelete++, textDelete += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_EQUAL:\n      countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n      break;\n    default:\n      throw new Error(\"Unknown diff operation\");\n  }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; ) diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1) throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; ) getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);\n        else break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null) throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern) return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++) lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\") throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\") return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) adjusted.push({\n    diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n    start1: advanceTo(patch.start1),\n    start2: advanceTo(patch.start2),\n    utf8Start1: patch.utf8Start1,\n    utf8Start2: patch.utf8Start2,\n    length1: patch.length1,\n    length2: patch.length2,\n    utf8Length1: patch.utf8Length1,\n    utf8Length2: patch.utf8Length2\n  });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) nullPadding += String.fromCharCode(x);\n  for (const p of patches) p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\") throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0) return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, {\n          checkLines: !1\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\") break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\") patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \") patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nconst CURRENT_UNDO_STEP = /* @__PURE__ */ new WeakMap();\nfunction withUndoStep(editor, fn) {\n  const current = CURRENT_UNDO_STEP.get(editor);\n  if (current) {\n    fn();\n    return;\n  }\n  CURRENT_UNDO_STEP.set(editor, current ?? {\n    undoStepId: defaultKeyGenerator()\n  }), fn(), CURRENT_UNDO_STEP.set(editor, void 0);\n}\nfunction getCurrentUndoStepId(editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId;\n}\nconst debug$d = debugWithName(\"plugin:withUndoRedo\"), SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {\n  const state = SAVING.get(editor);\n  return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n  const {\n    editorActor\n  } = options;\n  return (editor) => {\n    let previousSnapshot = fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name);\n    const remotePatches = getRemotePatches(editor);\n    let previousUndoStepId = getCurrentUndoStepId(editor);\n    options.subscriptions.push(() => {\n      debug$d(\"Subscribing to patches\");\n      const sub = editorActor.on(\"patches\", ({\n        patches,\n        snapshot\n      }) => {\n        let reset = !1;\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== \"local\" && remotePatches) {\n            if (patch.type === \"unset\" && patch.path.length === 0) {\n              debug$d(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                undos: [],\n                redos: []\n              }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n              return;\n            }\n            remotePatches.push({\n              patch,\n              time: /* @__PURE__ */ new Date(),\n              snapshot,\n              previousSnapshot\n            });\n          }\n        }), previousSnapshot = snapshot;\n      });\n      return () => {\n        debug$d(\"Unsubscribing to patches\"), sub.unsubscribe();\n      };\n    }), editor.history = {\n      undos: [],\n      redos: []\n    };\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      const {\n        operations,\n        history\n      } = editor, {\n        undos\n      } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor), currentUndoStepId = getCurrentUndoStepId(editor);\n      let merge = currentUndoStepId === previousUndoStepId;\n      if (save) {\n        if (step ? operations.length === 0 && (merge = currentUndoStepId === void 0 && previousUndoStepId === void 0 ? shouldMerge(op, lastOp) || overwrite : merge) : merge = !1, step && merge)\n          step.operations.push(op);\n        else {\n          const newStep = {\n            operations: [...editor.selection === null ? [] : [createSelectOperation(editor)], op],\n            timestamp: /* @__PURE__ */ new Date()\n          };\n          undos.push(newStep), debug$d(\"Created new undo step\", step);\n        }\n        for (; undos.length > UNDO_STEP_LIMIT; )\n          undos.shift();\n        shouldClear(op) && (history.redos = []);\n      }\n      previousUndoStepId = currentUndoStepId, apply2(op);\n    }, editor;\n  };\n}\nconst historyUndoOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, {\n    undos\n  } = editor.history, remotePatches = getRemotePatches(editor);\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1];\n    if (debug$d(\"Undoing\", step), step.operations.length > 0) {\n      const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n      let transformedOperations = step.operations;\n      otherPatches.forEach((item) => {\n        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n      });\n      const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_14__.Operation.inverse).reverse();\n      try {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op);\n              });\n            });\n          });\n        });\n      } catch (err) {\n        debug$d(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.history = {\n          undos: [],\n          redos: []\n        }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n        return;\n      }\n      editor.history.redos.push(step), editor.history.undos.pop();\n    }\n  }\n}, historyRedoOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, {\n    redos\n  } = editor.history, remotePatches = getRemotePatches(editor);\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1];\n    if (debug$d(\"Redoing\", step), step.operations.length > 0) {\n      const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n      let transformedOperations = step.operations;\n      otherPatches.forEach((item) => {\n        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n      });\n      try {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op);\n              });\n            });\n          });\n        });\n      } catch (err) {\n        debug$d(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.history = {\n          undos: [],\n          redos: []\n        }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n        return;\n      }\n      editor.history.undos.push(step), editor.history.redos.pop();\n    }\n  }\n};\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (patch.type === \"insert\" && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: blk._key\n    }, patch.path[0]));\n    return debug$d(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: blk._key\n    }, patch.path[0]));\n    return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$d(\"Skipping transformation that targeted removed block\"), []) : [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 0)\n    return debug$d(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n  if (patch.type === \"diffMatchPatch\") {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n    return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: operationTargetBlock._key\n    }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {\n      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n      const {\n        diffs\n      } = diffPatch;\n      if (diffs.forEach((diff2, index) => {\n        const [diffType, text] = diff2;\n        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));\n      }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n          ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n          ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n          ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n          ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor\n        }));\n      }\n    }), [transformedOperation]);\n  }\n  return [transformedOperation];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)];\n    transformedOperation.path = newPath;\n  }\n  if (transformedOperation.type === \"set_selection\") {\n    const currentFocus = transformedOperation.properties?.focus ? {\n      ...transformedOperation.properties.focus\n    } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n      ...transformedOperation.properties.anchor\n    } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n      ...transformedOperation.newProperties.focus\n    } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n      ...transformedOperation.newProperties.anchor\n    } : void 0;\n    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);\n    }), currentFocus && currentAnchor && (transformedOperation.properties = {\n      focus: currentFocus,\n      anchor: currentAnchor\n    }), newFocus && newAnchor && (transformedOperation.newProperties = {\n      focus: newFocus,\n      anchor: newAnchor\n    }));\n  }\n  return transformedOperation;\n}\nconst shouldMerge = (op, prev) => !!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op) => op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n  const prev = isSaving(editor);\n  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n  return {\n    type: \"set_selection\",\n    properties: {\n      ...editor.selection\n    },\n    newProperties: {\n      ...editor.selection\n    }\n  };\n}\nfunction findOperationTargetBlock(editor, operation) {\n  let block;\n  return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst addAnnotationOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const parsedAnnotation = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseAnnotation)({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value\n    },\n    context,\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!parsedAnnotation)\n    throw new Error(`Failed to parse annotation ${JSON.stringify(operation.annotation)}`);\n  const editor = operation.editor;\n  if (!editor.selection || slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection))\n    return;\n  let paths, spanPath, markDefPath;\n  const markDefPaths = [], selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: slate__WEBPACK_IMPORTED_MODULE_14__.Range.isBackward(editor.selection)\n  });\n  let blockIndex = 0;\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\")\n      continue;\n    const annotationKey = blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator(), markDefs = block.markDefs ?? [];\n    markDefs.find((markDef) => markDef._type === parsedAnnotation._type && markDef._key === annotationKey) === void 0 && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n      markDefs: [...markDefs, {\n        ...parsedAnnotation,\n        _key: annotationKey\n      }]\n    }, {\n      at: blockPath\n    }), markDefPath = [{\n      _key: block._key\n    }, \"markDefs\", {\n      _key: annotationKey\n    }], slate__WEBPACK_IMPORTED_MODULE_14__.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n      match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n      split: !0\n    });\n    const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath);\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(editor.selection, path))\n        continue;\n      const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark) => markDefs.some((markDef) => markDef._key === mark && markDef._type === parsedAnnotation._type));\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        marks: [...marks.filter((mark) => !existingSameTypeAnnotations.includes(mark)), annotationKey]\n      }, {\n        at: path\n      }), spanPath = [{\n        _key: block._key\n      }, \"children\", {\n        _key: span._key\n      }];\n    }\n    blockIndex++;\n  }\n  return markDefPath && spanPath && (paths = {\n    markDefPath,\n    markDefPaths,\n    spanPath\n  }), paths;\n}, removeAnnotationOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor;\n  if (editor.selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection)) {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection, {\n        depth: 1\n      });\n      if (!editor.isTextBlock(block))\n        return;\n      const potentialAnnotations = (block.markDefs ?? []).filter((markDef) => markDef._type === operation.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection, {\n        depth: 2\n      });\n      if (!editor.isTextSpan(selectedChild))\n        return;\n      const annotationToRemove = selectedChild.marks?.find((mark) => potentialAnnotations.some((markDef) => markDef._key === mark));\n      if (!annotationToRemove)\n        return;\n      const previousSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath, {\n        reverse: !0\n      }))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isBefore(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            previousSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      const nextSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isAfter(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            nextSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      for (const [child, childPath] of [...previousSpansWithSameAnnotation, [selectedChild, selectedChildPath], ...nextSpansWithSameAnnotation])\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove)\n        }, {\n          at: childPath\n        });\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n        match: (node) => editor.isTextSpan(node),\n        split: !0,\n        hanging: !0\n      });\n      const blocks = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node)\n      });\n      for (const [block, blockPath] of blocks) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath);\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(editor.selection, childPath))\n            continue;\n          const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find((markDef2) => markDef2._key === mark)?._type !== operation.annotation.name);\n          marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            marks: marksWithoutAnnotation\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n}, blockSetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const block = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(operation.editor, location, {\n    depth: 1\n  })?.[0];\n  if (!block)\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`);\n  const parsedBlock = fromSlateValue([block], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(operation.editor)).at(0);\n  if (!parsedBlock)\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`);\n  const {\n    _type,\n    ...filteredProps\n  } = operation.props, updatedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps\n    },\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!updatedBlock)\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema\n  })?.at(0);\n  if (!slateBlock)\n    throw new Error(\"Unable to convert block to Slate value\");\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, slateBlock, {\n    at: location\n  });\n}, blockUnsetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const block = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(operation.editor, location, {\n    depth: 1\n  })?.[0];\n  if (!block)\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`);\n  const parsedBlock = fromSlateValue([block], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(operation.editor)).at(0);\n  if (!parsedBlock)\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`);\n  if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== \"_type\"), updatedTextBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n      context,\n      block: lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__(parsedBlock, propsToRemove),\n      options: {\n        refreshKeys: !1,\n        validateFields: !0\n      }\n    });\n    if (!updatedTextBlock)\n      throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n    const propsToSet = {};\n    for (const prop of propsToRemove)\n      prop in updatedTextBlock ? propsToSet[prop] = updatedTextBlock[prop] : propsToSet[prop] = void 0;\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, propsToSet, {\n      at: location\n    });\n    return;\n  }\n  const updatedBlockObject = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n    context,\n    block: lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__(parsedBlock, operation.props.filter((prop) => prop !== \"_type\")),\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!updatedBlockObject)\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n  const {\n    _type,\n    _key,\n    ...props\n  } = updatedBlockObject;\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n    _type,\n    _key,\n    value: props\n  }, {\n    at: location\n  });\n}, childSetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const childEntry = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(operation.editor, location, {\n    depth: 2\n  }), child = childEntry?.[0], childPath = childEntry?.[1];\n  if (!child || !childPath)\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`);\n  if (operation.editor.isTextSpan(child)) {\n    const {\n      _type,\n      text,\n      ...rest\n    } = operation.props;\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n      ...child,\n      ...rest\n    }, {\n      at: childPath\n    }), typeof text == \"string\" && child.text !== text && (operation.editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset: 0,\n      text: child.text\n    }), operation.editor.apply({\n      type: \"insert_text\",\n      path: childPath,\n      offset: 0,\n      text\n    }));\n    return;\n  }\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(child)) {\n    const definition = context.schema.inlineObjects.find((definition2) => definition2.name === child._type);\n    if (!definition)\n      throw new Error(`Unable to find schema definition for Inline Object type ${child._type}`);\n    const value = \"value\" in child && typeof child.value == \"object\" ? child.value : {}, {\n      _type,\n      _key,\n      ...rest\n    } = operation.props;\n    for (const prop in rest)\n      definition.fields.some((field) => field.name === prop) || delete rest[prop];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n      ...child,\n      _key: typeof _key == \"string\" ? _key : child._key,\n      value: {\n        ...value,\n        ...rest\n      }\n    }, {\n      at: childPath\n    });\n    return;\n  }\n  throw new Error(`Unable to determine the type of child at ${JSON.stringify(operation.at)}`);\n}, childUnsetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const childEntry = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(operation.editor, location, {\n    depth: 2\n  }), child = childEntry?.[0], childPath = childEntry?.[1];\n  if (!child || !childPath)\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`);\n  if (operation.editor.isTextSpan(child)) {\n    operation.props.includes(\"text\") && operation.editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset: 0,\n      text: child.text\n    });\n    const newNode = {};\n    for (const prop of operation.props)\n      if (prop !== \"_type\") {\n        if (prop === \"_key\") {\n          newNode._key = context.keyGenerator();\n          continue;\n        }\n        newNode[prop] = null;\n      }\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, newNode, {\n      at: childPath\n    });\n    return;\n  }\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(child)) {\n    const value = \"value\" in child && typeof child.value == \"object\" ? child.value : {}, patches = operation.props.map((prop) => ({\n      type: \"unset\",\n      path: [prop]\n    })), newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.applyAll)(value, patches);\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n      ...child,\n      _key: operation.props.includes(\"_key\") ? context.keyGenerator() : child._key,\n      value: newValue\n    }, {\n      at: childPath\n    });\n    return;\n  }\n  throw new Error(`Unable to determine the type of child at ${JSON.stringify(operation.at)}`);\n}, decoratorAddOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const editor = operation.editor, mark = operation.decorator, value = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), manualAnchor = operation.at?.anchor ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      ...context,\n      value\n    },\n    blockOffset: operation.at.anchor,\n    direction: \"backward\"\n  }) : void 0, manualFocus = operation.at?.focus ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      ...context,\n      value\n    },\n    blockOffset: operation.at.focus,\n    direction: \"forward\"\n  }) : void 0, manualSelection = manualAnchor && manualFocus ? {\n    anchor: manualAnchor,\n    focus: manualFocus\n  } : void 0, selection = manualSelection ? toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: manualSelection\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  }) ?? editor.selection : editor.selection;\n  if (!selection)\n    return;\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection\n  }), anchorOffset = editorSelection ? (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_28__.selectionPointToBlockOffset)({\n    context: {\n      ...context,\n      value\n    },\n    selectionPoint: editorSelection.anchor\n  }) : void 0, focusOffset = editorSelection ? (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_28__.selectionPointToBlockOffset)({\n    context: {\n      ...context,\n      value\n    },\n    selectionPoint: editorSelection.focus\n  }) : void 0;\n  if (!anchorOffset || !focusOffset)\n    throw new Error(\"Unable to find anchor or focus offset\");\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection)) {\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n      at: selection,\n      match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n      split: !0,\n      hanging: !0\n    });\n    const newValue = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), newSelection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_29__.blockOffsetsToSelection)({\n      context: {\n        ...context,\n        value: newValue\n      },\n      offsets: {\n        anchor: anchorOffset,\n        focus: focusOffset\n      },\n      backward: editorSelection?.backward\n    }), trimmedSelection = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getTrimmedSelection)({\n      blockIndexMap: editor.blockIndexMap,\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: !1,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue\n      },\n      decoratorState: editor.decoratorState\n    });\n    if (!trimmedSelection)\n      throw new Error(\"Unable to find trimmed selection\");\n    const newRange = toSlateRange({\n      context: {\n        schema: context.schema,\n        value: operation.editor.value,\n        selection: trimmedSelection\n      },\n      blockIndexMap: operation.editor.blockIndexMap\n    });\n    if (!newRange)\n      throw new Error(\"Unable to find new selection\");\n    const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(newRange) ? [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n      at: newRange,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node)\n    })] : [];\n    for (const [node, path] of splitTextNodes) {\n      const marks = [...(Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark), mark];\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        marks\n      }, {\n        at: path,\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n        split: !0,\n        hanging: !0\n      });\n    }\n  } else {\n    if (!Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n      at: selection,\n      match: (node) => editor.isTextSpan(node)\n    }))?.at(0))\n      return;\n    const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n      depth: 1\n    }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark) => existingMark !== mark);\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator\n      }, {\n        at: blockPath,\n        match: (node) => editor.isTextSpan(node)\n      });\n    } else\n      editor.decoratorState[mark] = !0;\n  }\n  if (editor.selection) {\n    const selection2 = editor.selection;\n    editor.selection = {\n      ...selection2\n    };\n  }\n}, deleteOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const anchorBlockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)(operation.at.anchor), focusBlockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)(operation.at.focus), startBlockKey = operation.at.backward ? focusBlockKey : anchorBlockKey, endBlockKey = operation.at.backward ? anchorBlockKey : focusBlockKey, endOffset = operation.at.backward ? operation.at.focus.offset : operation.at.anchor.offset;\n  if (!startBlockKey)\n    throw new Error(\"Failed to get start block key\");\n  if (!endBlockKey)\n    throw new Error(\"Failed to get end block key\");\n  const startBlockIndex = operation.editor.blockIndexMap.get(startBlockKey);\n  if (startBlockIndex === void 0)\n    throw new Error(\"Failed to get start block index\");\n  const startBlock = operation.editor.value.at(startBlockIndex);\n  if (!startBlock)\n    throw new Error(\"Failed to get start block\");\n  const endBlockIndex = operation.editor.blockIndexMap.get(endBlockKey);\n  if (endBlockIndex === void 0)\n    throw new Error(\"Failed to get end block index\");\n  const endBlock = operation.editor.value.at(endBlockIndex);\n  if (!endBlock)\n    throw new Error(\"Failed to get end block\");\n  const anchorBlockPath = anchorBlockKey !== void 0 ? getBlockPath({\n    editor: operation.editor,\n    _key: anchorBlockKey\n  }) : void 0, focusBlockPath = focusBlockKey !== void 0 ? getBlockPath({\n    editor: operation.editor,\n    _key: focusBlockKey\n  }) : void 0;\n  if (operation.at.anchor.path.length === 1 && operation.at.focus.path.length === 1 && anchorBlockPath && focusBlockPath && anchorBlockPath[0] === focusBlockPath[0]) {\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(operation.editor, {\n      at: [anchorBlockPath[0]]\n    }), operation.editor.children.length === 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(operation.editor, createPlaceholderBlock(context));\n    return;\n  }\n  const range = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!range)\n    throw new Error(`Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`);\n  const hanging = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(context, endBlock) && endOffset === 0;\n  (0,slate__WEBPACK_IMPORTED_MODULE_14__.deleteText)(operation.editor, {\n    at: range,\n    reverse: operation.direction === \"backward\",\n    unit: operation.unit,\n    hanging\n  }), operation.editor.selection && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(context, startBlock) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(context, endBlock) && (0,slate__WEBPACK_IMPORTED_MODULE_14__.setSelection)(operation.editor, {\n    anchor: operation.editor.selection.focus,\n    focus: operation.editor.selection.focus\n  });\n}, insertInlineObjectOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const parsedInlineObject = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseInlineObject)({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...operation.inlineObject.value ?? {}\n    },\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!parsedInlineObject)\n    throw new Error(`Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`);\n  if (!operation.editor.selection) {\n    console.error(\"Unable to insert inline object without selection\");\n    return;\n  }\n  const [focusTextBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(operation.editor, {\n    at: operation.editor.selection.focus.path,\n    match: (node) => operation.editor.isTextBlock(node)\n  })).at(0) ?? [void 0, void 0];\n  if (!focusTextBlock) {\n    console.error(\"Unable to perform action without focus text block\");\n    return;\n  }\n  const child = toSlateValue([{\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    children: [parsedInlineObject]\n  }], {\n    schemaTypes: context.schema\n  }).at(0)?.children.at(0);\n  if (!child) {\n    console.error(\"Unable to insert inline object\");\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(operation.editor, child);\n}, insertSpanOperationImplementation = ({\n  context,\n  operation\n}) => {\n  if (!operation.editor.selection) {\n    console.error(\"Unable to perform action without selection\", operation);\n    return;\n  }\n  const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(operation.editor, {\n    at: operation.editor.selection.focus.path,\n    match: (node) => operation.editor.isTextBlock(node)\n  }))[0] ?? [void 0, void 0];\n  if (!focusBlock || !focusBlockPath) {\n    console.error(\"Unable to perform action without focus block\", operation);\n    return;\n  }\n  const markDefs = focusBlock.markDefs ?? [], annotations = operation.annotations ? operation.annotations.map((annotation) => ({\n    _type: annotation.name,\n    _key: context.keyGenerator(),\n    ...annotation.value\n  })) : void 0;\n  annotations && annotations.length > 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n    markDefs: [...markDefs, ...annotations]\n  }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(operation.editor, {\n    _type: \"span\",\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...annotations?.map((annotation) => annotation._key) ?? [], ...operation.decorators ?? []]\n  });\n}, insertBlockOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const parsedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n    block: operation.block,\n    context,\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!parsedBlock)\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`);\n  const fragment = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema\n  })[0];\n  if (!fragment)\n    throw new Error(`Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`);\n  insertBlock({\n    context,\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? \"start\",\n    editor: operation.editor\n  });\n};\nfunction insertBlock({\n  context,\n  block,\n  placement,\n  select,\n  editor\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({\n    editor\n  }), [endBlock, endBlockPath] = getSelectionEndBlock({\n    editor\n  });\n  if (!editor.selection || !startBlock || !startBlockPath || !endBlock || !endBlockPath) {\n    select !== \"none\" && slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.focus(editor);\n    const [lastBlock, lastBlockPath] = getLastBlock({\n      editor\n    });\n    if (placement === \"before\")\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        at: [0]\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, [0])) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, [0]));\n    else if (placement === \"after\") {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0];\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        at: nextPath\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n    } else {\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], context.schema)) {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n          at: lastBlockPath\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: !1\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, lastBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, lastBlockPath));\n        return;\n      }\n      if (editor.isTextBlock(block) && lastBlock && editor.isTextBlock(lastBlock)) {\n        const selectionBefore = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, lastBlockPath);\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n          at: slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, lastBlockPath)\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, selectionBefore) : select === \"none\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor);\n        return;\n      }\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0];\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: !1\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n    }\n  } else if (placement === \"before\") {\n    const currentSelection = editor.selection, selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.start(currentSelection);\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n      at: [selectionStartPoint.path[0]],\n      select: !1\n    }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, [selectionStartPoint.path[0]])) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, [selectionStartPoint.path[0]]));\n  } else if (placement === \"after\") {\n    const currentSelection = editor.selection, nextPath = [slate__WEBPACK_IMPORTED_MODULE_14__.Range.end(currentSelection).path[0] + 1];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n      at: nextPath,\n      select: !1\n    }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n  } else {\n    const currentSelection = editor.selection, endBlockEndPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath);\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.delete(editor, {\n        at: currentSelection\n      });\n      const newSelection = editor.selection, [focusBlock, focusBlockPath] = getFocusBlock({\n        editor\n      });\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        voids: !0\n      });\n      const adjustedSelection = newSelection.anchor.offset === 0 ? slate__WEBPACK_IMPORTED_MODULE_14__.Range.transform(newSelection, {\n        type: \"insert_node\",\n        node: block,\n        path: [newSelection.anchor.path[0]]\n      }) : newSelection;\n      select === \"none\" && adjustedSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, adjustedSelection), focusBlock && isEqualToEmptyEditor([focusBlock], context.schema) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n        at: focusBlockPath\n      });\n      return;\n    }\n    if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n      const selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.start(currentSelection);\n      if (isEqualToEmptyEditor([endBlock], context.schema)) {\n        const currentSelection2 = editor.selection;\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n          at: endBlockPath,\n          select: !1\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n          at: slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(endBlockPath)\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, selectionStartPoint) : select === \"end\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, endBlockPath)) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, currentSelection2);\n        return;\n      }\n      const endBlockChildKeys = endBlock.children.map((child) => child._key), endBlockMarkDefsKeys = endBlock.markDefs?.map((markDef) => markDef._key) ?? [], markDefKeyMap = /* @__PURE__ */ new Map(), adjustedMarkDefs = block.markDefs?.map((markDef) => {\n        if (endBlockMarkDefsKeys.includes(markDef._key)) {\n          const newKey = context.keyGenerator();\n          return markDefKeyMap.set(markDef._key, newKey), {\n            ...markDef,\n            _key: newKey\n          };\n        }\n        return markDef;\n      }), adjustedChildren = block.children.map((child) => {\n        if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(context, child)) {\n          const marks = child.marks?.map((mark) => markDefKeyMap.get(mark) || mark) ?? [];\n          if (!lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(child.marks, marks))\n            return {\n              ...child,\n              _key: endBlockChildKeys.includes(child._key) ? context.keyGenerator() : child._key,\n              marks\n            };\n        }\n        return endBlockChildKeys.includes(child._key) ? {\n          ...child,\n          _key: context.keyGenerator()\n        } : child;\n      });\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        markDefs: [...endBlock.markDefs ?? [], ...adjustedMarkDefs ?? []]\n      }, {\n        at: endBlockPath\n      });\n      const adjustedBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(block.children, adjustedChildren) ? block : {\n        ...block,\n        children: adjustedChildren\n      };\n      if (select === \"end\") {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [adjustedBlock], {\n          voids: !0\n        });\n        return;\n      }\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [adjustedBlock], {\n        at: currentSelection,\n        voids: !0\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, selectionStartPoint) : slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionStartPoint, endBlockEndPoint) || slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, selectionStartPoint);\n    } else if (editor.isTextBlock(endBlock)) {\n      const endBlockStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath), endBlockEndPoint2 = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, endBlockPath), selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.start(currentSelection), selectionEndPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.end(currentSelection);\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionStartPoint, endBlockStartPoint))\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n          at: endBlockPath,\n          select: !1\n        }), (select === \"start\" || select === \"end\") && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath)), (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(context, endBlock) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n          at: slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(endBlockPath)\n        });\n      else if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionEndPoint, endBlockEndPoint2)) {\n        const nextPath = [endBlockPath[0] + 1];\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n          at: nextPath,\n          select: !1\n        }), (select === \"start\" || select === \"end\") && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath));\n      } else if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionStartPoint, endBlockStartPoint) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionEndPoint, endBlockEndPoint2))\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, endBlockPath));\n      else if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionStartPoint, endBlockStartPoint))\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, endBlockPath));\n      else if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionEndPoint, endBlockEndPoint2))\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(endBlockPath))) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(endBlockPath)));\n      else {\n        const currentSelection2 = editor.selection, [focusChild] = getFocusChild({\n          editor\n        });\n        if (focusChild && editor.isTextSpan(focusChild))\n          slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.splitNodes(editor, {\n            at: currentSelection2\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n            at: currentSelection2\n          }), select === \"start\" || select === \"end\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, [endBlockPath[0] + 1]) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, currentSelection2);\n        else {\n          const nextPath = [endBlockPath[0] + 1];\n          slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n            at: nextPath,\n            select: !1\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, currentSelection2), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n        }\n      }\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        select: !1\n      });\n      const nextPath = [endBlockPath[0] + 1];\n      select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n    }\n  }\n}\nconst moveBackwardOperationImplementation = ({\n  operation\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.move(operation.editor, {\n    unit: \"character\",\n    distance: operation.distance,\n    reverse: !0\n  });\n}, moveBlockOperationImplementation = ({\n  operation\n}) => {\n  const originKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)({\n    path: operation.at\n  });\n  if (!originKey)\n    throw new Error(\"Failed to get block key from selection point\");\n  const originBlockIndex = operation.editor.blockIndexMap.get(originKey);\n  if (originBlockIndex === void 0)\n    throw new Error(\"Failed to get block index from block key\");\n  const destinationKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)({\n    path: operation.to\n  });\n  if (!destinationKey)\n    throw new Error(\"Failed to get block key from selection point\");\n  const destinationBlockIndex = operation.editor.blockIndexMap.get(destinationKey);\n  if (destinationBlockIndex === void 0)\n    throw new Error(\"Failed to get block index from block key\");\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.moveNodes(operation.editor, {\n    at: [originBlockIndex],\n    to: [destinationBlockIndex],\n    mode: \"highest\"\n  });\n}, moveForwardOperationImplementation = ({\n  operation\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.move(operation.editor, {\n    unit: \"character\",\n    distance: operation.distance\n  });\n}, selectOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const newSelection = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  newSelection ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(operation.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(operation.editor);\n}, behaviorOperationImplementations = {\n  \"annotation.add\": addAnnotationOperationImplementation,\n  \"annotation.remove\": removeAnnotationOperationImplementation,\n  \"block.set\": blockSetOperationImplementation,\n  \"block.unset\": blockUnsetOperationImplementation,\n  \"child.set\": childSetOperationImplementation,\n  \"child.unset\": childUnsetOperationImplementation,\n  \"decorator.add\": decoratorAddOperationImplementation,\n  \"decorator.remove\": removeDecoratorOperationImplementation,\n  delete: deleteOperationImplementation,\n  \"history.redo\": historyRedoOperationImplementation,\n  \"history.undo\": historyUndoOperationImplementation,\n  \"insert.block\": insertBlockOperationImplementation,\n  \"insert.inline object\": insertInlineObjectOperationImplementation,\n  \"insert.span\": insertSpanOperationImplementation,\n  \"insert.text\": insertTextOperationImplementation,\n  \"move.backward\": moveBackwardOperationImplementation,\n  \"move.block\": moveBlockOperationImplementation,\n  \"move.forward\": moveForwardOperationImplementation,\n  select: selectOperationImplementation\n};\nfunction performOperation({\n  context,\n  operation\n}) {\n  try {\n    switch (operation.type) {\n      case \"annotation.add\": {\n        behaviorOperationImplementations[\"annotation.add\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"annotation.remove\": {\n        behaviorOperationImplementations[\"annotation.remove\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"block.set\": {\n        behaviorOperationImplementations[\"block.set\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"block.unset\": {\n        behaviorOperationImplementations[\"block.unset\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"child.set\": {\n        behaviorOperationImplementations[\"child.set\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"child.unset\": {\n        behaviorOperationImplementations[\"child.unset\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"decorator.add\": {\n        behaviorOperationImplementations[\"decorator.add\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"decorator.remove\": {\n        behaviorOperationImplementations[\"decorator.remove\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"delete\": {\n        behaviorOperationImplementations.delete({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"history.redo\": {\n        behaviorOperationImplementations[\"history.redo\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"history.undo\": {\n        behaviorOperationImplementations[\"history.undo\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"insert.block\": {\n        behaviorOperationImplementations[\"insert.block\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"insert.inline object\": {\n        behaviorOperationImplementations[\"insert.inline object\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"insert.span\": {\n        behaviorOperationImplementations[\"insert.span\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"insert.text\": {\n        behaviorOperationImplementations[\"insert.text\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"move.backward\": {\n        behaviorOperationImplementations[\"move.backward\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"move.block\": {\n        behaviorOperationImplementations[\"move.block\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"move.forward\": {\n        behaviorOperationImplementations[\"move.forward\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation\n        });\n        break;\n      }\n    }\n  } catch (error) {\n    console.error(new Error(`Executing \"${operation.type}\" failed due to: ${error.message}`));\n  }\n}\nconst CURRENT_OPERATION_ID = /* @__PURE__ */ new WeakMap();\nfunction withApplyingBehaviorOperations(editor, fn) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator()), slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, fn), CURRENT_OPERATION_ID.set(editor, void 0);\n}\nfunction getCurrentOperationId(editor) {\n  return CURRENT_OPERATION_ID.get(editor);\n}\nfunction isApplyingBehaviorOperations(editor) {\n  return getCurrentOperationId(editor) !== void 0;\n}\nfunction createWithEventListeners(editorActor) {\n  return function(editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== void 0)\n      return editor;\n    const {\n      delete: editorDelete,\n      select\n    } = editor;\n    return editor.delete = (options) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        editorDelete(options);\n        return;\n      }\n      const at = options?.at ?? editor.selection;\n      if (!at) {\n        console.error(\"Unexpected call to .delete(...) without `at` option\");\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, at), selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range\n      });\n      if (!selection) {\n        console.error(\"Unexpected call to .delete(...) with invalid `at` option\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete\",\n          at: selection,\n          direction: options?.reverse ? \"backward\" : \"forward\",\n          unit: options?.unit\n        },\n        editor\n      });\n    }, editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error(\"Unexpected call to .deleteBackward(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.backward\",\n          unit\n        },\n        editor\n      });\n    }, editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error(\"Unexpected call to .deleteForward(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.forward\",\n          unit\n        },\n        editor\n      });\n    }, editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error(\"Unexpected call to .insertBreak(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.break\"\n        },\n        editor\n      });\n    }, editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error(\"Unexpected call to .insertData(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"input.*\",\n          originEvent: {\n            dataTransfer\n          }\n        },\n        editor\n      });\n    }, editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            text: `\n`,\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.soft break\"\n        },\n        editor\n      });\n    }, editor.insertText = (text) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            text,\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.text\",\n          text\n        },\n        editor\n      });\n    }, editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            type: \"history.redo\",\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.redo\"\n        },\n        editor\n      });\n    }, editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location);\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, location);\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"select\",\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range\n          })\n        },\n        editor\n      });\n    }, editor.setFragmentData = () => {\n      console.error(\"Unexpected call to .setFragmentData(...)\");\n    }, editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            type: \"history.undo\",\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.undo\"\n        },\n        editor\n      });\n    }, editor;\n  };\n}\nfunction createWithMaxBlocks(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(operation);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n      rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n    }, editor;\n  };\n}\nfunction createWithObjectKeys(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor;\n    return editor.apply = (operation) => {\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (operation.type === \"split_node\") {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: operation.properties._key === void 0 || existingKeys.includes(operation.properties._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.properties._key\n          }\n        });\n        return;\n      }\n      if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(operation.node)) {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          node: {\n            ...operation.node,\n            _key: operation.node._key === void 0 || existingKeys.includes(operation.node._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.node._key\n          }\n        });\n        return;\n      }\n      if (operation.type === \"merge_node\") {\n        const index = operation.path[operation.path.length - 1], prevPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.previous(operation.path), prevIndex = prevPath[prevPath.length - 1];\n        if (operation.path.length !== 1 || prevPath.length !== 1) {\n          apply2(operation);\n          return;\n        }\n        const block = editor.value.at(index), previousBlock = editor.value.at(prevIndex);\n        if (!block || !previousBlock) {\n          apply2(operation);\n          return;\n        }\n        if (!(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(editorActor.getSnapshot().context, block) || !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(editorActor.getSnapshot().context, previousBlock)) {\n          apply2(operation);\n          return;\n        }\n        const previousBlockChildKeys = previousBlock.children.map((child) => child._key), previousBlockMarkDefKeys = previousBlock.markDefs?.map((markDef) => markDef._key) ?? [], markDefKeyMap = /* @__PURE__ */ new Map(), adjustedMarkDefs = block.markDefs?.map((markDef) => {\n          if (previousBlockMarkDefKeys.includes(markDef._key)) {\n            const newKey = editorActor.getSnapshot().context.keyGenerator();\n            return markDefKeyMap.set(markDef._key, newKey), {\n              ...markDef,\n              _key: newKey\n            };\n          }\n          return markDef;\n        });\n        let childIndex = 0;\n        for (const child of block.children) {\n          if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(editorActor.getSnapshot().context, child)) {\n            const marks = child.marks?.map((mark) => markDefKeyMap.get(mark) || mark) ?? [];\n            lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(child.marks, marks) || slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              marks\n            }, {\n              at: [index, childIndex]\n            });\n          }\n          previousBlockChildKeys.includes(child._key) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: [index, childIndex]\n          }), childIndex++;\n        }\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            // Make sure the adjusted markDefs are carried along for the merge\n            // operation\n            markDefs: adjustedMarkDefs\n          }\n        });\n        return;\n      }\n      apply2(operation);\n    }, editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node) && node._type === editorActor.getSnapshot().context.schema.block.name) {\n        if (!node._key) {\n          editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path))\n          if (!child._key) {\n            editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              _key: editorActor.getSnapshot().context.keyGenerator()\n            }, {\n              at: childPath\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nfunction createApplyPatch(schema) {\n  return (editor, patch) => {\n    let changed = !1;\n    try {\n      switch (patch.type) {\n        case \"insert\":\n          changed = insertPatch(editor, patch, schema);\n          break;\n        case \"unset\":\n          changed = unsetPatch(editor, patch);\n          break;\n        case \"set\":\n          changed = setPatch(editor, patch);\n          break;\n        case \"diffMatchPatch\":\n          changed = diffMatchPatch(editor, patch);\n          break;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return changed;\n  };\n}\nfunction diffMatchPatch(editor, patch) {\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  const child = findBlockChild(block, patch.path);\n  if (!child || !(block && editor.isTextBlock(block.node) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child.node))\n    return !1;\n  const patches = parse(patch.value), [newValue] = apply(patches, child.node.text, {\n    allowExceedingIndices: !0\n  }), diff$1 = cleanupEfficiency(diff(child.node.text, newValue), 5);\n  let offset = 0;\n  for (const [op, text] of diff$1)\n    op === DIFF_INSERT ? (editor.apply({\n      type: \"insert_text\",\n      path: [block.index, child.index],\n      offset,\n      text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n      type: \"remove_text\",\n      path: [block.index, child.index],\n      offset,\n      text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n  return !0;\n}\nfunction insertPatch(editor, patch, schema) {\n  const block = findBlock(editor.children, patch.path);\n  if (!block || patch.path.length > 1 && patch.path[1] !== \"children\")\n    return !1;\n  if (patch.path.length === 1) {\n    const {\n      items: items2,\n      position: position2\n    } = patch, blocksToInsert = toSlateValue(items2, {\n      schemaTypes: schema\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = block.index, normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex, editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema);\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, blocksToInsert, {\n      at: [normalizedIdx2]\n    }), editorWasEmptyBefore && typeof patch.path[0] == \"number\" && patch.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: [position2 === \"before\" ? targetBlockIndex + 1 : targetBlockIndex]\n    }), !0;\n  }\n  const {\n    items,\n    position\n  } = patch, targetChild = findBlockChild(block, patch.path);\n  if (!targetChild)\n    return !1;\n  const childrenToInsert = toSlateValue([{\n    ...block.node,\n    children: items\n  }], {\n    schemaTypes: schema\n  }, KEY_TO_SLATE_ELEMENT.get(editor)), normalizedIdx = position === \"after\" ? targetChild.index + 1 : targetChild.index, childInsertPath = [block.index, normalizedIdx];\n  return childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n    at: childInsertPath\n  }), !0;\n}\nfunction setPatch(editor, patch) {\n  let value = patch.value;\n  typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  const isTextBlock2 = editor.isTextBlock(block.node);\n  if (isTextBlock2 && patch.path.length > 1 && patch.path[1] !== \"children\")\n    return !1;\n  const child = findBlockChild(block, patch.path);\n  if (isTextBlock2 && child) {\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child.node))\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(value)) {\n        const oldText = child.node.text, newText = value.text;\n        oldText !== newText && (editor.apply({\n          type: \"remove_text\",\n          path: [block.index, child.index],\n          offset: 0,\n          text: oldText\n        }), editor.apply({\n          type: \"insert_text\",\n          path: [block.index, child.index],\n          offset: 0,\n          text: newText\n        }), editor.onChange());\n      } else {\n        const propPath = patch.path.slice(3), propEntry = propPath.at(0);\n        if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\", \"text\"].includes(propEntry))\n          return !1;\n        const newNode = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.applyAll)(child.node, [{\n          ...patch,\n          path: propPath\n        }]);\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, newNode, {\n          at: [block.index, child.index]\n        });\n      }\n    else {\n      const propPath = patch.path.slice(3), reservedProps = [\"_key\", \"_type\", \"children\", \"__inline\"], propEntry = propPath.at(0);\n      if (propEntry === void 0 || typeof propEntry == \"string\" && reservedProps.includes(propEntry))\n        return !1;\n      const value2 = \"value\" in child.node && typeof child.node.value == \"object\" ? child.node.value : {}, newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.applyAll)(value2, [{\n        ...patch,\n        path: patch.path.slice(3)\n      }]);\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        ...child.node,\n        value: newValue\n      }, {\n        at: [block.index, child.index]\n      });\n    }\n    return !0;\n  } else if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block.node) && patch.path.length === 1) {\n    const {\n      children,\n      ...nextRest\n    } = value, {\n      children: _prevChildren,\n      ...prevRest\n    } = block.node || {\n      children: void 0\n    };\n    editor.apply({\n      type: \"set_node\",\n      path: [block.index],\n      properties: {\n        ...prevRest\n      },\n      newProperties: nextRest\n    });\n    const blockNode = block.node;\n    blockNode.children.forEach((child2, childIndex) => {\n      editor.apply({\n        type: \"remove_node\",\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child2\n      });\n    }), Array.isArray(children) && children.forEach((child2, childIndex) => {\n      editor.apply({\n        type: \"insert_node\",\n        path: [block.index, childIndex],\n        node: child2\n      });\n    });\n  } else if (block && \"value\" in block.node)\n    if (patch.path.length > 1 && patch.path[1] !== \"children\") {\n      const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.applyAll)(block.node.value, [{\n        ...patch,\n        path: patch.path.slice(1)\n      }]);\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        ...block.node,\n        value: newVal\n      }, {\n        at: [block.index]\n      });\n    } else\n      return !1;\n  return !0;\n}\nfunction unsetPatch(editor, patch) {\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection;\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor);\n    const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, [], {\n      reverse: !0\n    });\n    for (const [_, path] of children)\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n        at: path\n      });\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n      decorators: []\n    })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), editor.onChange(), !0;\n  }\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  if (patch.path.length === 1) {\n    if (editor.children.length === 1) {\n      const previousSelection = editor.selection;\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n        at: [block.index]\n      }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n        decorators: []\n      })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, {\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        }\n      }), editor.onChange(), !0;\n    }\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: [block.index]\n    }), !0;\n  }\n  const child = findBlockChild(block, patch.path);\n  if (editor.isTextBlock(block.node) && child && patch.path[1] === \"children\" && patch.path.length === 3)\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: [block.index, child.index]\n    }), !0;\n  if (child && !slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child.node)) {\n    const propEntry = patch.path.slice(3).at(0);\n    if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\", \"children\", \"__inline\"].includes(propEntry))\n      return !1;\n    const value = \"value\" in child.node && typeof child.node.value == \"object\" ? child.node.value : {}, newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.applyAll)(value, [{\n      ...patch,\n      path: patch.path.slice(3)\n    }]);\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n      ...child.node,\n      value: newValue\n    }, {\n      at: [block.index, child.index]\n    }), !0;\n  }\n  if (child && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child.node)) {\n    const propPath = patch.path.slice(3), propEntry = propPath.at(0);\n    if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\"].includes(propEntry))\n      return !1;\n    if (typeof propEntry == \"string\" && propEntry === \"text\")\n      return editor.apply({\n        type: \"remove_text\",\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text\n      }), !0;\n    const newNode = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.applyAll)(child.node, [{\n      ...patch,\n      path: propPath\n    }]), newKeys = Object.keys(newNode), removedProperties = Object.keys(child.node).filter((property) => !newKeys.includes(property));\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index]\n    }), !0;\n  }\n  if (!child) {\n    if (\"value\" in block.node) {\n      const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.applyAll)(block.node.value, [{\n        ...patch,\n        path: patch.path.slice(1)\n      }]);\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        ...block.node,\n        value: newVal\n      }, {\n        at: [block.index]\n      }), !0;\n    }\n    return !1;\n  }\n  return !1;\n}\nfunction findBlock(children, path) {\n  let blockIndex = -1;\n  const block = children.find((node, index) => {\n    const isMatch = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isKeyedSegment)(path[0]) ? node._key === path[0]._key : index === path[0];\n    return isMatch && (blockIndex = index), isMatch;\n  });\n  if (block)\n    return {\n      node: block,\n      index: blockIndex\n    };\n}\nfunction findBlockChild(block, path) {\n  const blockNode = block.node;\n  if (!slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(blockNode) || path[1] !== \"children\")\n    return;\n  let childIndex = -1;\n  const child = blockNode.children.find((node, index) => {\n    const isMatch = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isKeyedSegment)(path[2]) ? node._key === path[2]._key : index === path[2];\n    return isMatch && (childIndex = index), isMatch;\n  });\n  if (child)\n    return {\n      node: child,\n      index: childIndex\n    };\n}\nfunction insertTextPatch(schema, children, operation, beforeValue) {\n  const block = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, children[operation.path[0]]) && children[operation.path[0]];\n  if (!block)\n    throw new Error(\"Could not find block\");\n  const textChild = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, block) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)({\n    schema\n  }, block.children[operation.path[1]]) && block.children[operation.path[1]];\n  if (!textChild)\n    throw new Error(\"Could not find child\");\n  const path = [{\n    _key: block._key\n  }, \"children\", {\n    _key: textChild._key\n  }, \"text\"], prevBlock = beforeValue[operation.path[0]], prevChild = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, prevBlock) && prevBlock.children[operation.path[1]], prevText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)({\n    schema\n  }, prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.diffMatchPatch)(prevText, textChild.text, path);\n  return patch.value.length ? [patch] : [];\n}\nfunction removeTextPatch(schema, children, operation, beforeValue) {\n  const block = children[operation.path[0]];\n  if (!block)\n    throw new Error(\"Could not find block\");\n  const child = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, block) && block.children[operation.path[1]] || void 0, textChild = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)({\n    schema\n  }, child) ? child : void 0;\n  if (child && !textChild)\n    throw new Error(\"Expected span\");\n  if (!textChild)\n    throw new Error(\"Could not find child\");\n  const path = [{\n    _key: block._key\n  }, \"children\", {\n    _key: textChild._key\n  }, \"text\"], beforeBlock = beforeValue[operation.path[0]], prevTextChild = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, beforeBlock) && beforeBlock.children[operation.path[1]], prevText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)({\n    schema\n  }, prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n  return patch.value ? [patch] : [];\n}\nfunction setNodePatch(schema, children, operation) {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]];\n    if (typeof block._key != \"string\")\n      throw new Error(\"Expected block to have a _key\");\n    const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_11__({\n      ...children[operation.path[0]],\n      ...operation.newProperties\n    }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_10__);\n    return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)(fromSlateValue([setNode], schema.block.name)[0], [{\n      _key: block._key\n    }])];\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]];\n    if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n      schema\n    }, block)) {\n      const child = block.children[operation.path[1]];\n      if (child) {\n        const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n        return keys.forEach((keyName) => {\n          if (keys.length === 1 && keyName === \"_key\") {\n            const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_9__(operation.newProperties, keyName);\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)(val, [{\n              _key: blockKey\n            }, \"children\", block.children.indexOf(child), keyName]));\n          } else {\n            const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_9__(operation.newProperties, keyName);\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)(val, [{\n              _key: blockKey\n            }, \"children\", {\n              _key: childKey\n            }, keyName]));\n          }\n        }), patches;\n      }\n      throw new Error(\"Could not find a valid child\");\n    }\n    throw new Error(\"Could not find a valid block\");\n  } else\n    throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n}\nfunction insertNodePatch(schema, children, operation, beforeValue) {\n  const block = beforeValue[operation.path[0]];\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n    return targetKey ? [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)([fromSlateValue([operation.node], schema.block.name)[0]], position, [{\n      _key: targetKey\n    }])] : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.setIfMissing)(beforeValue, []), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)([fromSlateValue([operation.node], schema.block.name)[0]], \"before\", [operation.path[0]])];\n  } else if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, block) && operation.path.length === 2 && children[operation.path[0]]) {\n    const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n      ...operation.node\n    };\n    !node._type && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n    const child = fromSlateValue([{\n      _key: \"bogus\",\n      _type: schema.block.name,\n      children: [node]\n    }], schema.block.name)[0].children[0];\n    return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)([child], position, [{\n      _key: block._key\n    }, \"children\", block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n      _key: block.children[operation.path[1] - 1]._key\n    }])];\n  }\n  return [];\n}\nfunction splitNodePatch(schema, children, operation, beforeValue) {\n  const patches = [], splitBlock = children[operation.path[0]];\n  if (!(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, splitBlock))\n    throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]];\n    if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n      schema\n    }, oldBlock)) {\n      const targetValue = fromSlateValue([children[operation.path[0] + 1]], schema.block.name)[0];\n      targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)([targetValue], \"after\", [{\n        _key: splitBlock._key\n      }])), oldBlock.children.slice(operation.position).forEach((span) => {\n        const path = [{\n          _key: oldBlock._key\n        }, \"children\", {\n          _key: span._key\n        }];\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)(path));\n      }));\n    }\n    return patches;\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]];\n    if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)({\n      schema\n    }, splitSpan)) {\n      const targetSpans = fromSlateValue([{\n        ...splitBlock,\n        children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n      }], schema.block.name)[0].children;\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)(targetSpans, \"after\", [{\n        _key: splitBlock._key\n      }, \"children\", {\n        _key: splitSpan._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)(splitSpan.text, [{\n        _key: splitBlock._key\n      }, \"children\", {\n        _key: splitSpan._key\n      }, \"text\"]));\n    }\n    return patches;\n  }\n  return patches;\n}\nfunction removeNodePatch(schema, beforeValue, operation) {\n  const block = beforeValue[operation.path[0]];\n  if (operation.path.length === 1) {\n    if (block && block._key)\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n        _key: block._key\n      }])];\n    throw new Error(\"Block not found\");\n  } else if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]];\n    return spanToRemove ? block.children.filter((span) => span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: spanToRemove._key\n    }])] : [];\n  } else\n    return [];\n}\nfunction mergeNodePatch(schema, children, operation, beforeValue) {\n  const patches = [], block = beforeValue[operation.path[0]], updatedBlock = children[operation.path[0]];\n  if (operation.path.length === 1)\n    if (block?._key) {\n      const newBlock = fromSlateValue([children[operation.path[0] - 1]], schema.block.name)[0];\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)(newBlock, [{\n        _key: newBlock._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n        _key: block._key\n      }]));\n    } else\n      throw new Error(\"Target key not found!\");\n  else if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, block) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, updatedBlock) && operation.path.length === 2) {\n    const updatedSpan = updatedBlock.children[operation.path[1] - 1] && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)({\n      schema\n    }, updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)({\n      schema\n    }, block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n    updatedSpan && (block.children.filter((span) => span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)(updatedSpan.text, [{\n      _key: block._key\n    }, \"children\", {\n      _key: updatedSpan._key\n    }, \"text\"])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span) => span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: removedSpan._key\n    }])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n  }\n  return patches;\n}\nfunction moveNodePatch(schema, beforeValue, operation) {\n  const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n  if (!targetBlock)\n    return patches;\n  if (operation.path.length === 1) {\n    const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n    patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n      _key: block._key\n    }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)([fromSlateValue([block], schema.block.name)[0]], position, [{\n      _key: targetBlock._key\n    }]));\n  } else if (operation.path.length === 2 && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, block) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n    schema\n  }, targetBlock)) {\n    const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([block], schema.block.name)[0].children[operation.path[1]];\n    patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: child._key\n    }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)([childToInsert], position, [{\n      _key: targetBlock._key\n    }, \"children\", {\n      _key: targetChild._key\n    }]));\n  }\n  return patches;\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n  const prev = isPatching(editor);\n  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n  return PATCHING.get(editor);\n}\nconst debug$c = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions\n}) {\n  let previousChildren;\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema);\n  return function(editor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];\n    const {\n      apply: apply2\n    } = editor;\n    let bufferedPatches = [];\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0)\n        return;\n      const patches = bufferedPatches;\n      bufferedPatches = [];\n      let changed = !1;\n      withRemoteChanges(editor, () => {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                debug$c.enabled && debug$c(`Handling remote patch ${JSON.stringify(patch)}`);\n                try {\n                  changed = applyPatch(editor, patch);\n                } catch (error) {\n                  console.error(`Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`);\n                }\n              }\n            });\n          });\n        }), changed && (editor.normalize(), editor.onChange());\n      });\n    }, handlePatches = ({\n      patches\n    }) => {\n      const remotePatches = patches.filter((p) => p.origin !== \"local\");\n      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n    };\n    return subscriptions.push(() => {\n      debug$c(\"Subscribing to remote patches\");\n      const sub = editorActor.on(\"patches\", handlePatches);\n      return () => {\n        debug$c(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n      };\n    }), editor.apply = (operation) => {\n      let patches = [];\n      previousChildren = editor.children;\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, editorActor.getSnapshot().context.schema);\n      apply2(operation);\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, editorActor.getSnapshot().context.schema);\n      if (!isPatching(editor))\n        return editor;\n      switch (editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)(previousChildren, \"before\", [0])), operation.type) {\n        case \"insert_text\":\n          patches = [...patches, ...insertTextPatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"remove_text\":\n          patches = [...patches, ...removeTextPatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"remove_node\":\n          patches = [...patches, ...removeNodePatch(editorActor.getSnapshot().context.schema, previousChildren, operation)];\n          break;\n        case \"split_node\":\n          patches = [...patches, ...splitNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"insert_node\":\n          patches = [...patches, ...insertNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"set_node\":\n          patches = [...patches, ...setNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation)];\n          break;\n        case \"merge_node\":\n          patches = [...patches, ...mergeNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"move_node\":\n          patches = [...patches, ...moveNodePatch(editorActor.getSnapshot().context.schema, previousChildren, operation)];\n          break;\n      }\n      if (!editorWasEmpty && editorIsEmpty && [\"merge_node\", \"set_node\", \"remove_text\", \"remove_node\"].includes(operation.type) && (patches = [...patches, (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([])], relayActor.send({\n        type: \"unset\",\n        previousValue: fromSlateValue(previousChildren, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      })), editorWasEmpty && patches.length > 0 && (patches = [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.setIfMissing)([], []), ...patches]), patches.length > 0)\n        for (const patch of patches)\n          editorActor.send({\n            type: \"internal.patch\",\n            patch: {\n              ...patch,\n              origin: \"local\"\n            },\n            operationId: getCurrentOperationId(editor),\n            value: editor.value\n          });\n      return editor;\n    }, editor;\n  };\n}\nconst debug$b = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"remove_node\") {\n        const blockIndex = op.path.at(0), isLonelyBlock = op.path.length === 1 && blockIndex === 0 && editor.children.length === 1, isBlockObject = op.node._type !== editorActor.getSnapshot().context.schema.block.name;\n        isLonelyBlock && isBlockObject && (debug$b(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_14__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n          decorators: []\n        })));\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst debug$a = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({\n  editorActor\n}) {\n  return function(editor) {\n    editor.isTextBlock = (value) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(value) ? !1 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(editorActor.getSnapshot().context, value), editor.isTextSpan = (value) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(value) ? !1 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(editorActor.getSnapshot().context, value), editor.isListBlock = (value) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(value) ? !1 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(editorActor.getSnapshot().context, value), editor.isVoid = (element) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(element) ? !1 : editorActor.getSnapshot().context.schema.block.name !== element._type && (editorActor.getSnapshot().context.schema.blockObjects.map((obj) => obj.name).includes(element._type) || editorActor.getSnapshot().context.schema.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(element) ? !1 : editorActor.getSnapshot().context.schema.inlineObjects.map((obj) => obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (node._type === void 0 && path.length === 2) {\n        debug$a(\"Setting span type on text node without a type\");\n        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          ...span,\n          _type: editorActor.getSnapshot().context.schema.span.name,\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n        debug$a(\"Setting missing key on child node without a key\");\n        const key = editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nfunction createWithUtils({\n  editorActor\n}) {\n  return function(editor) {\n    return editor.pteCreateTextBlock = (options) => toSlateValue([{\n      _type: editorActor.getSnapshot().context.schema.block.name,\n      _key: editorActor.getSnapshot().context.keyGenerator(),\n      style: editorActor.getSnapshot().context.schema.styles[0].name || \"normal\",\n      ...options.listItem ? {\n        listItem: options.listItem\n      } : {},\n      ...options.level ? {\n        level: options.level\n      } : {},\n      markDefs: [],\n      children: [{\n        _type: \"span\",\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        text: \"\",\n        marks: options.decorators.filter((decorator) => editorActor.getSnapshot().context.schema.decorators.find(({\n          name\n        }) => name === decorator))\n      }]\n    }], {\n      schemaTypes: editorActor.getSnapshot().context.schema\n    })[0], editor;\n  };\n}\nfunction pluginUpdateSelection({\n  editor,\n  editorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n      if (existingSelection)\n        editorActor.send({\n          type: \"update selection\",\n          selection: existingSelection\n        });\n      else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        });\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection), editorActor.send({\n          type: \"update selection\",\n          selection\n        });\n      }\n    } else\n      editorActor.send({\n        type: \"update selection\",\n        selection: null\n      });\n  }, {\n    onChange\n  } = editor;\n  return editor.onChange = () => {\n    onChange(), editorActor.getSnapshot().matches({\n      setup: \"setting up\"\n    }) || updateSelection();\n  }, editor;\n}\nfunction isEditorNode(node) {\n  return typeof node == \"object\" && node !== null ? !(\"_type\" in node) && \"children\" in node && Array.isArray(node.children) : !1;\n}\nfunction isTextBlockNode(context, node) {\n  return (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTypedObject)(node) && node._type === context.schema.block.name;\n}\nfunction isSpanNode(context, node) {\n  return typeof node != \"object\" || node === null || \"children\" in node ? !1 : \"_type\" in node ? node._type === context.schema.span.name : \"text\" in node;\n}\nfunction isPartialSpanNode(node) {\n  return typeof node == \"object\" && node !== null && \"text\" in node && typeof node.text == \"string\";\n}\nfunction isObjectNode(context, node) {\n  return !isEditorNode(node) && !isTextBlockNode(context, node) && !isSpanNode(context, node) && !isPartialSpanNode(node);\n}\nfunction getBlock(root, path) {\n  const index = path.at(0);\n  if (!(index === void 0 || path.length !== 1))\n    return root.children.at(index);\n}\nfunction getNode(context, root, path) {\n  if (path.length === 0)\n    return root;\n  if (path.length === 1)\n    return getBlock(root, path);\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1));\n    return !block || !isTextBlockNode(context, block) ? void 0 : block.children.at(path[1]) || void 0;\n  }\n}\nfunction getSpan(context, root, path) {\n  const node = getNode(context, root, path);\n  if (node && isSpanNode(context, node))\n    return node;\n}\nfunction getParent(context, root, path) {\n  if (path.length === 0)\n    return;\n  const parentPath = path.slice(0, -1);\n  if (parentPath.length === 0)\n    return root;\n  const blockIndex = parentPath.at(0);\n  if (blockIndex === void 0 || parentPath.length !== 1)\n    return;\n  const block = root.children.at(blockIndex);\n  if (block && isTextBlockNode(context, block))\n    return block;\n}\nfunction applyOperationToPortableText(context, value, operation) {\n  const draft = (0,immer__WEBPACK_IMPORTED_MODULE_30__.createDraft)({\n    children: value\n  });\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation);\n  } catch (e) {\n    console.error(e);\n  }\n  return (0,immer__WEBPACK_IMPORTED_MODULE_30__.finishDraft)(draft).children;\n}\nfunction applyOperationToPortableTextDraft(context, root, operation) {\n  switch (operation.type) {\n    case \"insert_node\": {\n      const {\n        path,\n        node: insertedNode\n      } = operation, parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!parent || index > parent.children.length)\n        break;\n      if (path.length === 1) {\n        if (isTextBlockNode(context, insertedNode)) {\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => \"__inline\" in child ? {\n              _key: child._key,\n              _type: child._type,\n              ...\"value\" in child && typeof child.value == \"object\" ? child.value : {}\n            } : child)\n          });\n          break;\n        }\n        if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(insertedNode) && !(\"__inline\" in insertedNode)) {\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...\"value\" in insertedNode && typeof insertedNode.value == \"object\" ? insertedNode.value : {}\n          });\n          break;\n        }\n      }\n      if (path.length === 2) {\n        if (!isTextBlockNode(context, parent))\n          break;\n        if (isPartialSpanNode(insertedNode)) {\n          parent.children.splice(index, 0, insertedNode);\n          break;\n        }\n        if (\"__inline\" in insertedNode) {\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...\"value\" in insertedNode && typeof insertedNode.value == \"object\" ? insertedNode.value : {}\n          });\n          break;\n        }\n      }\n      break;\n    }\n    case \"insert_text\": {\n      const {\n        path,\n        offset,\n        text\n      } = operation;\n      if (text.length === 0) break;\n      const span = getSpan(context, root, path);\n      if (!span)\n        break;\n      const before = span.text.slice(0, offset), after = span.text.slice(offset);\n      span.text = before + text + after;\n      break;\n    }\n    case \"merge_node\": {\n      const {\n        path\n      } = operation, node = getNode(context, root, path), prevPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.previous(path), prev = getNode(context, root, prevPath), parent = getParent(context, root, path);\n      if (!node || !prev || !parent)\n        break;\n      const index = path[path.length - 1];\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev))\n        prev.text += node.text;\n      else if (isTextBlockNode(context, node) && isTextBlockNode(context, prev))\n        prev.children.push(...node.children);\n      else\n        break;\n      parent.children.splice(index, 1);\n      break;\n    }\n    case \"move_node\": {\n      const {\n        path,\n        newPath\n      } = operation;\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Path.isAncestor(path, newPath))\n        break;\n      const node = getNode(context, root, path), parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!node || !parent)\n        break;\n      parent.children.splice(index, 1);\n      const truePath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.transform(path, operation), newParent = getNode(context, root, slate__WEBPACK_IMPORTED_MODULE_14__.Path.parent(truePath)), newIndex = truePath[truePath.length - 1];\n      if (!newParent || !(\"children\" in newParent) || !Array.isArray(newParent.children))\n        break;\n      newParent.children.splice(newIndex, 0, node);\n      break;\n    }\n    case \"remove_node\": {\n      const {\n        path\n      } = operation, index = path[path.length - 1];\n      getParent(context, root, path)?.children.splice(index, 1);\n      break;\n    }\n    case \"remove_text\": {\n      const {\n        path,\n        offset,\n        text\n      } = operation;\n      if (text.length === 0)\n        break;\n      const span = getSpan(context, root, path);\n      if (!span)\n        break;\n      const before = span.text.slice(0, offset), after = span.text.slice(offset + text.length);\n      span.text = before + after;\n      break;\n    }\n    case \"set_node\": {\n      const {\n        path,\n        properties,\n        newProperties\n      } = operation, node = getNode(context, root, path);\n      if (!node || isEditorNode(node))\n        break;\n      if (isObjectNode(context, node)) {\n        const valueBefore = \"value\" in properties && typeof properties.value == \"object\" ? properties.value : {}, valueAfter = \"value\" in newProperties && typeof newProperties.value == \"object\" ? newProperties.value : {};\n        for (const key in newProperties) {\n          if (key === \"value\")\n            continue;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          key !== \"value\" && (newProperties.hasOwnProperty(key) || delete node[key]);\n        for (const key in valueAfter) {\n          const value = valueAfter[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in valueBefore)\n          valueAfter.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === \"children\" || key === \"text\")\n            break;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          newProperties.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === \"text\")\n            break;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          newProperties.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      break;\n    }\n    case \"split_node\": {\n      const {\n        path,\n        position,\n        properties\n      } = operation;\n      if (path.length === 0)\n        break;\n      const parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!parent)\n        break;\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path);\n        if (!block || !isTextBlockNode(context, block))\n          break;\n        const before = block.children.slice(0, position), after = block.children.slice(position);\n        block.children = before;\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name\n        };\n        parent.children.splice(index + 1, 0, newTextBlockNode);\n        break;\n      }\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path);\n        if (!node || !isSpanNode(context, node))\n          break;\n        const before = node.text.slice(0, position), after = node.text.slice(position);\n        node.text = before;\n        const newSpanNode = {\n          ...properties,\n          text: after\n        };\n        parent.children.splice(index + 1, 0, newSpanNode);\n      }\n      break;\n    }\n  }\n  return root;\n}\nfunction pluginUpdateValue(context, editor) {\n  const {\n    apply: apply2\n  } = editor;\n  return editor.apply = (operation) => {\n    if (operation.type === \"set_selection\") {\n      apply2(operation);\n      return;\n    }\n    if (editor.value = applyOperationToPortableText(context, editor.value, operation), operation.type === \"insert_text\" || operation.type === \"remove_text\") {\n      apply2(operation);\n      return;\n    }\n    buildIndexMaps({\n      schema: context.schema,\n      value: editor.value\n    }, {\n      blockIndexMap: editor.blockIndexMap,\n      listIndexMap: editor.listIndexMap\n    }), apply2(operation);\n  }, editor;\n}\nconst withPlugins = (editor, options) => {\n  const e = editor, {\n    editorActor,\n    relayActor\n  } = options, withObjectKeys = createWithObjectKeys(editorActor), withSchemaTypes = createWithSchemaTypes({\n    editorActor\n  }), withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions\n  }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions\n  }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n    editorActor\n  });\n  return createWithEventListeners(editorActor)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(pluginUpdateValue(editorActor.getSnapshot().context, pluginUpdateSelection({\n    editorActor,\n    editor: e\n  })))))))))));\n}, debug$9 = debugWithName(\"setup\");\nfunction createSlateEditor(config) {\n  debug$9(\"Creating new Slate editor instance\");\n  const instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_22__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_14__.createEditor)()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions\n  });\n  KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {}), instance.decoratedRanges = [], instance.decoratorState = {};\n  const placeholderBlock = createPlaceholderBlock(config.editorActor.getSnapshot().context);\n  instance.value = [placeholderBlock], instance.blockIndexMap = /* @__PURE__ */ new Map(), instance.listIndexMap = /* @__PURE__ */ new Map(), buildIndexMaps({\n    schema: config.editorActor.getSnapshot().context.schema,\n    value: instance.value\n  }, {\n    blockIndexMap: instance.blockIndexMap,\n    listIndexMap: instance.listIndexMap\n  });\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema\n  });\n  return {\n    instance,\n    initialValue\n  };\n}\nfunction createEditorDom(sendBack, slateEditor) {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({\n      event,\n      ghost\n    }) => setDragGhost({\n      sendBack,\n      event,\n      ghost\n    })\n  };\n}\nfunction getBlockNodes(slateEditor, snapshot) {\n  if (!snapshot.context.selection)\n    return [];\n  const range = toSlateRange(snapshot);\n  if (!range)\n    return [];\n  try {\n    return Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(slateEditor, {\n      at: range,\n      mode: \"highest\",\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(n)\n    })).map(([blockNode]) => slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, blockNode));\n  } catch {\n    return [];\n  }\n}\nfunction getChildNodes(slateEditor, snapshot) {\n  if (!snapshot.context.selection)\n    return [];\n  const range = toSlateRange(snapshot);\n  if (!range)\n    return [];\n  try {\n    return Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(slateEditor, {\n      at: range,\n      mode: \"lowest\",\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(n)\n    })).map(([childNode]) => slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, childNode));\n  } catch {\n    return [];\n  }\n}\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y), sendBack({\n    type: \"set drag ghost\",\n    ghost: ghost.element\n  });\n}\nconst addAnnotationOnCollapsedSelection = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"annotation.add\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const caretWordSelection = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getCaretWordSelection)(snapshot);\n    return !caretWordSelection || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionExpanded)({\n      context: {\n        ...snapshot.context,\n        selection: caretWordSelection\n      }\n    }) ? !1 : {\n      caretWordSelection\n    };\n  },\n  actions: [({\n    event\n  }, {\n    caretWordSelection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: caretWordSelection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n}), coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection\n}, defaultKeyboardShortcuts = {\n  arrowDown: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.createKeyboardShortcut)({\n    default: [{\n      key: \"ArrowDown\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  arrowUp: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.createKeyboardShortcut)({\n    default: [{\n      key: \"ArrowUp\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  break: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.createKeyboardShortcut)({\n    default: [{\n      key: \"Enter\",\n      shift: !1\n    }]\n  }),\n  lineBreak: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.createKeyboardShortcut)({\n    default: [{\n      key: \"Enter\",\n      shift: !0\n    }]\n  }),\n  decorators: {\n    strong: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.bold,\n    em: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.italic,\n    underline: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.underline,\n    code: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.code\n  },\n  history: {\n    undo: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.undo,\n    redo: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.redo\n  },\n  tab: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.createKeyboardShortcut)({\n    default: [{\n      key: \"Tab\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  shiftTab: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_31__.createKeyboardShortcut)({\n    default: [{\n      key: \"Tab\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !0\n    }]\n  })\n}, arrowDownOnLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.arrowDown.guard(event.originEvent) || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusBlockObject)(snapshot), nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getNextBlock)(snapshot);\n    return focusBlockObject && !nextBlock;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\"\n  })]]\n}), arrowUpOnLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.arrowUp.guard(event.originEvent) || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusBlockObject)(snapshot), previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getPreviousBlock)(snapshot);\n    return focusBlockObject && !previousBlock;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"before\"\n  })]]\n}), breakingBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusBlockObject)(snapshot);\n    return (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot) && focusBlockObject !== void 0;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\"\n  })]]\n}), clickingAboveLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"mouse.click\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.readOnly || snapshot.context.selection && !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusBlockObject)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    }), previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getPreviousBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    });\n    return event.position.isEditor && event.position.block === \"start\" && focusBlockObject && !previousBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: event.position.selection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"before\",\n    select: \"start\"\n  })]]\n}), clickingBelowLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"mouse.click\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.readOnly || snapshot.context.selection && !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusBlockObject)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    }), nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getNextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    });\n    return event.position.isEditor && event.position.block === \"end\" && focusBlockObject && !nextBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: event.position.selection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\",\n    select: \"start\"\n  })]]\n}), deletingEmptyTextBlockAfterBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot), previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getPreviousBlock)(snapshot);\n    return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node) && !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, previousBlock.node) ? {\n      focusTextBlock,\n      previousBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: previousBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: previousBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}), deletingEmptyTextBlockBeforeBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot), nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getNextBlock)(snapshot);\n    return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node) && !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, nextBlock.node) ? {\n      focusTextBlock,\n      nextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: nextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: nextBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}), coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject\n}, coreDecoratorBehaviors = {\n  strongShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.strong.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"strong\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"strong\"\n    })]]\n  }),\n  emShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.em.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"em\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"em\"\n    })]]\n  }),\n  underlineShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.underline.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"underline\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"underline\"\n    })]]\n  }),\n  codeShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.code.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"code\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"code\"\n    })]]\n  })\n};\nfunction getCompoundClientRect(nodes) {\n  if (nodes.length === 0)\n    return new DOMRect(0, 0, 0, 0);\n  const elements = nodes.filter((node) => node instanceof Element), firstRect = elements.at(0)?.getBoundingClientRect();\n  if (!firstRect)\n    return new DOMRect(0, 0, 0, 0);\n  let left = firstRect.left, top = firstRect.top, right = firstRect.right, bottom = firstRect.bottom;\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect();\n    left = Math.min(left, rect.left), top = Math.min(top, rect.top), right = Math.max(right, rect.right), bottom = Math.max(bottom, rect.bottom);\n  }\n  return new DOMRect(left, top, right - left, bottom - top);\n}\nconst coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.dragstart\",\n    guard: ({\n      snapshot,\n      dom,\n      event\n    }) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection\n      }), selectingEntireBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isSelectingEntireBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }), draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        })\n      };\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks\n      };\n    },\n    actions: [({\n      dom,\n      event\n    }, {\n      dragSelection,\n      draggedDomNodes,\n      selectingEntireBlocks\n    }) => {\n      const dragGhost = document.createElement(\"div\");\n      if (selectingEntireBlocks) {\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) => node.cloneNode(!0));\n        for (const block of clonedBlockNodes)\n          block instanceof HTMLElement && (block.style.position = \"relative\"), dragGhost.appendChild(block);\n        const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n        if (customGhost && dragGhost.replaceChildren(customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost), customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect(), x = event.originEvent.clientX - customGhostRect.left, y = event.originEvent.clientY - customGhostRect.top;\n          return dragGhost.style.width = `${customGhostRect.width}px`, dragGhost.style.height = `${customGhostRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n            type: \"select\",\n            at: dragSelection\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.effect)(() => {\n            dom.setDragGhost({\n              event,\n              ghost: {\n                element: dragGhost,\n                x,\n                y\n              }\n            });\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.forward)(event)];\n        } else {\n          const blocksDomRect = getCompoundClientRect(draggedDomNodes.blockNodes), x = event.originEvent.clientX - blocksDomRect.left, y = event.originEvent.clientY - blocksDomRect.top;\n          return dragGhost.style.width = `${blocksDomRect.width}px`, dragGhost.style.height = `${blocksDomRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n            type: \"select\",\n            at: dragSelection\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.effect)(() => {\n            dom.setDragGhost({\n              event,\n              ghost: {\n                element: dragGhost,\n                x,\n                y\n              }\n            });\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.forward)(event)];\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) => node.cloneNode(!0));\n        for (const child of clonedChildNodes)\n          dragGhost.appendChild(child);\n        dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n        const childrenDomRect = getCompoundClientRect(draggedDomNodes.childNodes), x = event.originEvent.clientX - childrenDomRect.left, y = event.originEvent.clientY - childrenDomRect.top;\n        return dragGhost.style.width = `${childrenDomRect.width}px`, dragGhost.style.height = `${childrenDomRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n          type: \"select\",\n          at: dragSelection\n        }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.effect)(() => {\n          dom.setDragGhost({\n            event,\n            ghost: {\n              element: dragGhost,\n              x,\n              y\n            }\n          });\n        }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.forward)(event)];\n      }\n    }]\n  }),\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.dragover\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const dragOrigin = event.dragOrigin;\n      return dragOrigin ? (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isOverlappingSelection)(event.position.selection)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1;\n    },\n    actions: []\n  }),\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.drop\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const dragOrigin = event.dragOrigin, dropPosition = event.position.selection;\n      return dragOrigin ? (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isOverlappingSelection)(dropPosition)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1;\n    },\n    actions: []\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.drop\",\n    guard: ({\n      event\n    }) => event.dragOrigin !== void 0,\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.drop\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"select\",\n      at: event.position.selection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.success\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.originEvent.type !== \"drag.drop\" || event.originEvent.dragOrigin === void 0)\n        return !1;\n      const dragOrigin = event.originEvent.dragOrigin, dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot\n      }), dropPosition = event.originEvent.position.selection, droppingOnDragOrigin = dragOrigin ? (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isOverlappingSelection)(dropPosition)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }) : !1, draggingEntireBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isSelectingEntireBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }), draggedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      });\n      return droppingOnDragOrigin ? !1 : {\n        dropPosition,\n        draggingEntireBlocks,\n        draggedBlocks,\n        dragOrigin,\n        originEvent: event.originEvent\n      };\n    },\n    actions: [({\n      event\n    }, {\n      draggingEntireBlocks,\n      draggedBlocks,\n      dragOrigin,\n      dropPosition,\n      originEvent\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"select\",\n      at: dropPosition\n    }), ...draggingEntireBlocks ? draggedBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.block\",\n      at: block.path\n    })) : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: dragOrigin.selection\n    })], (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.blocks\",\n      blocks: event.data,\n      placement: draggingEntireBlocks ? originEvent.position.block === \"start\" ? \"before\" : originEvent.position.block === \"end\" ? \"after\" : \"auto\" : \"auto\"\n    })]]\n  })\n], breakingAtTheEndOfTextBlock = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot);\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const atTheEndOfBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isAtTheEndOfBlock)(focusTextBlock)(snapshot), focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return atTheEndOfBlock ? {\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    focusListItem,\n    focusLevel\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }],\n      markDefs: [],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: snapshot.context.schema.styles[0]?.name\n    },\n    placement: \"after\"\n  })]]\n}), breakingAtTheStartOfTextBlock = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot);\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusSpan)(snapshot), focusDecorators = focusSpan?.node.marks?.filter((mark) => snapshot.context.schema.decorators.some((decorator) => decorator.name === mark) ?? []), focusAnnotations = focusSpan?.node.marks?.filter((mark) => !snapshot.context.schema.decorators.some((decorator) => decorator.name === mark)) ?? [], focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isAtTheStartOfBlock)(focusTextBlock)(snapshot) ? {\n      focusAnnotations,\n      focusDecorators,\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    focusAnnotations,\n    focusDecorators,\n    focusListItem,\n    focusLevel\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        marks: focusAnnotations.length === 0 ? focusDecorators : [],\n        text: \"\"\n      }],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: snapshot.context.schema.styles[0]?.name\n    },\n    placement: \"before\",\n    select: \"none\"\n  })]]\n}), breakingEntireDocument = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionExpanded)(snapshot))\n      return !1;\n    const firstBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFirstBlock)(snapshot), lastBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getLastBlock)(snapshot);\n    if (!firstBlock || !lastBlock)\n      return !1;\n    const firstBlockStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: firstBlock\n    }), selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionStartPoint)(snapshot.context.selection), lastBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: lastBlock\n    }), selectionEndPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionEndPoint)(snapshot.context.selection);\n    return (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(firstBlockStartPoint, selectionStartPoint) && (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(lastBlockEndPoint, selectionEndPoint) ? {\n      selection: snapshot.context.selection\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n}), breakingEntireBlocks = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionExpanded)(snapshot))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedBlocks)(snapshot), selectionStartBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionEndBlock)(snapshot);\n    if (!selectionStartBlock || !selectionEndBlock)\n      return !1;\n    const startBlockStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: selectionStartBlock\n    }), selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionStartPoint)(snapshot.context.selection), endBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: selectionEndBlock\n    }), selectionEndPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionEndPoint)(snapshot.context.selection);\n    return (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(selectionStartPoint, startBlockStartPoint) && (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(selectionEndPoint, endBlockEndPoint) ? {\n      selectedBlocks\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    selectedBlocks\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }]\n    },\n    placement: \"before\",\n    select: \"start\"\n  }), ...selectedBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: block.path\n  }))]]\n}), breakingInlineObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot), focusInlineObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusInlineObject)(snapshot);\n    return selectionCollapsed && focusInlineObject;\n  },\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"move.forward\",\n    distance: 1\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"split\"\n  })]]\n}), coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject\n};\nfunction isAtTheBeginningOfBlock({\n  context,\n  block\n}) {\n  return !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(context, block) || !context.selection || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(context.selection) ? !1 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getChildKeyFromSelectionPoint)(context.selection.focus) === block.children[0]._key && context.selection.focus.offset === 0;\n}\nconst MAX_LIST_LEVEL = 10, clearListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot);\n    return !focusTextBlock || focusTextBlock.node.level !== 1 || !isAtTheBeginningOfBlock({\n      context: snapshot.context,\n      block: focusTextBlock.node\n    }) ? !1 : {\n      focusTextBlock\n    };\n  },\n  actions: [(_, {\n    focusTextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusTextBlock.path\n  })]]\n}), unindentListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusSpan)(snapshot);\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n      focusTextBlock,\n      level: focusTextBlock.node.level - 1\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    level\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    props: {\n      level\n    },\n    at: focusTextBlock.path\n  })]]\n}), mergeTextIntoListOnDelete = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusListBlock)(snapshot), nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getNextBlock)(snapshot);\n    return !focusListBlock || !nextBlock || !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, nextBlock.node) || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      focusListBlock,\n      nextBlock\n    };\n  },\n  actions: [(_, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: nextBlock.node,\n    placement: \"auto\",\n    select: \"start\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: nextBlock.path\n  })]]\n}), mergeTextIntoListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot), previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getPreviousBlock)(snapshot);\n    if (!focusTextBlock || !previousBlock || !isAtTheBeginningOfBlock({\n      context: snapshot.context,\n      block: focusTextBlock.node\n    }) || !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, previousBlock.node) || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, previousBlock.node))\n      return !1;\n    const previousBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    });\n    return {\n      focusTextBlock,\n      previousBlockEndPoint\n    };\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlockEndPoint\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: previousBlockEndPoint,\n      focus: previousBlockEndPoint\n    }\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: focusTextBlock.node,\n    placement: \"auto\",\n    select: \"start\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  })]]\n}), deletingListFromStart = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const blocksToDelete = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedBlocks)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at\n      }\n    });\n    if (blocksToDelete.length < 2)\n      return !1;\n    const startBlock = blocksToDelete.at(0)?.node, middleBlocks = blocksToDelete.slice(1, -1), endBlock = blocksToDelete.at(-1)?.node;\n    if (!(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, startBlock) || !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, endBlock))\n      return !1;\n    const deleteStartPoint = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionStartPoint)({\n      context: {\n        ...snapshot.context,\n        selection: event.at\n      }\n    }), deleteEndPoint = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionEndPoint)({\n      context: {\n        ...snapshot.context,\n        selection: event.at\n      }\n    });\n    if (!deleteStartPoint || !deleteEndPoint)\n      return !1;\n    const startBlockStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{\n          _key: startBlock._key\n        }]\n      }\n    });\n    if (!(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(deleteStartPoint, startBlockStartPoint))\n      return !1;\n    const startBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{\n          _key: startBlock._key\n        }]\n      }\n    }), endBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: {\n        node: endBlock,\n        path: [{\n          _key: endBlock._key\n        }]\n      }\n    }), slicedEndBlock = (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_28__.sliceTextBlock)({\n      context: {\n        schema: snapshot.context.schema,\n        selection: {\n          anchor: deleteEndPoint,\n          focus: endBlockEndPoint\n        }\n      },\n      block: endBlock\n    });\n    return {\n      startBlockStartPoint,\n      startBlockEndPoint,\n      middleBlocks,\n      endBlock,\n      slicedEndBlock\n    };\n  },\n  actions: [(_, {\n    startBlockStartPoint,\n    startBlockEndPoint,\n    middleBlocks,\n    endBlock,\n    slicedEndBlock\n  }) => [\n    // All block in between can safely be deleted.\n    ...middleBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.block\",\n      at: block.path\n    })),\n    // The last block is deleted as well.\n    (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.block\",\n      at: [{\n        _key: endBlock._key\n      }]\n    }),\n    // But in case the delete operation didn't reach all the way to the end\n    // of it, we first place the caret at the end of the start block...\n    (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"select\",\n      at: {\n        anchor: startBlockEndPoint,\n        focus: startBlockEndPoint\n      }\n    }),\n    // ...and insert the rest of the end block at the end of it.\n    (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.block\",\n      block: slicedEndBlock,\n      placement: \"auto\",\n      select: \"none\"\n    }),\n    // And finally, we delete the original text of the start block.\n    (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: {\n        anchor: startBlockStartPoint,\n        focus: startBlockEndPoint\n      }\n    })\n  ]]\n}), clearListOnEnter = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot), focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusListBlock)(snapshot);\n    return !selectionCollapsed || !focusListBlock || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      focusListBlock\n    };\n  },\n  actions: [(_, {\n    focusListBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusListBlock.path\n  })]]\n}), indentListOnTab = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.tab.guard(event.originEvent))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedBlocks)(snapshot), selectedListBlocks = selectedBlocks.flatMap((block) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    props: {\n      level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1))\n    },\n    at: selectedListBlock.path\n  }))]\n}), unindentListOnShiftTab = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.shiftTab.guard(event.originEvent))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedBlocks)(snapshot), selectedListBlocks = selectedBlocks.flatMap((block) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    props: {\n      level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1))\n    },\n    at: selectedListBlock.path\n  }))]\n}), inheritListLevel = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusListBlock)(snapshot);\n    if (!focusListBlock)\n      return !1;\n    const firstInsertedBlock = event.blocks.at(0), secondInsertedBlock = event.blocks.at(1), insertedListBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, firstInsertedBlock) ? firstInsertedBlock : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, secondInsertedBlock) ? secondInsertedBlock : void 0;\n    if (!insertedListBlock)\n      return !1;\n    const levelDifference = focusListBlock.node.level - insertedListBlock.level;\n    return levelDifference === 0 ? !1 : {\n      levelDifference,\n      insertedListBlock\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    levelDifference,\n    insertedListBlock\n  }) => {\n    let adjustLevel = !0, listStartBlockFound = !1;\n    return [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      ...event,\n      blocks: event.blocks.map((block) => (block._key === insertedListBlock._key && (listStartBlockFound = !0), adjustLevel ? listStartBlockFound && adjustLevel && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, block) ? {\n        ...block,\n        level: Math.min(MAX_LIST_LEVEL, Math.max(1, block.level + levelDifference))\n      } : (listStartBlockFound && (adjustLevel = !1), block) : block))\n    })];\n  }]\n}), inheritListItem = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusListBlock)(snapshot);\n    if (!focusListBlock || (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusListBlock.node))\n      return !1;\n    const firstInsertedBlock = event.blocks.at(0), secondInsertedBlock = event.blocks.at(1), insertedListBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, firstInsertedBlock) ? firstInsertedBlock : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, secondInsertedBlock) ? secondInsertedBlock : void 0;\n    return !insertedListBlock || focusListBlock.node.level !== insertedListBlock.level || focusListBlock.node.listItem === insertedListBlock.listItem ? !1 : {\n      listItem: focusListBlock.node.listItem,\n      insertedListBlock\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    listItem,\n    insertedListBlock\n  }) => {\n    let adjustListItem = !0, listStartBlockFound = !1;\n    return [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      ...event,\n      blocks: event.blocks.map((block) => (block._key === insertedListBlock._key && (listStartBlockFound = !0), adjustListItem ? listStartBlockFound && adjustListItem && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, block) ? {\n        ...block,\n        listItem: block.level === insertedListBlock.level ? listItem : block.listItem\n      } : (listStartBlockFound && (adjustListItem = !1), block) : block))\n    })];\n  }]\n}), inheritListProperties = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"auto\" || event.block._type !== snapshot.context.schema.block.name || event.block.listItem !== void 0)\n      return !1;\n    const focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusListBlock)(snapshot);\n    return !focusListBlock || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      level: focusListBlock.node.level,\n      listItem: focusListBlock.node.listItem\n    };\n  },\n  actions: [({\n    event\n  }, {\n    level,\n    listItem\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    ...event,\n    block: {\n      ...event.block,\n      level,\n      listItem\n    }\n  })]]\n}), coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  mergeTextIntoListOnDelete,\n  mergeTextIntoListOnBackspace,\n  deletingListFromStart,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n  inheritListLevel,\n  inheritListItem,\n  inheritListProperties\n}, coreBehaviorsConfig = [coreAnnotationBehaviors.addAnnotationOnCollapsedSelection, coreDecoratorBehaviors.strongShortcut, coreDecoratorBehaviors.emShortcut, coreDecoratorBehaviors.underlineShortcut, coreDecoratorBehaviors.codeShortcut, ...coreDndBehaviors, coreBlockObjectBehaviors.clickingAboveLonelyBlockObject, coreBlockObjectBehaviors.clickingBelowLonelyBlockObject, coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject, coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject, coreBlockObjectBehaviors.breakingBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject, coreListBehaviors.clearListOnBackspace, coreListBehaviors.unindentListOnBackspace, coreListBehaviors.mergeTextIntoListOnDelete, coreListBehaviors.mergeTextIntoListOnBackspace, coreListBehaviors.deletingListFromStart, coreListBehaviors.clearListOnEnter, coreListBehaviors.indentListOnTab, coreListBehaviors.unindentListOnShiftTab, coreListBehaviors.inheritListLevel, coreListBehaviors.inheritListItem, coreListBehaviors.inheritListProperties, coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock, coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock, coreInsertBreakBehaviors.breakingEntireDocument, coreInsertBreakBehaviors.breakingEntireBlocks, coreInsertBreakBehaviors.breakingInlineObject].map((behavior) => ({\n  behavior,\n  priority: corePriority\n})), abstractAnnotationBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"annotation.set\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const blockKey = event.at[0]._key, markDefKey = event.at[2]._key, block = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: [{\n              _key: blockKey\n            }],\n            offset: 0\n          },\n          focus: {\n            path: [{\n              _key: blockKey\n            }],\n            offset: 0\n          }\n        }\n      }\n    });\n    if (!block)\n      return !1;\n    const updatedMarkDefs = block.node.markDefs?.map((markDef) => markDef._key === markDefKey ? {\n      ...markDef,\n      ...event.props\n    } : markDef);\n    return {\n      blockKey,\n      updatedMarkDefs\n    };\n  },\n  actions: [(_, {\n    blockKey,\n    updatedMarkDefs\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    at: [{\n      _key: blockKey\n    }],\n    props: {\n      markDefs: updatedMarkDefs\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"annotation.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveAnnotation)(event.annotation.name)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"annotation.remove\",\n    annotation: event.annotation\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"annotation.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveAnnotation)(event.annotation.name)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n})], abstractDecoratorBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"decorator.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveDecorator)(event.decorator)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"decorator.remove\",\n    decorator: event.decorator\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"decorator.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const manualSelection = event.at ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_29__.blockOffsetsToSelection)({\n      context: snapshot.context,\n      offsets: event.at\n    }) : null;\n    return manualSelection ? !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveDecorator)(event.decorator)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: manualSelection\n      }\n    }) : !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveDecorator)(event.decorator)(snapshot);\n  },\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    ...event,\n    type: \"decorator.add\"\n  })]]\n})], abstractDeleteBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    direction: \"backward\",\n    unit: event.unit,\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.direction !== \"backward\")\n      return !1;\n    const previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getPreviousBlock)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot);\n    if (!previousBlock || !focusTextBlock || !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isAtTheStartOfBlock)(focusTextBlock)(snapshot))\n      return !1;\n    const previousBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    });\n    return (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, previousBlock.node) ? {\n      previousBlockEndPoint,\n      focusTextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    previousBlockEndPoint,\n    focusTextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: previousBlockEndPoint,\n      focus: previousBlockEndPoint\n    }\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: focusTextBlock.node,\n    placement: \"auto\",\n    select: \"start\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    direction: \"forward\",\n    unit: event.unit,\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.direction !== \"forward\")\n      return !1;\n    const nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getNextBlock)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot);\n    return !nextBlock || !focusTextBlock || !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isAtTheEndOfBlock)(focusTextBlock)(snapshot) || !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, nextBlock.node) ? !1 : {\n      nextBlock\n    };\n  },\n  actions: [(_, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: nextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: nextBlock.node,\n    placement: \"auto\",\n    select: \"none\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.block\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: {\n      anchor: {\n        path: event.at,\n        offset: 0\n      },\n      focus: {\n        path: event.at,\n        offset: 0\n      }\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.child\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusChild = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusChild)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return focusChild ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isSpan)(snapshot.context, focusChild.node) ? {\n      selection: {\n        anchor: {\n          path: event.at,\n          offset: 0\n        },\n        focus: {\n          path: event.at,\n          offset: focusChild.node.text.length\n        }\n      }\n    } : {\n      selection: {\n        anchor: {\n          path: event.at,\n          offset: 0\n        },\n        focus: {\n          path: event.at,\n          offset: 0\n        }\n      }\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.text\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const selection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_29__.blockOffsetsToSelection)({\n      context: snapshot.context,\n      offsets: event.at\n    });\n    if (!selection)\n      return !1;\n    const trimmedSelection = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getTrimmedSelection)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        value: snapshot.context.value,\n        selection\n      }\n    });\n    return trimmedSelection ? {\n      selection: trimmedSelection\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n})], abstractDeserializeBehaviors = [\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialize\",\n    guard: ({\n      event\n    }) => {\n      const portableText = event.originEvent.originEvent.dataTransfer.getData(\"application/x-portable-text\");\n      if (portableText)\n        return {\n          type: \"deserialize.data\",\n          mimeType: \"application/x-portable-text\",\n          data: portableText,\n          originEvent: event.originEvent\n        };\n      const json = event.originEvent.originEvent.dataTransfer.getData(\"application/json\");\n      if (json)\n        return {\n          type: \"deserialize.data\",\n          mimeType: \"application/json\",\n          data: json,\n          originEvent: event.originEvent\n        };\n      const html = event.originEvent.originEvent.dataTransfer.getData(\"text/html\");\n      if (html)\n        return {\n          type: \"deserialize.data\",\n          mimeType: \"text/html\",\n          data: html,\n          originEvent: event.originEvent\n        };\n      const text = event.originEvent.originEvent.dataTransfer.getData(\"text/plain\");\n      return text ? {\n        type: \"deserialize.data\",\n        mimeType: \"text/plain\",\n        data: text,\n        originEvent: event.originEvent\n      } : !1;\n    },\n    actions: [(_, deserializeEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)(deserializeEvent)]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialize\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"deserialization.failure\",\n      mimeType: \"*/*\",\n      reason: \"No Behavior was able to handle the incoming data\",\n      originEvent: event.originEvent\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialize.data\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const converter = snapshot.context.converters.find((converter2) => converter2.mimeType === event.mimeType);\n      return converter ? converter.deserialize({\n        snapshot,\n        event: {\n          type: \"deserialize\",\n          data: event.data\n        }\n      }) : !1;\n    },\n    actions: [({\n      event\n    }, deserializeEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      ...deserializeEvent,\n      originEvent: event.originEvent\n    })]]\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.success\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if ((0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot) && event.mimeType === \"text/plain\" && event.originEvent.type === \"clipboard.paste\") {\n        const activeDecorators = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getActiveDecorators)(snapshot);\n        return {\n          activeAnnotations: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getActiveAnnotations)(snapshot),\n          activeDecorators,\n          textRuns: event.data.flatMap((block) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, block) ? [(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getTextBlockText)(block)] : [])\n        };\n      }\n      return !1;\n    },\n    actions: [(_, {\n      activeAnnotations,\n      activeDecorators,\n      textRuns\n    }) => textRuns.flatMap((textRun, index) => index !== textRuns.length - 1 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.span\",\n      text: textRun,\n      decorators: activeDecorators,\n      annotations: activeAnnotations.map(({\n        _key,\n        _type,\n        ...value\n      }) => ({\n        name: _type,\n        value\n      }))\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.break\"\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.span\",\n      text: textRun,\n      decorators: activeDecorators,\n      annotations: activeAnnotations.map(({\n        _key,\n        _type,\n        ...value\n      }) => ({\n        name: _type,\n        value\n      }))\n    })])]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.success\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.blocks\",\n      blocks: event.data,\n      placement: \"auto\"\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.failure\",\n    guard: ({\n      event\n    }) => {\n      if (event.mimeType === \"application/x-portable-text\") {\n        const json = event.originEvent.originEvent.dataTransfer.getData(\"application/json\");\n        if (json)\n          return {\n            type: \"deserialize.data\",\n            mimeType: \"application/json\",\n            data: json,\n            originEvent: event.originEvent\n          };\n      }\n      if (event.mimeType === \"application/json\") {\n        const html = event.originEvent.originEvent.dataTransfer.getData(\"text/html\");\n        if (html)\n          return {\n            type: \"deserialize.data\",\n            mimeType: \"text/html\",\n            data: html,\n            originEvent: event.originEvent\n          };\n      }\n      if (event.mimeType === \"text/html\") {\n        const text = event.originEvent.originEvent.dataTransfer.getData(\"text/plain\");\n        if (text)\n          return {\n            type: \"deserialize.data\",\n            mimeType: \"text/plain\",\n            data: text,\n            originEvent: event.originEvent\n          };\n      }\n      return !1;\n    },\n    actions: [(_, deserializeDataEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)(deserializeDataEvent)]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.failure\",\n    actions: [({\n      event\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        console.warn(`Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`);\n      }\n    }]]\n  })\n], abstractInsertBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"before\",\n  actions: [({\n    event\n  }) => event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"before\" : \"after\",\n    select: event.select ?? \"end\"\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"after\",\n  actions: [({\n    event\n  }) => event.blocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: event.select ?? \"end\"\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"auto\")\n      return !1;\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot);\n    return focusTextBlock ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    focusTextBlock\n  }) => event.blocks.length === 1 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: event.blocks[0],\n    placement: \"auto\",\n    select: event.select ?? \"end\"\n  })] : (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node) ? event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"auto\" : \"after\",\n    select: event.select ?? \"end\"\n  })) : event.blocks.flatMap((block, index) => index === 0 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"split\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.previous block\",\n    select: \"end\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"auto\",\n    select: event.select ?? \"end\"\n  })] : index === event.blocks.length - 1 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.next block\",\n    select: \"start\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"auto\",\n    select: event.select ?? \"end\"\n  })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: event.select ?? \"end\"\n  })])]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"auto\",\n  actions: [({\n    event\n  }) => event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"auto\" : \"after\",\n    select: event.select ?? \"end\"\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"split\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.soft break\",\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.text\",\n    text: `\n`\n  })]]\n})], abstractKeyboardBehaviors = [\n  /**\n   * Allow raising an `insert.break` event when pressing Enter on an inline\n   * object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.break.guard(event.originEvent) && (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusInlineObject)(snapshot),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.break\"\n    })]]\n  }),\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.lineBreak.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.soft break\"\n    })]]\n  }),\n  /**\n   * Manual handling of undo shortcuts.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.history.undo.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"history.undo\"\n    })]]\n  }),\n  /**\n   * Manual handling of redo shortcuts.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.history.redo.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"history.redo\"\n    })]]\n  })\n], abstractListItemBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"list item.add\",\n  guard: ({\n    snapshot,\n    event\n  }) => snapshot.context.schema.lists.some((list) => list.name === event.listItem) ? {\n    selectedTextBlocks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedTextBlocks)(snapshot)\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    at: block.path,\n    props: {\n      level: block.node.level ?? 1,\n      listItem: event.listItem\n    }\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"list item.remove\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [(_, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.unset\",\n    at: block.path,\n    props: [\"level\", \"listItem\"]\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"list item.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveListItem)(event.listItem)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"list item.remove\",\n    listItem: event.listItem\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"list item.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveListItem)(event.listItem)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"list item.add\",\n    listItem: event.listItem\n  })]]\n})], abstractMoveBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"move.block up\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getPreviousBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return previousBlock ? {\n      previousBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    previousBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"move.block\",\n    at: event.at,\n    to: previousBlock.path\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"move.block down\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getNextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return nextBlock ? {\n      nextBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"move.block\",\n    at: event.at,\n    to: nextBlock.path\n  })]]\n})], abstractSelectBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"select.previous block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getPreviousBlock)(snapshot);\n    if (!previousBlock)\n      return !1;\n    const point = event.select === \"end\" ? (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    }) : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    });\n    return {\n      selection: {\n        anchor: point,\n        focus: point\n      }\n    };\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"select.next block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getNextBlock)(snapshot);\n    if (!nextBlock)\n      return !1;\n    const point = event.select === \"end\" ? (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: nextBlock\n    }) : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: nextBlock\n    });\n    return {\n      selection: {\n        anchor: point,\n        focus: point\n      }\n    };\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: selection\n  })]]\n})], abstractSerializeBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"serialize\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize.data\",\n    mimeType: \"application/x-portable-text\",\n    originEvent: event.originEvent\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize.data\",\n    mimeType: \"application/json\",\n    originEvent: event.originEvent\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize.data\",\n    mimeType: \"text/html\",\n    originEvent: event.originEvent\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize.data\",\n    mimeType: \"text/plain\",\n    originEvent: event.originEvent\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"serialize.data\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const converter = snapshot.context.converters.find((converter2) => converter2.mimeType === event.mimeType);\n    return converter ? converter.serialize({\n      snapshot,\n      event: {\n        type: \"serialize\",\n        originEvent: event.originEvent.type\n      }\n    }) : !1;\n  },\n  actions: [({\n    event\n  }, serializeEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    ...serializeEvent,\n    originEvent: event.originEvent\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"serialization.success\",\n  actions: [({\n    event\n  }) => [{\n    type: \"effect\",\n    effect: () => {\n      event.originEvent.originEvent.dataTransfer.setData(event.mimeType, event.data);\n    }\n  }]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"serialization.failure\",\n  actions: [({\n    event\n  }) => [{\n    type: \"effect\",\n    effect: () => {\n      console.warn(`Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`);\n    }\n  }]]\n})], abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusInlineObject)(snapshot),\n    actions: []\n  }),\n  /**\n   * You can't split a block object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getFocusBlockObject)(snapshot),\n    actions: []\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      if (!selection || (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(selection))\n        return !1;\n      const selectionStartBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionEndBlock)(snapshot);\n      return !selectionStartBlock || !selectionEndBlock ? !1 : !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, selectionStartBlock.node) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, selectionEndBlock.node) ? {\n        selection\n      } : !1;\n    },\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      if (!selection || (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(selection))\n        return !1;\n      const selectionStartBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectionEndBlock)(snapshot);\n      if (!selectionStartBlock || !selectionEndBlock || selectionStartBlock.node._key === selectionEndBlock.node._key)\n        return !1;\n      const startPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionStartPoint)(selection), startBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n        context: snapshot.context,\n        block: selectionStartBlock\n      }), endPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionEndPoint)(selection), endBlockStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n        context: snapshot.context,\n        block: selectionEndBlock\n      }), blocksInBetween = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedValue)(snapshot).filter((block) => block._key !== selectionStartBlock.node._key && block._key !== selectionEndBlock.node._key);\n      return {\n        startPoint,\n        startBlockEndPoint,\n        endPoint,\n        endBlockStartPoint,\n        blocksInBetween\n      };\n    },\n    actions: [(_, {\n      startPoint,\n      startBlockEndPoint,\n      endPoint,\n      endBlockStartPoint,\n      blocksInBetween\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: {\n        anchor: startPoint,\n        focus: startBlockEndPoint\n      }\n    }), ...blocksInBetween.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.block\",\n      at: [{\n        _key: block._key\n      }]\n    })), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: {\n        anchor: endBlockStartPoint,\n        focus: endPoint\n      }\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      return !selection || (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(selection) ? !1 : {\n        selection\n      };\n    },\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: selection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"split\"\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      if (!selection || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(selection))\n        return !1;\n      const selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionStartPoint)(selection), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusTextBlock)(snapshot);\n      if (!focusTextBlock)\n        return !1;\n      const blockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n        context: snapshot.context,\n        block: focusTextBlock\n      }), newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint\n      }, newTextBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n        block: (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_28__.sliceTextBlock)({\n          context: {\n            ...snapshot.context,\n            selection: newTextBlockSelection\n          },\n          block: focusTextBlock.node\n        }),\n        context: snapshot.context,\n        options: {\n          refreshKeys: !1,\n          validateFields: !1\n        }\n      });\n      return newTextBlock ? {\n        newTextBlock,\n        newTextBlockSelection\n      } : !1;\n    },\n    actions: [(_, {\n      newTextBlock,\n      newTextBlockSelection\n    }) => (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(newTextBlockSelection) ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.block\",\n      block: newTextBlock,\n      placement: \"after\",\n      select: \"start\"\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: newTextBlockSelection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.block\",\n      block: newTextBlock,\n      placement: \"after\",\n      select: \"start\"\n    })]]\n  })\n], abstractStyleBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"style.add\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [({\n    event\n  }, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    at: block.path,\n    props: {\n      style: event.style\n    }\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"style.remove\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [(_, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.unset\",\n    at: block.path,\n    props: [\"style\"]\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"style.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveStyle)(event.style)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"style.remove\",\n    style: event.style\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"style.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveStyle)(event.style)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"style.add\",\n    style: event.style\n  })]]\n})], abstractBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.copy\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusSpan)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot);\n    return focusSpan && selectionCollapsed;\n  },\n  actions: []\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.copy\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize\",\n    originEvent: event\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.cut\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.getFocusSpan)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionCollapsed)(snapshot);\n    return focusSpan && selectionCollapsed;\n  },\n  actions: []\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.cut\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize\",\n    originEvent: event\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"drag.dragstart\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize\",\n    originEvent: event\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.paste\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection && (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_19__.isSelectionExpanded)(snapshot) ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"deserialize\",\n    originEvent: event\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.paste\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"deserialize\",\n    originEvent: event\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"input.*\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"deserialize\",\n    originEvent: event\n  })]]\n}), ...abstractAnnotationBehaviors, ...abstractDecoratorBehaviors, ...abstractDeleteBehaviors, ...abstractDeserializeBehaviors, ...abstractInsertBehaviors, ...abstractKeyboardBehaviors, ...abstractListItemBehaviors, ...abstractMoveBehaviors, ...abstractStyleBehaviors, ...abstractSelectBehaviors, ...abstractSerializeBehaviors, ...abstractSplitBehaviors];\nfunction isSyntheticBehaviorEvent(event) {\n  return !isCustomBehaviorEvent(event) && !isNativeBehaviorEvent(event) && !isAbstractBehaviorEvent(event);\n}\nconst abstractBehaviorEventTypes = [\"annotation.set\", \"annotation.toggle\", \"decorator.toggle\", \"delete.backward\", \"delete.block\", \"delete.child\", \"delete.forward\", \"delete.text\", \"deserialize\", \"deserialize.data\", \"deserialization.success\", \"deserialization.failure\", \"insert.blocks\", \"insert.break\", \"insert.soft break\", \"list item.add\", \"list item.remove\", \"list item.toggle\", \"move.block down\", \"move.block up\", \"select.previous block\", \"select.next block\", \"serialize\", \"serialize.data\", \"serialization.success\", \"serialization.failure\", \"split\", \"style.add\", \"style.remove\", \"style.toggle\"];\nfunction isAbstractBehaviorEvent(event) {\n  return abstractBehaviorEventTypes.includes(event.type);\n}\nconst nativeBehaviorEventTypes = [\"clipboard.copy\", \"clipboard.cut\", \"clipboard.paste\", \"drag.dragstart\", \"drag.drag\", \"drag.dragend\", \"drag.dragenter\", \"drag.dragover\", \"drag.dragleave\", \"drag.drop\", \"input.*\", \"keyboard.keydown\", \"keyboard.keyup\", \"mouse.click\"];\nfunction isNativeBehaviorEvent(event) {\n  return nativeBehaviorEventTypes.includes(event.type);\n}\nfunction isCustomBehaviorEvent(event) {\n  return event.type.startsWith(\"custom.\");\n}\nconst debug$8 = debugWithName(\"behaviors:event\");\nfunction eventCategory(event) {\n  return isNativeBehaviorEvent(event) ? \"native\" : isAbstractBehaviorEvent(event) ? \"synthetic\" : isCustomBehaviorEvent(event) ? \"custom\" : \"synthetic\";\n}\nfunction performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack\n}) {\n  debug$8(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2));\n  const eventBehaviors = [...remainingEventBehaviors, ...abstractBehaviors].filter((behavior) => {\n    if (behavior.on === \"*\")\n      return !0;\n    const [listenedNamespace] = behavior.on.includes(\"*\") && behavior.on.includes(\".\") ? behavior.on.split(\".\") : [void 0], [eventNamespace] = event.type.includes(\".\") ? event.type.split(\".\") : [void 0];\n    return listenedNamespace !== void 0 && eventNamespace !== void 0 && listenedNamespace === eventNamespace || listenedNamespace !== void 0 && eventNamespace === void 0 && listenedNamespace === event.type ? !0 : behavior.on === event.type;\n  });\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault(), withApplyingBehaviorOperations(editor, () => {\n      debug$8(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2)), performOperation({\n        context: {\n          keyGenerator,\n          schema\n        },\n        operation: {\n          ...event,\n          editor\n        }\n      });\n    }), editor.onChange();\n    return;\n  }\n  const guardSnapshot = getSnapshot();\n  let nativeEventPrevented = !1, defaultBehaviorOverwritten = !1, eventBehaviorIndex = -1;\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++;\n    let shouldRun = !1;\n    try {\n      shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n        snapshot: guardSnapshot,\n        event,\n        dom: createEditorDom(sendBack, editor)\n      });\n    } catch (error) {\n      console.error(new Error(`Evaluating guard for \"${event.type}\" failed due to: ${error.message}`));\n    }\n    if (shouldRun) {\n      defaultBehaviorOverwritten = !0;\n      for (const actionSet of eventBehavior.actions) {\n        const actionsSnapshot = getSnapshot();\n        let actions = [];\n        try {\n          actions = actionSet({\n            snapshot: actionsSnapshot,\n            event,\n            dom: createEditorDom(sendBack, editor)\n          }, shouldRun);\n        } catch (error) {\n          console.error(new Error(`Evaluating actions for \"${event.type}\" failed due to: ${error.message}`));\n        }\n        if (actions.length !== 0) {\n          if (nativeEventPrevented = actions.some((action) => action.type === \"raise\" || action.type === \"execute\") || !actions.some((action) => action.type === \"forward\"), actions.some((action) => action.type === \"execute\")) {\n            withUndoStep(editor, () => {\n              for (const action of actions) {\n                if (action.type === \"effect\") {\n                  try {\n                    action.effect({\n                      send: sendBack\n                    });\n                  } catch (error) {\n                    console.error(new Error(`Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`));\n                  }\n                  continue;\n                }\n                if (action.type === \"forward\") {\n                  const remainingEventBehaviors2 = eventBehaviors.slice(eventBehaviorIndex + 1);\n                  performEvent({\n                    mode: \"forward\",\n                    behaviors,\n                    remainingEventBehaviors: remainingEventBehaviors2,\n                    event: action.event,\n                    editor,\n                    keyGenerator,\n                    schema,\n                    getSnapshot,\n                    nativeEvent,\n                    sendBack\n                  });\n                  continue;\n                }\n                if (action.type === \"raise\") {\n                  performEvent({\n                    mode: \"raise\",\n                    behaviors,\n                    remainingEventBehaviors: behaviors,\n                    event: action.event,\n                    editor,\n                    keyGenerator,\n                    schema,\n                    getSnapshot,\n                    nativeEvent,\n                    sendBack\n                  });\n                  continue;\n                }\n                performEvent({\n                  mode: \"execute\",\n                  behaviors,\n                  remainingEventBehaviors: [],\n                  event: action.event,\n                  editor,\n                  keyGenerator,\n                  schema,\n                  getSnapshot,\n                  nativeEvent: void 0,\n                  sendBack\n                });\n              }\n            });\n            continue;\n          }\n          for (const action of actions) {\n            if (action.type === \"effect\") {\n              try {\n                action.effect({\n                  send: sendBack\n                });\n              } catch (error) {\n                console.error(new Error(`Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`));\n              }\n              continue;\n            }\n            if (action.type === \"forward\") {\n              const remainingEventBehaviors2 = eventBehaviors.slice(eventBehaviorIndex + 1);\n              performEvent({\n                mode: \"forward\",\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors2,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack\n              });\n              continue;\n            }\n            if (action.type === \"raise\") {\n              performEvent({\n                mode: \"raise\",\n                behaviors,\n                remainingEventBehaviors: mode === \"execute\" ? remainingEventBehaviors : behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack\n              });\n              continue;\n            }\n            action.type === \"execute\" && console.error(\"Unexpected action type: `execute`\");\n          }\n        }\n      }\n      break;\n    }\n  }\n  !defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event) ? (nativeEvent?.preventDefault(), withApplyingBehaviorOperations(editor, () => {\n    debug$8(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2)), performOperation({\n      context: {\n        keyGenerator,\n        schema\n      },\n      operation: {\n        ...event,\n        editor\n      }\n    });\n  }), editor.onChange()) : nativeEventPrevented && nativeEvent?.preventDefault();\n}\nfunction sortByPriority(items) {\n  if (items.length === 0)\n    return [];\n  const itemsWithPriority = items.filter((item) => item.priority !== void 0), itemsWithoutPriority = items.filter((item) => item.priority === void 0);\n  if (itemsWithPriority.length === 0)\n    return items;\n  const itemsByPriorityId = new Map(itemsWithPriority.map((item) => [item.priority.id, item])), graph = /* @__PURE__ */ new Map(), inDegree = /* @__PURE__ */ new Map();\n  function ensureNode(id) {\n    graph.has(id) || (graph.set(id, /* @__PURE__ */ new Set()), inDegree.set(id, 0));\n  }\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id;\n    ensureNode(id);\n  }\n  function addEdge(fromId, toId) {\n    !graph.has(fromId) || !graph.has(toId) || (graph.get(fromId)?.add(toId), inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1));\n  }\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id, visited = /* @__PURE__ */ new Set();\n    let ref = item.priority.reference;\n    for (; ref; ) {\n      const refId = ref.priority.id;\n      if (ensureNode(refId), visited.has(refId))\n        throw new Error(\"Circular dependency detected in priorities\");\n      visited.add(refId), ref.importance === \"higher\" ? addEdge(id, refId) : addEdge(refId, id), ref = ref.priority.reference;\n    }\n  }\n  const queue = [];\n  for (const [id, degree] of inDegree)\n    degree === 0 && queue.push(id);\n  const result = [];\n  for (; queue.length > 0; ) {\n    const currentId = queue.shift(), currentItem = itemsByPriorityId.get(currentId);\n    currentItem && result.push(currentItem);\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1;\n      inDegree.set(neighborId, newDegree), newDegree === 0 && queue.push(neighborId);\n    }\n  }\n  for (const item of itemsWithPriority)\n    result.includes(item) || result.push(item);\n  return [...result, ...itemsWithoutPriority];\n}\nfunction createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema\n}) {\n  const selection = editor.selection ? slateRangeToSelection({\n    schema,\n    editor,\n    range: editor.selection\n  }) : null, context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value\n  };\n  return {\n    blockIndexMap: editor.blockIndexMap,\n    context,\n    decoratorState: editor.decoratorState\n  };\n}\nconst debug$7 = debugWithName(\"editor machine\"), editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_32__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {},\n    input: {},\n    tags: {}\n  },\n  actions: {\n    \"add behavior to context\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"add behavior\"), /* @__PURE__ */ new Set([...context.behaviors, event.behaviorConfig])),\n      behaviorsSorted: !1\n    }),\n    \"remove behavior from context\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"remove behavior\"), context.behaviors.delete(event.behaviorConfig), /* @__PURE__ */ new Set([...context.behaviors]))\n    }),\n    \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"internal.patch\"), event)),\n    \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"mutation\"), event)),\n    \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)({\n      type: \"read only\"\n    }),\n    \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)({\n      type: \"editable\"\n    }),\n    \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingEvents: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, [\"internal.patch\", \"mutation\"]), [...context.pendingEvents, event])\n    }),\n    \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.a)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingEvents)\n        enqueue.emit(event);\n    }),\n    \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)({\n      type: \"ready\"\n    }),\n    \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingEvents: []\n    }),\n    \"defer incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingIncomingPatchesEvents: ({\n        context,\n        event\n      }) => event.type === \"patches\" ? [...context.pendingIncomingPatchesEvents, event] : context.pendingIncomingPatchesEvents\n    }),\n    \"emit pending incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.a)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingIncomingPatchesEvents)\n        enqueue.emit(event);\n    }),\n    \"clear pending incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingIncomingPatchesEvents: []\n    }),\n    \"handle blur\": ({\n      event\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"blur\");\n      try {\n        slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.blur(event.editor);\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`));\n      }\n    },\n    \"handle focus\": ({\n      context\n    }) => {\n      if (!context.slateEditor) {\n        console.error(\"No Slate editor found to focus\");\n        return;\n      }\n      try {\n        const currentSelection = context.slateEditor.selection;\n        slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.focus(context.slateEditor), currentSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(context.slateEditor, currentSelection);\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`));\n      }\n    },\n    \"handle behavior event\": ({\n      context,\n      event,\n      self\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, [\"behavior event\"]);\n      try {\n        const behaviors = [...context.behaviors.values()].map((config) => config.behavior);\n        performEvent({\n          mode: \"raise\",\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () => createEditorSnapshot({\n            converters: [...context.converters],\n            editor: event.editor,\n            keyGenerator: context.keyGenerator,\n            readOnly: self.getSnapshot().matches({\n              \"edit mode\": \"read only\"\n            }),\n            schema: context.schema\n          }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (eventSentBack) => {\n            if (eventSentBack.type === \"set drag ghost\") {\n              self.send(eventSentBack);\n              return;\n            }\n            self.send({\n              type: \"behavior event\",\n              behaviorEvent: eventSentBack,\n              editor: event.editor\n            });\n          }\n        });\n      } catch (error) {\n        console.error(new Error(`Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n      }\n    },\n    \"sort behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      behaviors: ({\n        context\n      }) => context.behaviorsSorted ? context.behaviors : new Set(sortByPriority([...context.behaviors.values()])),\n      behaviorsSorted: !0\n    })\n  },\n  guards: {\n    \"slate is busy\": ({\n      context\n    }) => context.slateEditor ? context.slateEditor.operations.length > 0 : !1\n  }\n}).createMachine({\n  id: \"editor\",\n  context: ({\n    input\n  }) => ({\n    behaviors: new Set(coreBehaviorsConfig),\n    behaviorsSorted: !1,\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? !1,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue\n  }),\n  on: {\n    \"add behavior\": {\n      actions: \"add behavior to context\"\n    },\n    \"remove behavior\": {\n      actions: \"remove behavior from context\"\n    },\n    \"update maxBlocks\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        maxBlocks: ({\n          event\n        }) => event.maxBlocks\n      })\n    },\n    \"update selection\": {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        selection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"selection\"\n      }))]\n    },\n    \"set drag ghost\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        dragGhost: ({\n          event\n        }) => event.ghost\n      })\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"edit mode\": {\n      initial: \"read only\",\n      states: {\n        \"read only\": {\n          initial: \"determine initial edit mode\",\n          on: {\n            \"behavior event\": {\n              actions: [\"sort behaviors\", \"handle behavior event\"],\n              guard: ({\n                event\n              }) => event.behaviorEvent.type === \"clipboard.copy\" || event.behaviorEvent.type === \"mouse.click\" || event.behaviorEvent.type === \"serialize\" || event.behaviorEvent.type === \"serialization.failure\" || event.behaviorEvent.type === \"serialization.success\" || event.behaviorEvent.type === \"select\"\n            }\n          },\n          states: {\n            \"determine initial edit mode\": {\n              entry: [() => {\n                debug$7(\"entry: edit mode->read only->determine initial edit mode\");\n              }],\n              exit: [() => {\n                debug$7(\"exit: edit mode->read only->determine initial edit mode\");\n              }],\n              on: {\n                \"done syncing value\": [{\n                  target: \"#editor.edit mode.read only.read only\",\n                  guard: ({\n                    context\n                  }) => context.initialReadOnly\n                }, {\n                  target: \"#editor.edit mode.editable\"\n                }]\n              }\n            },\n            \"read only\": {\n              entry: [() => {\n                debug$7(\"entry: edit mode->read only->read only\");\n              }],\n              exit: [() => {\n                debug$7(\"exit: edit mode->read only->read only\");\n              }],\n              on: {\n                \"update readOnly\": {\n                  guard: ({\n                    event\n                  }) => !event.readOnly,\n                  target: \"#editor.edit mode.editable\",\n                  actions: [\"emit editable\"]\n                }\n              }\n            }\n          }\n        },\n        editable: {\n          on: {\n            \"update readOnly\": {\n              guard: ({\n                event\n              }) => event.readOnly,\n              target: \"#editor.edit mode.read only.read only\",\n              actions: [\"emit read only\"]\n            },\n            \"behavior event\": {\n              actions: [\"sort behaviors\", \"handle behavior event\"]\n            },\n            blur: {\n              actions: \"handle blur\"\n            },\n            focus: {\n              target: \".focusing\",\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n                slateEditor: ({\n                  event\n                }) => event.editor\n              })]\n            }\n          },\n          initial: \"idle\",\n          states: {\n            idle: {\n              entry: [() => {\n                debug$7(\"entry: edit mode->editable->idle\");\n              }],\n              exit: [() => {\n                debug$7(\"exit: edit mode->editable-idle\");\n              }],\n              on: {\n                dragstart: {\n                  actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n                    internalDrag: ({\n                      event\n                    }) => ({\n                      origin: event.origin\n                    })\n                  })],\n                  target: \"dragging internally\"\n                }\n              }\n            },\n            focusing: {\n              initial: \"checking if busy\",\n              states: {\n                \"checking if busy\": {\n                  entry: [() => {\n                    debug$7(\"entry: edit mode->editable->focusing->checking if busy\");\n                  }],\n                  exit: [() => {\n                    debug$7(\"exit: edit mode->editable->focusing->checking if busy\");\n                  }],\n                  always: [{\n                    guard: \"slate is busy\",\n                    target: \"busy\"\n                  }, {\n                    target: \"#editor.edit mode.editable.idle\",\n                    actions: [\"handle focus\"]\n                  }]\n                },\n                busy: {\n                  entry: [() => {\n                    debug$7(\"entry: edit mode->editable->focusing-busy\");\n                  }],\n                  exit: [() => {\n                    debug$7(\"exit: edit mode->editable->focusing->busy\");\n                  }],\n                  after: {\n                    10: {\n                      target: \"checking if busy\"\n                    }\n                  }\n                }\n              }\n            },\n            \"dragging internally\": {\n              entry: [() => {\n                debug$7(\"entry: edit mode->editable->dragging internally\");\n              }],\n              exit: [() => {\n                debug$7(\"exit: edit mode->editable->dragging internally\");\n              }, ({\n                context\n              }) => {\n                if (context.dragGhost)\n                  try {\n                    context.dragGhost.parentNode?.removeChild(context.dragGhost);\n                  } catch (error) {\n                    console.error(new Error(`Removing the drag ghost failed due to: ${error.message}`));\n                  }\n              }, (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n                dragGhost: void 0\n              }), (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n                internalDrag: void 0\n              })],\n              tags: [\"dragging internally\"],\n              on: {\n                dragend: {\n                  target: \"idle\"\n                },\n                drop: {\n                  target: \"idle\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    setup: {\n      initial: \"setting up\",\n      states: {\n        \"setting up\": {\n          entry: [() => {\n            debug$7(\"entry: setup->setting up\");\n          }],\n          exit: [() => {\n            debug$7(\"exit: setup->setting up\");\n          }, \"emit ready\", \"emit pending incoming patches\", \"clear pending incoming patches\"],\n          on: {\n            \"internal.patch\": {\n              actions: \"defer event\"\n            },\n            mutation: {\n              actions: \"defer event\"\n            },\n            \"done syncing value\": {\n              target: \"set up\"\n            },\n            patches: {\n              actions: [\"defer incoming patches\"]\n            }\n          }\n        },\n        \"set up\": {\n          type: \"parallel\",\n          states: {\n            \"value sync\": {\n              initial: \"idle\",\n              states: {\n                idle: {\n                  entry: [() => {\n                    debug$7(\"entry: setup->set up->value sync->idle\");\n                  }],\n                  exit: [() => {\n                    debug$7(\"exit: setup->set up->value sync->idle\");\n                  }],\n                  on: {\n                    patches: {\n                      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n                        event\n                      }) => event)]\n                    },\n                    \"syncing value\": {\n                      target: \"syncing value\"\n                    }\n                  }\n                },\n                \"syncing value\": {\n                  entry: [() => {\n                    debug$7(\"entry: setup->set up->value sync->syncing value\");\n                  }],\n                  exit: [() => {\n                    debug$7(\"exit: setup->set up->value sync->syncing value\");\n                  }, \"emit pending incoming patches\", \"clear pending incoming patches\"],\n                  on: {\n                    patches: {\n                      actions: [\"defer incoming patches\"]\n                    },\n                    \"done syncing value\": {\n                      target: \"idle\"\n                    }\n                  }\n                }\n              }\n            },\n            writing: {\n              initial: \"pristine\",\n              states: {\n                pristine: {\n                  initial: \"idle\",\n                  states: {\n                    idle: {\n                      entry: [() => {\n                        debug$7(\"entry: setup->set up->writing->pristine->idle\");\n                      }],\n                      exit: [() => {\n                        debug$7(\"exit: setup->set up->writing->pristine->idle\");\n                      }],\n                      on: {\n                        normalizing: {\n                          target: \"normalizing\"\n                        },\n                        \"internal.patch\": {\n                          actions: \"defer event\",\n                          target: \"#editor.setup.set up.writing.dirty\"\n                        },\n                        mutation: {\n                          actions: \"defer event\",\n                          target: \"#editor.setup.set up.writing.dirty\"\n                        }\n                      }\n                    },\n                    normalizing: {\n                      entry: [() => {\n                        debug$7(\"entry: setup->set up->writing->pristine->normalizing\");\n                      }],\n                      exit: [() => {\n                        debug$7(\"exit: setup->set up->writing->pristine->normalizing\");\n                      }],\n                      on: {\n                        \"done normalizing\": {\n                          target: \"idle\"\n                        },\n                        \"internal.patch\": {\n                          actions: \"defer event\"\n                        },\n                        mutation: {\n                          actions: \"defer event\"\n                        }\n                      }\n                    }\n                  }\n                },\n                dirty: {\n                  entry: [() => {\n                    debug$7(\"entry: setup->set up->writing->dirty\");\n                  }, \"emit pending events\", \"clear pending events\"],\n                  exit: [() => {\n                    debug$7(\"exit: setup->set up->writing->dirty\");\n                  }],\n                  on: {\n                    \"internal.patch\": {\n                      actions: \"emit patch event\"\n                    },\n                    mutation: {\n                      actions: \"emit mutation event\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}), debug$6 = debugWithName(\"mutation-machine\"), mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_32__.setup)({\n  types: {\n    context: {},\n    events: {},\n    input: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      readOnly: ({\n        context,\n        event\n      }) => event.type === \"update readOnly\" ? event.readOnly : context.readOnly\n    }),\n    \"emit patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"patch\"), {\n      type: \"patch\",\n      patch: event.patch\n    })),\n    \"emit has pending mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)({\n      type: \"has pending mutations\"\n    }),\n    \"emit mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.a)(({\n      context,\n      enqueue\n    }) => {\n      for (const bulk of context.pendingMutations)\n        enqueue.emit({\n          type: \"mutation\",\n          patches: bulk.patches,\n          snapshot: bulk.value\n        });\n    }),\n    \"clear pending mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingMutations: []\n    }),\n    \"defer mutation\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingMutations: ({\n        context,\n        event\n      }) => {\n        if ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"patch\"), context.pendingMutations.length === 0)\n          return [{\n            operationId: event.operationId,\n            value: event.value,\n            patches: [event.patch]\n          }];\n        const lastBulk = context.pendingMutations.at(-1);\n        return lastBulk && lastBulk.operationId === event.operationId ? context.pendingMutations.slice(0, -1).concat({\n          value: event.value,\n          operationId: lastBulk.operationId,\n          patches: [...lastBulk.patches, event.patch]\n        }) : context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch]\n        });\n      }\n    }),\n    \"clear pending patch events\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingPatchEvents: []\n    }),\n    \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingPatchEvents: ({\n        context,\n        event\n      }) => event.type === \"patch\" ? [...context.pendingPatchEvents, event] : context.pendingPatchEvents\n    }),\n    \"emit pending patch events\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.a)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingPatchEvents)\n        enqueue.emit(event);\n    })\n  },\n  actors: {\n    \"type listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.fromCallback)(({\n      input,\n      sendBack\n    }) => {\n      const originalApply = input.slateEditor.apply;\n      return input.slateEditor.apply = (op) => {\n        op.type === \"insert_text\" || op.type === \"remove_text\" ? sendBack({\n          type: \"typing\"\n        }) : sendBack({\n          type: \"not typing\"\n        }), originalApply(op);\n      }, () => {\n        input.slateEditor.apply = originalApply;\n      };\n    }),\n    \"mutation debouncer\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.fromCallback)(({\n      sendBack\n    }) => {\n      const interval = setInterval(() => {\n        sendBack({\n          type: \"mutation delay passed\"\n        });\n      },  false ? 0 : 0);\n      return () => {\n        clearInterval(interval);\n      };\n    })\n  },\n  guards: {\n    \"is read-only\": ({\n      context\n    }) => context.readOnly,\n    \"is typing\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.s)({\n      typing: \"typing\"\n    }),\n    \"slate is normalizing\": ({\n      context\n    }) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isNormalizing(context.slateEditor)\n  },\n  delays: {\n    \"type debounce\":  false ? 0 : 250\n  }\n}).createMachine({\n  id: \"mutation\",\n  context: ({\n    input\n  }) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor\n  }),\n  on: {\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    typing: {\n      initial: \"idle\",\n      invoke: {\n        src: \"type listener\",\n        input: ({\n          context\n        }) => ({\n          slateEditor: context.slateEditor\n        })\n      },\n      states: {\n        idle: {\n          entry: [() => {\n            debug$6(\"entry: typing->idle\");\n          }],\n          exit: [() => {\n            debug$6(\"exit: typing->idle\"), debug$6(\"entry: typing->typing\");\n          }],\n          on: {\n            typing: {\n              target: \"typing\"\n            }\n          }\n        },\n        typing: {\n          after: {\n            \"type debounce\": {\n              target: \"idle\",\n              actions: [() => {\n                debug$6(\"exit: typing->typing\");\n              }]\n            }\n          },\n          on: {\n            \"not typing\": {\n              target: \"idle\"\n            },\n            typing: {\n              target: \"typing\",\n              reenter: !0\n            }\n          }\n        }\n      }\n    },\n    mutations: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          entry: [() => {\n            debug$6(\"entry: mutations->idle\");\n          }],\n          exit: [() => {\n            debug$6(\"exit: mutations->idle\");\n          }],\n          on: {\n            patch: [{\n              guard: \"is read-only\",\n              actions: [\"defer patch\", \"defer mutation\"],\n              target: \"has pending mutations\"\n            }, {\n              actions: [\"emit patch\", \"defer mutation\"],\n              target: \"has pending mutations\"\n            }]\n          }\n        },\n        \"has pending mutations\": {\n          entry: [() => {\n            debug$6(\"entry: mutations->has pending mutations\");\n          }, \"emit has pending mutations\"],\n          exit: [() => {\n            debug$6(\"exit: mutations->has pending mutations\");\n          }],\n          invoke: {\n            src: \"mutation debouncer\"\n          },\n          on: {\n            \"mutation delay passed\": {\n              guard: (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)([(0,xstate__WEBPACK_IMPORTED_MODULE_36__.n)(\"is read-only\"), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.n)(\"is typing\"), \"slate is normalizing\"]),\n              target: \"idle\",\n              actions: [\"emit pending patch events\", \"clear pending patch events\", \"emit mutations\", \"clear pending mutations\"]\n            },\n            patch: [{\n              guard: \"is read-only\",\n              actions: [\"defer patch\", \"defer mutation\"]\n            }, {\n              actions: [\"emit patch\", \"defer mutation\"]\n            }]\n          }\n        }\n      }\n    }\n  }\n}), debug$5 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n  const types = editorActor.getSnapshot().context.schema;\n  return {\n    focus: () => {\n      editorActor.send({\n        type: \"focus\",\n        editor\n      });\n    },\n    blur: () => {\n      editorActor.send({\n        type: \"blur\",\n        editor\n      });\n    },\n    toggleMark: (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.toggle\",\n          decorator: mark\n        },\n        editor\n      });\n    },\n    toggleList: (listItem) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"list item.toggle\",\n          listItem\n        },\n        editor\n      });\n    },\n    toggleBlockStyle: (style) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"style.toggle\",\n          style\n        },\n        editor\n      });\n    },\n    isMarkActive: (mark) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      });\n      return (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getActiveDecorators)(snapshot).includes(mark);\n    },\n    marks: () => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      }), activeAnnotations = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getActiveAnnotationsMarks)(snapshot), activeDecorators = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.getActiveDecorators)(snapshot);\n      return [...activeAnnotations, ...activeDecorators];\n    },\n    undo: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.undo\"\n        },\n        editor\n      });\n    },\n    redo: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.redo\"\n        },\n        editor\n      });\n    },\n    select: (selection) => {\n      const slateSelection = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      slateSelection ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.onChange();\n    },\n    focusBlock: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block)\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n      }\n    },\n    focusChild: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block && editor.isTextBlock(block))\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n      }\n    },\n    insertChild: (type, value) => {\n      if (type.name !== types.span.name)\n        return editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.inline object\",\n            inlineObject: {\n              name: type.name,\n              value\n            }\n          },\n          editor\n        }), editor.selection ? slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        })?.focus.path ?? [] : [];\n      if (!editor.selection)\n        throw new Error(\"The editor has no selection\");\n      const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => n._type === types.block.name\n      }))[0] || [void 0];\n      if (!focusBlock)\n        throw new Error(\"No focused text block\");\n      if (type.name !== types.span.name && !types.inlineObjects.some((t) => t.name === type.name))\n        throw new Error(\"This type cannot be inserted as a child to a text block\");\n      const child = toSlateValue([{\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        _type: types.block.name,\n        children: [{\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          _type: type.name,\n          ...value || {}\n        }]\n      }], {\n        schemaTypes: editorActor.getSnapshot().context.schema\n      })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode2 = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_14__.Node.get(editor, focusChildPath);\n      return isSpanNode2 && focusNode._type !== types.span.name && (debug$5(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n        distance: 1,\n        unit: \"character\"\n      })), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, child, {\n        select: !0,\n        at: editor.selection\n      }), editor.onChange(), editor.selection ? slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range: editor.selection\n      })?.focus.path ?? [] : [];\n    },\n    insertBlock: (type, value) => (editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"insert.block\",\n        block: {\n          _type: type.name,\n          ...value || {}\n        },\n        placement: \"auto\"\n      },\n      editor\n    }), editor.selection ? slateRangeToSelection({\n      schema: editorActor.getSnapshot().context.schema,\n      editor,\n      range: editor.selection\n    })?.focus.path ?? [] : []),\n    hasBlockStyle: (style) => {\n      try {\n        return isStyleActive({\n          editor,\n          style\n        });\n      } catch {\n        return !1;\n      }\n    },\n    hasListStyle: (listItem) => {\n      try {\n        return isListItemActive({\n          editor,\n          listItem\n        });\n      } catch {\n        return !1;\n      }\n    },\n    isVoid: (element) => ![types.block.name, types.span.name].includes(element._type),\n    findByPath: (path) => {\n      const slatePath = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: {\n            focus: {\n              path,\n              offset: 0\n            },\n            anchor: {\n              path,\n              offset: 0\n            }\n          }\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      if (slatePath) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n        if (block && blockPath && typeof block._key == \"string\") {\n          if (path.length === 1 && slatePath.focus.path.length === 1)\n            return [fromSlateValue([block], types.block.name)[0], [{\n              _key: block._key\n            }]];\n          const ptBlock = fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]];\n            if (ptChild)\n              return [ptChild, [{\n                _key: block._key\n              }, \"children\", {\n                _key: ptChild._key\n              }]];\n          }\n        }\n      }\n      return [void 0, void 0];\n    },\n    findDOMNode: (element) => {\n      let node;\n      try {\n        const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n          at: [],\n          match: (n) => n._key === element._key\n        }) || [])[0] || [void 0];\n        node = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.toDOMNode(editor, item);\n      } catch {\n      }\n      return node;\n    },\n    activeAnnotations: () => {\n      if (!editor.selection || editor.selection.focus.path.length < 2)\n        return [];\n      try {\n        const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n        });\n        for (const [span, path] of spans) {\n          const [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, path, {\n            depth: 1\n          });\n          editor.isTextBlock(block) && block.markDefs?.forEach((def) => {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n          });\n        }\n        return activeAnnotations;\n      } catch {\n        return [];\n      }\n    },\n    isAnnotationActive: (annotationType) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      });\n      return (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_18__.isActiveAnnotation)(annotationType)(snapshot);\n    },\n    addAnnotation: (type, value) => {\n      let paths;\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types\n          },\n          operation: {\n            annotation: {\n              name: type.name,\n              value: value ?? {}\n            },\n            editor\n          }\n        });\n      }), editor.onChange(), paths;\n    },\n    delete: (selection, options) => {\n      if (selection) {\n        const range = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: editor.value,\n            selection\n          },\n          blockIndexMap: editor.blockIndexMap\n        });\n        if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))\n          throw new Error(\"Invalid range\");\n        if (range) {\n          if (!options?.mode || options?.mode === \"selected\") {\n            debug$5(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.delete(editor, {\n              at: range,\n              hanging: !0,\n              voids: !0\n            }), editor.onChange();\n            return;\n          }\n          if (options?.mode === \"blocks\" && (debug$5(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node)\n          })), options?.mode === \"children\" && (debug$5(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => node._type === types.span.name || // Text children\n            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node)\n          })), editor.children.length === 0) {\n            const placeholderBlock = createPlaceholderBlock(editorActor.getSnapshot().context);\n            editor.children = [placeholderBlock], editor.value = [placeholderBlock], buildIndexMaps({\n              schema: editorActor.getSnapshot().context.schema,\n              value: editor.value\n            }, {\n              blockIndexMap: editor.blockIndexMap,\n              listIndexMap: editor.listIndexMap\n            });\n          }\n          editor.onChange();\n        }\n      }\n    },\n    removeAnnotation: (type) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.remove\",\n          annotation: {\n            name: type.name\n          }\n        },\n        editor\n      });\n    },\n    getSelection: () => {\n      let ptRange = null;\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n        if (existing)\n          return existing;\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        }), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n      }\n      return ptRange;\n    },\n    getValue: () => fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n    isCollapsedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection),\n    isExpandedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(editor.selection),\n    insertBreak: () => {\n      editor.insertBreak(), editor.onChange();\n    },\n    getFragment: () => fromSlateValue(editor.getFragment(), types.block.name),\n    isSelectionsOverlapping: (selectionA, selectionB) => {\n      const rangeA = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionA\n        },\n        blockIndexMap: editor.blockIndexMap\n      }), rangeB = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionB\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(rangeA, rangeB);\n    }\n  };\n}\nconst relayMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_32__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {}\n  }\n}).createMachine({\n  id: \"relay\",\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: !1\n  },\n  on: {\n    focused: {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        lastEventWasFocused: !0\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n        event\n      }) => event)]\n    },\n    selection: [{\n      guard: ({\n        context\n      }) => context.lastEventWasFocused,\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        prevSelection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        lastEventWasFocused: !1\n      })]\n    }, {\n      guard: ({\n        context,\n        event\n      }) => context.prevSelection !== event.selection,\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        prevSelection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        lastEventWasFocused: !1\n      })]\n    }],\n    \"*\": {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        lastEventWasFocused: !1\n      })]\n    }\n  }\n});\nfunction validateValue(value, types, keyGenerator) {\n  let resolution = null, valid = !0;\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)], validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)];\n  return value === void 0 ? {\n    valid: !0,\n    resolution: null,\n    value\n  } : !Array.isArray(value) || value.length === 0 ? {\n    valid: !1,\n    resolution: {\n      patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([])],\n      description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n      action: \"Unset the value\",\n      item: value,\n      i18n: {\n        description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n        action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n      }\n    },\n    value\n  } : (value.some((blk, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_12__(blk))\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([index])],\n        description: `Block must be an object, got ${String(blk)}`,\n        action: \"Unset invalid item\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n          action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._key || typeof blk._key != \"string\")\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)({\n          ...blk,\n          _key: keyGenerator()\n        }, [index])],\n        description: `Block at index ${index} is missing required _key.`,\n        action: \"Set the block with a random _key value\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-key.description\",\n          action: \"inputs.portable-text.invalid-value.missing-key.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._type || !validBlockTypes.includes(blk._type)) {\n      if (blk._type === \"block\") {\n        const currentBlockTypeName = types.block.name;\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)({\n            ...blk,\n            _type: currentBlockTypeName\n          }, [{\n            _key: blk._key\n          }])],\n          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n          action: `Use type '${currentBlockTypeName}'`,\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n            action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n            values: {\n              key: blk._key,\n              expectedTypeName: currentBlockTypeName\n            }\n          }\n        }, !0;\n      }\n      return !blk._type && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)({\n        schema: types\n      }, {\n        ...blk,\n        _type: types.block.name\n      }) ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)({\n          ...blk,\n          _type: types.block.name\n        }, [{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n        action: `Use type '${types.block.name}'`,\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n          values: {\n            key: blk._key,\n            expectedTypeName: types.block.name\n          }\n        }\n      }, !0) : blk._type ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n          action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n          values: {\n            key: blk._key,\n            typeName: blk._type\n          }\n        }\n      }, !0) : (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing an _type property`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-type.action\",\n          values: {\n            key: blk._key\n          }\n        }\n      }, !0);\n    }\n    if (blk._type === types.block.name) {\n      const textBlock = blk;\n      if (textBlock.children && !Array.isArray(textBlock.children))\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)({\n            children: []\n          }, [{\n            _key: textBlock._key\n          }])],\n          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n          action: \"Reset the children property\",\n          item: textBlock,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n            action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n            values: {\n              key: textBlock._key\n            }\n          }\n        }, !0;\n      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n        const newSpan = {\n          _type: types.span.name,\n          _key: keyGenerator(),\n          text: \"\",\n          marks: []\n        };\n        return resolution = {\n          autoResolve: !0,\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.setIfMissing)([], [{\n            _key: blk._key\n          }, \"children\"]), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.insert)([newSpan], \"after\", [{\n            _key: blk._key\n          }, \"children\", 0])],\n          description: `Children for text block with _key '${blk._key}' is empty.`,\n          action: \"Insert an empty text\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.empty-children.description\",\n            action: \"inputs.portable-text.invalid-value.empty-children.action\",\n            values: {\n              key: blk._key\n            }\n          }\n        }, !0;\n      }\n      const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(textBlock.children.filter((cld) => cld._type === types.span.name).map((cld) => cld.marks || [])));\n      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__(blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key)));\n        if (unusedMarkDefs.length > 0)\n          return resolution = {\n            autoResolve: !0,\n            patches: unusedMarkDefs.map((markDefKey) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n              _key: blk._key\n            }, \"markDefs\", {\n              _key: markDefKey\n            }])),\n            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n            action: \"Remove unused mark definition item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n              values: {\n                key: blk._key,\n                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())\n              }\n            }\n          }, !0;\n      }\n      const orphanedMarks = allUsedMarks.filter((mark) => !types.decorators.map((dec) => dec.name).includes(mark)).filter((mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark));\n      if (orphanedMarks.length > 0) {\n        const spanChildren = textBlock.children.filter((cld) => cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark)));\n        if (spanChildren) {\n          const orphaned = orphanedMarks.join(\", \");\n          return resolution = {\n            autoResolve: !0,\n            patches: spanChildren.map((child) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)((child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)), [{\n              _key: blk._key\n            }, \"children\", {\n              _key: child._key\n            }, \"marks\"])),\n            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n            action: \"Remove invalid marks\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n              values: {\n                key: blk._key,\n                orphanedMarks: orphanedMarks.map((m) => m.toString())\n              }\n            }\n          }, !0;\n        }\n      }\n      textBlock.children.some((child, cIndex) => {\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_12__(child))\n          return resolution = {\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n            action: \"Remove the item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n              action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        if (!child._key || typeof child._key != \"string\") {\n          const newChild = {\n            ...child,\n            _key: keyGenerator()\n          };\n          return resolution = {\n            autoResolve: !0,\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)(newChild, [{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n            action: \"Set a new random _key on the object\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n              action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        }\n        return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.set)({\n            ...child,\n            text: \"\"\n          }, [{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n          action: \"Write an empty text property to the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n            action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0) : !1 : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key,\n              childType: child._type\n            }\n          }\n        }, !0) : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_27__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0);\n      }) && (valid = !1);\n    }\n    return !1;\n  }) && (valid = !1), {\n    valid,\n    resolution,\n    value\n  });\n}\nconst debug$4 = debugWithName(\"sync machine\"), syncValueCallback = ({\n  sendBack,\n  input\n}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks\n  });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_35__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_32__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      initialValueSynced: !0\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      readOnly: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n    }),\n    \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"update value\"), event.value)\n    }),\n    \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingValue: void 0\n    }),\n    \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      previousValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"done syncing\"), event.value)\n    }),\n    \"emit done syncing value\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)({\n      type: \"done syncing value\"\n    }),\n    \"emit syncing value\": (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)({\n      type: \"syncing value\"\n    })\n  },\n  guards: {\n    \"initial value synced\": ({\n      context\n    }) => context.initialValueSynced,\n    \"is busy\": ({\n      context\n    }) => {\n      const isProcessingLocalChanges = context.isProcessingLocalChanges, isChanging = isChangingRemotely(context.slateEditor) ?? !1, isBusy = isProcessingLocalChanges || isChanging;\n      return debug$4(\"isBusy\", {\n        isBusy,\n        isProcessingLocalChanges,\n        isChanging\n      }), isBusy;\n    },\n    \"is empty value\": ({\n      event\n    }) => event.type === \"update value\" && event.value === void 0,\n    \"is empty array\": ({\n      event\n    }) => event.type === \"update value\" && Array.isArray(event.value) && event.value.length === 0,\n    \"is new value\": ({\n      context,\n      event\n    }) => event.type === \"update value\" && context.previousValue !== event.value,\n    \"value changed while syncing\": ({\n      context,\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_32__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n    \"pending value equals previous value\": ({\n      context\n    }) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(context.pendingValue, context.previousValue)\n  },\n  actors: {\n    \"sync value\": syncValueLogic\n  }\n}).createMachine({\n  id: \"sync\",\n  context: ({\n    input\n  }) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: !1,\n    isProcessingLocalChanges: !1,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: void 0,\n    previousValue: void 0\n  }),\n  entry: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.r)(({\n    context\n  }) => ({\n    type: \"update value\",\n    value: context.initialValue\n  }))],\n  on: {\n    \"has pending mutations\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        isProcessingLocalChanges: !0\n      })\n    },\n    mutation: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n        isProcessingLocalChanges: !1\n      })\n    },\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  initial: \"idle\",\n  states: {\n    idle: {\n      entry: [() => {\n        debug$4(\"entry: syncing->idle\");\n      }],\n      exit: [() => {\n        debug$4(\"exit: syncing->idle\");\n      }],\n      on: {\n        \"update value\": [{\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)([\"is empty value\", (0,xstate__WEBPACK_IMPORTED_MODULE_36__.n)(\"initial value synced\")]),\n          actions: [\"assign initial value synced\", \"emit done syncing value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)([\"is empty array\", (0,xstate__WEBPACK_IMPORTED_MODULE_36__.n)(\"initial value synced\")]),\n          actions: [\"assign initial value synced\", (0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)({\n            type: \"value changed\",\n            value: []\n          }), \"emit done syncing value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)([\"is busy\", \"is new value\"]),\n          target: \"busy\",\n          actions: [\"assign pending value\"]\n        }, {\n          guard: \"is new value\",\n          target: \"syncing\",\n          actions: [\"assign pending value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_36__.n)(\"initial value synced\"),\n          actions: [() => {\n            debug$4(\"no new value \\u2013 setting initial value as synced\");\n          }, \"assign initial value synced\", \"emit done syncing value\"]\n        }, {\n          actions: [() => {\n            debug$4(\"no new value and initial value already synced\");\n          }]\n        }]\n      }\n    },\n    busy: {\n      entry: [() => {\n        debug$4(\"entry: syncing->busy\");\n      }],\n      exit: [() => {\n        debug$4(\"exit: syncing->busy\");\n      }],\n      after: {\n        1e3: [{\n          guard: \"is busy\",\n          target: \".\",\n          reenter: !0,\n          actions: [() => {\n            debug$4(\"reenter: syncing->busy\");\n          }]\n        }, {\n          target: \"syncing\"\n        }]\n      },\n      on: {\n        \"update value\": [{\n          guard: \"is new value\",\n          actions: [\"assign pending value\"]\n        }]\n      }\n    },\n    syncing: {\n      entry: [() => {\n        debug$4(\"entry: syncing->syncing\");\n      }, \"emit syncing value\"],\n      exit: [() => {\n        debug$4(\"exit: syncing->syncing\");\n      }, \"emit done syncing value\"],\n      invoke: {\n        src: \"sync value\",\n        id: \"sync value\",\n        input: ({\n          context\n        }) => ({\n          context: {\n            keyGenerator: context.keyGenerator,\n            previousValue: context.previousValue,\n            readOnly: context.readOnly,\n            schema: context.schema\n          },\n          slateEditor: context.slateEditor,\n          streamBlocks: !context.initialValueSynced,\n          value: context.pendingValue\n        })\n      },\n      on: {\n        \"update value\": {\n          guard: \"is new value\",\n          actions: [\"assign pending value\"]\n        },\n        patch: {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n            event\n          }) => event)]\n        },\n        \"invalid value\": {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n            event\n          }) => event)]\n        },\n        \"value changed\": {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_34__.e)(({\n            event\n          }) => event)]\n        },\n        \"done syncing\": [{\n          guard: \"value changed while syncing\",\n          actions: [\"assign previous value\", \"assign initial value synced\"],\n          target: \"syncing\",\n          reenter: !0\n        }, {\n          target: \"idle\",\n          actions: [\"clear pending value\", \"assign previous value\", \"assign initial value synced\"]\n        }]\n      }\n    }\n  }\n});\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value\n}) {\n  let doneSyncing = !1, isChanged = !1, isValid = !0;\n  const hadSelection = !!slateEditor.selection;\n  if ((!value || value.length === 0) && (debug$4(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n    withoutSaving(slateEditor, () => {\n      withRemoteChanges(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (doneSyncing)\n            return;\n          hadSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(slateEditor);\n          const childrenLength = slateEditor.children.length;\n          slateEditor.children.forEach((_, index) => {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index]\n            });\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n            decorators: []\n          }), {\n            at: [0]\n          }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, [0, 0]);\n        });\n      });\n    });\n  }), isChanged = !0), value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema\n    });\n    streamBlocks ? await new Promise((resolve) => {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              resolve();\n              return;\n            }\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps\n            }), (async () => {\n              for await (const [currentBlock, currentBlockIndex] of getStreamedBlocks({\n                slateValue: slateValueFromProps\n              })) {\n                const {\n                  blockChanged,\n                  blockValid\n                } = syncBlock({\n                  context,\n                  sendBack,\n                  block: currentBlock,\n                  index: currentBlockIndex,\n                  slateEditor,\n                  value\n                });\n                isChanged = blockChanged || isChanged, isValid = isValid && blockValid;\n              }\n              resolve();\n            })();\n          });\n        });\n      });\n    }) : slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n      withRemoteChanges(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (doneSyncing)\n            return;\n          isChanged = removeExtraBlocks({\n            slateEditor,\n            slateValueFromProps\n          });\n          let index = 0;\n          for (const currentBlock of slateValueFromProps) {\n            const {\n              blockChanged,\n              blockValid\n            } = syncBlock({\n              context,\n              sendBack,\n              block: currentBlock,\n              index,\n              slateEditor,\n              value\n            });\n            isChanged = blockChanged || isChanged, isValid = isValid && blockValid, index++;\n          }\n        });\n      });\n    });\n  }\n  if (!isValid) {\n    debug$4(\"Invalid value, returning\"), doneSyncing = !0, sendBack({\n      type: \"done syncing\",\n      value\n    });\n    return;\n  }\n  if (isChanged) {\n    debug$4(\"Server value changed, syncing editor\");\n    try {\n      slateEditor.onChange();\n    } catch (err) {\n      console.error(err), sendBack({\n        type: \"invalid value\",\n        resolution: null,\n        value\n      }), doneSyncing = !0, sendBack({\n        type: \"done syncing\",\n        value\n      });\n      return;\n    }\n    hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), slateEditor.onChange()), sendBack({\n      type: \"value changed\",\n      value\n    });\n  } else\n    debug$4(\"Server value and editor value is equal, no need to sync.\");\n  doneSyncing = !0, sendBack({\n    type: \"done syncing\",\n    value\n  });\n}\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps\n}) {\n  let isChanged = !1;\n  const childrenLength = slateEditor.children.length;\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n        at: [i]\n      });\n    isChanged = !0;\n  }\n  return isChanged;\n}\nasync function* getStreamedBlocks({\n  slateValue\n}) {\n  let index = 0;\n  for await (const block of slateValue)\n    index % 10 === 0 && await new Promise((resolve) => setTimeout(resolve, 0)), yield [block, index], index++;\n}\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value\n}) {\n  let blockChanged = !1, blockValid = !0;\n  const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlock, oldBlock);\n  return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch) => {\n            sendBack({\n              type: \"patch\",\n              patch\n            });\n          })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$4.enabled && debug$4(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$4.enabled && debug$4(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          debug$4.enabled && debug$4(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlock, {\n            at: [currentBlockIndex]\n          }) : (debug$4(\"Invalid\", validation), sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n      });\n    });\n  }), {\n    blockChanged,\n    blockValid\n  };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n  selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n    at: [currentBlockIndex]\n  }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length;\n    currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index) => {\n      const childIndex = oldBlockChildrenLength - 1 - index;\n      childIndex > 0 && (debug$4(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n        at: [currentBlockIndex, childIndex]\n      }));\n    }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlockChild.text, oldBlockChild?.text), path = [currentBlockIndex, currentBlockChildIndex];\n      if (isChildChanged)\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug$4(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, currentBlockChild, {\n            at: path\n          });\n          const isSpanNode2 = slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n          isSpanNode2 && isTextChanged ? (oldBlockChild.text.length > 0 && (0,slate__WEBPACK_IMPORTED_MODULE_14__.deleteText)(slateEditor, {\n            at: {\n              focus: {\n                path,\n                offset: 0\n              },\n              anchor: {\n                path,\n                offset: oldBlockChild.text.length\n              }\n            }\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n            at: path\n          }), slateEditor.onChange()) : isSpanNode2 || (debug$4(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, {\n            _key: VOID_CHILD_KEY\n          }, {\n            at: [...path, 0],\n            voids: !0\n          }));\n        } else oldBlockChild ? (debug$4(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange()) : oldBlockChild || (debug$4(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange());\n    });\n  }\n}\nconst debug$3 = debugWithName(\"setup\");\nfunction createInternalEditor(config) {\n  debug$3(\"Creating new Editor instance\");\n  const subscriptions = [], editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_36__.c)(editorMachine, {\n    input: editorConfigToMachineInput(config)\n  }), relayActor = (0,xstate__WEBPACK_IMPORTED_MODULE_36__.c)(relayMachine), slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions\n  }), editable = createEditableAPI(slateEditor.instance, editorActor), {\n    mutationActor,\n    syncActor\n  } = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions\n  }), editor = {\n    dom: createEditorDom((event) => editorActor.send(event), slateEditor.instance),\n    getSnapshot: () => getEditorSnapshot({\n      editorActorSnapshot: editorActor.getSnapshot(),\n      slateEditorInstance: slateEditor.instance\n    }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: \"custom\",\n        reference: {\n          priority: corePriority,\n          importance: \"higher\"\n        }\n      }), behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority\n      };\n      return editorActor.send({\n        type: \"add behavior\",\n        behaviorConfig: behaviorConfigWithPriority\n      }), () => {\n        editorActor.send({\n          type: \"remove behavior\",\n          behaviorConfig: behaviorConfigWithPriority\n        });\n      };\n    },\n    send: (event) => {\n      switch (event.type) {\n        case \"update value\":\n          syncActor.send(event);\n          break;\n        case \"update readOnly\":\n        case \"patches\":\n        case \"update maxBlocks\":\n          editorActor.send(event);\n          break;\n        case \"blur\":\n          editorActor.send({\n            type: \"blur\",\n            editor: slateEditor.instance\n          });\n          break;\n        case \"focus\":\n          editorActor.send({\n            type: \"focus\",\n            editor: slateEditor.instance\n          });\n          break;\n        case \"insert.block object\":\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n              type: \"insert.block\",\n              block: {\n                _type: event.blockObject.name,\n                ...event.blockObject.value ?? {}\n              },\n              placement: event.placement\n            },\n            editor: slateEditor.instance\n          });\n          break;\n        default:\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: event,\n            editor: slateEditor.instance\n          });\n      }\n    },\n    on: (event, listener) => relayActor.on(event, (event2) => {\n      switch (event2.type) {\n        case \"blurred\":\n        case \"done loading\":\n        case \"editable\":\n        case \"focused\":\n        case \"invalid value\":\n        case \"loading\":\n        case \"mutation\":\n        case \"patch\":\n        case \"read only\":\n        case \"ready\":\n        case \"selection\":\n        case \"value changed\":\n          listener(event2);\n          break;\n      }\n    }),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor\n    }\n  };\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor\n    },\n    editor,\n    subscriptions\n  };\n}\nfunction editorConfigToMachineInput(config) {\n  const {\n    legacySchema,\n    schema\n  } = compileSchemasFromEditorConfig(config);\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue\n  };\n}\nfunction compileSchemasFromEditorConfig(config) {\n  const legacySchema = config.schemaDefinition ? (0,_portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_37__.compileSchemaDefinitionToPortableTextMemberSchemaTypes)(config.schemaDefinition) : (0,_portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_37__.createPortableTextMemberSchemaTypes)(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)), schema = config.schemaDefinition ? (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_38__.compileSchema)(config.schemaDefinition) : (0,_portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_37__.portableTextMemberSchemaTypesToSchema)(legacySchema);\n  return {\n    legacySchema,\n    schema\n  };\n}\nfunction createActors(config) {\n  debug$3(\"Creating new Actors\");\n  const mutationActor = (0,xstate__WEBPACK_IMPORTED_MODULE_36__.c)(mutationMachine, {\n    input: {\n      readOnly: config.editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor\n    }\n  }), syncActor = (0,xstate__WEBPACK_IMPORTED_MODULE_36__.c)(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor\n    }\n  });\n  return config.subscriptions.push(() => {\n    const subscription = mutationActor.on(\"*\", (event) => {\n      event.type === \"has pending mutations\" && syncActor.send({\n        type: \"has pending mutations\"\n      }), event.type === \"mutation\" && (syncActor.send({\n        type: \"mutation\"\n      }), config.editorActor.send({\n        type: \"mutation\",\n        patches: event.patches,\n        snapshot: event.snapshot,\n        value: event.snapshot\n      })), event.type === \"patch\" && config.relayActor.send(event);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = syncActor.on(\"*\", (event) => {\n      switch (event.type) {\n        case \"invalid value\":\n          config.relayActor.send(event);\n          break;\n        case \"value changed\":\n          config.relayActor.send(event);\n          break;\n        case \"patch\":\n          config.editorActor.send({\n            ...event,\n            type: \"internal.patch\",\n            value: fromSlateValue(config.slateEditor.children, config.editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(config.slateEditor))\n          });\n          break;\n        default:\n          config.editorActor.send(event);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      snapshot.matches({\n        \"edit mode\": \"read only\"\n      }) ? (mutationActor.send({\n        type: \"update readOnly\",\n        readOnly: !0\n      }), syncActor.send({\n        type: \"update readOnly\",\n        readOnly: !0\n      })) : (mutationActor.send({\n        type: \"update readOnly\",\n        readOnly: !1\n      }), syncActor.send({\n        type: \"update readOnly\",\n        readOnly: !1\n      }));\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = config.editorActor.on(\"*\", (event) => {\n      switch (event.type) {\n        case \"editable\":\n        case \"mutation\":\n        case \"ready\":\n        case \"read only\":\n        case \"selection\":\n          config.relayActor.send(event);\n          break;\n        case \"internal.patch\":\n          mutationActor.send({\n            ...event,\n            type: \"patch\"\n          });\n          break;\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), {\n    mutationActor,\n    syncActor\n  };\n}\nfunction eventToChange(event) {\n  switch (event.type) {\n    case \"blurred\":\n      return {\n        type: \"blur\",\n        event: event.event\n      };\n    case \"patch\":\n      return event;\n    case \"loading\":\n      return {\n        type: \"loading\",\n        isLoading: !0\n      };\n    case \"done loading\":\n      return {\n        type: \"loading\",\n        isLoading: !1\n      };\n    case \"focused\":\n      return {\n        type: \"focus\",\n        event: event.event\n      };\n    case \"value changed\":\n      return {\n        type: \"value\",\n        value: event.value\n      };\n    case \"invalid value\":\n      return {\n        type: \"invalidValue\",\n        resolution: event.resolution,\n        value: event.value\n      };\n    case \"mutation\":\n      return event;\n    case \"ready\":\n      return event;\n    case \"selection\":\n      return event;\n    case \"unset\":\n      return event;\n  }\n}\nconst RelayActorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({}), debug$2 = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n  static displayName = \"PortableTextEditor\";\n  /**\n   * An observable of all the editor changes.\n   */\n  change$ = new rxjs__WEBPACK_IMPORTED_MODULE_39__.Subject();\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  /**\n   * The editor instance\n   */\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  subscriptions = [];\n  unsubscribers = [];\n  constructor(props) {\n    if (super(props), props.editor)\n      this.editor = props.editor, this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.getLegacySchema();\n    else {\n      const {\n        actors,\n        editor,\n        subscriptions\n      } = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType\n      });\n      this.subscriptions = subscriptions, this.actors = actors, this.editor = editor, this.schemaTypes = actors.editorActor.getSnapshot().context.getLegacySchema();\n    }\n    this.editable = this.editor._internal.editable;\n  }\n  componentDidMount() {\n    if (!this.actors)\n      return;\n    for (const subscription of this.subscriptions)\n      this.unsubscribers.push(subscription());\n    const relayActorSubscription = this.actors.relayActor.on(\"*\", (event) => {\n      const change = eventToChange(event);\n      change && (this.props.editor || this.props.onChange(change), this.change$.next(change));\n    });\n    this.unsubscribers.push(relayActorSubscription.unsubscribe), this.actors.editorActor.start(), this.actors.mutationActor.start(), this.actors.relayActor.start(), this.actors.syncActor.start();\n  }\n  componentDidUpdate(prevProps) {\n    !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && console.warn(\"Updating schema type is no longer supported\"), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n      type: \"update readOnly\",\n      readOnly: this.props.readOnly ?? !1\n    }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n      type: \"update maxBlocks\",\n      maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n    }), this.props.value !== prevProps.value && this.editor.send({\n      type: \"update value\",\n      value: this.props.value\n    }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n  }\n  componentWillUnmount() {\n    for (const unsubscribe of this.unsubscribers)\n      unsubscribe();\n    this.actors && (stopActor(this.actors.editorActor), stopActor(this.actors.mutationActor), stopActor(this.actors.relayActor), stopActor(this.actors.syncActor));\n  }\n  setEditable = (editable) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable\n    };\n  };\n  render() {\n    const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n      legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RoutePatchesObservableToEditorActor, { editorActor: this.editor._internal.editorActor, patches$: legacyPatches }) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditorActorContext.Provider, { value: this.editor._internal.editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RelayActorContext.Provider, { value: this.actors.relayActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_22__.Slate, { editor: this.editor._internal.slateEditor.instance, initialValue: this.editor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorContext.Provider, { value: this, children: this.props.children }) }) }) })\n    ] });\n  }\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor) => {\n    debug$2(\"Host blurred\"), editor.editable?.blur();\n  };\n  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);\n  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);\n  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor) => {\n    debug$2(\"Host requesting focus\"), editor.editable?.focus();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor) => editor.editable?.focusBlock();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (editor) => editor.editable?.focusChild();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor) => editor.editable?.getValue();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = (editor, type, value) => (debug$2(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor) => editor.editable?.insertBreak();\n  static isVoid = (editor, element) => editor.editable?.isVoid(element);\n  static isObjectPath = (_editor, path) => {\n    if (!path || !Array.isArray(path)) return !1;\n    const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n    return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n  };\n  static marks = (editor) => editor.editable?.marks();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (editor, selection) => {\n    debug$2(\"Host setting selection\", selection), editor.editable?.select(selection);\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (editor, blockStyle) => (debug$2(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor, mark) => {\n    debug$2(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (editor) => editor.editable?.getFragment();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor) => {\n    debug$2(\"Host undoing\"), editor.editable?.undo();\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor) => {\n    debug$2(\"Host redoing\"), editor.editable?.redo();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0, t1;\n  return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = () => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: \"patches\",\n        ...payload\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor, props.patches$], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction RenderSpan(props) {\n  const slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateStatic)(), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), legacySchema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, (s) => s.context.getLegacySchema()), spanRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), portableTextEditor = usePortableTextEditor(), blockSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSelected)(), [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), [selected, setSelected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), parent = props.children.props.parent, block = parent && slateEditor.isTextBlock(parent) ? parent : void 0, path = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => block ? [{\n    _key: block._key\n  }, \"children\", {\n    _key: props.leaf._key\n  }] : void 0, [block, props.leaf._key]), decoratorSchemaTypes = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), decorators = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__((props.leaf.marks ?? []).filter((mark) => decoratorSchemaTypes.includes(mark))), annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark_0) => {\n    if (decoratorSchemaTypes.includes(mark_0))\n      return [];\n    const markDef_0 = block?.markDefs?.find((markDef) => markDef._key === mark_0);\n    return markDef_0 ? [markDef_0] : [];\n  }), shouldTrackSelectionAndFocus = annotationMarkDefs.length > 0 && blockSelected;\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(!1);\n      return;\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor);\n    sel && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(sel.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n      setFocused(!0);\n    });\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor]);\n  const setSelectedFromRange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const winSelection = window.getSelection();\n    if (!winSelection) {\n      setSelected(!1);\n      return;\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0);\n      spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);\n    } else\n      setSelected(!1);\n  }, [shouldTrackSelectionAndFocus]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const onBlur = editorActor.on(\"blurred\", () => {\n      setFocused(!1), setSelected(!1);\n    }), onFocus = editorActor.on(\"focused\", () => {\n      const sel_0 = PortableTextEditor.getSelection(portableTextEditor);\n      sel_0 && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(sel_0.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();\n    }), onSelection = editorActor.on(\"selection\", (event) => {\n      event.selection && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(event.selection.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();\n    });\n    return () => {\n      onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();\n    };\n  }, [editorActor, path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => setSelectedFromRange(), [setSelectedFromRange]);\n  let children = props.children;\n  for (const mark_1 of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find((dec) => dec.value === mark_1);\n    path && legacyDecoratorSchemaType && props.renderDecorator && (children = props.renderDecorator({\n      children,\n      editorElementRef: spanRef,\n      focused,\n      path,\n      selected,\n      schemaType: legacyDecoratorSchemaType,\n      value: mark_1,\n      type: legacyDecoratorSchemaType\n    }));\n  }\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find((t) => t.name === annotationMarkDef._type);\n    legacyAnnotationSchemaType && (block && path && props.renderAnnotation ? children = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: spanRef, children: props.renderAnnotation({\n      block,\n      children,\n      editorElementRef: spanRef,\n      focused,\n      path,\n      selected,\n      schemaType: legacyAnnotationSchemaType,\n      value: annotationMarkDef,\n      type: legacyAnnotationSchemaType\n    }) }) : children = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: spanRef, children }));\n  }\n  if (block && path && props.renderChild) {\n    const child = block.children.find((_child) => _child._key === props.leaf._key);\n    child && (children = props.renderChild({\n      annotations: annotationMarkDefs,\n      children,\n      editorElementRef: spanRef,\n      focused,\n      path,\n      schemaType: legacySchema.span,\n      selected,\n      value: child,\n      type: legacySchema.span\n    }));\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ...props.attributes, ref: spanRef, children });\n}\nconst PLACEHOLDER_STYLE = {\n  position: \"absolute\",\n  userSelect: \"none\",\n  pointerEvents: \"none\",\n  left: 0,\n  right: 0\n};\nfunction RenderLeaf(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(12), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), schema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, _temp);\n  if (props.leaf._type !== schema.span.name)\n    return props.children;\n  let t0;\n  $[0] !== props ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderSpan, { ...props }), $[0] = props, $[1] = t0) : t0 = $[1];\n  let renderedSpan = t0;\n  if (props.renderPlaceholder && props.leaf.placeholder && props.text.text === \"\") {\n    let t1;\n    $[2] !== props.renderPlaceholder ? (t1 = props.renderPlaceholder(), $[2] = props.renderPlaceholder, $[3] = t1) : t1 = $[3];\n    let t2;\n    $[4] !== t1 ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: t1 }), $[4] = t1, $[5] = t2) : t2 = $[5];\n    let t3;\n    return $[6] !== renderedSpan || $[7] !== t2 ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n      t2,\n      renderedSpan\n    ] }), $[6] = renderedSpan, $[7] = t2, $[8] = t3) : t3 = $[8], t3;\n  }\n  const rangeDecoration = props.leaf.rangeDecoration;\n  if (rangeDecoration) {\n    let t1;\n    $[9] !== rangeDecoration || $[10] !== renderedSpan ? (t1 = rangeDecoration.component({\n      children: renderedSpan\n    }), $[9] = rangeDecoration, $[10] = renderedSpan, $[11] = t1) : t1 = $[11], renderedSpan = t1;\n  }\n  return renderedSpan;\n}\nfunction _temp(s) {\n  return s.context.schema;\n}\nfunction RenderText(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5);\n  let t0;\n  return $[0] !== props.attributes || $[1] !== props.children || $[2] !== props.text._key || $[3] !== props.text._type ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ...props.attributes, \"data-child-key\": props.text._key, \"data-child-name\": props.text._type, \"data-child-type\": \"span\", children: props.children }), $[0] = props.attributes, $[1] = props.children, $[2] = props.text._key, $[3] = props.text._type, $[4] = t0) : t0 = $[4], t0;\n}\nconst IS_MAC = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {\n  alt: \"altKey\",\n  control: \"ctrlKey\",\n  meta: \"metaKey\",\n  shift: \"shiftKey\"\n}, aliases = {\n  add: \"+\",\n  break: \"pause\",\n  cmd: \"meta\",\n  command: \"meta\",\n  ctl: \"control\",\n  ctrl: \"control\",\n  del: \"delete\",\n  down: \"arrowdown\",\n  esc: \"escape\",\n  ins: \"insert\",\n  left: \"arrowleft\",\n  mod: IS_MAC ? \"meta\" : \"control\",\n  opt: \"alt\",\n  option: \"alt\",\n  return: \"enter\",\n  right: \"arrowright\",\n  space: \" \",\n  spacebar: \" \",\n  up: \"arrowup\",\n  win: \"meta\",\n  windows: \"meta\"\n}, keyCodes = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  \" \": 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  \";\": 186,\n  \"=\": 187,\n  \",\": 188,\n  \"-\": 189,\n  \".\": 190,\n  \"/\": 191,\n  \"`\": 192,\n  \"[\": 219,\n  \"\\\\\": 220,\n  \"]\": 221,\n  \"'\": 222,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  f13: 124,\n  f14: 125,\n  f15: 126,\n  f16: 127,\n  f17: 128,\n  f18: 129,\n  f19: 130,\n  f20: 131\n};\nfunction isHotkey(hotkey, event) {\n  return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n  const parsedHotkey = {\n    altKey: !1,\n    ctrlKey: !1,\n    metaKey: !1,\n    shiftKey: !1\n  }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code2 = keyCodes[keyName];\n    if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code2 === void 0)\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n    (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n  }\n  return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n  return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n  const keyName = toKeyName(name);\n  return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n  const keyName = name.toLowerCase();\n  return aliases[keyName] ?? keyName;\n}\nconst debug$1 = debugWithName(\"plugin:withHotKeys\");\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n  const reservedHotkeys = [\"enter\", \"tab\", \"shift\", \"delete\", \"end\"], activeHotkeys = hotkeysFromOptions ?? {};\n  return function(editor) {\n    return editor.pteWithHotKeys = (event) => {\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === \"marks\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault();\n              const possibleMark = activeHotkeys[cat];\n              if (possibleMark) {\n                const mark = possibleMark[hotkey];\n                debug$1(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                  type: \"behavior event\",\n                  behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                  },\n                  editor\n                });\n              }\n            }\n          }\n        if (cat === \"custom\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat];\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey];\n                command(event, portableTextEditor);\n              }\n            }\n          }\n      });\n    }, editor;\n  };\n}\nfunction moveRangeByOperation(range, operation) {\n  const anchor = slate__WEBPACK_IMPORTED_MODULE_14__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_14__.Point.transform(range.focus, operation);\n  return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(focus, range.focus) ? range : {\n    anchor,\n    focus\n  };\n}\nconst slateOperationCallback = ({\n  input,\n  sendBack\n}) => {\n  const originalApply = input.slateEditor.apply;\n  return input.slateEditor.apply = (op) => {\n    op.type !== \"set_selection\" && sendBack({\n      type: \"slate operation\",\n      operation: op\n    }), originalApply(op);\n  }, () => {\n    input.slateEditor.apply = originalApply;\n  };\n}, rangeDecorationsMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_32__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  actions: {\n    \"update pending range decorations\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      pendingRangeDecorations: ({\n        context,\n        event\n      }) => event.type !== \"range decorations updated\" ? context.pendingRangeDecorations : event.rangeDecorations\n    }),\n    \"set up initial range decorations\": ({\n      context\n    }) => {\n      const rangeDecorationState = [];\n      for (const rangeDecoration of context.pendingRangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"update range decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"range decorations updated\")\n        return;\n      const rangeDecorationState = [];\n      for (const rangeDecoration of event.rangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"move range decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"slate operation\")\n        return;\n      const rangeDecorationState = [];\n      for (const decoratedRange of context.slateEditor.decoratedRanges) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: decoratedRange.rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(slateRange)) {\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        let newRange;\n        if (newRange = moveRangeByOperation(slateRange, event.operation), newRange && newRange !== slateRange || newRange === null && slateRange) {\n          const newRangeSelection = newRange ? slateRangeToSelection({\n            schema: context.schema,\n            editor: context.slateEditor,\n            range: newRange\n          }) : null;\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: newRangeSelection,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: \"local\"\n          });\n        }\n        newRange !== null && rangeDecorationState.push({\n          ...newRange || slateRange,\n          rangeDecoration: {\n            ...decoratedRange.rangeDecoration,\n            selection: slateRangeToSelection({\n              schema: context.schema,\n              editor: context.slateEditor,\n              range: newRange\n            })\n          }\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      readOnly: ({\n        context,\n        event\n      }) => event.type !== \"update read only\" ? context.readOnly : event.readOnly\n    }),\n    \"update decorate\": (0,xstate__WEBPACK_IMPORTED_MODULE_33__.a)({\n      decorate: ({\n        context\n      }) => ({\n        fn: createDecorate(context.schema, context.slateEditor)\n      })\n    })\n  },\n  actors: {\n    \"slate operation listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.fromCallback)(slateOperationCallback)\n  },\n  guards: {\n    \"has pending range decorations\": ({\n      context\n    }) => context.pendingRangeDecorations.length > 0,\n    \"has range decorations\": ({\n      context\n    }) => context.slateEditor.decoratedRanges.length > 0,\n    \"has different decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"range decorations updated\")\n        return !1;\n      const existingRangeDecorations = context.slateEditor.decoratedRanges.map((decoratedRange) => ({\n        anchor: decoratedRange.rangeDecoration.selection?.anchor,\n        focus: decoratedRange.rangeDecoration.selection?.focus,\n        payload: decoratedRange.rangeDecoration.payload\n      })), newRangeDecorations = event.rangeDecorations.map((rangeDecoration) => ({\n        anchor: rangeDecoration.selection?.anchor,\n        focus: rangeDecoration.selection?.focus,\n        payload: rangeDecoration.payload\n      }));\n      return !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(existingRangeDecorations, newRangeDecorations);\n    },\n    \"not read only\": ({\n      context\n    }) => !context.readOnly,\n    \"should skip setup\": ({\n      context\n    }) => context.skipSetup\n  }\n}).createMachine({\n  id: \"range decorations\",\n  context: ({\n    input\n  }) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    decorate: {\n      fn: createDecorate(input.schema, input.slateEditor)\n    }\n  }),\n  invoke: {\n    src: \"slate operation listener\",\n    input: ({\n      context\n    }) => ({\n      slateEditor: context.slateEditor\n    })\n  },\n  on: {\n    \"update read only\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  initial: \"setting up\",\n  states: {\n    \"setting up\": {\n      always: [{\n        guard: (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)([\"should skip setup\", \"has pending range decorations\"]),\n        target: \"ready\",\n        actions: [\"set up initial range decorations\", \"update decorate\"]\n      }, {\n        guard: \"should skip setup\",\n        target: \"ready\"\n      }],\n      on: {\n        \"range decorations updated\": {\n          actions: [\"update pending range decorations\"]\n        },\n        ready: [{\n          target: \"ready\",\n          guard: \"has pending range decorations\",\n          actions: [\"set up initial range decorations\", \"update decorate\"]\n        }, {\n          target: \"ready\"\n        }]\n      }\n    },\n    ready: {\n      initial: \"idle\",\n      on: {\n        \"range decorations updated\": {\n          target: \".idle\",\n          guard: \"has different decorations\",\n          actions: [\"update range decorations\", \"update decorate\"]\n        }\n      },\n      states: {\n        idle: {\n          on: {\n            \"slate operation\": {\n              target: \"moving range decorations\",\n              guard: (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)([\"has range decorations\", \"not read only\"])\n            }\n          }\n        },\n        \"moving range decorations\": {\n          entry: [\"move range decorations\"],\n          always: {\n            target: \"idle\"\n          }\n        }\n      }\n    }\n  }\n});\nfunction createDecorate(schema, slateEditor) {\n  return function([node, path]) {\n    if (isEqualToEmptyEditor(slateEditor.children, schema))\n      return [{\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        },\n        placeholder: !0\n      }];\n    if (path.length === 0)\n      return [];\n    if (!slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node) || node.children.length === 0)\n      return [];\n    const blockIndex = path.at(0);\n    return blockIndex === void 0 ? [] : slateEditor.decoratedRanges.filter((decoratedRange) => slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(decoratedRange) ? node.children.some((_, childIndex) => slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(decoratedRange.focus.path, [blockIndex, childIndex])) : slate__WEBPACK_IMPORTED_MODULE_14__.Range.intersection(decoratedRange, {\n      anchor: {\n        path,\n        offset: 0\n      },\n      focus: {\n        path,\n        offset: 0\n      }\n    }) || slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(decoratedRange, path));\n  };\n}\nconst debug = debugWithName(\"component:Editable\"), PortableTextEditable = (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props, portableTextEditor = usePortableTextEditor(), ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), [editableElement, setEditableElement] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle)(forwardedRef, () => ref.current);\n  const editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), relayActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(RelayActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, (s) => s.matches({\n    \"edit mode\": \"read only\"\n  })), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlate)(), rangeDecorationsActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useActorRef)(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({\n        setup: \"setting up\"\n      })\n    }\n  }), decorate = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(rangeDecorationsActor, (s_0) => s_0.context.decorate?.fn);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    rangeDecorationsActor.send({\n      type: \"update read only\",\n      readOnly\n    });\n  }, [rangeDecorationsActor, readOnly]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    rangeDecorationsActor.send({\n      type: \"range decorations updated\",\n      rangeDecorations: rangeDecorations ?? []\n    });\n  }, [rangeDecorationsActor, rangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => readOnly ? slateEditor : createWithHotkeys(editorActor, portableTextEditor, hotkeys)(slateEditor), [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor]);\n  const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((eProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderElement, { ...eProps, readOnly, renderBlock, renderChild, renderListItem, renderStyle, spellCheck }), [spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]), renderLeaf = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((leafProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderLeaf, { ...leafProps, readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder }), [readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder]), renderText = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((props_0) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderText, { ...props_0 }), []), restoreSelectionFromProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`);\n      const normalizedSelection = normalizeSelection(propsSelection, fromSlateValue(slateEditor.children, editorActor.getSnapshot().context.schema.block.name));\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n        const slateRange = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: slateEditor.value,\n            selection: normalizedSelection\n          },\n          blockIndexMap: slateEditor.blockIndexMap\n        });\n        slateRange && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o) => o.type === \"set_selection\") || editorActor.send({\n          type: \"update selection\",\n          selection: normalizedSelection\n        }), slateEditor.onChange());\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const onReady = editorActor.on(\"ready\", () => {\n      rangeDecorationsActor.send({\n        type: \"ready\"\n      }), restoreSelectionFromProps();\n    }), onInvalidValue = editorActor.on(\"invalid value\", () => {\n      setHasInvalidValue(!0);\n    }), onValueChanged = editorActor.on(\"value changed\", () => {\n      setHasInvalidValue(!1);\n    });\n    return () => {\n      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n    };\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps]);\n  const handleCopy = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event) => {\n    if (onCopy)\n      onCopy(event) !== void 0 && event.preventDefault();\n    else if (event.nativeEvent.clipboardData) {\n      event.stopPropagation(), event.preventDefault();\n      const selection = slateEditor.selection ? slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor: slateEditor,\n        range: slateEditor.selection\n      }) : void 0, position = selection ? {\n        selection\n      } : void 0;\n      if (!position) {\n        console.warn(\"Could not find position for copy event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.copy\",\n          originEvent: {\n            dataTransfer: event.nativeEvent.clipboardData\n          },\n          position\n        },\n        editor: slateEditor,\n        nativeEvent: event\n      });\n    }\n  }, [onCopy, editorActor, slateEditor]), handleCut = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_0) => {\n    if (onCut)\n      onCut(event_0) !== void 0 && event_0.preventDefault();\n    else if (event_0.nativeEvent.clipboardData) {\n      event_0.stopPropagation(), event_0.preventDefault();\n      const selection_0 = editorActor.getSnapshot().context.selection, position_0 = selection_0 ? {\n        selection: selection_0\n      } : void 0;\n      if (!position_0) {\n        console.warn(\"Could not find position for cut event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.cut\",\n          originEvent: {\n            dataTransfer: event_0.nativeEvent.clipboardData\n          },\n          position: position_0\n        },\n        editor: slateEditor,\n        nativeEvent: event_0\n      });\n    }\n  }, [onCut, editorActor, slateEditor]), handlePaste = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_1) => {\n    const value = fromSlateValue(slateEditor.children, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditor)), path = (slateEditor.selection ? slateRangeToSelection({\n      schema: editorActor.getSnapshot().context.schema,\n      editor: slateEditor,\n      range: slateEditor.selection\n    }) : null)?.focus.path || [], onPasteResult = onPaste?.({\n      event: event_1,\n      value,\n      path,\n      schemaTypes: portableTextEditor.schemaTypes\n    });\n    if (onPasteResult || !slateEditor.selection)\n      event_1.preventDefault(), relayActor.send({\n        type: \"loading\"\n      }), Promise.resolve(onPasteResult).then((result_1) => {\n        if (debug(\"Custom paste function from client resolved\", result_1), !result_1 || !result_1.insert) {\n          debug(\"No result from custom paste handler, pasting normally\");\n          const selection_1 = editorActor.getSnapshot().context.selection, position_1 = selection_1 ? {\n            selection: selection_1\n          } : void 0;\n          if (!position_1) {\n            console.warn(\"Could not find position for paste event\");\n            return;\n          }\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n              type: \"clipboard.paste\",\n              originEvent: {\n                dataTransfer: event_1.clipboardData\n              },\n              position: position_1\n            },\n            editor: slateEditor,\n            nativeEvent: event_1\n          });\n        } else result_1.insert ? editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.blocks\",\n            blocks: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_15__.parseBlocks)({\n              context: {\n                keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n                schema: editorActor.getSnapshot().context.schema\n              },\n              blocks: result_1.insert,\n              options: {\n                refreshKeys: !1,\n                validateFields: !1\n              }\n            }),\n            placement: \"auto\"\n          },\n          editor: slateEditor\n        }) : console.warn(\"Your onPaste function returned something unexpected:\", result_1);\n      }).catch((error) => (console.warn(error), error)).finally(() => {\n        relayActor.send({\n          type: \"done loading\"\n        });\n      });\n    else if (event_1.nativeEvent.clipboardData) {\n      event_1.preventDefault(), event_1.stopPropagation();\n      const selection_2 = editorActor.getSnapshot().context.selection, position_2 = selection_2 ? {\n        selection: selection_2\n      } : void 0;\n      if (!position_2) {\n        console.warn(\"Could not find position for paste event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.paste\",\n          originEvent: {\n            dataTransfer: event_1.nativeEvent.clipboardData\n          },\n          position: position_2\n        },\n        editor: slateEditor,\n        nativeEvent: event_1\n      });\n    }\n    debug(\"No result from custom paste handler, pasting normally\");\n  }, [editorActor, onPaste, portableTextEditor, relayActor, slateEditor]), handleOnFocus = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_2) => {\n    onFocus && onFocus(event_2), event_2.isDefaultPrevented() || (relayActor.send({\n      type: \"focused\",\n      event: event_2\n    }), !slateEditor.selection && isEqualToEmptyEditor(slateEditor.children, editorActor.getSnapshot().context.schema) && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(slateEditor, [])), slateEditor.onChange()));\n  }, [editorActor, onFocus, relayActor, slateEditor]), handleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_3) => {\n    if (onClick && onClick(event_3), event_3.isDefaultPrevented() || event_3.isPropagationStopped())\n      return;\n    const position_3 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_3.nativeEvent\n    });\n    position_3 && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"mouse.click\",\n        position: position_3\n      },\n      editor: slateEditor,\n      nativeEvent: event_3\n    });\n  }, [onClick, editorActor, slateEditor]), handleOnBlur = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_4) => {\n    onBlur && onBlur(event_4), event_4.isPropagationStopped() || relayActor.send({\n      type: \"blurred\",\n      event: event_4\n    });\n  }, [relayActor, onBlur]), handleOnBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_5) => {\n    onBeforeInput && onBeforeInput(event_5);\n  }, [onBeforeInput]), validateSelection = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (!slateEditor.selection)\n      return;\n    const root = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.findDocumentOrShadowRoot(slateEditor), {\n      activeElement\n    } = root;\n    if (ref.current !== activeElement)\n      return;\n    const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.getWindow(slateEditor).getSelection();\n    if (!domSelection || domSelection.rangeCount === 0)\n      return;\n    const existingDOMRange = domSelection.getRangeAt(0);\n    try {\n      const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n      (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n    } catch {\n      debug(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, [0, 0]), slateEditor.onChange();\n    }\n  }, [ref, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection);\n      return mutationObserver.observe(editableElement, {\n        attributeOldValue: !1,\n        attributes: !1,\n        characterData: !1,\n        childList: !0,\n        subtree: !0\n      }), () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [validateSelection, editableElement]);\n  const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_6) => {\n    props.onKeyDown && props.onKeyDown(event_6), event_6.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_6), event_6.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"keyboard.keydown\",\n        originEvent: {\n          key: event_6.key,\n          code: event_6.code,\n          altKey: event_6.altKey,\n          ctrlKey: event_6.ctrlKey,\n          metaKey: event_6.metaKey,\n          shiftKey: event_6.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_6\n    });\n  }, [props, editorActor, slateEditor]), handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_7) => {\n    props.onKeyUp && props.onKeyUp(event_7), event_7.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"keyboard.keyup\",\n        originEvent: {\n          key: event_7.key,\n          code: event_7.code,\n          altKey: event_7.altKey,\n          ctrlKey: event_7.ctrlKey,\n          metaKey: event_7.metaKey,\n          shiftKey: event_7.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_7\n    });\n  }, [props, editorActor, slateEditor]), scrollSelectionIntoViewToSlate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    if (scrollSelectionIntoView !== void 0)\n      return scrollSelectionIntoView === null ? lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ : (_editor, domRange) => {\n        scrollSelectionIntoView(portableTextEditor, domRange);\n      };\n  }, [portableTextEditor, scrollSelectionIntoView]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    ref.current = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);\n  }, [slateEditor, ref]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const window_0 = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.getWindow(slateEditor), onDragEnd_0 = () => {\n      editorActor.send({\n        type: \"dragend\"\n      });\n    }, onDrop_0 = () => {\n      editorActor.send({\n        type: \"drop\"\n      });\n    };\n    return window_0.document.addEventListener(\"dragend\", onDragEnd_0), window_0.document.addEventListener(\"drop\", onDrop_0), () => {\n      window_0.document.removeEventListener(\"dragend\", onDragEnd_0), window_0.document.removeEventListener(\"drop\", onDrop_0);\n    };\n  }, [slateEditor, editorActor]);\n  const handleDragStart = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_8) => {\n    if (onDragStart?.(event_8), event_8.isDefaultPrevented() || event_8.isPropagationStopped())\n      return;\n    const position_4 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_8.nativeEvent\n    });\n    if (!position_4) {\n      console.warn(\"Could not find position for dragstart event\");\n      return;\n    }\n    return editorActor.send({\n      type: \"dragstart\",\n      origin: position_4\n    }), editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"drag.dragstart\",\n        originEvent: {\n          clientX: event_8.clientX,\n          clientY: event_8.clientY,\n          dataTransfer: event_8.dataTransfer\n        },\n        position: position_4\n      },\n      editor: slateEditor\n    }), !0;\n  }, [onDragStart, editorActor, slateEditor]), handleDrag = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_9) => {\n    if (onDrag?.(event_9), !(event_9.isDefaultPrevented() || event_9.isPropagationStopped() || !getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_9.nativeEvent\n    })))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.drag\",\n          originEvent: {\n            dataTransfer: event_9.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDrag, editorActor, slateEditor]), handleDragEnd = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_10) => {\n    if (onDragEnd?.(event_10), !(event_10.isDefaultPrevented() || event_10.isPropagationStopped()))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragend\",\n          originEvent: {\n            dataTransfer: event_10.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragEnd, editorActor, slateEditor]), handleDragEnter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_11) => {\n    if (onDragEnter?.(event_11), event_11.isDefaultPrevented() || event_11.isPropagationStopped())\n      return;\n    const position_6 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_11.nativeEvent\n    });\n    if (position_6)\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragenter\",\n          originEvent: {\n            dataTransfer: event_11.dataTransfer\n          },\n          position: position_6\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragEnter, editorActor, slateEditor]), handleDragOver = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_12) => {\n    if (onDragOver?.(event_12), event_12.isDefaultPrevented() || event_12.isPropagationStopped())\n      return;\n    const position_7 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_12.nativeEvent\n    });\n    if (position_7)\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragover\",\n          originEvent: {\n            dataTransfer: event_12.dataTransfer\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position: position_7\n        },\n        editor: slateEditor,\n        nativeEvent: event_12\n      }), !0;\n  }, [onDragOver, editorActor, slateEditor]), handleDrop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_13) => {\n    if (onDrop?.(event_13), event_13.isDefaultPrevented() || event_13.isPropagationStopped())\n      return;\n    const position_8 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_13.nativeEvent\n    });\n    if (!position_8) {\n      console.warn(\"Could not find position for drop event\");\n      return;\n    }\n    return editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"drag.drop\",\n        originEvent: {\n          dataTransfer: event_13.dataTransfer\n        },\n        dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n        position: position_8\n      },\n      editor: slateEditor,\n      nativeEvent: event_13\n    }), !0;\n  }, [onDrop, editorActor, slateEditor]), handleDragLeave = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_14) => {\n    if (onDragLeave?.(event_14), !(event_14.isDefaultPrevented() || event_14.isPropagationStopped() || !getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_14.nativeEvent\n    })))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragleave\",\n          originEvent: {\n            dataTransfer: event_14.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragLeave, editorActor, slateEditor]);\n  return portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\n    slate_react__WEBPACK_IMPORTED_MODULE_22__.Editable,\n    {\n      ...restProps,\n      \"data-read-only\": readOnly,\n      autoFocus: !1,\n      className: restProps.className || \"pt-editable\",\n      decorate,\n      onBlur: handleOnBlur,\n      onCopy: handleCopy,\n      onCut: handleCut,\n      onClick: handleClick,\n      onDOMBeforeInput: handleOnBeforeInput,\n      onDragStart: handleDragStart,\n      onDrag: handleDrag,\n      onDragEnd: handleDragEnd,\n      onDragEnter: handleDragEnter,\n      onDragOver: handleDragOver,\n      onDrop: handleDrop,\n      onDragLeave: handleDragLeave,\n      onFocus: handleOnFocus,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onPaste: handlePaste,\n      readOnly,\n      renderPlaceholder: void 0,\n      renderElement,\n      renderLeaf,\n      renderText,\n      scrollSelectionIntoView: scrollSelectionIntoViewToSlate\n    }\n  ) : null;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\nfunction useConstant(factory) {\n  const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  return ref.current || (ref.current = {\n    constant: factory()\n  }), ref.current.constant;\n}\nfunction EditorProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(28);\n  let t0;\n  $[0] !== props.initialConfig ? (t0 = () => {\n    const internalEditor = createInternalEditor(props.initialConfig), portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor\n    });\n    return {\n      internalEditor,\n      portableTextEditor\n    };\n  }, $[0] = props.initialConfig, $[1] = t0) : t0 = $[1];\n  const {\n    internalEditor: internalEditor_0,\n    portableTextEditor: portableTextEditor_0\n  } = useConstant(t0);\n  let t1;\n  $[2] !== internalEditor_0.actors.editorActor || $[3] !== internalEditor_0.actors.mutationActor || $[4] !== internalEditor_0.actors.relayActor || $[5] !== internalEditor_0.actors.syncActor || $[6] !== internalEditor_0.subscriptions || $[7] !== portableTextEditor_0 ? (t1 = () => {\n    const unsubscribers = [];\n    for (const subscription of internalEditor_0.subscriptions)\n      unsubscribers.push(subscription());\n    const relayActorSubscription = internalEditor_0.actors.relayActor.on(\"*\", (event) => {\n      const change = eventToChange(event);\n      change && portableTextEditor_0.change$.next(change);\n    });\n    return unsubscribers.push(relayActorSubscription.unsubscribe), internalEditor_0.actors.editorActor.start(), internalEditor_0.actors.mutationActor.start(), internalEditor_0.actors.relayActor.start(), internalEditor_0.actors.syncActor.start(), () => {\n      for (const unsubscribe of unsubscribers)\n        unsubscribe();\n      stopActor(internalEditor_0.actors.editorActor), stopActor(internalEditor_0.actors.mutationActor), stopActor(internalEditor_0.actors.relayActor), stopActor(internalEditor_0.actors.syncActor);\n    };\n  }, $[2] = internalEditor_0.actors.editorActor, $[3] = internalEditor_0.actors.mutationActor, $[4] = internalEditor_0.actors.relayActor, $[5] = internalEditor_0.actors.syncActor, $[6] = internalEditor_0.subscriptions, $[7] = portableTextEditor_0, $[8] = t1) : t1 = $[8];\n  let t2;\n  $[9] !== internalEditor_0 || $[10] !== portableTextEditor_0 ? (t2 = [internalEditor_0, portableTextEditor_0], $[9] = internalEditor_0, $[10] = portableTextEditor_0, $[11] = t2) : t2 = $[11], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t1, t2);\n  let t3;\n  $[12] !== portableTextEditor_0 || $[13] !== props.children ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorContext.Provider, { value: portableTextEditor_0, children: props.children }), $[12] = portableTextEditor_0, $[13] = props.children, $[14] = t3) : t3 = $[14];\n  let t4;\n  $[15] !== internalEditor_0.editor._internal.slateEditor.initialValue || $[16] !== internalEditor_0.editor._internal.slateEditor.instance || $[17] !== t3 ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_22__.Slate, { editor: internalEditor_0.editor._internal.slateEditor.instance, initialValue: internalEditor_0.editor._internal.slateEditor.initialValue, children: t3 }), $[15] = internalEditor_0.editor._internal.slateEditor.initialValue, $[16] = internalEditor_0.editor._internal.slateEditor.instance, $[17] = t3, $[18] = t4) : t4 = $[18];\n  let t5;\n  $[19] !== internalEditor_0.actors.relayActor || $[20] !== t4 ? (t5 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RelayActorContext.Provider, { value: internalEditor_0.actors.relayActor, children: t4 }), $[19] = internalEditor_0.actors.relayActor, $[20] = t4, $[21] = t5) : t5 = $[21];\n  let t6;\n  $[22] !== internalEditor_0.actors.editorActor || $[23] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditorActorContext.Provider, { value: internalEditor_0.actors.editorActor, children: t5 }), $[22] = internalEditor_0.actors.editorActor, $[23] = t5, $[24] = t6) : t6 = $[24];\n  let t7;\n  return $[25] !== internalEditor_0.editor || $[26] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_13__.EditorContext.Provider, { value: internalEditor_0.editor, children: t6 }), $[25] = internalEditor_0.editor, $[26] = t6, $[27] = t7) : t7 = $[27], t7;\n}\nconst usePortableTextEditorSelection = () => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(3), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), [selection, setSelection2] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n  let t0, t1;\n  return $[0] !== editorActor ? (t0 = () => {\n    const subscription = editorActor.on(\"selection\", (event) => {\n      (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n        setSelection2(event.selection);\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editorActor], $[0] = editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), selection;\n};\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQzhIO0FBQ25HO0FBQ2Q7QUFDQztBQUN2QjtBQUNrSDtBQUNyQjtBQUNuRztBQUNrRDtBQUNzUjtBQUNyTjtBQUN2RztBQUMwUjtBQUNrWTtBQUNocEI7QUFDMEI7QUFDNUM7QUFDSDtBQUNrSjtBQUM1SDtBQUNEO0FBQ3NGO0FBQ2pGO0FBQ1Y7QUFDUDtBQUNBO0FBQ047QUFDcUY7QUFDbEI7QUFDRDtBQUNwRTtBQUNnQjtBQUNWO0FBQ1c7QUFDb0U7QUFDakU7QUFDcEQ7QUFDQSxZQUFZLHlEQUFDLGNBQWMsb0VBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRywyR0FBMkcsZ0RBQVM7QUFDdkg7QUFDQTtBQUNBLGtDQUFPO0FBQ1A7QUFDQSx1QkFBdUIsU0FBUyxFQUFFLEtBQUs7QUFDdkMsU0FBUyxrQ0FBTyxJQUFJLDBDQUFlLGNBQWMsa0NBQU8sY0FBYyxrQ0FBTztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw4Q0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQSxDQUFDLGFBQWE7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCw4RkFBOEYsMkNBQVM7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osMENBQTBDLGVBQWUsbUJBQW1CLGNBQWM7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsMENBQU07QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQ0FBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQ0FBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDZEQUE2RCx3Q0FBSTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixVQUFVLHdDQUFJO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix3Q0FBSSxnRUFBZ0Usd0NBQUk7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsZ0hBQWdIO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0EsK0JBQStCLHVEQUFTLENBQUMsb0RBQVk7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHVDQUF1Qyx3Q0FBd0M7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDBDQUFNO0FBQzVCO0FBQ0E7QUFDQSxxQkFBcUIsMENBQU07QUFDM0IsS0FBSyx3QkFBd0IsaURBQVM7QUFDdEMsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDBDQUFNO0FBQzVCO0FBQ0E7QUFDQSxxQkFBcUIsMENBQU07QUFDM0IsS0FBSyx3QkFBd0IsaURBQVM7QUFDdEMsSUFBSTtBQUNKO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscUJBQXFCLEtBQUs7QUFDL0M7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsSUFBSTtBQUNwQixPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLElBQUk7QUFDcEIsT0FBTztBQUNQO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLElBQUk7QUFDdEIsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFD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cUZBQXFGLHNEQUFHLHVDQUF1Qyx1REFBdUQ7QUFDdEw7QUFDQSxtTEFBbUwsc0RBQUcsQ0FBQywrQ0FBSyxJQUFJLHdKQUF3SjtBQUN4VjtBQUNBLHVGQUF1RixzREFBRywrQkFBK0IseURBQXlEO0FBQ2xMO0FBQ0Esd0ZBQXdGLHNEQUFHLGdDQUFnQywwREFBMEQ7QUFDckw7QUFDQSxtRkFBbUYsc0RBQUcsQ0FBQyxvRUFBYSxhQUFhLDhDQUE4QztBQUMvSjtBQUNBO0FBQ0EsWUFBWSx5REFBQyxtQkFBbUIsaURBQVUsbURBQW1ELCtDQUFRO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBLE1BQU0sc0RBQWU7QUFDckI7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUcsMEZBQTBGLGdEQUFTO0FBQ3RHO0FBWUU7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxGaXJzdCBBeW9cXERlc2t0b3BcXENyYWZ0ZWQtVGVtcGxhdGVcXGNyYWZ0ZWQtc2l0ZVxcbm9kZV9tb2R1bGVzXFxAcG9ydGFibGV0ZXh0XFxlZGl0b3JcXGxpYlxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYyB9IGZyb20gXCJyZWFjdC1jb21waWxlci1ydW50aW1lXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlUmVmLCBDb21wb25lbnQsIHVzZU1lbW8sIHN0YXJ0VHJhbnNpdGlvbiwgdXNlQ2FsbGJhY2ssIGZvcndhcmRSZWYsIHVzZUltcGVyYXRpdmVIYW5kbGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUVkaXRvciwgRWRpdG9yQ29udGV4dCB9IGZyb20gXCIuL19jaHVua3MtZXMvdXNlLWVkaXRvci5qc1wiO1xuaW1wb3J0IHsganN4LCBqc3hzLCBGcmFnbWVudCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZUFjdG9yUmVmIH0gZnJvbSBcIkB4c3RhdGUvcmVhY3RcIjtcbmltcG9ydCBub29wIGZyb20gXCJsb2Rhc2gvbm9vcC5qc1wiO1xuaW1wb3J0IHsgRWxlbWVudCBhcyBFbGVtZW50JDEsIFRleHQsIFJhbmdlLCBFZGl0b3IsIE5vZGUsIFRyYW5zZm9ybXMsIFBhdGgsIE9wZXJhdGlvbiwgZGVsZXRlVGV4dCwgc2V0U2VsZWN0aW9uLCBQb2ludCwgY3JlYXRlRWRpdG9yIH0gZnJvbSBcInNsYXRlXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RlZCwgdXNlU2xhdGVTZWxlY3RvciwgdXNlU2xhdGVTdGF0aWMsIHdpdGhSZWFjdCwgUmVhY3RFZGl0b3IsIFNsYXRlLCB1c2VTbGF0ZSwgRWRpdGFibGUgfSBmcm9tIFwic2xhdGUtcmVhY3RcIjtcbmltcG9ydCBkZWJ1ZyRmIGZyb20gXCJkZWJ1Z1wiO1xuaW1wb3J0IHsgRE9NRWRpdG9yLCBpc0RPTU5vZGUsIEVESVRPUl9UT19QRU5ESU5HX1NFTEVDVElPTiB9IGZyb20gXCJzbGF0ZS1kb21cIjtcbmltcG9ydCB7IGdldEJsb2NrU3RhcnRQb2ludCwgZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQsIGlzVGV4dEJsb2NrLCBnZXRDaGlsZEtleUZyb21TZWxlY3Rpb25Qb2ludCwgYmxvY2tPZmZzZXRUb1NwYW5TZWxlY3Rpb25Qb2ludCwgaXNTcGFuLCBwYXJzZUJsb2NrLCBwYXJzZUFubm90YXRpb24sIHBhcnNlSW5saW5lT2JqZWN0LCBpc0tleWVkU2VnbWVudCwgaXNMaXN0QmxvY2ssIGlzVHlwZWRPYmplY3QsIGdldFNlbGVjdGlvblN0YXJ0UG9pbnQsIGdldFNlbGVjdGlvbkVuZFBvaW50LCBnZXRUZXh0QmxvY2tUZXh0LCBwYXJzZUJsb2NrcyB9IGZyb20gXCIuL19jaHVua3MtZXMvdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmltcG9ydCB7IGdldEJsb2NrRW5kUG9pbnQsIGlzU2VsZWN0aW9uQ29sbGFwc2VkLCBpc0VxdWFsU2VsZWN0aW9uUG9pbnRzLCBpc0VtcHR5VGV4dEJsb2NrIH0gZnJvbSBcIi4vX2NodW5rcy1lcy91dGlsLmlzLXNlbGVjdGlvbi1jb2xsYXBzZWQuanNcIjtcbmltcG9ydCBpc0VxdWFsIGZyb20gXCJsb2Rhc2gvaXNFcXVhbC5qc1wiO1xuaW1wb3J0IHsgaXNTZWxlY3Rpb25Db2xsYXBzZWQgYXMgaXNTZWxlY3Rpb25Db2xsYXBzZWQkMSwgZ2V0Rm9jdXNUZXh0QmxvY2ssIGdldEZvY3VzU3BhbiBhcyBnZXRGb2N1c1NwYW4kMSwgaXNTZWxlY3Rpb25FeHBhbmRlZCwgZ2V0Rm9jdXNCbG9jayBhcyBnZXRGb2N1c0Jsb2NrJDEsIGdldFNlbGVjdGVkVmFsdWUsIGdldFNlbGVjdGlvblN0YXJ0UG9pbnQgYXMgZ2V0U2VsZWN0aW9uU3RhcnRQb2ludCQxLCBnZXRGb2N1c0NoaWxkIGFzIGdldEZvY3VzQ2hpbGQkMSB9IGZyb20gXCIuL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWV4cGFuZGVkLmpzXCI7XG5pbXBvcnQgeyBnZXRGb2N1c0lubGluZU9iamVjdCwgZ2V0U2VsZWN0ZWRCbG9ja3MsIGdldFNlbGVjdGlvblN0YXJ0QmxvY2sgYXMgZ2V0U2VsZWN0aW9uU3RhcnRCbG9jayQxLCBnZXRTZWxlY3Rpb25FbmRCbG9jayBhcyBnZXRTZWxlY3Rpb25FbmRCbG9jayQxLCBpc092ZXJsYXBwaW5nU2VsZWN0aW9uLCBpc1NlbGVjdGluZ0VudGlyZUJsb2NrcywgZ2V0TWFya1N0YXRlLCBnZXRBY3RpdmVEZWNvcmF0b3JzLCBnZXRBY3RpdmVBbm5vdGF0aW9uc01hcmtzLCBnZXRUcmltbWVkU2VsZWN0aW9uLCBnZXRDYXJldFdvcmRTZWxlY3Rpb24sIGdldEZvY3VzQmxvY2tPYmplY3QsIGdldFByZXZpb3VzQmxvY2ssIGdldE5leHRCbG9jaywgaXNBdFRoZUVuZE9mQmxvY2ssIGlzQXRUaGVTdGFydE9mQmxvY2ssIGdldEZpcnN0QmxvY2sgYXMgZ2V0Rmlyc3RCbG9jayQxLCBnZXRMYXN0QmxvY2sgYXMgZ2V0TGFzdEJsb2NrJDEsIGdldEZvY3VzTGlzdEJsb2NrLCBnZXRTZWxlY3Rpb25FbmRQb2ludCBhcyBnZXRTZWxlY3Rpb25FbmRQb2ludCQxLCBpc0FjdGl2ZUFubm90YXRpb24sIGlzQWN0aXZlRGVjb3JhdG9yLCBnZXRBY3RpdmVBbm5vdGF0aW9ucywgZ2V0U2VsZWN0ZWRUZXh0QmxvY2tzLCBpc0FjdGl2ZUxpc3RJdGVtLCBpc0FjdGl2ZVN0eWxlIH0gZnJvbSBcIi4vX2NodW5rcy1lcy9zZWxlY3Rvci5pcy1zZWxlY3RpbmctZW50aXJlLWJsb2Nrcy5qc1wiO1xuaW1wb3J0IGdldFJhbmRvbVZhbHVlcyBmcm9tIFwiZ2V0LXJhbmRvbS12YWx1ZXMtZXNtXCI7XG5pbXBvcnQgeyBkZWZpbmVCZWhhdmlvciwgZm9yd2FyZCwgcmFpc2UsIGVmZmVjdCB9IGZyb20gXCIuL2JlaGF2aW9ycy9pbmRleC5qc1wiO1xuaW1wb3J0IHVuaXEgZnJvbSBcImxvZGFzaC91bmlxLmpzXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IGNvbXBpbGVTY2hlbWFEZWZpbml0aW9uVG9Qb3J0YWJsZVRleHRNZW1iZXJTY2hlbWFUeXBlcywgY3JlYXRlUG9ydGFibGVUZXh0TWVtYmVyU2NoZW1hVHlwZXMsIHBvcnRhYmxlVGV4dE1lbWJlclNjaGVtYVR5cGVzVG9TY2hlbWEgfSBmcm9tIFwiQHBvcnRhYmxldGV4dC9zYW5pdHktYnJpZGdlXCI7XG5pbXBvcnQgeyBjb21waWxlU2NoZW1hIH0gZnJvbSBcIkBwb3J0YWJsZXRleHQvc2NoZW1hXCI7XG5pbXBvcnQgeyBkZWZpbmVTY2hlbWEgfSBmcm9tIFwiQHBvcnRhYmxldGV4dC9zY2hlbWFcIjtcbmltcG9ydCB7IHNldHVwLCBhc3NpZ24sIGVucXVldWVBY3Rpb25zLCBlbWl0LCBhc3NlcnRFdmVudCwgc3RhdGVJbiwgZnJvbUNhbGxiYWNrLCBhbmQsIG5vdCwgcmFpc2UgYXMgcmFpc2UkMSwgY3JlYXRlQWN0b3IgfSBmcm9tIFwieHN0YXRlXCI7XG5pbXBvcnQgeyBodG1sVG9CbG9ja3MgfSBmcm9tIFwiQHBvcnRhYmxldGV4dC9ibG9jay10b29sc1wiO1xuaW1wb3J0IHsgdG9IVE1MIH0gZnJvbSBcIkBwb3J0YWJsZXRleHQvdG8taHRtbFwiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIkBzYW5pdHkvc2NoZW1hXCI7XG5pbXBvcnQgZmxhdHRlbiBmcm9tIFwibG9kYXNoL2ZsYXR0ZW4uanNcIjtcbmltcG9ydCBvbWl0IGZyb20gXCJsb2Rhc2gvb21pdC5qc1wiO1xuaW1wb3J0IHsgYXBwbHlBbGwsIHVuc2V0LCBpbnNlcnQsIHNldCwgc2V0SWZNaXNzaW5nLCBkaWZmTWF0Y2hQYXRjaCBhcyBkaWZmTWF0Y2hQYXRjaCQxIH0gZnJvbSBcIkBwb3J0YWJsZXRleHQvcGF0Y2hlc1wiO1xuaW1wb3J0IHsgYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24gfSBmcm9tIFwiLi9fY2h1bmtzLWVzL3V0aWwuY2hpbGQtc2VsZWN0aW9uLXBvaW50LXRvLWJsb2NrLW9mZnNldC5qc1wiO1xuaW1wb3J0IHsgc2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0LCBzbGljZVRleHRCbG9jayB9IGZyb20gXCIuL19jaHVua3MtZXMvdXRpbC5zbGljZS10ZXh0LWJsb2NrLmpzXCI7XG5pbXBvcnQgZ2V0IGZyb20gXCJsb2Rhc2gvZ2V0LmpzXCI7XG5pbXBvcnQgaXNVbmRlZmluZWQgZnJvbSBcImxvZGFzaC9pc1VuZGVmaW5lZC5qc1wiO1xuaW1wb3J0IG9taXRCeSBmcm9tIFwibG9kYXNoL29taXRCeS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRHJhZnQsIGZpbmlzaERyYWZ0IH0gZnJvbSBcImltbWVyXCI7XG5pbXBvcnQgeyBjcmVhdGVLZXlib2FyZFNob3J0Y3V0LCBjb2RlLCB1bmRlcmxpbmUsIGl0YWxpYywgYm9sZCwgdW5kbywgcmVkbyB9IGZyb20gXCJAcG9ydGFibGV0ZXh0L2tleWJvYXJkLXNob3J0Y3V0c1wiO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSBcImxvZGFzaC9pc1BsYWluT2JqZWN0LmpzXCI7XG5mdW5jdGlvbiBFZGl0b3JFdmVudExpc3RlbmVyKHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDQpLCBlZGl0b3IgPSB1c2VFZGl0b3IoKTtcbiAgbGV0IHQwLCB0MTtcbiAgcmV0dXJuICRbMF0gIT09IGVkaXRvciB8fCAkWzFdICE9PSBwcm9wcy5vbiA/ICh0MCA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBlZGl0b3Iub24oXCIqXCIsIHByb3BzLm9uKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgdDEgPSBbZWRpdG9yLCBwcm9wcy5vbl0sICRbMF0gPSBlZGl0b3IsICRbMV0gPSBwcm9wcy5vbiwgJFsyXSA9IHQwLCAkWzNdID0gdDEpIDogKHQwID0gJFsyXSwgdDEgPSAkWzNdKSwgdXNlRWZmZWN0KHQwLCB0MSksIG51bGw7XG59XG5jb25zdCByb290TmFtZSA9IFwic2FuaXR5LXB0ZTpcIjtcbmRlYnVnJGYocm9vdE5hbWUpO1xuZnVuY3Rpb24gZGVidWdXaXRoTmFtZShuYW1lKSB7XG4gIGNvbnN0IG5hbWVzcGFjZSA9IGAke3Jvb3ROYW1lfSR7bmFtZX1gO1xuICByZXR1cm4gZGVidWckZiAmJiBkZWJ1ZyRmLmVuYWJsZWQobmFtZXNwYWNlKSA/IGRlYnVnJGYobmFtZXNwYWNlKSA6IGRlYnVnJGYocm9vdE5hbWUpO1xufVxuY29uc3QgVk9JRF9DSElMRF9LRVkgPSBcInZvaWQtY2hpbGRcIjtcbmZ1bmN0aW9uIGtlZXBPYmplY3RFcXVhbGl0eShvYmplY3QsIGtleU1hcCkge1xuICBjb25zdCB2YWx1ZSA9IGtleU1hcFtvYmplY3QuX2tleV07XG4gIHJldHVybiB2YWx1ZSAmJiBpc0VxdWFsKG9iamVjdCwgdmFsdWUpID8gdmFsdWUgOiAoa2V5TWFwW29iamVjdC5fa2V5XSA9IG9iamVjdCwgb2JqZWN0KTtcbn1cbmZ1bmN0aW9uIHRvU2xhdGVWYWx1ZSh2YWx1ZSwge1xuICBzY2hlbWFUeXBlc1xufSwga2V5TWFwID0ge30pIHtcbiAgcmV0dXJuIHZhbHVlICYmIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKChibG9jaykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIF90eXBlLFxuICAgICAgX2tleSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gYmxvY2s7XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLl90eXBlID09PSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lKSB7XG4gICAgICBjb25zdCB0ZXh0QmxvY2sgPSBibG9jaztcbiAgICAgIGxldCBoYXNJbmxpbmVzID0gITE7XG4gICAgICBjb25zdCBoYXNNaXNzaW5nU3R5bGUgPSB0eXBlb2YgdGV4dEJsb2NrLnN0eWxlID4gXCJ1XCIsIGhhc01pc3NpbmdNYXJrRGVmcyA9IHR5cGVvZiB0ZXh0QmxvY2subWFya0RlZnMgPiBcInVcIiwgaGFzTWlzc2luZ0NoaWxkcmVuID0gdHlwZW9mIHRleHRCbG9jay5jaGlsZHJlbiA+IFwidVwiLCBjaGlsZHJlbiA9ICh0ZXh0QmxvY2suY2hpbGRyZW4gfHwgW10pLm1hcCgoY2hpbGQpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIF90eXBlOiBjVHlwZSxcbiAgICAgICAgICBfa2V5OiBjS2V5LFxuICAgICAgICAgIC4uLmNSZXN0XG4gICAgICAgIH0gPSBjaGlsZDtcbiAgICAgICAgcmV0dXJuIGNUeXBlICE9PSBcInNwYW5cIiA/IChoYXNJbmxpbmVzID0gITAsIGtlZXBPYmplY3RFcXVhbGl0eSh7XG4gICAgICAgICAgX3R5cGU6IGNUeXBlLFxuICAgICAgICAgIF9rZXk6IGNLZXksXG4gICAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgICBfa2V5OiBWT0lEX0NISUxEX0tFWSxcbiAgICAgICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgICAgICBtYXJrczogW11cbiAgICAgICAgICB9XSxcbiAgICAgICAgICB2YWx1ZTogY1Jlc3QsXG4gICAgICAgICAgX19pbmxpbmU6ICEwXG4gICAgICAgIH0sIGtleU1hcCkpIDogY2hpbGQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhaGFzTWlzc2luZ1N0eWxlICYmICFoYXNNaXNzaW5nTWFya0RlZnMgJiYgIWhhc01pc3NpbmdDaGlsZHJlbiAmJiAhaGFzSW5saW5lcyAmJiBFbGVtZW50JDEuaXNFbGVtZW50KGJsb2NrKSA/IGJsb2NrIDogKGhhc01pc3NpbmdTdHlsZSAmJiAocmVzdC5zdHlsZSA9IHNjaGVtYVR5cGVzLnN0eWxlc1swXS5uYW1lKSwga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgICAgX3R5cGUsXG4gICAgICAgIF9rZXksXG4gICAgICAgIC4uLnJlc3QsXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICB9LCBrZXlNYXApKTtcbiAgICB9XG4gICAgcmV0dXJuIGtlZXBPYmplY3RFcXVhbGl0eSh7XG4gICAgICBfdHlwZSxcbiAgICAgIF9rZXksXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgX2tleTogVk9JRF9DSElMRF9LRVksXG4gICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgbWFya3M6IFtdXG4gICAgICB9XSxcbiAgICAgIHZhbHVlOiByZXN0XG4gICAgfSwga2V5TWFwKTtcbiAgfSkgOiBbXTtcbn1cbmZ1bmN0aW9uIGZyb21TbGF0ZVZhbHVlKHZhbHVlLCB0ZXh0QmxvY2tUeXBlLCBrZXlNYXAgPSB7fSkge1xuICByZXR1cm4gdmFsdWUubWFwKChibG9jaykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIF9rZXksXG4gICAgICBfdHlwZVxuICAgIH0gPSBibG9jaztcbiAgICBpZiAoIV9rZXkgfHwgIV90eXBlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGEgdmFsaWQgYmxvY2tcIik7XG4gICAgaWYgKF90eXBlID09PSB0ZXh0QmxvY2tUeXBlICYmIFwiY2hpbGRyZW5cIiBpbiBibG9jayAmJiBBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSAmJiBfa2V5KSB7XG4gICAgICBsZXQgaGFzSW5saW5lcyA9ICExO1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBfdHlwZTogX2NUeXBlXG4gICAgICAgIH0gPSBjaGlsZDtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBjaGlsZCAmJiBfY1R5cGUgIT09IFwic3BhblwiKSB7XG4gICAgICAgICAgaGFzSW5saW5lcyA9ICEwO1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgICAgX2tleTogayxcbiAgICAgICAgICAgIF90eXBlOiB0LFxuICAgICAgICAgICAgX19pbmxpbmU6IF9pLFxuICAgICAgICAgICAgY2hpbGRyZW46IF9jLFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH0gPSBjaGlsZDtcbiAgICAgICAgICByZXR1cm4ga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAuLi52LFxuICAgICAgICAgICAgX2tleTogayxcbiAgICAgICAgICAgIF90eXBlOiB0XG4gICAgICAgICAgfSwga2V5TWFwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBoYXNJbmxpbmVzID8ga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgICAgLi4uYmxvY2ssXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBfa2V5LFxuICAgICAgICBfdHlwZVxuICAgICAgfSwga2V5TWFwKSA6IGJsb2NrO1xuICAgIH1cbiAgICBjb25zdCBibG9ja1ZhbHVlID0gXCJ2YWx1ZVwiIGluIGJsb2NrICYmIGJsb2NrLnZhbHVlO1xuICAgIHJldHVybiBrZWVwT2JqZWN0RXF1YWxpdHkoe1xuICAgICAgX2tleSxcbiAgICAgIF90eXBlLFxuICAgICAgLi4udHlwZW9mIGJsb2NrVmFsdWUgPT0gXCJvYmplY3RcIiA/IGJsb2NrVmFsdWUgOiB7fVxuICAgIH0sIGtleU1hcCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNFcXVhbFRvRW1wdHlFZGl0b3IoY2hpbGRyZW4sIHNjaGVtYVR5cGVzKSB7XG4gIHJldHVybiBjaGlsZHJlbiA9PT0gdm9pZCAwIHx8IGNoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCB8fCBjaGlsZHJlbiAmJiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgRWxlbWVudCQxLmlzRWxlbWVudChjaGlsZHJlblswXSkgJiYgY2hpbGRyZW5bMF0uX3R5cGUgPT09IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUgJiYgXCJzdHlsZVwiIGluIGNoaWxkcmVuWzBdICYmIGNoaWxkcmVuWzBdLnN0eWxlID09PSBzY2hlbWFUeXBlcy5zdHlsZXNbMF0ubmFtZSAmJiAhKFwibGlzdEl0ZW1cIiBpbiBjaGlsZHJlblswXSkgJiYgQXJyYXkuaXNBcnJheShjaGlsZHJlblswXS5jaGlsZHJlbikgJiYgY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIFRleHQuaXNUZXh0KGNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKSAmJiBjaGlsZHJlblswXS5jaGlsZHJlblswXS5fdHlwZSA9PT0gXCJzcGFuXCIgJiYgIWNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLm1hcmtzPy5qb2luKFwiXCIpICYmIGNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLnRleHQgPT09IFwiXCI7XG59XG5mdW5jdGlvbiBnZXRCbG9ja1BhdGgoe1xuICBlZGl0b3IsXG4gIF9rZXlcbn0pIHtcbiAgY29uc3QgWywgYmxvY2tQYXRoXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgIGF0OiBbXSxcbiAgICBtYXRjaDogKG4pID0+IG4uX2tleSA9PT0gX2tleVxuICB9KSkuYXQoMCkgPz8gW3ZvaWQgMCwgdm9pZCAwXSwgYmxvY2tJbmRleCA9IGJsb2NrUGF0aD8uYXQoMCk7XG4gIGlmIChibG9ja0luZGV4ICE9PSB2b2lkIDApXG4gICAgcmV0dXJuIFtibG9ja0luZGV4XTtcbn1cbmZ1bmN0aW9uIGdldEZvY3VzQmxvY2soe1xuICBlZGl0b3Jcbn0pIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybiBbdm9pZCAwLCB2b2lkIDBdO1xuICB0cnkge1xuICAgIHJldHVybiBFZGl0b3Iubm9kZShlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKSkgPz8gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFt2b2lkIDAsIHZvaWQgMF07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZvY3VzU3Bhbih7XG4gIGVkaXRvclxufSkge1xuICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuIFt2b2lkIDAsIHZvaWQgMF07XG4gIHRyeSB7XG4gICAgY29uc3QgW25vZGUsIHBhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGgpO1xuICAgIGlmIChlZGl0b3IuaXNUZXh0U3Bhbihub2RlKSlcbiAgICAgIHJldHVybiBbbm9kZSwgcGF0aF07XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBbdm9pZCAwLCB2b2lkIDBdO1xuICB9XG4gIHJldHVybiBbdm9pZCAwLCB2b2lkIDBdO1xufVxuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uU3RhcnRCbG9jayh7XG4gIGVkaXRvclxufSkge1xuICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuIFt2b2lkIDAsIHZvaWQgMF07XG4gIGNvbnN0IHNlbGVjdGlvblN0YXJ0UG9pbnQgPSBSYW5nZS5zdGFydChlZGl0b3Iuc2VsZWN0aW9uKTtcbiAgcmV0dXJuIGdldFBvaW50QmxvY2soe1xuICAgIGVkaXRvcixcbiAgICBwb2ludDogc2VsZWN0aW9uU3RhcnRQb2ludFxuICB9KTtcbn1cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbkVuZEJsb2NrKHtcbiAgZWRpdG9yXG59KSB7XG4gIGlmICghZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm4gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgY29uc3Qgc2VsZWN0aW9uRW5kUG9pbnQgPSBSYW5nZS5lbmQoZWRpdG9yLnNlbGVjdGlvbik7XG4gIHJldHVybiBnZXRQb2ludEJsb2NrKHtcbiAgICBlZGl0b3IsXG4gICAgcG9pbnQ6IHNlbGVjdGlvbkVuZFBvaW50XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0UG9pbnRCbG9jayh7XG4gIGVkaXRvcixcbiAgcG9pbnRcbn0pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBbYmxvY2tdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBwb2ludC5wYXRoLnNsaWNlKDAsIDEpKSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICAgIHJldHVybiBibG9jayA/IFtibG9jaywgcG9pbnQucGF0aC5zbGljZSgwLCAxKV0gOiBbdm9pZCAwLCB2b2lkIDBdO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Rm9jdXNDaGlsZCh7XG4gIGVkaXRvclxufSkge1xuICBjb25zdCBbZm9jdXNCbG9jaywgZm9jdXNCbG9ja1BhdGhdID0gZ2V0Rm9jdXNCbG9jayh7XG4gICAgZWRpdG9yXG4gIH0pLCBjaGlsZEluZGV4ID0gZWRpdG9yLnNlbGVjdGlvbj8uZm9jdXMucGF0aC5hdCgxKTtcbiAgaWYgKCFmb2N1c0Jsb2NrIHx8ICFmb2N1c0Jsb2NrUGF0aCB8fCBjaGlsZEluZGV4ID09PSB2b2lkIDApXG4gICAgcmV0dXJuIFt2b2lkIDAsIHZvaWQgMF07XG4gIHRyeSB7XG4gICAgY29uc3QgZm9jdXNDaGlsZCA9IE5vZGUuY2hpbGQoZm9jdXNCbG9jaywgY2hpbGRJbmRleCk7XG4gICAgcmV0dXJuIGZvY3VzQ2hpbGQgPyBbZm9jdXNDaGlsZCwgWy4uLmZvY3VzQmxvY2tQYXRoLCBjaGlsZEluZGV4XV0gOiBbdm9pZCAwLCB2b2lkIDBdO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UG9pbnRDaGlsZCh7XG4gIGVkaXRvcixcbiAgcG9pbnRcbn0pIHtcbiAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gZ2V0UG9pbnRCbG9jayh7XG4gICAgZWRpdG9yLFxuICAgIHBvaW50XG4gIH0pLCBjaGlsZEluZGV4ID0gcG9pbnQucGF0aC5hdCgxKTtcbiAgaWYgKCFibG9jayB8fCAhYmxvY2tQYXRoIHx8IGNoaWxkSW5kZXggPT09IHZvaWQgMClcbiAgICByZXR1cm4gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgdHJ5IHtcbiAgICBjb25zdCBwb2ludENoaWxkID0gTm9kZS5jaGlsZChibG9jaywgY2hpbGRJbmRleCk7XG4gICAgcmV0dXJuIHBvaW50Q2hpbGQgPyBbcG9pbnRDaGlsZCwgWy4uLmJsb2NrUGF0aCwgY2hpbGRJbmRleF1dIDogW3ZvaWQgMCwgdm9pZCAwXTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFt2b2lkIDAsIHZvaWQgMF07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZpcnN0QmxvY2soe1xuICBlZGl0b3Jcbn0pIHtcbiAgaWYgKGVkaXRvci5jaGlsZHJlbi5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFt2b2lkIDAsIHZvaWQgMF07XG4gIGNvbnN0IGZpcnN0QmxvY2tQYXRoID0gRWRpdG9yLnN0YXJ0KGVkaXRvciwgW10pLnBhdGguYXQoMCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZpcnN0QmxvY2tQYXRoICE9PSB2b2lkIDAgPyBFZGl0b3Iubm9kZShlZGl0b3IsIFtmaXJzdEJsb2NrUGF0aF0pID8/IFt2b2lkIDAsIHZvaWQgMF0gOiBbdm9pZCAwLCB2b2lkIDBdO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TGFzdEJsb2NrKHtcbiAgZWRpdG9yXG59KSB7XG4gIGlmIChlZGl0b3IuY2hpbGRyZW4ubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBbdm9pZCAwLCB2b2lkIDBdO1xuICBjb25zdCBsYXN0QmxvY2tQYXRoID0gRWRpdG9yLmVuZChlZGl0b3IsIFtdKS5wYXRoLmF0KDApO1xuICB0cnkge1xuICAgIHJldHVybiBsYXN0QmxvY2tQYXRoICE9PSB2b2lkIDAgPyBFZGl0b3Iubm9kZShlZGl0b3IsIFtsYXN0QmxvY2tQYXRoXSkgPz8gW3ZvaWQgMCwgdm9pZCAwXSA6IFt2b2lkIDAsIHZvaWQgMF07XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBbdm9pZCAwLCB2b2lkIDBdO1xuICB9XG59XG5mdW5jdGlvbiBnZXROb2RlQmxvY2soe1xuICBlZGl0b3IsXG4gIHNjaGVtYSxcbiAgbm9kZVxufSkge1xuICBpZiAoRWRpdG9yLmlzRWRpdG9yKG5vZGUpKVxuICAgIHJldHVybjtcbiAgaWYgKGlzQmxvY2tFbGVtZW50KHtcbiAgICBlZGl0b3IsXG4gICAgc2NoZW1hXG4gIH0sIG5vZGUpKVxuICAgIHJldHVybiBlbGVtZW50VG9CbG9jayh7XG4gICAgICBzY2hlbWEsXG4gICAgICBlbGVtZW50OiBub2RlXG4gICAgfSk7XG4gIGNvbnN0IHBhcmVudCA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgIG1vZGU6IFwiaGlnaGVzdFwiLFxuICAgIGF0OiBbXSxcbiAgICBtYXRjaDogKG4pID0+IGlzQmxvY2tFbGVtZW50KHtcbiAgICAgIGVkaXRvcixcbiAgICAgIHNjaGVtYVxuICAgIH0sIG4pICYmIG4uY2hpbGRyZW4uc29tZSgoY2hpbGQpID0+IGNoaWxkLl9rZXkgPT09IG5vZGUuX2tleSlcbiAgfSkpLmF0KDApPy5hdCgwKTtcbiAgcmV0dXJuIEVsZW1lbnQkMS5pc0VsZW1lbnQocGFyZW50KSA/IGVsZW1lbnRUb0Jsb2NrKHtcbiAgICBzY2hlbWEsXG4gICAgZWxlbWVudDogcGFyZW50XG4gIH0pIDogdm9pZCAwO1xufVxuZnVuY3Rpb24gZWxlbWVudFRvQmxvY2soe1xuICBzY2hlbWEsXG4gIGVsZW1lbnRcbn0pIHtcbiAgcmV0dXJuIGZyb21TbGF0ZVZhbHVlKFtlbGVtZW50XSwgc2NoZW1hLmJsb2NrLm5hbWUpPy5hdCgwKTtcbn1cbmZ1bmN0aW9uIGlzQmxvY2tFbGVtZW50KHtcbiAgZWRpdG9yLFxuICBzY2hlbWFcbn0sIG5vZGUpIHtcbiAgcmV0dXJuIEVsZW1lbnQkMS5pc0VsZW1lbnQobm9kZSkgJiYgIWVkaXRvci5pc0lubGluZShub2RlKSAmJiAoc2NoZW1hLmJsb2NrLm5hbWUgPT09IG5vZGUuX3R5cGUgfHwgc2NoZW1hLmJsb2NrT2JqZWN0cy5zb21lKChibG9ja09iamVjdCkgPT4gYmxvY2tPYmplY3QubmFtZSA9PT0gbm9kZS5fdHlwZSkpO1xufVxuZnVuY3Rpb24gaXNMaXN0SXRlbUFjdGl2ZSh7XG4gIGVkaXRvcixcbiAgbGlzdEl0ZW1cbn0pIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3Qgc2VsZWN0ZWRCbG9ja3MgPSBbLi4uRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLFxuICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pXTtcbiAgcmV0dXJuIHNlbGVjdGVkQmxvY2tzLmxlbmd0aCA+IDAgPyBzZWxlY3RlZEJsb2Nrcy5ldmVyeSgoW25vZGVdKSA9PiBlZGl0b3IuaXNMaXN0QmxvY2sobm9kZSkgJiYgbm9kZS5saXN0SXRlbSA9PT0gbGlzdEl0ZW0pIDogITE7XG59XG5mdW5jdGlvbiBpc1N0eWxlQWN0aXZlKHtcbiAgZWRpdG9yLFxuICBzdHlsZVxufSkge1xuICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuICExO1xuICBjb25zdCBzZWxlY3RlZEJsb2NrcyA9IFsuLi5FZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgfSldO1xuICByZXR1cm4gc2VsZWN0ZWRCbG9ja3MubGVuZ3RoID4gMCA/IHNlbGVjdGVkQmxvY2tzLmV2ZXJ5KChbbm9kZV0pID0+IG5vZGUuc3R5bGUgPT09IHN0eWxlKSA6ICExO1xufVxuZnVuY3Rpb24gc2xhdGVSYW5nZVRvU2VsZWN0aW9uKHtcbiAgc2NoZW1hLFxuICBlZGl0b3IsXG4gIHJhbmdlXG59KSB7XG4gIGNvbnN0IFthbmNob3JCbG9ja10gPSBnZXRQb2ludEJsb2NrKHtcbiAgICBlZGl0b3IsXG4gICAgcG9pbnQ6IHJhbmdlLmFuY2hvclxuICB9KSwgW2ZvY3VzQmxvY2tdID0gZ2V0UG9pbnRCbG9jayh7XG4gICAgZWRpdG9yLFxuICAgIHBvaW50OiByYW5nZS5mb2N1c1xuICB9KTtcbiAgaWYgKCFhbmNob3JCbG9jayB8fCAhZm9jdXNCbG9jaylcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgW2FuY2hvckNoaWxkXSA9IGFuY2hvckJsb2NrLl90eXBlID09PSBzY2hlbWEuYmxvY2submFtZSA/IGdldFBvaW50Q2hpbGQoe1xuICAgIGVkaXRvcixcbiAgICBwb2ludDogcmFuZ2UuYW5jaG9yXG4gIH0pIDogW3ZvaWQgMCwgdm9pZCAwXSwgW2ZvY3VzQ2hpbGRdID0gZm9jdXNCbG9jay5fdHlwZSA9PT0gc2NoZW1hLmJsb2NrLm5hbWUgPyBnZXRQb2ludENoaWxkKHtcbiAgICBlZGl0b3IsXG4gICAgcG9pbnQ6IHJhbmdlLmZvY3VzXG4gIH0pIDogW3ZvaWQgMCwgdm9pZCAwXSwgc2VsZWN0aW9uID0ge1xuICAgIGFuY2hvcjoge1xuICAgICAgcGF0aDogW3tcbiAgICAgICAgX2tleTogYW5jaG9yQmxvY2suX2tleVxuICAgICAgfV0sXG4gICAgICBvZmZzZXQ6IHJhbmdlLmFuY2hvci5vZmZzZXRcbiAgICB9LFxuICAgIGZvY3VzOiB7XG4gICAgICBwYXRoOiBbe1xuICAgICAgICBfa2V5OiBmb2N1c0Jsb2NrLl9rZXlcbiAgICAgIH1dLFxuICAgICAgb2Zmc2V0OiByYW5nZS5mb2N1cy5vZmZzZXRcbiAgICB9LFxuICAgIGJhY2t3YXJkOiBSYW5nZS5pc0JhY2t3YXJkKHJhbmdlKVxuICB9O1xuICByZXR1cm4gYW5jaG9yQ2hpbGQgJiYgKHNlbGVjdGlvbi5hbmNob3IucGF0aC5wdXNoKFwiY2hpbGRyZW5cIiksIHNlbGVjdGlvbi5hbmNob3IucGF0aC5wdXNoKHtcbiAgICBfa2V5OiBhbmNob3JDaGlsZC5fa2V5XG4gIH0pKSwgZm9jdXNDaGlsZCAmJiAoc2VsZWN0aW9uLmZvY3VzLnBhdGgucHVzaChcImNoaWxkcmVuXCIpLCBzZWxlY3Rpb24uZm9jdXMucGF0aC5wdXNoKHtcbiAgICBfa2V5OiBmb2N1c0NoaWxkLl9rZXlcbiAgfSkpLCBzZWxlY3Rpb247XG59XG5mdW5jdGlvbiBnZXRFdmVudFBvc2l0aW9uKHtcbiAgZWRpdG9yQWN0b3IsXG4gIHNsYXRlRWRpdG9yLFxuICBldmVudFxufSkge1xuICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICBzZXR1cDogXCJzZXR0aW5nIHVwXCJcbiAgfSkpXG4gICAgcmV0dXJuO1xuICBjb25zdCBldmVudE5vZGUgPSBnZXRFdmVudE5vZGUoe1xuICAgIHNsYXRlRWRpdG9yLFxuICAgIGV2ZW50XG4gIH0pO1xuICBpZiAoIWV2ZW50Tm9kZSlcbiAgICByZXR1cm47XG4gIGNvbnN0IGV2ZW50QmxvY2sgPSBnZXROb2RlQmxvY2soe1xuICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgIG5vZGU6IGV2ZW50Tm9kZVxuICB9KSwgZXZlbnRQb3NpdGlvbkJsb2NrID0gZ2V0RXZlbnRQb3NpdGlvbkJsb2NrKHtcbiAgICBub2RlOiBldmVudE5vZGUsXG4gICAgc2xhdGVFZGl0b3IsXG4gICAgZXZlbnRcbiAgfSksIGV2ZW50U2VsZWN0aW9uID0gZ2V0RXZlbnRTZWxlY3Rpb24oe1xuICAgIHNjaGVtYTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSxcbiAgICBzbGF0ZUVkaXRvcixcbiAgICBldmVudFxuICB9KTtcbiAgaWYgKGV2ZW50QmxvY2sgJiYgZXZlbnRQb3NpdGlvbkJsb2NrICYmICFldmVudFNlbGVjdGlvbiAmJiAhRWRpdG9yLmlzRWRpdG9yKGV2ZW50Tm9kZSkpXG4gICAgcmV0dXJuIHtcbiAgICAgIGJsb2NrOiBldmVudFBvc2l0aW9uQmxvY2ssXG4gICAgICBpc0VkaXRvcjogITEsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiBnZXRCbG9ja1N0YXJ0UG9pbnQoe1xuICAgICAgICAgIGNvbnRleHQ6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dCxcbiAgICAgICAgICBibG9jazoge1xuICAgICAgICAgICAgbm9kZTogZXZlbnRCbG9jayxcbiAgICAgICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgICAgIF9rZXk6IGV2ZW50QmxvY2suX2tleVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBmb2N1czogZ2V0QmxvY2tFbmRQb2ludCh7XG4gICAgICAgICAgY29udGV4dDogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LFxuICAgICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgICBub2RlOiBldmVudEJsb2NrLFxuICAgICAgICAgICAgcGF0aDogW3tcbiAgICAgICAgICAgICAgX2tleTogZXZlbnRCbG9jay5fa2V5XG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9O1xuICBpZiAoIWV2ZW50UG9zaXRpb25CbG9jayB8fCAhZXZlbnRTZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBldmVudFNlbGVjdGlvbkZvY3VzQmxvY2tLZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludChldmVudFNlbGVjdGlvbi5mb2N1cyk7XG4gIGlmIChldmVudFNlbGVjdGlvbkZvY3VzQmxvY2tLZXkgIT09IHZvaWQgMClcbiAgICByZXR1cm4gaXNTZWxlY3Rpb25Db2xsYXBzZWQoZXZlbnRTZWxlY3Rpb24pICYmIGV2ZW50QmxvY2sgJiYgZXZlbnRTZWxlY3Rpb25Gb2N1c0Jsb2NrS2V5ICE9PSBldmVudEJsb2NrLl9rZXkgPyB7XG4gICAgICBibG9jazogZXZlbnRQb3NpdGlvbkJsb2NrLFxuICAgICAgaXNFZGl0b3I6ICExLFxuICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgIGFuY2hvcjogZ2V0QmxvY2tTdGFydFBvaW50KHtcbiAgICAgICAgICBjb250ZXh0OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQsXG4gICAgICAgICAgYmxvY2s6IHtcbiAgICAgICAgICAgIG5vZGU6IGV2ZW50QmxvY2ssXG4gICAgICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgICAgICBfa2V5OiBldmVudEJsb2NrLl9rZXlcbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZm9jdXM6IGdldEJsb2NrRW5kUG9pbnQoe1xuICAgICAgICAgIGNvbnRleHQ6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dCxcbiAgICAgICAgICBibG9jazoge1xuICAgICAgICAgICAgbm9kZTogZXZlbnRCbG9jayxcbiAgICAgICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgICAgIF9rZXk6IGV2ZW50QmxvY2suX2tleVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSA6IHtcbiAgICAgIGJsb2NrOiBldmVudFBvc2l0aW9uQmxvY2ssXG4gICAgICBpc0VkaXRvcjogRWRpdG9yLmlzRWRpdG9yKGV2ZW50Tm9kZSksXG4gICAgICBzZWxlY3Rpb246IGV2ZW50U2VsZWN0aW9uXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50Tm9kZSh7XG4gIHNsYXRlRWRpdG9yLFxuICBldmVudFxufSkge1xuICByZXR1cm4gRE9NRWRpdG9yLmhhc1RhcmdldChzbGF0ZUVkaXRvciwgZXZlbnQudGFyZ2V0KSA/IERPTUVkaXRvci50b1NsYXRlTm9kZShzbGF0ZUVkaXRvciwgZXZlbnQudGFyZ2V0KSA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50UG9zaXRpb25CbG9jayh7XG4gIG5vZGUsXG4gIHNsYXRlRWRpdG9yLFxuICBldmVudFxufSkge1xuICBjb25zdCBbZmlyc3RCbG9ja10gPSBnZXRGaXJzdEJsb2NrKHtcbiAgICBlZGl0b3I6IHNsYXRlRWRpdG9yXG4gIH0pO1xuICBpZiAoIWZpcnN0QmxvY2spXG4gICAgcmV0dXJuO1xuICBjb25zdCBmaXJzdEJsb2NrUmVjdCA9IERPTUVkaXRvci50b0RPTU5vZGUoc2xhdGVFZGl0b3IsIGZpcnN0QmxvY2spLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBpZiAoZXZlbnQucGFnZVkgPCBmaXJzdEJsb2NrUmVjdC50b3ApXG4gICAgcmV0dXJuIFwic3RhcnRcIjtcbiAgY29uc3QgW2xhc3RCbG9ja10gPSBnZXRMYXN0QmxvY2soe1xuICAgIGVkaXRvcjogc2xhdGVFZGl0b3JcbiAgfSk7XG4gIGlmICghbGFzdEJsb2NrKVxuICAgIHJldHVybjtcbiAgY29uc3QgbGFzdEJsb2NrUmVmID0gRE9NRWRpdG9yLnRvRE9NTm9kZShzbGF0ZUVkaXRvciwgbGFzdEJsb2NrKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgaWYgKGV2ZW50LnBhZ2VZID4gbGFzdEJsb2NrUmVmLmJvdHRvbSlcbiAgICByZXR1cm4gXCJlbmRcIjtcbiAgY29uc3QgZWxlbWVudFJlY3QgPSBET01FZGl0b3IudG9ET01Ob2RlKHNsYXRlRWRpdG9yLCBub2RlKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdG9wID0gZWxlbWVudFJlY3QudG9wLCBoZWlnaHQgPSBlbGVtZW50UmVjdC5oZWlnaHQ7XG4gIHJldHVybiBNYXRoLmFicyh0b3AgLSBldmVudC5wYWdlWSkgPCBoZWlnaHQgLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIjtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50U2VsZWN0aW9uKHtcbiAgc2NoZW1hLFxuICBzbGF0ZUVkaXRvcixcbiAgZXZlbnRcbn0pIHtcbiAgY29uc3QgcmFuZ2UgPSBnZXRTbGF0ZVJhbmdlRnJvbUV2ZW50KHNsYXRlRWRpdG9yLCBldmVudCk7XG4gIHJldHVybiByYW5nZSA/IHNsYXRlUmFuZ2VUb1NlbGVjdGlvbih7XG4gICAgc2NoZW1hLFxuICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgcmFuZ2VcbiAgfSkgOiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0U2xhdGVSYW5nZUZyb21FdmVudChlZGl0b3IsIGV2ZW50KSB7XG4gIGlmICghZXZlbnQudGFyZ2V0IHx8ICFpc0RPTU5vZGUoZXZlbnQudGFyZ2V0KSlcbiAgICByZXR1cm47XG4gIGNvbnN0IHdpbmRvdzIgPSBET01FZGl0b3IuZ2V0V2luZG93KGVkaXRvcik7XG4gIGxldCBkb21SYW5nZTtcbiAgaWYgKHdpbmRvdzIuZG9jdW1lbnQuY2FyZXRQb3NpdGlvbkZyb21Qb2ludCAhPT0gdm9pZCAwKSB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB3aW5kb3cyLmRvY3VtZW50LmNhcmV0UG9zaXRpb25Gcm9tUG9pbnQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgaWYgKHBvc2l0aW9uKVxuICAgICAgdHJ5IHtcbiAgICAgICAgZG9tUmFuZ2UgPSB3aW5kb3cyLmRvY3VtZW50LmNyZWF0ZVJhbmdlKCksIGRvbVJhbmdlLnNldFN0YXJ0KHBvc2l0aW9uLm9mZnNldE5vZGUsIHBvc2l0aW9uLm9mZnNldCksIGRvbVJhbmdlLnNldEVuZChwb3NpdGlvbi5vZmZzZXROb2RlLCBwb3NpdGlvbi5vZmZzZXQpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICB9XG4gIH0gZWxzZSBpZiAod2luZG93Mi5kb2N1bWVudC5jYXJldFJhbmdlRnJvbVBvaW50ICE9PSB2b2lkIDApXG4gICAgZG9tUmFuZ2UgPSB3aW5kb3cyLmRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSkgPz8gdm9pZCAwO1xuICBlbHNlIHtcbiAgICBjb25zb2xlLndhcm4oXCJOZWl0aGVyIGNhcmV0UG9zaXRpb25Gcm9tUG9pbnQgbm9yIGNhcmV0UmFuZ2VGcm9tUG9pbnQgaXMgc3VwcG9ydGVkXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWRvbVJhbmdlKVxuICAgIHJldHVybjtcbiAgbGV0IHJhbmdlO1xuICB0cnkge1xuICAgIHJhbmdlID0gRE9NRWRpdG9yLnRvU2xhdGVSYW5nZShlZGl0b3IsIGRvbVJhbmdlLCB7XG4gICAgICBleGFjdE1hdGNoOiAhMSxcbiAgICAgIC8vIEl0IGNhbiBzdGlsbCB0aHJvdyBldmVuIHdpdGggdGhpcyBvcHRpb24gc2V0IHRvIHRydWVcbiAgICAgIHN1cHByZXNzVGhyb3c6ICExXG4gICAgfSk7XG4gIH0gY2F0Y2gge1xuICB9XG4gIHJldHVybiByYW5nZTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBvaW50KHBvaW50LCB2YWx1ZSkge1xuICBpZiAoIXBvaW50IHx8ICF2YWx1ZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgbmV3UGF0aCA9IFtdO1xuICBsZXQgbmV3T2Zmc2V0ID0gcG9pbnQub2Zmc2V0IHx8IDA7XG4gIGNvbnN0IGJsb2NrS2V5ID0gdHlwZW9mIHBvaW50LnBhdGhbMF0gPT0gXCJvYmplY3RcIiAmJiBcIl9rZXlcIiBpbiBwb2ludC5wYXRoWzBdICYmIHBvaW50LnBhdGhbMF0uX2tleSwgY2hpbGRLZXkgPSB0eXBlb2YgcG9pbnQucGF0aFsyXSA9PSBcIm9iamVjdFwiICYmIFwiX2tleVwiIGluIHBvaW50LnBhdGhbMl0gJiYgcG9pbnQucGF0aFsyXS5fa2V5LCBibG9jayA9IHZhbHVlLmZpbmQoKGJsaykgPT4gYmxrLl9rZXkgPT09IGJsb2NrS2V5KTtcbiAgaWYgKGJsb2NrKVxuICAgIG5ld1BhdGgucHVzaCh7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfSk7XG4gIGVsc2VcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKGJsb2NrICYmIHBvaW50LnBhdGhbMV0gPT09IFwiY2hpbGRyZW5cIikge1xuICAgIGlmICghYmxvY2suY2hpbGRyZW4gfHwgQXJyYXkuaXNBcnJheShibG9jay5jaGlsZHJlbikgJiYgYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgY2hpbGQgPSBBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSAmJiBibG9jay5jaGlsZHJlbi5maW5kKChjbGQpID0+IGNsZC5fa2V5ID09PSBjaGlsZEtleSk7XG4gICAgaWYgKGNoaWxkKVxuICAgICAgbmV3UGF0aC5wdXNoKFwiY2hpbGRyZW5cIiksIG5ld1BhdGgucHVzaCh7XG4gICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgIH0pLCBuZXdPZmZzZXQgPSBjaGlsZC50ZXh0ICYmIGNoaWxkLnRleHQubGVuZ3RoID49IHBvaW50Lm9mZnNldCA/IHBvaW50Lm9mZnNldCA6IGNoaWxkLnRleHQgJiYgY2hpbGQudGV4dC5sZW5ndGggfHwgMDtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHBhdGg6IG5ld1BhdGgsXG4gICAgb2Zmc2V0OiBuZXdPZmZzZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNlbGVjdGlvbihzZWxlY3Rpb24sIHZhbHVlKSB7XG4gIGlmICghc2VsZWN0aW9uIHx8ICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIG51bGw7XG4gIGxldCBuZXdBbmNob3IgPSBudWxsLCBuZXdGb2N1cyA9IG51bGw7XG4gIGNvbnN0IHtcbiAgICBhbmNob3IsXG4gICAgZm9jdXNcbiAgfSA9IHNlbGVjdGlvbjtcbiAgcmV0dXJuIGFuY2hvciAmJiB2YWx1ZS5maW5kKChibGspID0+IGlzRXF1YWwoe1xuICAgIF9rZXk6IGJsay5fa2V5XG4gIH0sIGFuY2hvci5wYXRoWzBdKSkgJiYgKG5ld0FuY2hvciA9IG5vcm1hbGl6ZVBvaW50KGFuY2hvciwgdmFsdWUpKSwgZm9jdXMgJiYgdmFsdWUuZmluZCgoYmxrKSA9PiBpc0VxdWFsKHtcbiAgICBfa2V5OiBibGsuX2tleVxuICB9LCBmb2N1cy5wYXRoWzBdKSkgJiYgKG5ld0ZvY3VzID0gbm9ybWFsaXplUG9pbnQoZm9jdXMsIHZhbHVlKSksIG5ld0FuY2hvciAmJiBuZXdGb2N1cyA/IHtcbiAgICBhbmNob3I6IG5ld0FuY2hvcixcbiAgICBmb2N1czogbmV3Rm9jdXMsXG4gICAgYmFja3dhcmQ6IHNlbGVjdGlvbi5iYWNrd2FyZFxuICB9IDogbnVsbDtcbn1cbmZ1bmN0aW9uIHRvU2xhdGVSYW5nZShzbmFwc2hvdCkge1xuICBpZiAoIXNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAoaXNFcXVhbFNlbGVjdGlvblBvaW50cyhzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5hbmNob3IsIHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmZvY3VzKSkge1xuICAgIGNvbnN0IGFuY2hvclBvaW50MiA9IHRvU2xhdGVTZWxlY3Rpb25Qb2ludChzbmFwc2hvdCwgc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLCBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5iYWNrd2FyZCA/IFwiZm9yd2FyZFwiIDogXCJiYWNrd2FyZFwiKTtcbiAgICByZXR1cm4gYW5jaG9yUG9pbnQyID8ge1xuICAgICAgYW5jaG9yOiBhbmNob3JQb2ludDIsXG4gICAgICBmb2N1czogYW5jaG9yUG9pbnQyXG4gICAgfSA6IG51bGw7XG4gIH1cbiAgY29uc3QgYW5jaG9yUG9pbnQgPSB0b1NsYXRlU2VsZWN0aW9uUG9pbnQoc25hcHNob3QsIHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmFuY2hvciwgc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBcImZvcndhcmRcIiA6IFwiYmFja3dhcmRcIiksIGZvY3VzUG9pbnQgPSB0b1NsYXRlU2VsZWN0aW9uUG9pbnQoc25hcHNob3QsIHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLCBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5iYWNrd2FyZCA/IFwiYmFja3dhcmRcIiA6IFwiZm9yd2FyZFwiKTtcbiAgcmV0dXJuICFhbmNob3JQb2ludCB8fCAhZm9jdXNQb2ludCA/IG51bGwgOiB7XG4gICAgYW5jaG9yOiBhbmNob3JQb2ludCxcbiAgICBmb2N1czogZm9jdXNQb2ludFxuICB9O1xufVxuZnVuY3Rpb24gdG9TbGF0ZVNlbGVjdGlvblBvaW50KHNuYXBzaG90LCBzZWxlY3Rpb25Qb2ludCwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IGJsb2NrS2V5ID0gZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc2VsZWN0aW9uUG9pbnQpO1xuICBpZiAoIWJsb2NrS2V5KVxuICAgIHJldHVybjtcbiAgY29uc3QgYmxvY2tJbmRleCA9IHNuYXBzaG90LmJsb2NrSW5kZXhNYXAuZ2V0KGJsb2NrS2V5KTtcbiAgaWYgKGJsb2NrSW5kZXggPT09IHZvaWQgMClcbiAgICByZXR1cm47XG4gIGNvbnN0IGJsb2NrID0gc25hcHNob3QuY29udGV4dC52YWx1ZS5hdChibG9ja0luZGV4KTtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm47XG4gIGlmICghaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgYmxvY2spKVxuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBbYmxvY2tJbmRleCwgMF0sXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9O1xuICBsZXQgY2hpbGRLZXkgPSBnZXRDaGlsZEtleUZyb21TZWxlY3Rpb25Qb2ludCh7XG4gICAgcGF0aDogc2VsZWN0aW9uUG9pbnQucGF0aFxuICB9KTtcbiAgY29uc3Qgc3BhblNlbGVjdGlvblBvaW50ID0gY2hpbGRLZXkgPyB2b2lkIDAgOiBibG9ja09mZnNldFRvU3BhblNlbGVjdGlvblBvaW50KHtcbiAgICBjb250ZXh0OiB7XG4gICAgICBzY2hlbWE6IHNuYXBzaG90LmNvbnRleHQuc2NoZW1hLFxuICAgICAgdmFsdWU6IFtibG9ja11cbiAgICB9LFxuICAgIGJsb2NrT2Zmc2V0OiB7XG4gICAgICBwYXRoOiBbe1xuICAgICAgICBfa2V5OiBibG9ja0tleVxuICAgICAgfV0sXG4gICAgICBvZmZzZXQ6IHNlbGVjdGlvblBvaW50Lm9mZnNldFxuICAgIH0sXG4gICAgZGlyZWN0aW9uXG4gIH0pO1xuICBpZiAoY2hpbGRLZXkgPSBzcGFuU2VsZWN0aW9uUG9pbnQgPyBnZXRDaGlsZEtleUZyb21TZWxlY3Rpb25Qb2ludChzcGFuU2VsZWN0aW9uUG9pbnQpIDogY2hpbGRLZXksICFjaGlsZEtleSlcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogW2Jsb2NrSW5kZXgsIDBdLFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfTtcbiAgbGV0IG9mZnNldCA9IHNwYW5TZWxlY3Rpb25Qb2ludD8ub2Zmc2V0ID8/IHNlbGVjdGlvblBvaW50Lm9mZnNldCwgY2hpbGRQYXRoID0gW10sIGNoaWxkSW5kZXggPSAtMSwgcGF0aENoaWxkO1xuICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKVxuICAgIGlmIChjaGlsZEluZGV4KyssIGNoaWxkLl9rZXkgPT09IGNoaWxkS2V5KSB7XG4gICAgICBwYXRoQ2hpbGQgPSBjaGlsZCwgaXNTcGFuKHNuYXBzaG90LmNvbnRleHQsIGNoaWxkKSA/IGNoaWxkUGF0aCA9IFtjaGlsZEluZGV4XSA6IChjaGlsZFBhdGggPSBbY2hpbGRJbmRleCwgMF0sIG9mZnNldCA9IDApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICByZXR1cm4gY2hpbGRQYXRoLmxlbmd0aCA9PT0gMCA/IHtcbiAgICBwYXRoOiBbYmxvY2tJbmRleCwgMF0sXG4gICAgb2Zmc2V0OiAwXG4gIH0gOiB7XG4gICAgcGF0aDogW2Jsb2NrSW5kZXhdLmNvbmNhdChjaGlsZFBhdGgpLFxuICAgIG9mZnNldDogaXNTcGFuKHNuYXBzaG90LmNvbnRleHQsIHBhdGhDaGlsZCkgPyBNYXRoLm1pbihwYXRoQ2hpbGQudGV4dC5sZW5ndGgsIG9mZnNldCkgOiBvZmZzZXRcbiAgfTtcbn1cbmNvbnN0IElTX1BST0NFU1NJTkdfUkVNT1RFX0NIQU5HRVMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgS0VZX1RPX1NMQVRFX0VMRU1FTlQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBFZGl0b3JBY3RvckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcbmZ1bmN0aW9uIERyb3BJbmRpY2F0b3IoKSB7XG4gIGNvbnN0ICQgPSBjKDEpO1xuICBsZXQgdDA7XG4gIHJldHVybiAkWzBdID09PSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb19jYWNoZV9zZW50aW5lbFwiKSA/ICh0MCA9IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJkaXZcIiwgeyBjb250ZW50RWRpdGFibGU6ICExLCBjbGFzc05hbWU6IFwicHQtZHJvcC1pbmRpY2F0b3JcIiwgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBoZWlnaHQ6IDEsXG4gICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBjdXJyZW50Q29sb3JcIixcbiAgICB6SW5kZXg6IDVcbiAgfSwgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJzcGFuXCIsIHt9KSB9KSwgJFswXSA9IHQwKSA6IHQwID0gJFswXSwgdDA7XG59XG5mdW5jdGlvbiBSZW5kZXJEZWZhdWx0QmxvY2tPYmplY3QocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNCk7XG4gIGxldCB0MDtcbiAgJFswXSA9PT0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIikgPyAodDAgPSB7XG4gICAgdXNlclNlbGVjdDogXCJub25lXCJcbiAgfSwgJFswXSA9IHQwKSA6IHQwID0gJFswXTtcbiAgbGV0IHQxO1xuICByZXR1cm4gJFsxXSAhPT0gcHJvcHMuYmxvY2tPYmplY3QuX2tleSB8fCAkWzJdICE9PSBwcm9wcy5ibG9ja09iamVjdC5fdHlwZSA/ICh0MSA9IC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwiZGl2XCIsIHsgc3R5bGU6IHQwLCBjaGlsZHJlbjogW1xuICAgIFwiW1wiLFxuICAgIHByb3BzLmJsb2NrT2JqZWN0Ll90eXBlLFxuICAgIFwiOiBcIixcbiAgICBwcm9wcy5ibG9ja09iamVjdC5fa2V5LFxuICAgIFwiXVwiXG4gIF0gfSksICRbMV0gPSBwcm9wcy5ibG9ja09iamVjdC5fa2V5LCAkWzJdID0gcHJvcHMuYmxvY2tPYmplY3QuX3R5cGUsICRbM10gPSB0MSkgOiB0MSA9ICRbM10sIHQxO1xufVxuZnVuY3Rpb24gUmVuZGVyRGVmYXVsdElubGluZU9iamVjdChwcm9wcykge1xuICBjb25zdCAkID0gYyg0KTtcbiAgbGV0IHQwO1xuICAkWzBdID09PSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb19jYWNoZV9zZW50aW5lbFwiKSA/ICh0MCA9IHtcbiAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIlxuICB9LCAkWzBdID0gdDApIDogdDAgPSAkWzBdO1xuICBsZXQgdDE7XG4gIHJldHVybiAkWzFdICE9PSBwcm9wcy5pbmxpbmVPYmplY3QuX2tleSB8fCAkWzJdICE9PSBwcm9wcy5pbmxpbmVPYmplY3QuX3R5cGUgPyAodDEgPSAvKiBAX19QVVJFX18gKi8ganN4cyhcInNwYW5cIiwgeyBzdHlsZTogdDAsIGNoaWxkcmVuOiBbXG4gICAgXCJbXCIsXG4gICAgcHJvcHMuaW5saW5lT2JqZWN0Ll90eXBlLFxuICAgIFwiOiBcIixcbiAgICBwcm9wcy5pbmxpbmVPYmplY3QuX2tleSxcbiAgICBcIl1cIlxuICBdIH0pLCAkWzFdID0gcHJvcHMuaW5saW5lT2JqZWN0Ll9rZXksICRbMl0gPSBwcm9wcy5pbmxpbmVPYmplY3QuX3R5cGUsICRbM10gPSB0MSkgOiB0MSA9ICRbM10sIHQxO1xufVxuZnVuY3Rpb24gZ2V0RHJhZ1NlbGVjdGlvbih7XG4gIGV2ZW50U2VsZWN0aW9uLFxuICBzbmFwc2hvdFxufSkge1xuICBsZXQgZHJhZ1NlbGVjdGlvbiA9IGV2ZW50U2VsZWN0aW9uO1xuICBpZiAoZ2V0Rm9jdXNJbmxpbmVPYmplY3Qoe1xuICAgIC4uLnNuYXBzaG90LFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICBzZWxlY3Rpb246IGV2ZW50U2VsZWN0aW9uXG4gICAgfVxuICB9KSlcbiAgICByZXR1cm4gZHJhZ1NlbGVjdGlvbjtcbiAgY29uc3QgZHJhZ2dpbmdDb2xsYXBzZWRTZWxlY3Rpb24gPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCQxKHtcbiAgICBjb250ZXh0OiB7XG4gICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgc2VsZWN0aW9uOiBldmVudFNlbGVjdGlvblxuICAgIH1cbiAgfSksIGRyYWdnZWRUZXh0QmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayh7XG4gICAgLi4uc25hcHNob3QsXG4gICAgY29udGV4dDoge1xuICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgIHNlbGVjdGlvbjogZXZlbnRTZWxlY3Rpb25cbiAgICB9XG4gIH0pLCBkcmFnZ2VkU3BhbiA9IGdldEZvY3VzU3BhbiQxKHtcbiAgICAuLi5zbmFwc2hvdCxcbiAgICBjb250ZXh0OiB7XG4gICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgc2VsZWN0aW9uOiBldmVudFNlbGVjdGlvblxuICAgIH1cbiAgfSk7XG4gIGRyYWdnaW5nQ29sbGFwc2VkU2VsZWN0aW9uICYmIGRyYWdnZWRUZXh0QmxvY2sgJiYgZHJhZ2dlZFNwYW4gJiYgKGRyYWdTZWxlY3Rpb24gPSB7XG4gICAgYW5jaG9yOiBnZXRCbG9ja1N0YXJ0UG9pbnQoe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIGJsb2NrOiBkcmFnZ2VkVGV4dEJsb2NrXG4gICAgfSksXG4gICAgZm9jdXM6IGdldEJsb2NrRW5kUG9pbnQoe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIGJsb2NrOiBkcmFnZ2VkVGV4dEJsb2NrXG4gICAgfSlcbiAgfSk7XG4gIGNvbnN0IHNlbGVjdGVkQmxvY2tzID0gZ2V0U2VsZWN0ZWRCbG9ja3Moc25hcHNob3QpO1xuICBpZiAoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24gJiYgaXNTZWxlY3Rpb25FeHBhbmRlZChzbmFwc2hvdCkgJiYgc2VsZWN0ZWRCbG9ja3MubGVuZ3RoID4gMSkge1xuICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0QmxvY2sgPSBnZXRTZWxlY3Rpb25TdGFydEJsb2NrJDEoc25hcHNob3QpLCBzZWxlY3Rpb25FbmRCbG9jayA9IGdldFNlbGVjdGlvbkVuZEJsb2NrJDEoc25hcHNob3QpO1xuICAgIGlmICghc2VsZWN0aW9uU3RhcnRCbG9jayB8fCAhc2VsZWN0aW9uRW5kQmxvY2spXG4gICAgICByZXR1cm4gZHJhZ1NlbGVjdGlvbjtcbiAgICBjb25zdCBzZWxlY3Rpb25TdGFydFBvaW50ID0gZ2V0QmxvY2tTdGFydFBvaW50KHtcbiAgICAgIGNvbnRleHQ6IHNuYXBzaG90LmNvbnRleHQsXG4gICAgICBibG9jazogc2VsZWN0aW9uU3RhcnRCbG9ja1xuICAgIH0pLCBzZWxlY3Rpb25FbmRQb2ludCA9IGdldEJsb2NrRW5kUG9pbnQoe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIGJsb2NrOiBzZWxlY3Rpb25FbmRCbG9ja1xuICAgIH0pO1xuICAgIGlzT3ZlcmxhcHBpbmdTZWxlY3Rpb24oZXZlbnRTZWxlY3Rpb24pKHtcbiAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgICBhbmNob3I6IHNlbGVjdGlvblN0YXJ0UG9pbnQsXG4gICAgICAgICAgZm9jdXM6IHNlbGVjdGlvbkVuZFBvaW50XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSAmJiAoZHJhZ1NlbGVjdGlvbiA9IHtcbiAgICAgIGFuY2hvcjogc2VsZWN0aW9uU3RhcnRQb2ludCxcbiAgICAgIGZvY3VzOiBzZWxlY3Rpb25FbmRQb2ludFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBkcmFnU2VsZWN0aW9uO1xufVxuY29uc3QgZGVmYXVsdEtleUdlbmVyYXRvciA9ICgpID0+IHJhbmRvbUtleSgxMiksIGdldEJ5dGVIZXhUYWJsZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4ge1xuICBsZXQgdGFibGU7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKHRhYmxlKVxuICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIHRhYmxlID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSlcbiAgICAgIHRhYmxlW2ldID0gKGkgKyAyNTYpLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcbiAgICByZXR1cm4gdGFibGU7XG4gIH07XG59KSgpO1xuZnVuY3Rpb24gd2hhdHdnUk5HKGxlbmd0aCA9IDE2KSB7XG4gIGNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCksIHJuZHM4O1xufVxuZnVuY3Rpb24gcmFuZG9tS2V5KGxlbmd0aCkge1xuICBjb25zdCB0YWJsZSA9IGdldEJ5dGVIZXhUYWJsZSgpO1xuICByZXR1cm4gd2hhdHdnUk5HKGxlbmd0aCkucmVkdWNlKChzdHIsIG4pID0+IHN0ciArIHRhYmxlW25dLCBcIlwiKS5zbGljZSgwLCBsZW5ndGgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWRpdG9yUHJpb3JpdHkoY29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgaWQ6IGRlZmF1bHRLZXlHZW5lcmF0b3IoKSxcbiAgICBuYW1lOiBjb25maWc/Lm5hbWUsXG4gICAgcmVmZXJlbmNlOiBjb25maWc/LnJlZmVyZW5jZVxuICB9O1xufVxuY29uc3QgY29yZVByaW9yaXR5ID0gY3JlYXRlRWRpdG9yUHJpb3JpdHkoe1xuICBuYW1lOiBcImNvcmVcIlxufSk7XG5mdW5jdGlvbiBjcmVhdGVDb3JlQmxvY2tFbGVtZW50QmVoYXZpb3JzQ29uZmlnKHtcbiAga2V5LFxuICBvblNldERyYWdQb3NpdGlvbkJsb2NrXG59KSB7XG4gIHJldHVybiBbe1xuICAgIGJlaGF2aW9yOiBkZWZpbmVCZWhhdmlvcih7XG4gICAgICBvbjogXCJkcmFnLmRyYWdvdmVyXCIsXG4gICAgICBndWFyZDogKHtcbiAgICAgICAgc25hcHNob3QsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGRyb3BGb2N1c0Jsb2NrID0gZ2V0Rm9jdXNCbG9jayQxKHtcbiAgICAgICAgICAuLi5zbmFwc2hvdCxcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICAgICAgc2VsZWN0aW9uOiBldmVudC5wb3NpdGlvbi5zZWxlY3Rpb25cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWRyb3BGb2N1c0Jsb2NrIHx8IGRyb3BGb2N1c0Jsb2NrLm5vZGUuX2tleSAhPT0ga2V5KVxuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgY29uc3QgZHJhZ09yaWdpbiA9IGV2ZW50LmRyYWdPcmlnaW47XG4gICAgICAgIGlmICghZHJhZ09yaWdpbilcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIGNvbnN0IGRyYWdTZWxlY3Rpb24gPSBnZXREcmFnU2VsZWN0aW9uKHtcbiAgICAgICAgICBldmVudFNlbGVjdGlvbjogZHJhZ09yaWdpbi5zZWxlY3Rpb24sXG4gICAgICAgICAgc25hcHNob3RcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBnZXRTZWxlY3RlZEJsb2Nrcyh7XG4gICAgICAgICAgLi4uc25hcHNob3QsXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogZHJhZ1NlbGVjdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfSkuc29tZSgoZHJhZ2dlZEJsb2NrKSA9PiBkcmFnZ2VkQmxvY2subm9kZS5fa2V5ID09PSBrZXkpID8gITEgOiBpc1NlbGVjdGluZ0VudGlyZUJsb2Nrcyh7XG4gICAgICAgICAgLi4uc25hcHNob3QsXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogZHJhZ1NlbGVjdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uczogWyh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBbe1xuICAgICAgICB0eXBlOiBcImVmZmVjdFwiLFxuICAgICAgICBlZmZlY3Q6ICgpID0+IHtcbiAgICAgICAgICBvblNldERyYWdQb3NpdGlvbkJsb2NrKGV2ZW50LnBvc2l0aW9uLmJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgfV1dXG4gICAgfSksXG4gICAgcHJpb3JpdHk6IGNyZWF0ZUVkaXRvclByaW9yaXR5KHtcbiAgICAgIHJlZmVyZW5jZToge1xuICAgICAgICBwcmlvcml0eTogY29yZVByaW9yaXR5LFxuICAgICAgICBpbXBvcnRhbmNlOiBcImxvd2VyXCJcbiAgICAgIH1cbiAgICB9KVxuICB9LCB7XG4gICAgYmVoYXZpb3I6IGRlZmluZUJlaGF2aW9yKHtcbiAgICAgIG9uOiBcImRyYWcuKlwiLFxuICAgICAgZ3VhcmQ6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudC50eXBlICE9PSBcImRyYWcuZHJhZ292ZXJcIixcbiAgICAgIGFjdGlvbnM6IFsoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gW3tcbiAgICAgICAgdHlwZTogXCJlZmZlY3RcIixcbiAgICAgICAgZWZmZWN0OiAoKSA9PiB7XG4gICAgICAgICAgb25TZXREcmFnUG9zaXRpb25CbG9jayh2b2lkIDApO1xuICAgICAgICB9XG4gICAgICB9LCBmb3J3YXJkKGV2ZW50KV1dXG4gICAgfSksXG4gICAgcHJpb3JpdHk6IGNyZWF0ZUVkaXRvclByaW9yaXR5KHtcbiAgICAgIHJlZmVyZW5jZToge1xuICAgICAgICBwcmlvcml0eTogY29yZVByaW9yaXR5LFxuICAgICAgICBpbXBvcnRhbmNlOiBcImxvd2VyXCJcbiAgICAgIH1cbiAgICB9KVxuICB9XTtcbn1cbmZ1bmN0aW9uIHVzZUNvcmVCbG9ja0VsZW1lbnRCZWhhdmlvcnModDApIHtcbiAgY29uc3QgJCA9IGMoNSksIHtcbiAgICBrZXksXG4gICAgb25TZXREcmFnUG9zaXRpb25CbG9ja1xuICB9ID0gdDAsIGVkaXRvckFjdG9yID0gdXNlQ29udGV4dChFZGl0b3JBY3RvckNvbnRleHQpO1xuICBsZXQgdDEsIHQyO1xuICAkWzBdICE9PSBlZGl0b3JBY3RvciB8fCAkWzFdICE9PSBrZXkgfHwgJFsyXSAhPT0gb25TZXREcmFnUG9zaXRpb25CbG9jayA/ICh0MSA9ICgpID0+IHtcbiAgICBjb25zdCBiZWhhdmlvckNvbmZpZ3MgPSBjcmVhdGVDb3JlQmxvY2tFbGVtZW50QmVoYXZpb3JzQ29uZmlnKHtcbiAgICAgIGtleSxcbiAgICAgIG9uU2V0RHJhZ1Bvc2l0aW9uQmxvY2tcbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IGJlaGF2aW9yQ29uZmlnIG9mIGJlaGF2aW9yQ29uZmlncylcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImFkZCBiZWhhdmlvclwiLFxuICAgICAgICBiZWhhdmlvckNvbmZpZ1xuICAgICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgYmVoYXZpb3JDb25maWdfMCBvZiBiZWhhdmlvckNvbmZpZ3MpXG4gICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwicmVtb3ZlIGJlaGF2aW9yXCIsXG4gICAgICAgICAgYmVoYXZpb3JDb25maWc6IGJlaGF2aW9yQ29uZmlnXzBcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgfSwgdDIgPSBbZWRpdG9yQWN0b3IsIGtleSwgb25TZXREcmFnUG9zaXRpb25CbG9ja10sICRbMF0gPSBlZGl0b3JBY3RvciwgJFsxXSA9IGtleSwgJFsyXSA9IG9uU2V0RHJhZ1Bvc2l0aW9uQmxvY2ssICRbM10gPSB0MSwgJFs0XSA9IHQyKSA6ICh0MSA9ICRbM10sIHQyID0gJFs0XSksIHVzZUVmZmVjdCh0MSwgdDIpO1xufVxuZnVuY3Rpb24gUmVuZGVyQmxvY2tPYmplY3QocHJvcHMpIHtcbiAgY29uc3QgW2RyYWdQb3NpdGlvbkJsb2NrLCBzZXREcmFnUG9zaXRpb25CbG9ja10gPSB1c2VTdGF0ZSgpLCBibG9ja09iamVjdFJlZiA9IHVzZVJlZihudWxsKSwgc2VsZWN0ZWQgPSB1c2VTZWxlY3RlZCgpLCBmb2N1c2VkID0gdXNlU2xhdGVTZWxlY3RvcigoZWRpdG9yKSA9PiBzZWxlY3RlZCAmJiBlZGl0b3Iuc2VsZWN0aW9uICE9PSBudWxsICYmIFJhbmdlLmlzQ29sbGFwc2VkKGVkaXRvci5zZWxlY3Rpb24pKTtcbiAgdXNlQ29yZUJsb2NrRWxlbWVudEJlaGF2aW9ycyh7XG4gICAga2V5OiBwcm9wcy5lbGVtZW50Ll9rZXksXG4gICAgb25TZXREcmFnUG9zaXRpb25CbG9jazogc2V0RHJhZ1Bvc2l0aW9uQmxvY2tcbiAgfSk7XG4gIGNvbnN0IGxlZ2FjeVNjaGVtYVR5cGUgPSBwcm9wcy5sZWdhY3lTY2hlbWEuYmxvY2tPYmplY3RzLmZpbmQoKHNjaGVtYVR5cGUpID0+IHNjaGVtYVR5cGUubmFtZSA9PT0gcHJvcHMuZWxlbWVudC5fdHlwZSk7XG4gIGxlZ2FjeVNjaGVtYVR5cGUgfHwgY29uc29sZS5lcnJvcihgVW5hYmxlIHRvIGZpbmQgQmxvY2sgT2JqZWN0IFwiJHtwcm9wcy5lbGVtZW50Ll90eXBlfVwiIGluIFNjaGVtYWApO1xuICBjb25zdCBibG9ja09iamVjdCA9IHByb3BzLmJsb2NrT2JqZWN0ID8/IHtcbiAgICBfa2V5OiBwcm9wcy5lbGVtZW50Ll9rZXksXG4gICAgX3R5cGU6IHByb3BzLmVsZW1lbnQuX3R5cGVcbiAgfTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwiZGl2XCIsIHsgLi4ucHJvcHMuYXR0cmlidXRlcywgY2xhc3NOYW1lOiBcInB0LWJsb2NrIHB0LW9iamVjdC1ibG9ja1wiLCBcImRhdGEtYmxvY2sta2V5XCI6IHByb3BzLmVsZW1lbnQuX2tleSwgXCJkYXRhLWJsb2NrLW5hbWVcIjogcHJvcHMuZWxlbWVudC5fdHlwZSwgXCJkYXRhLWJsb2NrLXR5cGVcIjogXCJvYmplY3RcIiwgY2hpbGRyZW46IFtcbiAgICBkcmFnUG9zaXRpb25CbG9jayA9PT0gXCJzdGFydFwiID8gLyogQF9fUFVSRV9fICovIGpzeChEcm9wSW5kaWNhdG9yLCB7fSkgOiBudWxsLFxuICAgIHByb3BzLmNoaWxkcmVuLFxuICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goXCJkaXZcIiwgeyByZWY6IGJsb2NrT2JqZWN0UmVmLCBjb250ZW50RWRpdGFibGU6ICExLCBkcmFnZ2FibGU6ICFwcm9wcy5yZWFkT25seSwgY2hpbGRyZW46IHByb3BzLnJlbmRlckJsb2NrICYmIGxlZ2FjeVNjaGVtYVR5cGUgPyBwcm9wcy5yZW5kZXJCbG9jayh7XG4gICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeChSZW5kZXJEZWZhdWx0QmxvY2tPYmplY3QsIHsgYmxvY2tPYmplY3QgfSksXG4gICAgICBlZGl0b3JFbGVtZW50UmVmOiBibG9ja09iamVjdFJlZixcbiAgICAgIGZvY3VzZWQsXG4gICAgICBwYXRoOiBbe1xuICAgICAgICBfa2V5OiBwcm9wcy5lbGVtZW50Ll9rZXlcbiAgICAgIH1dLFxuICAgICAgc2NoZW1hVHlwZTogbGVnYWN5U2NoZW1hVHlwZSxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgdHlwZTogbGVnYWN5U2NoZW1hVHlwZSxcbiAgICAgIHZhbHVlOiBibG9ja09iamVjdFxuICAgIH0pIDogLyogQF9fUFVSRV9fICovIGpzeChSZW5kZXJEZWZhdWx0QmxvY2tPYmplY3QsIHsgYmxvY2tPYmplY3QgfSkgfSksXG4gICAgZHJhZ1Bvc2l0aW9uQmxvY2sgPT09IFwiZW5kXCIgPyAvKiBAX19QVVJFX18gKi8ganN4KERyb3BJbmRpY2F0b3IsIHt9KSA6IG51bGxcbiAgXSB9KTtcbn1cbmZ1bmN0aW9uIFJlbmRlcklubGluZU9iamVjdChwcm9wcykge1xuICBjb25zdCBpbmxpbmVPYmplY3RSZWYgPSB1c2VSZWYobnVsbCksIHNsYXRlRWRpdG9yID0gdXNlU2xhdGVTdGF0aWMoKSwgc2VsZWN0ZWQgPSB1c2VTZWxlY3RlZCgpLCBmb2N1c2VkID0gdXNlU2xhdGVTZWxlY3RvcigoZWRpdG9yKSA9PiBzZWxlY3RlZCAmJiBlZGl0b3Iuc2VsZWN0aW9uICE9PSBudWxsICYmIFJhbmdlLmlzQ29sbGFwc2VkKGVkaXRvci5zZWxlY3Rpb24pKSwgbGVnYWN5U2NoZW1hVHlwZSA9IHByb3BzLmxlZ2FjeVNjaGVtYS5pbmxpbmVPYmplY3RzLmZpbmQoKGlubGluZU9iamVjdCkgPT4gaW5saW5lT2JqZWN0Lm5hbWUgPT09IHByb3BzLmVsZW1lbnQuX3R5cGUpO1xuICBsZWdhY3lTY2hlbWFUeXBlIHx8IGNvbnNvbGUuZXJyb3IoYFVuYWJsZSB0byBmaW5kIElubGluZSBPYmplY3QgXCIke3Byb3BzLmVsZW1lbnQuX3R5cGV9XCIgaW4gU2NoZW1hYCk7XG4gIGNvbnN0IHBhdGggPSBET01FZGl0b3IuZmluZFBhdGgoc2xhdGVFZGl0b3IsIHByb3BzLmVsZW1lbnQpLCBbYmxvY2tdID0gZ2V0UG9pbnRCbG9jayh7XG4gICAgZWRpdG9yOiBzbGF0ZUVkaXRvcixcbiAgICBwb2ludDoge1xuICAgICAgcGF0aCxcbiAgICAgIG9mZnNldDogMFxuICAgIH1cbiAgfSk7XG4gIGJsb2NrIHx8IGNvbnNvbGUuZXJyb3IoYFVuYWJsZSB0byBmaW5kIHBhcmVudCBibG9jayBvZiBpbmxpbmUgb2JqZWN0ICR7cHJvcHMuZWxlbWVudC5fa2V5fWApO1xuICBjb25zdCBpbmxpbmVPYmplY3RfMCA9IHtcbiAgICBfa2V5OiBwcm9wcy5lbGVtZW50Ll9rZXksXG4gICAgX3R5cGU6IHByb3BzLmVsZW1lbnQuX3R5cGUsXG4gICAgLi4uXCJ2YWx1ZVwiIGluIHByb3BzLmVsZW1lbnQgJiYgdHlwZW9mIHByb3BzLmVsZW1lbnQudmFsdWUgPT0gXCJvYmplY3RcIiA/IHByb3BzLmVsZW1lbnQudmFsdWUgOiB7fVxuICB9O1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHMoXCJzcGFuXCIsIHsgLi4ucHJvcHMuYXR0cmlidXRlcywgZHJhZ2dhYmxlOiAhcHJvcHMucmVhZE9ubHksIGNsYXNzTmFtZTogXCJwdC1pbmxpbmUtb2JqZWN0XCIsIFwiZGF0YS1jaGlsZC1rZXlcIjogaW5saW5lT2JqZWN0XzAuX2tleSwgXCJkYXRhLWNoaWxkLW5hbWVcIjogaW5saW5lT2JqZWN0XzAuX3R5cGUsIFwiZGF0YS1jaGlsZC10eXBlXCI6IFwib2JqZWN0XCIsIGNoaWxkcmVuOiBbXG4gICAgcHJvcHMuY2hpbGRyZW4sXG4gICAgLyogQF9fUFVSRV9fICovIGpzeChcInNwYW5cIiwgeyByZWY6IGlubGluZU9iamVjdFJlZiwgc3R5bGU6IHtcbiAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCJcbiAgICB9LCBjaGlsZHJlbjogcHJvcHMucmVuZGVyQ2hpbGQgJiYgYmxvY2sgJiYgbGVnYWN5U2NoZW1hVHlwZSA/IHByb3BzLnJlbmRlckNoaWxkKHtcbiAgICAgIGFubm90YXRpb25zOiBbXSxcbiAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFJlbmRlckRlZmF1bHRJbmxpbmVPYmplY3QsIHsgaW5saW5lT2JqZWN0OiBpbmxpbmVPYmplY3RfMCB9KSxcbiAgICAgIGVkaXRvckVsZW1lbnRSZWY6IGlubGluZU9iamVjdFJlZixcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgZm9jdXNlZCxcbiAgICAgIHBhdGg6IFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiBwcm9wcy5lbGVtZW50Ll9rZXlcbiAgICAgIH1dLFxuICAgICAgc2NoZW1hVHlwZTogbGVnYWN5U2NoZW1hVHlwZSxcbiAgICAgIHZhbHVlOiBpbmxpbmVPYmplY3RfMCxcbiAgICAgIHR5cGU6IGxlZ2FjeVNjaGVtYVR5cGVcbiAgICB9KSA6IC8qIEBfX1BVUkVfXyAqLyBqc3goUmVuZGVyRGVmYXVsdElubGluZU9iamVjdCwgeyBpbmxpbmVPYmplY3Q6IGlubGluZU9iamVjdF8wIH0pIH0pXG4gIF0gfSk7XG59XG5mdW5jdGlvbiBSZW5kZXJUZXh0QmxvY2socHJvcHMpIHtcbiAgY29uc3QgW2RyYWdQb3NpdGlvbkJsb2NrLCBzZXREcmFnUG9zaXRpb25CbG9ja10gPSB1c2VTdGF0ZSgpLCBibG9ja1JlZiA9IHVzZVJlZihudWxsKSwgc2VsZWN0ZWQgPSB1c2VTZWxlY3RlZCgpLCBmb2N1c2VkID0gdXNlU2xhdGVTZWxlY3RvcigoZWRpdG9yKSA9PiBzZWxlY3RlZCAmJiBlZGl0b3Iuc2VsZWN0aW9uICE9PSBudWxsICYmIFJhbmdlLmlzQ29sbGFwc2VkKGVkaXRvci5zZWxlY3Rpb24pKTtcbiAgdXNlQ29yZUJsb2NrRWxlbWVudEJlaGF2aW9ycyh7XG4gICAga2V5OiBwcm9wcy5lbGVtZW50Ll9rZXksXG4gICAgb25TZXREcmFnUG9zaXRpb25CbG9jazogc2V0RHJhZ1Bvc2l0aW9uQmxvY2tcbiAgfSk7XG4gIGNvbnN0IGxpc3RJbmRleCA9IHVzZVNsYXRlU2VsZWN0b3IoKGVkaXRvcl8wKSA9PiBlZGl0b3JfMC5saXN0SW5kZXhNYXAuZ2V0KHByb3BzLnRleHRCbG9jay5fa2V5KSk7XG4gIGxldCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICBpZiAocHJvcHMucmVuZGVyU3R5bGUgJiYgcHJvcHMudGV4dEJsb2NrLnN0eWxlKSB7XG4gICAgY29uc3QgbGVnYWN5U3R5bGVTY2hlbWFUeXBlID0gcHJvcHMudGV4dEJsb2NrLnN0eWxlICE9PSB2b2lkIDAgPyBwcm9wcy5sZWdhY3lTY2hlbWEuc3R5bGVzLmZpbmQoKHN0eWxlKSA9PiBzdHlsZS52YWx1ZSA9PT0gcHJvcHMudGV4dEJsb2NrLnN0eWxlKSA6IHZvaWQgMDtcbiAgICBsZWdhY3lTdHlsZVNjaGVtYVR5cGUgPyBjaGlsZHJlbiA9IHByb3BzLnJlbmRlclN0eWxlKHtcbiAgICAgIGJsb2NrOiBwcm9wcy50ZXh0QmxvY2ssXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVkaXRvckVsZW1lbnRSZWY6IGJsb2NrUmVmLFxuICAgICAgZm9jdXNlZCxcbiAgICAgIHBhdGg6IFt7XG4gICAgICAgIF9rZXk6IHByb3BzLnRleHRCbG9jay5fa2V5XG4gICAgICB9XSxcbiAgICAgIHNjaGVtYVR5cGU6IGxlZ2FjeVN0eWxlU2NoZW1hVHlwZSxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgdmFsdWU6IHByb3BzLnRleHRCbG9jay5zdHlsZVxuICAgIH0pIDogY29uc29sZS5lcnJvcihgVW5hYmxlIHRvIGZpbmQgU2NoZW1hIHR5cGUgZm9yIHRleHQgYmxvY2sgc3R5bGUgJHtwcm9wcy50ZXh0QmxvY2suc3R5bGV9YCk7XG4gIH1cbiAgaWYgKHByb3BzLnJlbmRlckxpc3RJdGVtICYmIHByb3BzLnRleHRCbG9jay5saXN0SXRlbSkge1xuICAgIGNvbnN0IGxlZ2FjeUxpc3RJdGVtU2NoZW1hVHlwZSA9IHByb3BzLmxlZ2FjeVNjaGVtYS5saXN0cy5maW5kKChsaXN0KSA9PiBsaXN0LnZhbHVlID09PSBwcm9wcy50ZXh0QmxvY2subGlzdEl0ZW0pO1xuICAgIGxlZ2FjeUxpc3RJdGVtU2NoZW1hVHlwZSA/IGNoaWxkcmVuID0gcHJvcHMucmVuZGVyTGlzdEl0ZW0oe1xuICAgICAgYmxvY2s6IHByb3BzLnRleHRCbG9jayxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZWRpdG9yRWxlbWVudFJlZjogYmxvY2tSZWYsXG4gICAgICBmb2N1c2VkLFxuICAgICAgbGV2ZWw6IHByb3BzLnRleHRCbG9jay5sZXZlbCA/PyAxLFxuICAgICAgcGF0aDogW3tcbiAgICAgICAgX2tleTogcHJvcHMudGV4dEJsb2NrLl9rZXlcbiAgICAgIH1dLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogcHJvcHMudGV4dEJsb2NrLmxpc3RJdGVtLFxuICAgICAgc2NoZW1hVHlwZTogbGVnYWN5TGlzdEl0ZW1TY2hlbWFUeXBlXG4gICAgfSkgOiBjb25zb2xlLmVycm9yKGBVbmFibGUgdG8gZmluZCBTY2hlbWEgdHlwZSBmb3IgdGV4dCBibG9jayBsaXN0IGl0ZW0gJHtwcm9wcy50ZXh0QmxvY2subGlzdEl0ZW19YCk7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwiZGl2XCIsIHsgLi4ucHJvcHMuYXR0cmlidXRlcywgY2xhc3NOYW1lOiBbXCJwdC1ibG9ja1wiLCBcInB0LXRleHQtYmxvY2tcIiwgLi4ucHJvcHMudGV4dEJsb2NrLnN0eWxlID8gW2BwdC10ZXh0LWJsb2NrLXN0eWxlLSR7cHJvcHMudGV4dEJsb2NrLnN0eWxlfWBdIDogW10sIC4uLnByb3BzLnRleHRCbG9jay5saXN0SXRlbSA/IFtcInB0LWxpc3QtaXRlbVwiLCBgcHQtbGlzdC1pdGVtLSR7cHJvcHMudGV4dEJsb2NrLmxpc3RJdGVtfWAsIGBwdC1saXN0LWl0ZW0tbGV2ZWwtJHtwcm9wcy50ZXh0QmxvY2subGV2ZWwgPz8gMX1gXSA6IFtdXS5qb2luKFwiIFwiKSwgc3BlbGxDaGVjazogcHJvcHMuc3BlbGxDaGVjaywgXCJkYXRhLWJsb2NrLWtleVwiOiBwcm9wcy50ZXh0QmxvY2suX2tleSwgXCJkYXRhLWJsb2NrLW5hbWVcIjogcHJvcHMudGV4dEJsb2NrLl90eXBlLCBcImRhdGEtYmxvY2stdHlwZVwiOiBcInRleHRcIiwgLi4ucHJvcHMudGV4dEJsb2NrLmxpc3RJdGVtICE9PSB2b2lkIDAgPyB7XG4gICAgXCJkYXRhLWxpc3QtaXRlbVwiOiBwcm9wcy50ZXh0QmxvY2subGlzdEl0ZW1cbiAgfSA6IHt9LCAuLi5wcm9wcy50ZXh0QmxvY2subGV2ZWwgIT09IHZvaWQgMCA/IHtcbiAgICBcImRhdGEtbGV2ZWxcIjogcHJvcHMudGV4dEJsb2NrLmxldmVsXG4gIH0gOiB7fSwgLi4ucHJvcHMudGV4dEJsb2NrLnN0eWxlICE9PSB2b2lkIDAgPyB7XG4gICAgXCJkYXRhLXN0eWxlXCI6IHByb3BzLnRleHRCbG9jay5zdHlsZVxuICB9IDoge30sIC4uLmxpc3RJbmRleCAhPT0gdm9pZCAwID8ge1xuICAgIFwiZGF0YS1saXN0LWluZGV4XCI6IGxpc3RJbmRleFxuICB9IDoge30sIGNoaWxkcmVuOiBbXG4gICAgZHJhZ1Bvc2l0aW9uQmxvY2sgPT09IFwic3RhcnRcIiA/IC8qIEBfX1BVUkVfXyAqLyBqc3goRHJvcEluZGljYXRvciwge30pIDogbnVsbCxcbiAgICAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHsgcmVmOiBibG9ja1JlZiwgY2hpbGRyZW46IHByb3BzLnJlbmRlckJsb2NrID8gcHJvcHMucmVuZGVyQmxvY2soe1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlZGl0b3JFbGVtZW50UmVmOiBibG9ja1JlZixcbiAgICAgIGZvY3VzZWQsXG4gICAgICBsZXZlbDogcHJvcHMudGV4dEJsb2NrLmxldmVsLFxuICAgICAgbGlzdEl0ZW06IHByb3BzLnRleHRCbG9jay5saXN0SXRlbSxcbiAgICAgIHBhdGg6IFt7XG4gICAgICAgIF9rZXk6IHByb3BzLnRleHRCbG9jay5fa2V5XG4gICAgICB9XSxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgc2NoZW1hVHlwZTogcHJvcHMubGVnYWN5U2NoZW1hLmJsb2NrLFxuICAgICAgc3R5bGU6IHByb3BzLnRleHRCbG9jay5zdHlsZSxcbiAgICAgIHR5cGU6IHByb3BzLmxlZ2FjeVNjaGVtYS5ibG9jayxcbiAgICAgIHZhbHVlOiBwcm9wcy50ZXh0QmxvY2tcbiAgICB9KSA6IGNoaWxkcmVuIH0pLFxuICAgIGRyYWdQb3NpdGlvbkJsb2NrID09PSBcImVuZFwiID8gLyogQF9fUFVSRV9fICovIGpzeChEcm9wSW5kaWNhdG9yLCB7fSkgOiBudWxsXG4gIF0gfSk7XG59XG5mdW5jdGlvbiBSZW5kZXJFbGVtZW50KHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDM0KSwgZWRpdG9yQWN0b3IgPSB1c2VDb250ZXh0KEVkaXRvckFjdG9yQ29udGV4dCksIHNjaGVtYSA9IHVzZVNlbGVjdG9yKGVkaXRvckFjdG9yLCBfdGVtcCQxKSwgbGVnYWN5U2NoZW1hID0gdXNlU2VsZWN0b3IoZWRpdG9yQWN0b3IsIF90ZW1wMiksIHNsYXRlU3RhdGljID0gdXNlU2xhdGVTdGF0aWMoKTtcbiAgaWYgKFwiX19pbmxpbmVcIiBpbiBwcm9wcy5lbGVtZW50ICYmIHByb3BzLmVsZW1lbnQuX19pbmxpbmUgPT09ICEwKSB7XG4gICAgbGV0IHQwMjtcbiAgICByZXR1cm4gJFswXSAhPT0gbGVnYWN5U2NoZW1hIHx8ICRbMV0gIT09IHByb3BzLmF0dHJpYnV0ZXMgfHwgJFsyXSAhPT0gcHJvcHMuY2hpbGRyZW4gfHwgJFszXSAhPT0gcHJvcHMuZWxlbWVudCB8fCAkWzRdICE9PSBwcm9wcy5yZWFkT25seSB8fCAkWzVdICE9PSBwcm9wcy5yZW5kZXJDaGlsZCB8fCAkWzZdICE9PSBzY2hlbWEgPyAodDAyID0gLyogQF9fUFVSRV9fICovIGpzeChSZW5kZXJJbmxpbmVPYmplY3QsIHsgYXR0cmlidXRlczogcHJvcHMuYXR0cmlidXRlcywgZWxlbWVudDogcHJvcHMuZWxlbWVudCwgbGVnYWN5U2NoZW1hLCByZWFkT25seTogcHJvcHMucmVhZE9ubHksIHJlbmRlckNoaWxkOiBwcm9wcy5yZW5kZXJDaGlsZCwgc2NoZW1hLCBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW4gfSksICRbMF0gPSBsZWdhY3lTY2hlbWEsICRbMV0gPSBwcm9wcy5hdHRyaWJ1dGVzLCAkWzJdID0gcHJvcHMuY2hpbGRyZW4sICRbM10gPSBwcm9wcy5lbGVtZW50LCAkWzRdID0gcHJvcHMucmVhZE9ubHksICRbNV0gPSBwcm9wcy5yZW5kZXJDaGlsZCwgJFs2XSA9IHNjaGVtYSwgJFs3XSA9IHQwMikgOiB0MDIgPSAkWzddLCB0MDI7XG4gIH1cbiAgbGV0IGJsb2NrLCB0MDtcbiAgaWYgKCRbOF0gIT09IHByb3BzLmVsZW1lbnQuX2tleSB8fCAkWzldICE9PSBzY2hlbWEgfHwgJFsxMF0gIT09IHNsYXRlU3RhdGljLmJsb2NrSW5kZXhNYXAgfHwgJFsxMV0gIT09IHNsYXRlU3RhdGljLnZhbHVlKSB7XG4gICAgY29uc3QgYmxvY2tJbmRleCA9IHNsYXRlU3RhdGljLmJsb2NrSW5kZXhNYXAuZ2V0KHByb3BzLmVsZW1lbnQuX2tleSk7XG4gICAgYmxvY2sgPSBibG9ja0luZGV4ICE9PSB2b2lkIDAgPyBzbGF0ZVN0YXRpYy52YWx1ZS5hdChibG9ja0luZGV4KSA6IHZvaWQgMCwgdDAgPSBpc1RleHRCbG9jayh7XG4gICAgICBzY2hlbWFcbiAgICB9LCBibG9jayksICRbOF0gPSBwcm9wcy5lbGVtZW50Ll9rZXksICRbOV0gPSBzY2hlbWEsICRbMTBdID0gc2xhdGVTdGF0aWMuYmxvY2tJbmRleE1hcCwgJFsxMV0gPSBzbGF0ZVN0YXRpYy52YWx1ZSwgJFsxMl0gPSBibG9jaywgJFsxM10gPSB0MDtcbiAgfSBlbHNlXG4gICAgYmxvY2sgPSAkWzEyXSwgdDAgPSAkWzEzXTtcbiAgaWYgKHQwKSB7XG4gICAgbGV0IHQxMjtcbiAgICByZXR1cm4gJFsxNF0gIT09IGJsb2NrIHx8ICRbMTVdICE9PSBsZWdhY3lTY2hlbWEgfHwgJFsxNl0gIT09IHByb3BzLmF0dHJpYnV0ZXMgfHwgJFsxN10gIT09IHByb3BzLmNoaWxkcmVuIHx8ICRbMThdICE9PSBwcm9wcy5lbGVtZW50IHx8ICRbMTldICE9PSBwcm9wcy5yZWFkT25seSB8fCAkWzIwXSAhPT0gcHJvcHMucmVuZGVyQmxvY2sgfHwgJFsyMV0gIT09IHByb3BzLnJlbmRlckxpc3RJdGVtIHx8ICRbMjJdICE9PSBwcm9wcy5yZW5kZXJTdHlsZSB8fCAkWzIzXSAhPT0gcHJvcHMuc3BlbGxDaGVjayA/ICh0MTIgPSAvKiBAX19QVVJFX18gKi8ganN4KFJlbmRlclRleHRCbG9jaywgeyBhdHRyaWJ1dGVzOiBwcm9wcy5hdHRyaWJ1dGVzLCBlbGVtZW50OiBwcm9wcy5lbGVtZW50LCBsZWdhY3lTY2hlbWEsIHJlYWRPbmx5OiBwcm9wcy5yZWFkT25seSwgcmVuZGVyQmxvY2s6IHByb3BzLnJlbmRlckJsb2NrLCByZW5kZXJMaXN0SXRlbTogcHJvcHMucmVuZGVyTGlzdEl0ZW0sIHJlbmRlclN0eWxlOiBwcm9wcy5yZW5kZXJTdHlsZSwgc3BlbGxDaGVjazogcHJvcHMuc3BlbGxDaGVjaywgdGV4dEJsb2NrOiBibG9jaywgY2hpbGRyZW46IHByb3BzLmNoaWxkcmVuIH0pLCAkWzE0XSA9IGJsb2NrLCAkWzE1XSA9IGxlZ2FjeVNjaGVtYSwgJFsxNl0gPSBwcm9wcy5hdHRyaWJ1dGVzLCAkWzE3XSA9IHByb3BzLmNoaWxkcmVuLCAkWzE4XSA9IHByb3BzLmVsZW1lbnQsICRbMTldID0gcHJvcHMucmVhZE9ubHksICRbMjBdID0gcHJvcHMucmVuZGVyQmxvY2ssICRbMjFdID0gcHJvcHMucmVuZGVyTGlzdEl0ZW0sICRbMjJdID0gcHJvcHMucmVuZGVyU3R5bGUsICRbMjNdID0gcHJvcHMuc3BlbGxDaGVjaywgJFsyNF0gPSB0MTIpIDogdDEyID0gJFsyNF0sIHQxMjtcbiAgfVxuICBsZXQgdDE7XG4gIHJldHVybiAkWzI1XSAhPT0gYmxvY2sgfHwgJFsyNl0gIT09IGxlZ2FjeVNjaGVtYSB8fCAkWzI3XSAhPT0gcHJvcHMuYXR0cmlidXRlcyB8fCAkWzI4XSAhPT0gcHJvcHMuY2hpbGRyZW4gfHwgJFsyOV0gIT09IHByb3BzLmVsZW1lbnQgfHwgJFszMF0gIT09IHByb3BzLnJlYWRPbmx5IHx8ICRbMzFdICE9PSBwcm9wcy5yZW5kZXJCbG9jayB8fCAkWzMyXSAhPT0gc2NoZW1hID8gKHQxID0gLyogQF9fUFVSRV9fICovIGpzeChSZW5kZXJCbG9ja09iamVjdCwgeyBhdHRyaWJ1dGVzOiBwcm9wcy5hdHRyaWJ1dGVzLCBibG9ja09iamVjdDogYmxvY2ssIGVsZW1lbnQ6IHByb3BzLmVsZW1lbnQsIGxlZ2FjeVNjaGVtYSwgcmVhZE9ubHk6IHByb3BzLnJlYWRPbmx5LCByZW5kZXJCbG9jazogcHJvcHMucmVuZGVyQmxvY2ssIHNjaGVtYSwgY2hpbGRyZW46IHByb3BzLmNoaWxkcmVuIH0pLCAkWzI1XSA9IGJsb2NrLCAkWzI2XSA9IGxlZ2FjeVNjaGVtYSwgJFsyN10gPSBwcm9wcy5hdHRyaWJ1dGVzLCAkWzI4XSA9IHByb3BzLmNoaWxkcmVuLCAkWzI5XSA9IHByb3BzLmVsZW1lbnQsICRbMzBdID0gcHJvcHMucmVhZE9ubHksICRbMzFdID0gcHJvcHMucmVuZGVyQmxvY2ssICRbMzJdID0gc2NoZW1hLCAkWzMzXSA9IHQxKSA6IHQxID0gJFszM10sIHQxO1xufVxuZnVuY3Rpb24gX3RlbXAyKHNfMCkge1xuICByZXR1cm4gc18wLmNvbnRleHQuZ2V0TGVnYWN5U2NoZW1hKCk7XG59XG5mdW5jdGlvbiBfdGVtcCQxKHMpIHtcbiAgcmV0dXJuIHMuY29udGV4dC5zY2hlbWE7XG59XG5jb25zdCBQb3J0YWJsZVRleHRFZGl0b3JDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKSwgdXNlUG9ydGFibGVUZXh0RWRpdG9yID0gKCkgPT4ge1xuICBjb25zdCBlZGl0b3IgPSB1c2VDb250ZXh0KFBvcnRhYmxlVGV4dEVkaXRvckNvbnRleHQpO1xuICBpZiAoIWVkaXRvcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYHVzZVBvcnRhYmxlVGV4dEVkaXRvcmAgaG9vayBtdXN0IGJlIHVzZWQgaW5zaWRlIHRoZSA8UG9ydGFibGVUZXh0RWRpdG9yPiBjb21wb25lbnQncyBjb250ZXh0LlwiKTtcbiAgcmV0dXJuIGVkaXRvcjtcbn0sIGZvckVhY2hBY3RvciA9IChhY3RvclJlZiwgY2FsbGJhY2spID0+IHtcbiAgY2FsbGJhY2soYWN0b3JSZWYpO1xuICBjb25zdCBjaGlsZHJlbiA9IGFjdG9yUmVmLmdldFNuYXBzaG90KCkuY2hpbGRyZW47XG4gIGNoaWxkcmVuICYmIE9iamVjdC52YWx1ZXMoY2hpbGRyZW4pLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgZm9yRWFjaEFjdG9yKGNoaWxkLCBjYWxsYmFjayk7XG4gIH0pO1xufTtcbmZ1bmN0aW9uIHN0b3BBY3RvcihhY3RvclJlZikge1xuICBjb25zdCBwZXJzaXN0ZWRTbmFwc2hvdHMgPSBbXTtcbiAgZm9yRWFjaEFjdG9yKGFjdG9yUmVmLCAocmVmKSA9PiB7XG4gICAgcGVyc2lzdGVkU25hcHNob3RzLnB1c2goW3JlZiwgcmVmLmdldFNuYXBzaG90KCldKSwgcmVmLm9ic2VydmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIH0pO1xuICBjb25zdCBzeXN0ZW1TbmFwc2hvdCA9IGFjdG9yUmVmLnN5c3RlbS5nZXRTbmFwc2hvdD8uKCk7XG4gIGFjdG9yUmVmLnN0b3AoKSwgYWN0b3JSZWYuc3lzdGVtLl9zbmFwc2hvdCA9IHN5c3RlbVNuYXBzaG90LCBwZXJzaXN0ZWRTbmFwc2hvdHMuZm9yRWFjaCgoW3JlZiwgc25hcHNob3RdKSA9PiB7XG4gICAgcmVmLl9wcm9jZXNzaW5nU3RhdHVzID0gMCwgcmVmLl9zbmFwc2hvdCA9IHNuYXBzaG90O1xuICB9KTtcbn1cbmNvbnN0IGNvbnZlcnRlckpzb24gPSB7XG4gIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgc2VyaWFsaXplOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBjb25zdCBwb3J0YWJsZVRleHRDb252ZXJ0ZXIgPSBzbmFwc2hvdC5jb250ZXh0LmNvbnZlcnRlcnMuZmluZCgoY29udmVydGVyKSA9PiBjb252ZXJ0ZXIubWltZVR5cGUgPT09IFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIpO1xuICAgIHJldHVybiBwb3J0YWJsZVRleHRDb252ZXJ0ZXIgPyB7XG4gICAgICAuLi5wb3J0YWJsZVRleHRDb252ZXJ0ZXIuc2VyaWFsaXplKHtcbiAgICAgICAgc25hcHNob3QsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSxcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICAgIH0gOiB7XG4gICAgICB0eXBlOiBcInNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50LFxuICAgICAgcmVhc29uOiBcIk5vIGFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dCBDb252ZXJ0ZXIgZm91bmRcIlxuICAgIH07XG4gIH0sXG4gIGRlc2VyaWFsaXplOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBjb25zdCBwb3J0YWJsZVRleHRDb252ZXJ0ZXIgPSBzbmFwc2hvdC5jb250ZXh0LmNvbnZlcnRlcnMuZmluZCgoY29udmVydGVyKSA9PiBjb252ZXJ0ZXIubWltZVR5cGUgPT09IFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIpO1xuICAgIHJldHVybiBwb3J0YWJsZVRleHRDb252ZXJ0ZXIgPyB7XG4gICAgICAuLi5wb3J0YWJsZVRleHRDb252ZXJ0ZXIuZGVzZXJpYWxpemUoe1xuICAgICAgICBzbmFwc2hvdCxcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pLFxuICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfSA6IHtcbiAgICAgIHR5cGU6IFwiZGVzZXJpYWxpemF0aW9uLmZhaWx1cmVcIixcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIHJlYXNvbjogXCJObyBhcHBsaWNhdGlvbi94LXBvcnRhYmxlLXRleHQgQ29udmVydGVyIGZvdW5kXCJcbiAgICB9O1xuICB9XG59LCBjb252ZXJ0ZXJQb3J0YWJsZVRleHQgPSB7XG4gIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLFxuICBzZXJpYWxpemU6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGlmICghc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi94LXBvcnRhYmxlLXRleHRcIixcbiAgICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50LFxuICAgICAgICByZWFzb246IFwiTm8gc2VsZWN0aW9uXCJcbiAgICAgIH07XG4gICAgY29uc3QgYmxvY2tzID0gZ2V0U2VsZWN0ZWRWYWx1ZShzbmFwc2hvdCk7XG4gICAgcmV0dXJuIGJsb2Nrcy5sZW5ndGggPT09IDAgPyB7XG4gICAgICB0eXBlOiBcInNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIsXG4gICAgICByZWFzb246IFwiTm8gYmxvY2tzIHNlcmlhbGl6ZWRcIixcbiAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICAgIH0gOiB7XG4gICAgICB0eXBlOiBcInNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiLFxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoYmxvY2tzKSxcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLFxuICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50XG4gICAgfTtcbiAgfSxcbiAgZGVzZXJpYWxpemU6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGJsb2NrcyA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGJsb2NrcykpXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImRlc2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLFxuICAgICAgICByZWFzb246IFwiRGF0YSBpcyBub3QgYW4gYXJyYXlcIlxuICAgICAgfTtcbiAgICBjb25zdCBwYXJzZWRCbG9ja3MgPSBibG9ja3MuZmxhdE1hcCgoYmxvY2spID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZEJsb2NrID0gcGFyc2VCbG9jayh7XG4gICAgICAgIGNvbnRleHQ6IHNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgIGJsb2NrLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgcmVmcmVzaEtleXM6ICExLFxuICAgICAgICAgIHZhbGlkYXRlRmllbGRzOiAhMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJzZWRCbG9jayA/IFtwYXJzZWRCbG9ja10gOiBbXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGFyc2VkQmxvY2tzLmxlbmd0aCA9PT0gMCAmJiBibG9ja3MubGVuZ3RoID4gMCA/IHtcbiAgICAgIHR5cGU6IFwiZGVzZXJpYWxpemF0aW9uLmZhaWx1cmVcIixcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLFxuICAgICAgcmVhc29uOiBcIk5vIGJsb2NrcyB3ZXJlIHBhcnNlZFwiXG4gICAgfSA6IHtcbiAgICAgIHR5cGU6IFwiZGVzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIixcbiAgICAgIGRhdGE6IHBhcnNlZEJsb2NrcyxcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiXG4gICAgfTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZUNvbnZlcnRlclRleHRIdG1sKGxlZ2FjeVNjaGVtYSkge1xuICByZXR1cm4ge1xuICAgIG1pbWVUeXBlOiBcInRleHQvaHRtbFwiLFxuICAgIHNlcmlhbGl6ZTogKHtcbiAgICAgIHNuYXBzaG90LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiB7XG4gICAgICBpZiAoIXNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgICAgICAgbWltZVR5cGU6IFwidGV4dC9odG1sXCIsXG4gICAgICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50LFxuICAgICAgICAgIHJlYXNvbjogXCJObyBzZWxlY3Rpb25cIlxuICAgICAgICB9O1xuICAgICAgY29uc3QgYmxvY2tzID0gZ2V0U2VsZWN0ZWRWYWx1ZShzbmFwc2hvdCksIGh0bWwgPSB0b0hUTUwoYmxvY2tzLCB7XG4gICAgICAgIG9uTWlzc2luZ0NvbXBvbmVudDogITEsXG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICB1bmtub3duVHlwZTogKHtcbiAgICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICAgfSkgPT4gY2hpbGRyZW4gIT09IHZvaWQgMCA/IGAke2NoaWxkcmVufWAgOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGh0bWwgPT09IFwiXCIgPyB7XG4gICAgICAgIHR5cGU6IFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcInRleHQvaHRtbFwiLFxuICAgICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnQsXG4gICAgICAgIHJlYXNvbjogXCJTZXJpYWxpemVkIEhUTUwgaXMgZW1wdHlcIlxuICAgICAgfSA6IHtcbiAgICAgICAgdHlwZTogXCJzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogaHRtbCxcbiAgICAgICAgbWltZVR5cGU6IFwidGV4dC9odG1sXCIsXG4gICAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICAgICAgfTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplOiAoe1xuICAgICAgc25hcHNob3QsXG4gICAgICBldmVudFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZEJsb2NrcyA9IGh0bWxUb0Jsb2NrcyhldmVudC5kYXRhLCBsZWdhY3lTY2hlbWEucG9ydGFibGVUZXh0LCB7XG4gICAgICAgIGtleUdlbmVyYXRvcjogc25hcHNob3QuY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICAgIHVuc3RhYmxlX3doaXRlc3BhY2VPblBhc3RlTW9kZTogbGVnYWN5U2NoZW1hLmJsb2NrLm9wdGlvbnMudW5zdGFibGVfd2hpdGVzcGFjZU9uUGFzdGVNb2RlXG4gICAgICB9KS5mbGF0TWFwKChibG9jaykgPT4ge1xuICAgICAgICBjb25zdCBwYXJzZWRCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgICAgICAgIGNvbnRleHQ6IHNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgcmVmcmVzaEtleXM6ICExLFxuICAgICAgICAgICAgdmFsaWRhdGVGaWVsZHM6ICExXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEJsb2NrID8gW3BhcnNlZEJsb2NrXSA6IFtdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyc2VkQmxvY2tzLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgdHlwZTogXCJkZXNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgICBtaW1lVHlwZTogXCJ0ZXh0L2h0bWxcIixcbiAgICAgICAgcmVhc29uOiBcIk5vIGJsb2NrcyBkZXNlcmlhbGl6ZWRcIlxuICAgICAgfSA6IHtcbiAgICAgICAgdHlwZTogXCJkZXNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiLFxuICAgICAgICBkYXRhOiBwYXJzZWRCbG9ja3MsXG4gICAgICAgIG1pbWVUeXBlOiBcInRleHQvaHRtbFwiXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnZlcnRlclRleHRQbGFpbihsZWdhY3lTY2hlbWEpIHtcbiAgcmV0dXJuIHtcbiAgICBtaW1lVHlwZTogXCJ0ZXh0L3BsYWluXCIsXG4gICAgc2VyaWFsaXplOiAoe1xuICAgICAgc25hcHNob3QsXG4gICAgICBldmVudFxuICAgIH0pID0+IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uID8ge1xuICAgICAgdHlwZTogXCJzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIixcbiAgICAgIGRhdGE6IGdldFNlbGVjdGVkVmFsdWUoc25hcHNob3QpLm1hcCgoYmxvY2spID0+IGlzVGV4dEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIGJsb2NrKSA/IGJsb2NrLmNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IGNoaWxkLl90eXBlID09PSBzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5zcGFuLm5hbWUgPyBjaGlsZC50ZXh0IDogZXZlbnQub3JpZ2luRXZlbnQgPT09IFwiZHJhZy5kcmFnc3RhcnRcIiA/IGBbJHtzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5pbmxpbmVPYmplY3RzLmZpbmQoKGlubGluZU9iamVjdFR5cGUpID0+IGlubGluZU9iamVjdFR5cGUubmFtZSA9PT0gY2hpbGQuX3R5cGUpPy50aXRsZSA/PyBcIk9iamVjdFwifV1gIDogXCJcIikuam9pbihcIlwiKSA6IGV2ZW50Lm9yaWdpbkV2ZW50ID09PSBcImRyYWcuZHJhZ3N0YXJ0XCIgPyBgWyR7c25hcHNob3QuY29udGV4dC5zY2hlbWEuYmxvY2tPYmplY3RzLmZpbmQoKGJsb2NrT2JqZWN0VHlwZSkgPT4gYmxvY2tPYmplY3RUeXBlLm5hbWUgPT09IGJsb2NrLl90eXBlKT8udGl0bGUgPz8gXCJPYmplY3RcIn1dYCA6IFwiXCIpLmZpbHRlcigoYmxvY2spID0+IGJsb2NrICE9PSBcIlwiKS5qb2luKGBcblxuYCksXG4gICAgICBtaW1lVHlwZTogXCJ0ZXh0L3BsYWluXCIsXG4gICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnRcbiAgICB9IDoge1xuICAgICAgdHlwZTogXCJzZXJpYWxpemF0aW9uLmZhaWx1cmVcIixcbiAgICAgIG1pbWVUeXBlOiBcInRleHQvcGxhaW5cIixcbiAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudCxcbiAgICAgIHJlYXNvbjogXCJObyBzZWxlY3Rpb25cIlxuICAgIH0sXG4gICAgZGVzZXJpYWxpemU6ICh7XG4gICAgICBzbmFwc2hvdCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4ge1xuICAgICAgY29uc3QgdGV4dFRvSHRtbCA9IGA8aHRtbD48Ym9keT4ke2VzY2FwZUh0bWwoZXZlbnQuZGF0YSkuc3BsaXQoL1xcbnsyLH0vKS5tYXAoKGxpbmUpID0+IGxpbmUgPyBgPHA+JHtsaW5lLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCBcIjxici8+XCIpfTwvcD5gIDogXCI8cD48L3A+XCIpLmpvaW4oXCJcIil9PC9ib2R5PjwvaHRtbD5gLCBwYXJzZWRCbG9ja3MgPSBodG1sVG9CbG9ja3ModGV4dFRvSHRtbCwgbGVnYWN5U2NoZW1hLnBvcnRhYmxlVGV4dCwge1xuICAgICAgICBrZXlHZW5lcmF0b3I6IHNuYXBzaG90LmNvbnRleHQua2V5R2VuZXJhdG9yXG4gICAgICB9KS5mbGF0TWFwKChibG9jaykgPT4ge1xuICAgICAgICBjb25zdCBwYXJzZWRCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgICAgICAgIGNvbnRleHQ6IHNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgcmVmcmVzaEtleXM6ICExLFxuICAgICAgICAgICAgdmFsaWRhdGVGaWVsZHM6ICExXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEJsb2NrID8gW3BhcnNlZEJsb2NrXSA6IFtdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyc2VkQmxvY2tzLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgdHlwZTogXCJkZXNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgICBtaW1lVHlwZTogXCJ0ZXh0L3BsYWluXCIsXG4gICAgICAgIHJlYXNvbjogXCJObyBibG9ja3MgZGVzZXJpYWxpemVkXCJcbiAgICAgIH0gOiB7XG4gICAgICAgIHR5cGU6IFwiZGVzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogcGFyc2VkQmxvY2tzLFxuICAgICAgICBtaW1lVHlwZTogXCJ0ZXh0L3BsYWluXCJcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuY29uc3QgZW50aXR5TWFwID0ge1xuICBcIiZcIjogXCImYW1wO1wiLFxuICBcIjxcIjogXCImbHQ7XCIsXG4gIFwiPlwiOiBcIiZndDtcIixcbiAgJ1wiJzogXCImcXVvdDtcIixcbiAgXCInXCI6IFwiJiMzOTtcIixcbiAgXCIvXCI6IFwiJiN4MkY7XCIsXG4gIFwiYFwiOiBcIiYjeDYwO1wiLFxuICBcIj1cIjogXCImI3gzRDtcIlxufTtcbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKC9bJjw+XCInYD0vXS9nLCAocykgPT4gZW50aXR5TWFwW3NdKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvcmVDb252ZXJ0ZXJzKGxlZ2FjeVNjaGVtYSkge1xuICByZXR1cm4gW2NvbnZlcnRlckpzb24sIGNvbnZlcnRlclBvcnRhYmxlVGV4dCwgY3JlYXRlQ29udmVydGVyVGV4dEh0bWwobGVnYWN5U2NoZW1hKSwgY3JlYXRlQ29udmVydGVyVGV4dFBsYWluKGxlZ2FjeVNjaGVtYSldO1xufVxuZnVuY3Rpb24gY29tcGlsZVR5cGUocmF3VHlwZSkge1xuICByZXR1cm4gU2NoZW1hLmNvbXBpbGUoe1xuICAgIG5hbWU6IFwiYmxvY2tUeXBlU2NoZW1hXCIsXG4gICAgdHlwZXM6IFtyYXdUeXBlXVxuICB9KS5nZXQocmF3VHlwZS5uYW1lKTtcbn1cbmNvbnN0IGxldmVsSW5kZXhNYXBzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGJ1aWxkSW5kZXhNYXBzKGNvbnRleHQsIHtcbiAgYmxvY2tJbmRleE1hcCxcbiAgbGlzdEluZGV4TWFwXG59KSB7XG4gIGJsb2NrSW5kZXhNYXAuY2xlYXIoKSwgbGlzdEluZGV4TWFwLmNsZWFyKCksIGxldmVsSW5kZXhNYXBzLmNsZWFyKCk7XG4gIGxldCBwcmV2aW91c0xpc3RJdGVtO1xuICBmb3IgKGxldCBibG9ja0luZGV4ID0gMDsgYmxvY2tJbmRleCA8IGNvbnRleHQudmFsdWUubGVuZ3RoOyBibG9ja0luZGV4KyspIHtcbiAgICBjb25zdCBibG9jayA9IGNvbnRleHQudmFsdWUuYXQoYmxvY2tJbmRleCk7XG4gICAgaWYgKGJsb2NrID09PSB2b2lkIDApXG4gICAgICBjb250aW51ZTtcbiAgICBpZiAoYmxvY2tJbmRleE1hcC5zZXQoYmxvY2suX2tleSwgYmxvY2tJbmRleCksICFpc1RleHRCbG9jayhjb250ZXh0LCBibG9jaykpIHtcbiAgICAgIGxldmVsSW5kZXhNYXBzLmNsZWFyKCksIHByZXZpb3VzTGlzdEl0ZW0gPSB2b2lkIDA7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGJsb2NrLmxpc3RJdGVtID09PSB2b2lkIDAgfHwgYmxvY2subGV2ZWwgPT09IHZvaWQgMCkge1xuICAgICAgbGV2ZWxJbmRleE1hcHMuY2xlYXIoKSwgcHJldmlvdXNMaXN0SXRlbSA9IHZvaWQgMDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIXByZXZpb3VzTGlzdEl0ZW0pIHtcbiAgICAgIGNvbnN0IGxldmVsSW5kZXhNYXAyID0gbGV2ZWxJbmRleE1hcHMuZ2V0KGJsb2NrLmxpc3RJdGVtKSA/PyAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgbGV2ZWxJbmRleE1hcDIuc2V0KGJsb2NrLmxldmVsLCAxKSwgbGV2ZWxJbmRleE1hcHMuc2V0KGJsb2NrLmxpc3RJdGVtLCBsZXZlbEluZGV4TWFwMiksIGxpc3RJbmRleE1hcC5zZXQoYmxvY2suX2tleSwgMSksIHByZXZpb3VzTGlzdEl0ZW0gPSB7XG4gICAgICAgIGxpc3RJdGVtOiBibG9jay5saXN0SXRlbSxcbiAgICAgICAgbGV2ZWw6IGJsb2NrLmxldmVsXG4gICAgICB9O1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwcmV2aW91c0xpc3RJdGVtLmxpc3RJdGVtID09PSBibG9jay5saXN0SXRlbSAmJiBwcmV2aW91c0xpc3RJdGVtLmxldmVsIDwgYmxvY2subGV2ZWwpIHtcbiAgICAgIGNvbnN0IGxldmVsSW5kZXhNYXAyID0gbGV2ZWxJbmRleE1hcHMuZ2V0KGJsb2NrLmxpc3RJdGVtKSA/PyAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgbGV2ZWxJbmRleE1hcDIuc2V0KGJsb2NrLmxldmVsLCAxKSwgbGV2ZWxJbmRleE1hcHMuc2V0KGJsb2NrLmxpc3RJdGVtLCBsZXZlbEluZGV4TWFwMiksIGxpc3RJbmRleE1hcC5zZXQoYmxvY2suX2tleSwgMSksIHByZXZpb3VzTGlzdEl0ZW0gPSB7XG4gICAgICAgIGxpc3RJdGVtOiBibG9jay5saXN0SXRlbSxcbiAgICAgICAgbGV2ZWw6IGJsb2NrLmxldmVsXG4gICAgICB9O1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGxldmVsSW5kZXhNYXBzLmZvckVhY2goKGxldmVsSW5kZXhNYXAyLCBsaXN0SXRlbSkgPT4ge1xuICAgICAgbGlzdEl0ZW0gIT09IGJsb2NrLmxpc3RJdGVtICYmIGxldmVsSW5kZXhNYXAyLnNldChibG9jay5sZXZlbCwgMCk7XG4gICAgfSk7XG4gICAgY29uc3QgbGV2ZWxJbmRleE1hcCA9IGxldmVsSW5kZXhNYXBzLmdldChibG9jay5saXN0SXRlbSkgPz8gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgbGV2ZWxDb3VudGVyID0gbGV2ZWxJbmRleE1hcC5nZXQoYmxvY2subGV2ZWwpID8/IDA7XG4gICAgbGV2ZWxJbmRleE1hcC5zZXQoYmxvY2subGV2ZWwsIGxldmVsQ291bnRlciArIDEpLCBsaXN0SW5kZXhNYXAuc2V0KGJsb2NrLl9rZXksIGxldmVsQ291bnRlciArIDEpLCBwcmV2aW91c0xpc3RJdGVtID0ge1xuICAgICAgbGlzdEl0ZW06IGJsb2NrLmxpc3RJdGVtLFxuICAgICAgbGV2ZWw6IGJsb2NrLmxldmVsXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUGxhY2Vob2xkZXJCbG9jayhjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgX3R5cGU6IGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsXG4gICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICBzdHlsZTogY29udGV4dC5zY2hlbWEuc3R5bGVzWzBdLm5hbWUgPz8gXCJub3JtYWxcIixcbiAgICBtYXJrRGVmczogW10sXG4gICAgY2hpbGRyZW46IFt7XG4gICAgICBfdHlwZTogY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lLFxuICAgICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgIHRleHQ6IFwiXCIsXG4gICAgICBtYXJrczogW11cbiAgICB9XVxuICB9O1xufVxuY29uc3QgaW5zZXJ0VGV4dE9wZXJhdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgb3BlcmF0aW9uXG59KSA9PiB7XG4gIGNvbnN0IHNuYXBzaG90ID0ge1xuICAgIGJsb2NrSW5kZXhNYXA6IG9wZXJhdGlvbi5lZGl0b3IuYmxvY2tJbmRleE1hcCxcbiAgICBjb250ZXh0OiB7XG4gICAgICB2YWx1ZTogb3BlcmF0aW9uLmVkaXRvci52YWx1ZSxcbiAgICAgIHNlbGVjdGlvbjogb3BlcmF0aW9uLmVkaXRvci5zZWxlY3Rpb24gPyBzbGF0ZVJhbmdlVG9TZWxlY3Rpb24oe1xuICAgICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hLFxuICAgICAgICBlZGl0b3I6IG9wZXJhdGlvbi5lZGl0b3IsXG4gICAgICAgIHJhbmdlOiBvcGVyYXRpb24uZWRpdG9yLnNlbGVjdGlvblxuICAgICAgfSkgOiBudWxsLFxuICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgIGtleUdlbmVyYXRvcjogY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICBjb252ZXJ0ZXJzOiBbXSxcbiAgICAgIHJlYWRPbmx5OiAhMVxuICAgIH0sXG4gICAgZGVjb3JhdG9yU3RhdGU6IG9wZXJhdGlvbi5lZGl0b3IuZGVjb3JhdG9yU3RhdGVcbiAgfSwgbWFya1N0YXRlID0gZ2V0TWFya1N0YXRlKHNuYXBzaG90KSwgYWN0aXZlRGVjb3JhdG9ycyA9IGdldEFjdGl2ZURlY29yYXRvcnMoc25hcHNob3QpLCBhY3RpdmVBbm5vdGF0aW9ucyA9IGdldEFjdGl2ZUFubm90YXRpb25zTWFya3Moc25hcHNob3QpLCBbZm9jdXNTcGFuXSA9IGdldEZvY3VzU3Bhbih7XG4gICAgZWRpdG9yOiBvcGVyYXRpb24uZWRpdG9yXG4gIH0pO1xuICBpZiAoIWZvY3VzU3Bhbikge1xuICAgIFRyYW5zZm9ybXMuaW5zZXJ0VGV4dChvcGVyYXRpb24uZWRpdG9yLCBvcGVyYXRpb24udGV4dCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtYXJrU3RhdGUgJiYgbWFya1N0YXRlLnN0YXRlID09PSBcInVuY2hhbmdlZFwiKSB7XG4gICAgY29uc3QgbWFya1N0YXRlRGVjb3JhdG9ycyA9IChtYXJrU3RhdGUubWFya3MgPz8gW10pLmZpbHRlcigobWFyaykgPT4gY29udGV4dC5zY2hlbWEuZGVjb3JhdG9ycy5tYXAoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLm5hbWUpLmluY2x1ZGVzKG1hcmspKTtcbiAgICBpZiAobWFya1N0YXRlRGVjb3JhdG9ycy5sZW5ndGggPT09IGFjdGl2ZURlY29yYXRvcnMubGVuZ3RoICYmIG1hcmtTdGF0ZURlY29yYXRvcnMuZXZlcnkoKG1hcmspID0+IGFjdGl2ZURlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpKSB7XG4gICAgICBUcmFuc2Zvcm1zLmluc2VydFRleHQob3BlcmF0aW9uLmVkaXRvciwgb3BlcmF0aW9uLnRleHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKG9wZXJhdGlvbi5lZGl0b3IsIHtcbiAgICBfdHlwZTogZm9jdXNTcGFuLl90eXBlLFxuICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgdGV4dDogb3BlcmF0aW9uLnRleHQsXG4gICAgbWFya3M6IFsuLi5hY3RpdmVEZWNvcmF0b3JzLCAuLi5hY3RpdmVBbm5vdGF0aW9uc11cbiAgfSksIEVESVRPUl9UT19QRU5ESU5HX1NFTEVDVElPTi5zZXQob3BlcmF0aW9uLmVkaXRvciwgb3BlcmF0aW9uLmVkaXRvci5zZWxlY3Rpb24pLCBvcGVyYXRpb24uZWRpdG9yLmRlY29yYXRvclN0YXRlID0ge307XG59O1xuZnVuY3Rpb24gZ2V0UHJldmlvdXNTcGFuKHtcbiAgZWRpdG9yLFxuICBibG9ja1BhdGgsXG4gIHNwYW5QYXRoXG59KSB7XG4gIGxldCBwcmV2aW91c1NwYW47XG4gIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBibG9ja1BhdGgsIHtcbiAgICByZXZlcnNlOiAhMFxuICB9KSlcbiAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpICYmIFBhdGguaXNCZWZvcmUoY2hpbGRQYXRoLCBzcGFuUGF0aCkpIHtcbiAgICAgIHByZXZpb3VzU3BhbiA9IGNoaWxkO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICByZXR1cm4gcHJldmlvdXNTcGFuO1xufVxuZnVuY3Rpb24gZ2V0TmV4dFNwYW4oe1xuICBlZGl0b3IsXG4gIGJsb2NrUGF0aCxcbiAgc3BhblBhdGhcbn0pIHtcbiAgbGV0IG5leHRTcGFuO1xuICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoKSlcbiAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpICYmIFBhdGguaXNBZnRlcihjaGlsZFBhdGgsIHNwYW5QYXRoKSkge1xuICAgICAgbmV4dFNwYW4gPSBjaGlsZDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgcmV0dXJuIG5leHRTcGFuO1xufVxuZnVuY3Rpb24gd2l0aFJlbW90ZUNoYW5nZXMoZWRpdG9yLCBmbikge1xuICBjb25zdCBwcmV2ID0gaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikgfHwgITE7XG4gIElTX1BST0NFU1NJTkdfUkVNT1RFX0NIQU5HRVMuc2V0KGVkaXRvciwgITApLCBmbigpLCBJU19QUk9DRVNTSU5HX1JFTU9URV9DSEFOR0VTLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikge1xuICByZXR1cm4gSVNfUFJPQ0VTU0lOR19SRU1PVEVfQ0hBTkdFUy5nZXQoZWRpdG9yKTtcbn1cbmNvbnN0IElTX1VET0lORyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBJU19SRURPSU5HID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiB3aXRoVW5kb2luZyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc1VuZG9pbmcoZWRpdG9yKTtcbiAgSVNfVURPSU5HLnNldChlZGl0b3IsICEwKSwgZm4oKSwgSVNfVURPSU5HLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gaXNVbmRvaW5nKGVkaXRvcikge1xuICByZXR1cm4gSVNfVURPSU5HLmdldChlZGl0b3IpID8/ICExO1xufVxuZnVuY3Rpb24gc2V0SXNVbmRvaW5nKGVkaXRvciwgaXNVbmRvaW5nMikge1xuICBJU19VRE9JTkcuc2V0KGVkaXRvciwgaXNVbmRvaW5nMik7XG59XG5mdW5jdGlvbiB3aXRoUmVkb2luZyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc1JlZG9pbmcoZWRpdG9yKTtcbiAgSVNfUkVET0lORy5zZXQoZWRpdG9yLCAhMCksIGZuKCksIElTX1JFRE9JTkcuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBpc1JlZG9pbmcoZWRpdG9yKSB7XG4gIHJldHVybiBJU19SRURPSU5HLmdldChlZGl0b3IpID8/ICExO1xufVxuZnVuY3Rpb24gc2V0SXNSZWRvaW5nKGVkaXRvciwgaXNSZWRvaW5nMikge1xuICBJU19SRURPSU5HLnNldChlZGl0b3IsIGlzUmVkb2luZzIpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmUoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cbmZ1bmN0aW9uIHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3IsIHQwKSB7XG4gIGNvbnN0ICQgPSBjKDMpLCBjb21wYXJlID0gdDAgPT09IHZvaWQgMCA/IGRlZmF1bHRDb21wYXJlIDogdDA7XG4gIGxldCB0MTtcbiAgcmV0dXJuICRbMF0gIT09IGVkaXRvciB8fCAkWzFdICE9PSBzZWxlY3RvciA/ICh0MSA9IChlZGl0b3JBY3RvclNuYXBzaG90KSA9PiB7XG4gICAgY29uc3Qgc25hcHNob3QgPSBnZXRFZGl0b3JTbmFwc2hvdCh7XG4gICAgICBlZGl0b3JBY3RvclNuYXBzaG90LFxuICAgICAgc2xhdGVFZGl0b3JJbnN0YW5jZTogZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbnN0YW5jZVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxlY3RvcihzbmFwc2hvdCk7XG4gIH0sICRbMF0gPSBlZGl0b3IsICRbMV0gPSBzZWxlY3RvciwgJFsyXSA9IHQxKSA6IHQxID0gJFsyXSwgdXNlU2VsZWN0b3IoZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3RvciwgdDEsIGNvbXBhcmUpO1xufVxuZnVuY3Rpb24gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICBlZGl0b3JBY3RvclNuYXBzaG90LFxuICBzbGF0ZUVkaXRvckluc3RhbmNlXG59KSB7XG4gIHJldHVybiB7XG4gICAgYmxvY2tJbmRleE1hcDogc2xhdGVFZGl0b3JJbnN0YW5jZS5ibG9ja0luZGV4TWFwLFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIGNvbnZlcnRlcnM6IFsuLi5lZGl0b3JBY3RvclNuYXBzaG90LmNvbnRleHQuY29udmVydGVyc10sXG4gICAgICBrZXlHZW5lcmF0b3I6IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICByZWFkT25seTogZWRpdG9yQWN0b3JTbmFwc2hvdC5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSksXG4gICAgICBzY2hlbWE6IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5zY2hlbWEsXG4gICAgICBzZWxlY3Rpb246IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24sXG4gICAgICB2YWx1ZTogc2xhdGVFZGl0b3JJbnN0YW5jZS52YWx1ZVxuICAgIH0sXG4gICAgZGVjb3JhdG9yU3RhdGU6IHNsYXRlRWRpdG9ySW5zdGFuY2UuZGVjb3JhdG9yU3RhdGVcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJGUgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhQb3J0YWJsZVRleHRNYXJrTW9kZWxcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoUG9ydGFibGVUZXh0TWFya01vZGVsKGVkaXRvckFjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBseTogYXBwbHkyLFxuICAgICAgbm9ybWFsaXplTm9kZVxuICAgIH0gPSBlZGl0b3IsIGRlY29yYXRvcnMgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLmRlY29yYXRvcnMubWFwKCh0KSA9PiB0Lm5hbWUpO1xuICAgIHJldHVybiBlZGl0b3Iubm9ybWFsaXplTm9kZSA9IChub2RlRW50cnkpID0+IHtcbiAgICAgIGNvbnN0IFtub2RlLCBwYXRoXSA9IG5vZGVFbnRyeTtcbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBOb2RlLmNoaWxkcmVuKGVkaXRvciwgcGF0aCk7XG4gICAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgY29uc3QgbmV4dE5vZGUgPSBub2RlLmNoaWxkcmVuW2NoaWxkUGF0aFsxXSArIDFdO1xuICAgICAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgJiYgZWRpdG9yLmlzVGV4dFNwYW4obmV4dE5vZGUpICYmIGNoaWxkLm1hcmtzPy5ldmVyeSgobWFyaykgPT4gbmV4dE5vZGUubWFya3M/LmluY2x1ZGVzKG1hcmspKSAmJiBuZXh0Tm9kZS5tYXJrcz8uZXZlcnkoKG1hcmspID0+IGNoaWxkLm1hcmtzPy5pbmNsdWRlcyhtYXJrKSkpIHtcbiAgICAgICAgICAgIGRlYnVnJGUoXCJNZXJnaW5nIHNwYW5zXCIsIEpTT04uc3RyaW5naWZ5KGNoaWxkLCBudWxsLCAyKSwgSlNPTi5zdHJpbmdpZnkobmV4dE5vZGUsIG51bGwsIDIpKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSksIFRyYW5zZm9ybXMubWVyZ2VOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgYXQ6IFtjaGlsZFBhdGhbMF0sIGNoaWxkUGF0aFsxXSArIDFdLFxuICAgICAgICAgICAgICB2b2lkczogITBcbiAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhub2RlKSAmJiAhQXJyYXkuaXNBcnJheShub2RlLm1hcmtEZWZzKSkge1xuICAgICAgICBkZWJ1ZyRlKFwiQWRkaW5nIC5tYXJrRGVmcyB0byBibG9jayBub2RlXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya0RlZnM6IFtdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aFxuICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3Bhbihub2RlKSAmJiAhQXJyYXkuaXNBcnJheShub2RlLm1hcmtzKSkge1xuICAgICAgICBkZWJ1ZyRlKFwiQWRkaW5nIC5tYXJrcyB0byBzcGFuIG5vZGVcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogW11cbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrUGF0aCA9IFBhdGgucGFyZW50KHBhdGgpLCBbYmxvY2tdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBibG9ja1BhdGgpLCBkZWNvcmF0b3JzMiA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEuZGVjb3JhdG9ycy5tYXAoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLm5hbWUpLCBhbm5vdGF0aW9ucyA9IG5vZGUubWFya3M/LmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMyLmluY2x1ZGVzKG1hcmspKTtcbiAgICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgbm9kZS50ZXh0ID09PSBcIlwiICYmIGFubm90YXRpb25zICYmIGFubm90YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBkZWJ1ZyRlKFwiUmVtb3ZpbmcgYW5ub3RhdGlvbnMgZnJvbSBlbXB0eSBzcGFuIG5vZGVcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrczogbm9kZS5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzMi5pbmNsdWRlcyhtYXJrKSlcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGRlY29yYXRvcnMyID0gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5kZWNvcmF0b3JzLm1hcCgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IubmFtZSk7XG4gICAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBwYXRoKSlcbiAgICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrcyA9IGNoaWxkLm1hcmtzID8/IFtdLCBvcnBoYW5lZEFubm90YXRpb25zID0gbWFya3MuZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9yczIuaW5jbHVkZXMobWFyaykgJiYgIW5vZGUubWFya0RlZnM/LmZpbmQoKGRlZikgPT4gZGVmLl9rZXkgPT09IG1hcmspKTtcbiAgICAgICAgICAgIGlmIChvcnBoYW5lZEFubm90YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgZGVidWckZShcIlJlbW92aW5nIG9ycGhhbmVkIGFubm90YXRpb25zIGZyb20gc3BhbiBub2RlXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgbWFya3M6IG1hcmtzLmZpbHRlcigobWFyaykgPT4gIW9ycGhhbmVkQW5ub3RhdGlvbnMuaW5jbHVkZXMobWFyaykpXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBhdDogY2hpbGRQYXRoXG4gICAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3Bhbihub2RlKSkge1xuICAgICAgICBjb25zdCBibG9ja1BhdGggPSBQYXRoLnBhcmVudChwYXRoKSwgW2Jsb2NrXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgYmxvY2tQYXRoKTtcbiAgICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhibG9jaykpIHtcbiAgICAgICAgICBjb25zdCBkZWNvcmF0b3JzMiA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEuZGVjb3JhdG9ycy5tYXAoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLm5hbWUpLCBtYXJrcyA9IG5vZGUubWFya3MgPz8gW10sIG9ycGhhbmVkQW5ub3RhdGlvbnMgPSBtYXJrcy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzMi5pbmNsdWRlcyhtYXJrKSAmJiAhYmxvY2subWFya0RlZnM/LmZpbmQoKGRlZikgPT4gZGVmLl9rZXkgPT09IG1hcmspKTtcbiAgICAgICAgICBpZiAob3JwaGFuZWRBbm5vdGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBkZWJ1ZyRlKFwiUmVtb3Zpbmcgb3JwaGFuZWQgYW5ub3RhdGlvbnMgZnJvbSBzcGFuIG5vZGVcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICBtYXJrczogbWFya3MuZmlsdGVyKChtYXJrKSA9PiAhb3JwaGFuZWRBbm5vdGF0aW9ucy5pbmNsdWRlcyhtYXJrKSlcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhub2RlKSkge1xuICAgICAgICBjb25zdCBtYXJrRGVmcyA9IG5vZGUubWFya0RlZnMgPz8gW10sIG1hcmtEZWZLZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSwgbmV3TWFya0RlZnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBtYXJrRGVmIG9mIG1hcmtEZWZzKVxuICAgICAgICAgIG1hcmtEZWZLZXlzLmhhcyhtYXJrRGVmLl9rZXkpIHx8IChtYXJrRGVmS2V5cy5hZGQobWFya0RlZi5fa2V5KSwgbmV3TWFya0RlZnMucHVzaChtYXJrRGVmKSk7XG4gICAgICAgIGlmIChtYXJrRGVmcy5sZW5ndGggIT09IG5ld01hcmtEZWZzLmxlbmd0aCkge1xuICAgICAgICAgIGRlYnVnJGUoXCJSZW1vdmluZyBkdXBsaWNhdGUgbWFya0RlZnNcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrRGVmczogbmV3TWFya0RlZnNcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpICYmICFlZGl0b3Iub3BlcmF0aW9ucy5zb21lKChvcCkgPT4gb3AudHlwZSA9PT0gXCJtZXJnZV9ub2RlXCIgJiYgXCJtYXJrRGVmc1wiIGluIG9wLnByb3BlcnRpZXMgJiYgb3AucGF0aC5sZW5ndGggPT09IDEpKSB7XG4gICAgICAgIGNvbnN0IG5ld01hcmtEZWZzID0gKG5vZGUubWFya0RlZnMgfHwgW10pLmZpbHRlcigoZGVmKSA9PiBub2RlLmNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiBUZXh0LmlzVGV4dChjaGlsZCkgJiYgQXJyYXkuaXNBcnJheShjaGlsZC5tYXJrcykgJiYgY2hpbGQubWFya3MuaW5jbHVkZXMoZGVmLl9rZXkpKSk7XG4gICAgICAgIGlmIChub2RlLm1hcmtEZWZzICYmICFpc0VxdWFsKG5ld01hcmtEZWZzLCBub2RlLm1hcmtEZWZzKSkge1xuICAgICAgICAgIGRlYnVnJGUoXCJSZW1vdmluZyBtYXJrRGVmIG5vdCBpbiB1c2VcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrRGVmczogbmV3TWFya0RlZnNcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub3JtYWxpemVOb2RlKG5vZGVFbnRyeSk7XG4gICAgfSwgZWRpdG9yLmFwcGx5ID0gKG9wKSA9PiB7XG4gICAgICBpZiAoaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzVW5kb2luZyhlZGl0b3IpIHx8IGlzUmVkb2luZyhlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvcC50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIiAmJiBvcC5wcm9wZXJ0aWVzICYmIG9wLm5ld1Byb3BlcnRpZXMgJiYgb3AucHJvcGVydGllcy5hbmNob3IgJiYgb3AucHJvcGVydGllcy5mb2N1cyAmJiBvcC5uZXdQcm9wZXJ0aWVzLmFuY2hvciAmJiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzU2VsZWN0aW9uSXNDb2xsYXBzZWQgPSBSYW5nZS5pc0NvbGxhcHNlZCh7XG4gICAgICAgICAgYW5jaG9yOiBvcC5wcm9wZXJ0aWVzLmFuY2hvcixcbiAgICAgICAgICBmb2N1czogb3AucHJvcGVydGllcy5mb2N1c1xuICAgICAgICB9KSwgbmV3U2VsZWN0aW9uSXNDb2xsYXBzZWQgPSBSYW5nZS5pc0NvbGxhcHNlZCh7XG4gICAgICAgICAgYW5jaG9yOiBvcC5uZXdQcm9wZXJ0aWVzLmFuY2hvcixcbiAgICAgICAgICBmb2N1czogb3AubmV3UHJvcGVydGllcy5mb2N1c1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByZXZpb3VzU2VsZWN0aW9uSXNDb2xsYXBzZWQgJiYgbmV3U2VsZWN0aW9uSXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICBjb25zdCBmb2N1c1NwYW4gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1vZGU6IFwibG93ZXN0XCIsXG4gICAgICAgICAgICBhdDogb3AucHJvcGVydGllcy5mb2N1cyxcbiAgICAgICAgICAgIG1hdGNoOiAobikgPT4gZWRpdG9yLmlzVGV4dFNwYW4obiksXG4gICAgICAgICAgICB2b2lkczogITFcbiAgICAgICAgICB9KSlbMF0/LlswXSwgbmV3Rm9jdXNTcGFuID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtb2RlOiBcImxvd2VzdFwiLFxuICAgICAgICAgICAgYXQ6IG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMsXG4gICAgICAgICAgICBtYXRjaDogKG4pID0+IGVkaXRvci5pc1RleHRTcGFuKG4pLFxuICAgICAgICAgICAgdm9pZHM6ICExXG4gICAgICAgICAgfSkpWzBdPy5bMF0sIG1vdmVkVG9OZXh0U3BhbiA9IGZvY3VzU3BhbiAmJiBuZXdGb2N1c1NwYW4gJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cy5wYXRoWzBdID09PSBvcC5wcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMF0gJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cy5wYXRoWzFdID09PSBvcC5wcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMV0gKyAxICYmIGZvY3VzU3Bhbi50ZXh0Lmxlbmd0aCA9PT0gb3AucHJvcGVydGllcy5mb2N1cy5vZmZzZXQgJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cy5vZmZzZXQgPT09IDAsIG1vdmVkVG9QcmV2aW91c1NwYW4gPSBmb2N1c1NwYW4gJiYgbmV3Rm9jdXNTcGFuICYmIG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMucGF0aFswXSA9PT0gb3AucHJvcGVydGllcy5mb2N1cy5wYXRoWzBdICYmIG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMucGF0aFsxXSA9PT0gb3AucHJvcGVydGllcy5mb2N1cy5wYXRoWzFdIC0gMSAmJiBvcC5wcm9wZXJ0aWVzLmZvY3VzLm9mZnNldCA9PT0gMCAmJiBuZXdGb2N1c1NwYW4udGV4dC5sZW5ndGggPT09IG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMub2Zmc2V0O1xuICAgICAgICAgICFtb3ZlZFRvTmV4dFNwYW4gJiYgIW1vdmVkVG9QcmV2aW91c1NwYW4gJiYgKGVkaXRvci5kZWNvcmF0b3JTdGF0ZSA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wLnR5cGUgPT09IFwiaW5zZXJ0X25vZGVcIikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgc2VsZWN0aW9uXG4gICAgICAgIH0gPSBlZGl0b3I7XG4gICAgICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICBjb25zdCBbX2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBzZWxlY3Rpb24sIHtcbiAgICAgICAgICAgIGRlcHRoOiAxXG4gICAgICAgICAgfSksIHByZXZpb3VzU3BhbiA9IGdldFByZXZpb3VzU3Bhbih7XG4gICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICBzcGFuUGF0aDogb3AucGF0aFxuICAgICAgICAgIH0pLCBwcmV2aW91c1NwYW5Bbm5vdGF0aW9ucyA9IHByZXZpb3VzU3BhbiA/IHByZXZpb3VzU3Bhbi5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSkgOiBbXSwgbmV4dFNwYW4gPSBnZXROZXh0U3Bhbih7XG4gICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICBzcGFuUGF0aDogW29wLnBhdGhbMF0sIG9wLnBhdGhbMV0gLSAxXVxuICAgICAgICAgIH0pLCBuZXh0U3BhbkFubm90YXRpb25zID0gbmV4dFNwYW4gPyBuZXh0U3Bhbi5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSkgOiBbXSwgYW5ub3RhdGlvbnNFbmRpbmcgPSBwcmV2aW91c1NwYW5Bbm5vdGF0aW9ucz8uZmlsdGVyKChhbm5vdGF0aW9uKSA9PiAhbmV4dFNwYW5Bbm5vdGF0aW9ucz8uaW5jbHVkZXMoYW5ub3RhdGlvbikpID8/IFtdLCBhdFRoZUVuZE9mQW5ub3RhdGlvbiA9IGFubm90YXRpb25zRW5kaW5nLmxlbmd0aCA+IDA7XG4gICAgICAgICAgaWYgKGF0VGhlRW5kT2ZBbm5vdGF0aW9uICYmIGlzU3BhbihlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQsIG9wLm5vZGUpICYmIG9wLm5vZGUubWFya3M/LnNvbWUoKG1hcmspID0+IGFubm90YXRpb25zRW5kaW5nLmluY2x1ZGVzKG1hcmspKSkge1xuICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgLi4ub3Aubm9kZSxcbiAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICBtYXJrczogb3Aubm9kZS5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhYW5ub3RhdGlvbnNFbmRpbmcuaW5jbHVkZXMobWFyaykpID8/IFtdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYW5ub3RhdGlvbnNTdGFydGluZyA9IG5leHRTcGFuQW5ub3RhdGlvbnM/LmZpbHRlcigoYW5ub3RhdGlvbikgPT4gIXByZXZpb3VzU3BhbkFubm90YXRpb25zPy5pbmNsdWRlcyhhbm5vdGF0aW9uKSkgPz8gW10sIGF0VGhlU3RhcnRPZkFubm90YXRpb24gPSBhbm5vdGF0aW9uc1N0YXJ0aW5nLmxlbmd0aCA+IDA7XG4gICAgICAgICAgaWYgKGF0VGhlU3RhcnRPZkFubm90YXRpb24gJiYgaXNTcGFuKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dCwgb3Aubm9kZSkgJiYgb3Aubm9kZS5tYXJrcz8uc29tZSgobWFyaykgPT4gYW5ub3RhdGlvbnNTdGFydGluZy5pbmNsdWRlcyhtYXJrKSkpIHtcbiAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIC4uLm9wLm5vZGUsXG4gICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICAgICAgbWFya3M6IG9wLm5vZGUubWFya3M/LmZpbHRlcigobWFyaykgPT4gIWFubm90YXRpb25zU3RhcnRpbmcuaW5jbHVkZXMobWFyaykpID8/IFtdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbmV4dFNwYW5EZWNvcmF0b3JzID0gbmV4dFNwYW4/Lm1hcmtzPy5maWx0ZXIoKG1hcmspID0+IGRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpID8/IFtdO1xuICAgICAgICAgIGlmIChuZXh0U3BhbkRlY29yYXRvcnMubGVuZ3RoID4gMCAmJiBhdFRoZUVuZE9mQW5ub3RhdGlvbiAmJiAhYXRUaGVTdGFydE9mQW5ub3RhdGlvbiAmJiBpc1NwYW4oZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LCBvcC5ub2RlKSAmJiBvcC5ub2RlLm1hcmtzPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIC4uLm9wLm5vZGUsXG4gICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICAgICAgbWFya3M6IG5leHRTcGFuRGVjb3JhdG9yc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJpbnNlcnRfdGV4dFwiKSB7XG4gICAgICAgIGNvbnN0IHNuYXBzaG90ID0gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICAgICAgICAgIGVkaXRvckFjdG9yU25hcHNob3Q6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCksXG4gICAgICAgICAgc2xhdGVFZGl0b3JJbnN0YW5jZTogZWRpdG9yXG4gICAgICAgIH0pLCBtYXJrU3RhdGUgPSBnZXRNYXJrU3RhdGUoc25hcHNob3QpO1xuICAgICAgICBpZiAoIW1hcmtTdGF0ZSkge1xuICAgICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXJrU3RhdGUuc3RhdGUgPT09IFwidW5jaGFuZ2VkXCIpIHtcbiAgICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgdGV4dDogb3AudGV4dCxcbiAgICAgICAgICBtYXJrczogbWFya1N0YXRlLm1hcmtzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJyZW1vdmVfdGV4dFwiKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBzZWxlY3Rpb25cbiAgICAgICAgfSA9IGVkaXRvcjtcbiAgICAgICAgaWYgKHNlbGVjdGlvbiAmJiBSYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNlbGVjdGlvbiwge1xuICAgICAgICAgICAgZGVwdGg6IDFcbiAgICAgICAgICB9KSwgW3NwYW4sIHNwYW5QYXRoXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbW9kZTogXCJsb3dlc3RcIixcbiAgICAgICAgICAgIGF0OiB7XG4gICAgICAgICAgICAgIHBhdGg6IG9wLnBhdGgsXG4gICAgICAgICAgICAgIG9mZnNldDogb3Aub2Zmc2V0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF0Y2g6IChuKSA9PiBlZGl0b3IuaXNUZXh0U3BhbihuKSxcbiAgICAgICAgICAgIHZvaWRzOiAhMVxuICAgICAgICAgIH0pKVswXSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICAgICAgICAgIGlmIChzcGFuICYmIGJsb2NrICYmIGlzVGV4dEJsb2NrKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dCwgYmxvY2spKSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrRGVmcyA9IGJsb2NrLm1hcmtEZWZzID8/IFtdLCBtYXJrcyA9IHNwYW4ubWFya3MgPz8gW10sIHNwYW5IYXNBbm5vdGF0aW9ucyA9IG1hcmtzLnNvbWUoKG1hcmspID0+IG1hcmtEZWZzLmZpbmQoKG1hcmtEZWYpID0+IG1hcmtEZWYuX2tleSA9PT0gbWFyaykpLCBkZWxldGluZ0Zyb21UaGVFbmQgPSBvcC5vZmZzZXQgKyBvcC50ZXh0Lmxlbmd0aCA9PT0gc3Bhbi50ZXh0Lmxlbmd0aCwgZGVsZXRpbmdBbGxUZXh0ID0gb3Aub2Zmc2V0ID09PSAwICYmIGRlbGV0aW5nRnJvbVRoZUVuZCwgcHJldmlvdXNTcGFuID0gZ2V0UHJldmlvdXNTcGFuKHtcbiAgICAgICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICAgIHNwYW5QYXRoXG4gICAgICAgICAgICB9KSwgbmV4dFNwYW4gPSBnZXROZXh0U3Bhbih7XG4gICAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgICAgYmxvY2tQYXRoLFxuICAgICAgICAgICAgICBzcGFuUGF0aFxuICAgICAgICAgICAgfSksIHByZXZpb3VzU3Bhbkhhc1NhbWVBbm5vdGF0aW9uID0gcHJldmlvdXNTcGFuID8gcHJldmlvdXNTcGFuLm1hcmtzPy5zb21lKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSAmJiBtYXJrcy5pbmNsdWRlcyhtYXJrKSkgOiAhMSwgbmV4dFNwYW5IYXNTYW1lQW5ub3RhdGlvbiA9IG5leHRTcGFuID8gbmV4dFNwYW4ubWFya3M/LnNvbWUoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspICYmIG1hcmtzLmluY2x1ZGVzKG1hcmspKSA6ICExO1xuICAgICAgICAgICAgaWYgKHNwYW5IYXNBbm5vdGF0aW9ucyAmJiBkZWxldGluZ0FsbFRleHQgJiYgIXByZXZpb3VzU3Bhbkhhc1NhbWVBbm5vdGF0aW9uICYmICFuZXh0U3Bhbkhhc1NhbWVBbm5vdGF0aW9uKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICAgICAgICAgICAgICAgIGVkaXRvckFjdG9yU25hcHNob3Q6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCksXG4gICAgICAgICAgICAgICAgc2xhdGVFZGl0b3JJbnN0YW5jZTogZWRpdG9yXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFwcGx5MihvcCksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgICBtYXJrczogZ2V0QWN0aXZlRGVjb3JhdG9ycyhzbmFwc2hvdClcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICBhdDogb3AucGF0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcC50eXBlID09PSBcIm1lcmdlX25vZGVcIiAmJiBvcC5wYXRoLmxlbmd0aCA9PT0gMSAmJiBcIm1hcmtEZWZzXCIgaW4gb3AucHJvcGVydGllcyAmJiBvcC5wcm9wZXJ0aWVzLl90eXBlID09PSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUgJiYgQXJyYXkuaXNBcnJheShvcC5wcm9wZXJ0aWVzLm1hcmtEZWZzKSAmJiBvcC5wcm9wZXJ0aWVzLm1hcmtEZWZzLmxlbmd0aCA+IDAgJiYgb3AucGF0aFswXSAtIDEgPj0gMCkge1xuICAgICAgICBjb25zdCBbdGFyZ2V0QmxvY2ssIHRhcmdldFBhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBbb3AucGF0aFswXSAtIDFdKTtcbiAgICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayh0YXJnZXRCbG9jaykpIHtcbiAgICAgICAgICBjb25zdCBvbGREZWZzID0gQXJyYXkuaXNBcnJheSh0YXJnZXRCbG9jay5tYXJrRGVmcykgJiYgdGFyZ2V0QmxvY2subWFya0RlZnMgfHwgW10sIG5ld01hcmtEZWZzID0gdW5pcShbLi4ub2xkRGVmcywgLi4ub3AucHJvcGVydGllcy5tYXJrRGVmc10pO1xuICAgICAgICAgIGRlYnVnJGUoXCJDb3B5aW5nIG1hcmtEZWZzIG92ZXIgdG8gbWVyZ2VkIGJsb2NrXCIsIG9wKSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hcmtEZWZzOiBuZXdNYXJrRGVmc1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiB0YXJnZXRQYXRoLFxuICAgICAgICAgICAgdm9pZHM6ICExXG4gICAgICAgICAgfSksIGFwcGx5MihvcCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBseTIob3ApO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IHJlbW92ZURlY29yYXRvck9wZXJhdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgb3BlcmF0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IG9wZXJhdGlvbi5lZGl0b3IsIG1hcmsgPSBvcGVyYXRpb24uZGVjb3JhdG9yLCB7XG4gICAgc2VsZWN0aW9uXG4gIH0gPSBlZGl0b3I7XG4gIGlmIChzZWxlY3Rpb24pIHtcbiAgICBpZiAoUmFuZ2UuaXNFeHBhbmRlZChzZWxlY3Rpb24pKVxuICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHt9LCB7XG4gICAgICAgIG1hdGNoOiBUZXh0LmlzVGV4dCxcbiAgICAgICAgc3BsaXQ6ICEwLFxuICAgICAgICBoYW5naW5nOiAhMFxuICAgICAgfSksIGVkaXRvci5zZWxlY3Rpb24gJiYgWy4uLkVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgICAgIG1hdGNoOiBUZXh0LmlzVGV4dFxuICAgICAgfSldLmZvckVhY2goKFtub2RlLCBwYXRoXSkgPT4ge1xuICAgICAgICBjb25zdCBibG9jayA9IGVkaXRvci5jaGlsZHJlbltwYXRoWzBdXTtcbiAgICAgICAgRWxlbWVudCQxLmlzRWxlbWVudChibG9jaykgJiYgYmxvY2suY2hpbGRyZW4uaW5jbHVkZXMobm9kZSkgJiYgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogKEFycmF5LmlzQXJyYXkobm9kZS5tYXJrcykgPyBub2RlLm1hcmtzIDogW10pLmZpbHRlcigoZU1hcmspID0+IGVNYXJrICE9PSBtYXJrKSxcbiAgICAgICAgICBfdHlwZTogXCJzcGFuXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNlbGVjdGlvbiwge1xuICAgICAgICBkZXB0aDogMVxuICAgICAgfSksIGxvbmVseUVtcHR5U3BhbiA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGVkaXRvci5pc1RleHRTcGFuKGJsb2NrLmNoaWxkcmVuWzBdKSAmJiBibG9jay5jaGlsZHJlblswXS50ZXh0ID09PSBcIlwiID8gYmxvY2suY2hpbGRyZW5bMF0gOiB2b2lkIDA7XG4gICAgICBpZiAobG9uZWx5RW1wdHlTcGFuKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yID0gKGxvbmVseUVtcHR5U3Bhbi5tYXJrcyA/PyBbXSkuZmlsdGVyKChleGlzdGluZ01hcmspID0+IGV4aXN0aW5nTWFyayAhPT0gbWFyayk7XG4gICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya3M6IGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogYmxvY2tQYXRoLFxuICAgICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dFNwYW4obm9kZSlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgZWRpdG9yLmRlY29yYXRvclN0YXRlW21hcmtdID0gITE7XG4gICAgfVxuICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICBjb25zdCBzZWxlY3Rpb24yID0gZWRpdG9yLnNlbGVjdGlvbjtcbiAgICAgIGVkaXRvci5zZWxlY3Rpb24gPSB7XG4gICAgICAgIC4uLnNlbGVjdGlvbjJcbiAgICAgIH07XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gY2xvbmVEaWZmKGRpZmYyKSB7XG4gIGNvbnN0IFt0eXBlLCBwYXRjaF0gPSBkaWZmMjtcbiAgcmV0dXJuIFt0eXBlLCBwYXRjaF07XG59XG5mdW5jdGlvbiBnZXRDb21tb25PdmVybGFwKHRleHRBLCB0ZXh0Qikge1xuICBsZXQgdGV4dDEgPSB0ZXh0QSwgdGV4dDIgPSB0ZXh0QjtcbiAgY29uc3QgdGV4dDFMZW5ndGggPSB0ZXh0MS5sZW5ndGgsIHRleHQyTGVuZ3RoID0gdGV4dDIubGVuZ3RoO1xuICBpZiAodGV4dDFMZW5ndGggPT09IDAgfHwgdGV4dDJMZW5ndGggPT09IDApIHJldHVybiAwO1xuICB0ZXh0MUxlbmd0aCA+IHRleHQyTGVuZ3RoID8gdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcodGV4dDFMZW5ndGggLSB0ZXh0Mkxlbmd0aCkgOiB0ZXh0MUxlbmd0aCA8IHRleHQyTGVuZ3RoICYmICh0ZXh0MiA9IHRleHQyLnN1YnN0cmluZygwLCB0ZXh0MUxlbmd0aCkpO1xuICBjb25zdCB0ZXh0TGVuZ3RoID0gTWF0aC5taW4odGV4dDFMZW5ndGgsIHRleHQyTGVuZ3RoKTtcbiAgaWYgKHRleHQxID09PSB0ZXh0MikgcmV0dXJuIHRleHRMZW5ndGg7XG4gIGxldCBiZXN0ID0gMCwgbGVuZ3RoID0gMTtcbiAgZm9yIChsZXQgZm91bmQgPSAwOyBmb3VuZCAhPT0gLTE7ICkge1xuICAgIGNvbnN0IHBhdHRlcm4gPSB0ZXh0MS5zdWJzdHJpbmcodGV4dExlbmd0aCAtIGxlbmd0aCk7XG4gICAgaWYgKGZvdW5kID0gdGV4dDIuaW5kZXhPZihwYXR0ZXJuKSwgZm91bmQgPT09IC0xKSByZXR1cm4gYmVzdDtcbiAgICBsZW5ndGggKz0gZm91bmQsIChmb3VuZCA9PT0gMCB8fCB0ZXh0MS5zdWJzdHJpbmcodGV4dExlbmd0aCAtIGxlbmd0aCkgPT09IHRleHQyLnN1YnN0cmluZygwLCBsZW5ndGgpKSAmJiAoYmVzdCA9IGxlbmd0aCwgbGVuZ3RoKyspO1xuICB9XG4gIHJldHVybiBiZXN0O1xufVxuZnVuY3Rpb24gZ2V0Q29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mikge1xuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fCB0ZXh0MVswXSAhPT0gdGV4dDJbMF0pIHJldHVybiAwO1xuICBsZXQgcG9pbnRlck1pbiA9IDAsIHBvaW50ZXJNYXggPSBNYXRoLm1pbih0ZXh0MS5sZW5ndGgsIHRleHQyLmxlbmd0aCksIHBvaW50ZXJNaWQgPSBwb2ludGVyTWF4LCBwb2ludGVyU3RhcnQgPSAwO1xuICBmb3IgKDsgcG9pbnRlck1pbiA8IHBvaW50ZXJNaWQ7ICkgdGV4dDEuc3Vic3RyaW5nKHBvaW50ZXJTdGFydCwgcG9pbnRlck1pZCkgPT09IHRleHQyLnN1YnN0cmluZyhwb2ludGVyU3RhcnQsIHBvaW50ZXJNaWQpID8gKHBvaW50ZXJNaW4gPSBwb2ludGVyTWlkLCBwb2ludGVyU3RhcnQgPSBwb2ludGVyTWluKSA6IHBvaW50ZXJNYXggPSBwb2ludGVyTWlkLCBwb2ludGVyTWlkID0gTWF0aC5mbG9vcigocG9pbnRlck1heCAtIHBvaW50ZXJNaW4pIC8gMiArIHBvaW50ZXJNaW4pO1xuICByZXR1cm4gcG9pbnRlck1pZDtcbn1cbmZ1bmN0aW9uIGdldENvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpIHtcbiAgaWYgKCF0ZXh0MSB8fCAhdGV4dDIgfHwgdGV4dDFbdGV4dDEubGVuZ3RoIC0gMV0gIT09IHRleHQyW3RleHQyLmxlbmd0aCAtIDFdKSByZXR1cm4gMDtcbiAgbGV0IHBvaW50ZXJNaW4gPSAwLCBwb2ludGVyTWF4ID0gTWF0aC5taW4odGV4dDEubGVuZ3RoLCB0ZXh0Mi5sZW5ndGgpLCBwb2ludGVyTWlkID0gcG9pbnRlck1heCwgcG9pbnRlckVuZCA9IDA7XG4gIGZvciAoOyBwb2ludGVyTWluIDwgcG9pbnRlck1pZDsgKSB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gcG9pbnRlck1pZCwgdGV4dDEubGVuZ3RoIC0gcG9pbnRlckVuZCkgPT09IHRleHQyLnN1YnN0cmluZyh0ZXh0Mi5sZW5ndGggLSBwb2ludGVyTWlkLCB0ZXh0Mi5sZW5ndGggLSBwb2ludGVyRW5kKSA/IChwb2ludGVyTWluID0gcG9pbnRlck1pZCwgcG9pbnRlckVuZCA9IHBvaW50ZXJNaW4pIDogcG9pbnRlck1heCA9IHBvaW50ZXJNaWQsIHBvaW50ZXJNaWQgPSBNYXRoLmZsb29yKChwb2ludGVyTWF4IC0gcG9pbnRlck1pbikgLyAyICsgcG9pbnRlck1pbik7XG4gIHJldHVybiBwb2ludGVyTWlkO1xufVxuZnVuY3Rpb24gaXNIaWdoU3Vycm9nYXRlKGNoYXIpIHtcbiAgY29uc3QgY2hhckNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjaGFyQ29kZSA+PSA1NTI5NiAmJiBjaGFyQ29kZSA8PSA1NjMxOTtcbn1cbmZ1bmN0aW9uIGlzTG93U3Vycm9nYXRlKGNoYXIpIHtcbiAgY29uc3QgY2hhckNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjaGFyQ29kZSA+PSA1NjMyMCAmJiBjaGFyQ29kZSA8PSA1NzM0Mztcbn1cbmZ1bmN0aW9uIGJpc2VjdCh0ZXh0MSwgdGV4dDIsIGRlYWRsaW5lKSB7XG4gIGNvbnN0IHRleHQxTGVuZ3RoID0gdGV4dDEubGVuZ3RoLCB0ZXh0Mkxlbmd0aCA9IHRleHQyLmxlbmd0aCwgbWF4RCA9IE1hdGguY2VpbCgodGV4dDFMZW5ndGggKyB0ZXh0Mkxlbmd0aCkgLyAyKSwgdk9mZnNldCA9IG1heEQsIHZMZW5ndGggPSAyICogbWF4RCwgdjEgPSBuZXcgQXJyYXkodkxlbmd0aCksIHYyID0gbmV3IEFycmF5KHZMZW5ndGgpO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IHZMZW5ndGg7IHgrKykgdjFbeF0gPSAtMSwgdjJbeF0gPSAtMTtcbiAgdjFbdk9mZnNldCArIDFdID0gMCwgdjJbdk9mZnNldCArIDFdID0gMDtcbiAgY29uc3QgZGVsdGEgPSB0ZXh0MUxlbmd0aCAtIHRleHQyTGVuZ3RoLCBmcm9udCA9IGRlbHRhICUgMiAhPT0gMDtcbiAgbGV0IGsxc3RhcnQgPSAwLCBrMWVuZCA9IDAsIGsyc3RhcnQgPSAwLCBrMmVuZCA9IDA7XG4gIGZvciAobGV0IGQgPSAwOyBkIDwgbWF4RCAmJiAhKERhdGUubm93KCkgPiBkZWFkbGluZSk7IGQrKykge1xuICAgIGZvciAobGV0IGsxID0gLWQgKyBrMXN0YXJ0OyBrMSA8PSBkIC0gazFlbmQ7IGsxICs9IDIpIHtcbiAgICAgIGNvbnN0IGsxT2Zmc2V0ID0gdk9mZnNldCArIGsxO1xuICAgICAgbGV0IHgxO1xuICAgICAgazEgPT09IC1kIHx8IGsxICE9PSBkICYmIHYxW2sxT2Zmc2V0IC0gMV0gPCB2MVtrMU9mZnNldCArIDFdID8geDEgPSB2MVtrMU9mZnNldCArIDFdIDogeDEgPSB2MVtrMU9mZnNldCAtIDFdICsgMTtcbiAgICAgIGxldCB5MSA9IHgxIC0gazE7XG4gICAgICBmb3IgKDsgeDEgPCB0ZXh0MUxlbmd0aCAmJiB5MSA8IHRleHQyTGVuZ3RoICYmIHRleHQxLmNoYXJBdCh4MSkgPT09IHRleHQyLmNoYXJBdCh5MSk7ICkgeDErKywgeTErKztcbiAgICAgIGlmICh2MVtrMU9mZnNldF0gPSB4MSwgeDEgPiB0ZXh0MUxlbmd0aCkgazFlbmQgKz0gMjtcbiAgICAgIGVsc2UgaWYgKHkxID4gdGV4dDJMZW5ndGgpIGsxc3RhcnQgKz0gMjtcbiAgICAgIGVsc2UgaWYgKGZyb250KSB7XG4gICAgICAgIGNvbnN0IGsyT2Zmc2V0ID0gdk9mZnNldCArIGRlbHRhIC0gazE7XG4gICAgICAgIGlmIChrMk9mZnNldCA+PSAwICYmIGsyT2Zmc2V0IDwgdkxlbmd0aCAmJiB2MltrMk9mZnNldF0gIT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgeDIgPSB0ZXh0MUxlbmd0aCAtIHYyW2syT2Zmc2V0XTtcbiAgICAgICAgICBpZiAoeDEgPj0geDIpIHJldHVybiBiaXNlY3RTcGxpdCh0ZXh0MSwgdGV4dDIsIHgxLCB5MSwgZGVhZGxpbmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGsyID0gLWQgKyBrMnN0YXJ0OyBrMiA8PSBkIC0gazJlbmQ7IGsyICs9IDIpIHtcbiAgICAgIGNvbnN0IGsyT2Zmc2V0ID0gdk9mZnNldCArIGsyO1xuICAgICAgbGV0IHgyO1xuICAgICAgazIgPT09IC1kIHx8IGsyICE9PSBkICYmIHYyW2syT2Zmc2V0IC0gMV0gPCB2MltrMk9mZnNldCArIDFdID8geDIgPSB2MltrMk9mZnNldCArIDFdIDogeDIgPSB2MltrMk9mZnNldCAtIDFdICsgMTtcbiAgICAgIGxldCB5MiA9IHgyIC0gazI7XG4gICAgICBmb3IgKDsgeDIgPCB0ZXh0MUxlbmd0aCAmJiB5MiA8IHRleHQyTGVuZ3RoICYmIHRleHQxLmNoYXJBdCh0ZXh0MUxlbmd0aCAtIHgyIC0gMSkgPT09IHRleHQyLmNoYXJBdCh0ZXh0Mkxlbmd0aCAtIHkyIC0gMSk7ICkgeDIrKywgeTIrKztcbiAgICAgIGlmICh2MltrMk9mZnNldF0gPSB4MiwgeDIgPiB0ZXh0MUxlbmd0aCkgazJlbmQgKz0gMjtcbiAgICAgIGVsc2UgaWYgKHkyID4gdGV4dDJMZW5ndGgpIGsyc3RhcnQgKz0gMjtcbiAgICAgIGVsc2UgaWYgKCFmcm9udCkge1xuICAgICAgICBjb25zdCBrMU9mZnNldCA9IHZPZmZzZXQgKyBkZWx0YSAtIGsyO1xuICAgICAgICBpZiAoazFPZmZzZXQgPj0gMCAmJiBrMU9mZnNldCA8IHZMZW5ndGggJiYgdjFbazFPZmZzZXRdICE9PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHgxID0gdjFbazFPZmZzZXRdLCB5MSA9IHZPZmZzZXQgKyB4MSAtIGsxT2Zmc2V0O1xuICAgICAgICAgIGlmICh4MiA9IHRleHQxTGVuZ3RoIC0geDIsIHgxID49IHgyKSByZXR1cm4gYmlzZWN0U3BsaXQodGV4dDEsIHRleHQyLCB4MSwgeTEsIGRlYWRsaW5lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW1tESUZGX0RFTEVURSwgdGV4dDFdLCBbRElGRl9JTlNFUlQsIHRleHQyXV07XG59XG5mdW5jdGlvbiBiaXNlY3RTcGxpdCh0ZXh0MSwgdGV4dDIsIHgsIHksIGRlYWRsaW5lKSB7XG4gIGNvbnN0IHRleHQxYSA9IHRleHQxLnN1YnN0cmluZygwLCB4KSwgdGV4dDJhID0gdGV4dDIuc3Vic3RyaW5nKDAsIHkpLCB0ZXh0MWIgPSB0ZXh0MS5zdWJzdHJpbmcoeCksIHRleHQyYiA9IHRleHQyLnN1YnN0cmluZyh5KSwgZGlmZnMgPSBkb0RpZmYodGV4dDFhLCB0ZXh0MmEsIHtcbiAgICBjaGVja0xpbmVzOiAhMSxcbiAgICBkZWFkbGluZVxuICB9KSwgZGlmZnNiID0gZG9EaWZmKHRleHQxYiwgdGV4dDJiLCB7XG4gICAgY2hlY2tMaW5lczogITEsXG4gICAgZGVhZGxpbmVcbiAgfSk7XG4gIHJldHVybiBkaWZmcy5jb25jYXQoZGlmZnNiKTtcbn1cbmZ1bmN0aW9uIGZpbmRIYWxmTWF0Y2godGV4dDEsIHRleHQyLCB0aW1lb3V0ID0gMSkge1xuICBpZiAodGltZW91dCA8PSAwKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgbG9uZ1RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyLCBzaG9ydFRleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MiA6IHRleHQxO1xuICBpZiAobG9uZ1RleHQubGVuZ3RoIDwgNCB8fCBzaG9ydFRleHQubGVuZ3RoICogMiA8IGxvbmdUZXh0Lmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGhhbGZNYXRjaDEgPSBoYWxmTWF0Y2hJKGxvbmdUZXh0LCBzaG9ydFRleHQsIE1hdGguY2VpbChsb25nVGV4dC5sZW5ndGggLyA0KSksIGhhbGZNYXRjaDIgPSBoYWxmTWF0Y2hJKGxvbmdUZXh0LCBzaG9ydFRleHQsIE1hdGguY2VpbChsb25nVGV4dC5sZW5ndGggLyAyKSk7XG4gIGxldCBoYWxmTWF0Y2g7XG4gIGlmIChoYWxmTWF0Y2gxICYmIGhhbGZNYXRjaDIpIGhhbGZNYXRjaCA9IGhhbGZNYXRjaDFbNF0ubGVuZ3RoID4gaGFsZk1hdGNoMls0XS5sZW5ndGggPyBoYWxmTWF0Y2gxIDogaGFsZk1hdGNoMjtcbiAgZWxzZSB7XG4gICAgaWYgKCFoYWxmTWF0Y2gxICYmICFoYWxmTWF0Y2gyKSByZXR1cm4gbnVsbDtcbiAgICBoYWxmTWF0Y2gyID8gaGFsZk1hdGNoMSB8fCAoaGFsZk1hdGNoID0gaGFsZk1hdGNoMikgOiBoYWxmTWF0Y2ggPSBoYWxmTWF0Y2gxO1xuICB9XG4gIGlmICghaGFsZk1hdGNoKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBhIGhhbGYgbWF0Y2guXCIpO1xuICBsZXQgdGV4dDFBLCB0ZXh0MUIsIHRleHQyQSwgdGV4dDJCO1xuICB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyAodGV4dDFBID0gaGFsZk1hdGNoWzBdLCB0ZXh0MUIgPSBoYWxmTWF0Y2hbMV0sIHRleHQyQSA9IGhhbGZNYXRjaFsyXSwgdGV4dDJCID0gaGFsZk1hdGNoWzNdKSA6ICh0ZXh0MkEgPSBoYWxmTWF0Y2hbMF0sIHRleHQyQiA9IGhhbGZNYXRjaFsxXSwgdGV4dDFBID0gaGFsZk1hdGNoWzJdLCB0ZXh0MUIgPSBoYWxmTWF0Y2hbM10pO1xuICBjb25zdCBtaWRDb21tb24gPSBoYWxmTWF0Y2hbNF07XG4gIHJldHVybiBbdGV4dDFBLCB0ZXh0MUIsIHRleHQyQSwgdGV4dDJCLCBtaWRDb21tb25dO1xufVxuZnVuY3Rpb24gaGFsZk1hdGNoSShsb25nVGV4dCwgc2hvcnRUZXh0LCBpKSB7XG4gIGNvbnN0IHNlZWQgPSBsb25nVGV4dC5zbGljZShpLCBpICsgTWF0aC5mbG9vcihsb25nVGV4dC5sZW5ndGggLyA0KSk7XG4gIGxldCBqID0gLTEsIGJlc3RDb21tb24gPSBcIlwiLCBiZXN0TG9uZ1RleHRBLCBiZXN0TG9uZ1RleHRCLCBiZXN0U2hvcnRUZXh0QSwgYmVzdFNob3J0VGV4dEI7XG4gIGZvciAoOyAoaiA9IHNob3J0VGV4dC5pbmRleE9mKHNlZWQsIGogKyAxKSkgIT09IC0xOyApIHtcbiAgICBjb25zdCBwcmVmaXhMZW5ndGggPSBnZXRDb21tb25QcmVmaXgobG9uZ1RleHQuc2xpY2UoaSksIHNob3J0VGV4dC5zbGljZShqKSksIHN1ZmZpeExlbmd0aCA9IGdldENvbW1vblN1ZmZpeChsb25nVGV4dC5zbGljZSgwLCBpKSwgc2hvcnRUZXh0LnNsaWNlKDAsIGopKTtcbiAgICBiZXN0Q29tbW9uLmxlbmd0aCA8IHN1ZmZpeExlbmd0aCArIHByZWZpeExlbmd0aCAmJiAoYmVzdENvbW1vbiA9IHNob3J0VGV4dC5zbGljZShqIC0gc3VmZml4TGVuZ3RoLCBqKSArIHNob3J0VGV4dC5zbGljZShqLCBqICsgcHJlZml4TGVuZ3RoKSwgYmVzdExvbmdUZXh0QSA9IGxvbmdUZXh0LnNsaWNlKDAsIGkgLSBzdWZmaXhMZW5ndGgpLCBiZXN0TG9uZ1RleHRCID0gbG9uZ1RleHQuc2xpY2UoaSArIHByZWZpeExlbmd0aCksIGJlc3RTaG9ydFRleHRBID0gc2hvcnRUZXh0LnNsaWNlKDAsIGogLSBzdWZmaXhMZW5ndGgpLCBiZXN0U2hvcnRUZXh0QiA9IHNob3J0VGV4dC5zbGljZShqICsgcHJlZml4TGVuZ3RoKSk7XG4gIH1cbiAgcmV0dXJuIGJlc3RDb21tb24ubGVuZ3RoICogMiA+PSBsb25nVGV4dC5sZW5ndGggPyBbYmVzdExvbmdUZXh0QSB8fCBcIlwiLCBiZXN0TG9uZ1RleHRCIHx8IFwiXCIsIGJlc3RTaG9ydFRleHRBIHx8IFwiXCIsIGJlc3RTaG9ydFRleHRCIHx8IFwiXCIsIGJlc3RDb21tb24gfHwgXCJcIl0gOiBudWxsO1xufVxuZnVuY3Rpb24gY2hhcnNUb0xpbmVzKGRpZmZzLCBsaW5lQXJyYXkpIHtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBkaWZmcy5sZW5ndGg7IHgrKykge1xuICAgIGNvbnN0IGNoYXJzID0gZGlmZnNbeF1bMV0sIHRleHQgPSBbXTtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNoYXJzLmxlbmd0aDsgeSsrKSB0ZXh0W3ldID0gbGluZUFycmF5W2NoYXJzLmNoYXJDb2RlQXQoeSldO1xuICAgIGRpZmZzW3hdWzFdID0gdGV4dC5qb2luKFwiXCIpO1xuICB9XG59XG5mdW5jdGlvbiBsaW5lc1RvQ2hhcnModGV4dEEsIHRleHRCKSB7XG4gIGNvbnN0IGxpbmVBcnJheSA9IFtdLCBsaW5lSGFzaCA9IHt9O1xuICBsaW5lQXJyYXlbMF0gPSBcIlwiO1xuICBmdW5jdGlvbiBkaWZmTGluZXNUb011bmdlKHRleHQpIHtcbiAgICBsZXQgY2hhcnMgPSBcIlwiLCBsaW5lU3RhcnQgPSAwLCBsaW5lRW5kID0gLTEsIGxpbmVBcnJheUxlbmd0aCA9IGxpbmVBcnJheS5sZW5ndGg7XG4gICAgZm9yICg7IGxpbmVFbmQgPCB0ZXh0Lmxlbmd0aCAtIDE7ICkge1xuICAgICAgbGluZUVuZCA9IHRleHQuaW5kZXhPZihgXG5gLCBsaW5lU3RhcnQpLCBsaW5lRW5kID09PSAtMSAmJiAobGluZUVuZCA9IHRleHQubGVuZ3RoIC0gMSk7XG4gICAgICBsZXQgbGluZSA9IHRleHQuc2xpY2UobGluZVN0YXJ0LCBsaW5lRW5kICsgMSk7XG4gICAgICAobGluZUhhc2guaGFzT3duUHJvcGVydHkgPyBsaW5lSGFzaC5oYXNPd25Qcm9wZXJ0eShsaW5lKSA6IGxpbmVIYXNoW2xpbmVdICE9PSB2b2lkIDApID8gY2hhcnMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsaW5lSGFzaFtsaW5lXSkgOiAobGluZUFycmF5TGVuZ3RoID09PSBtYXhMaW5lcyAmJiAobGluZSA9IHRleHQuc2xpY2UobGluZVN0YXJ0KSwgbGluZUVuZCA9IHRleHQubGVuZ3RoKSwgY2hhcnMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsaW5lQXJyYXlMZW5ndGgpLCBsaW5lSGFzaFtsaW5lXSA9IGxpbmVBcnJheUxlbmd0aCwgbGluZUFycmF5W2xpbmVBcnJheUxlbmd0aCsrXSA9IGxpbmUpLCBsaW5lU3RhcnQgPSBsaW5lRW5kICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzO1xuICB9XG4gIGxldCBtYXhMaW5lcyA9IDRlNDtcbiAgY29uc3QgY2hhcnMxID0gZGlmZkxpbmVzVG9NdW5nZSh0ZXh0QSk7XG4gIG1heExpbmVzID0gNjU1MzU7XG4gIGNvbnN0IGNoYXJzMiA9IGRpZmZMaW5lc1RvTXVuZ2UodGV4dEIpO1xuICByZXR1cm4ge1xuICAgIGNoYXJzMSxcbiAgICBjaGFyczIsXG4gICAgbGluZUFycmF5XG4gIH07XG59XG5mdW5jdGlvbiBkb0xpbmVNb2RlRGlmZih0ZXh0QSwgdGV4dEIsIG9wdHMpIHtcbiAgbGV0IHRleHQxID0gdGV4dEEsIHRleHQyID0gdGV4dEI7XG4gIGNvbnN0IGEgPSBsaW5lc1RvQ2hhcnModGV4dDEsIHRleHQyKTtcbiAgdGV4dDEgPSBhLmNoYXJzMSwgdGV4dDIgPSBhLmNoYXJzMjtcbiAgY29uc3QgbGluZWFycmF5ID0gYS5saW5lQXJyYXk7XG4gIGxldCBkaWZmcyA9IGRvRGlmZih0ZXh0MSwgdGV4dDIsIHtcbiAgICBjaGVja0xpbmVzOiAhMSxcbiAgICBkZWFkbGluZTogb3B0cy5kZWFkbGluZVxuICB9KTtcbiAgY2hhcnNUb0xpbmVzKGRpZmZzLCBsaW5lYXJyYXkpLCBkaWZmcyA9IGNsZWFudXBTZW1hbnRpYyhkaWZmcyksIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIFwiXCJdKTtcbiAgbGV0IHBvaW50ZXIgPSAwLCBjb3VudERlbGV0ZSA9IDAsIGNvdW50SW5zZXJ0ID0gMCwgdGV4dERlbGV0ZSA9IFwiXCIsIHRleHRJbnNlcnQgPSBcIlwiO1xuICBmb3IgKDsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aDsgKSB7XG4gICAgc3dpdGNoIChkaWZmc1twb2ludGVyXVswXSkge1xuICAgICAgY2FzZSBESUZGX0lOU0VSVDpcbiAgICAgICAgY291bnRJbnNlcnQrKywgdGV4dEluc2VydCArPSBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgICBjb3VudERlbGV0ZSsrLCB0ZXh0RGVsZXRlICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9FUVVBTDpcbiAgICAgICAgaWYgKGNvdW50RGVsZXRlID49IDEgJiYgY291bnRJbnNlcnQgPj0gMSkge1xuICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnREZWxldGUgLSBjb3VudEluc2VydCwgY291bnREZWxldGUgKyBjb3VudEluc2VydCksIHBvaW50ZXIgPSBwb2ludGVyIC0gY291bnREZWxldGUgLSBjb3VudEluc2VydDtcbiAgICAgICAgICBjb25zdCBhYSA9IGRvRGlmZih0ZXh0RGVsZXRlLCB0ZXh0SW5zZXJ0LCB7XG4gICAgICAgICAgICBjaGVja0xpbmVzOiAhMSxcbiAgICAgICAgICAgIGRlYWRsaW5lOiBvcHRzLmRlYWRsaW5lXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IGFhLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSBkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgYWFbal0pO1xuICAgICAgICAgIHBvaW50ZXIgKz0gYWEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGNvdW50SW5zZXJ0ID0gMCwgY291bnREZWxldGUgPSAwLCB0ZXh0RGVsZXRlID0gXCJcIiwgdGV4dEluc2VydCA9IFwiXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkaWZmIG9wZXJhdGlvbi5cIik7XG4gICAgfVxuICAgIHBvaW50ZXIrKztcbiAgfVxuICByZXR1cm4gZGlmZnMucG9wKCksIGRpZmZzO1xufVxuZnVuY3Rpb24gY29tcHV0ZURpZmYodGV4dDEsIHRleHQyLCBvcHRzKSB7XG4gIGxldCBkaWZmcztcbiAgaWYgKCF0ZXh0MSkgcmV0dXJuIFtbRElGRl9JTlNFUlQsIHRleHQyXV07XG4gIGlmICghdGV4dDIpIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV1dO1xuICBjb25zdCBsb25ndGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDIsIHNob3J0dGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQyIDogdGV4dDEsIGkgPSBsb25ndGV4dC5pbmRleE9mKHNob3J0dGV4dCk7XG4gIGlmIChpICE9PSAtMSkgcmV0dXJuIGRpZmZzID0gW1tESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkpXSwgW0RJRkZfRVFVQUwsIHNob3J0dGV4dF0sIFtESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBzaG9ydHRleHQubGVuZ3RoKV1dLCB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggJiYgKGRpZmZzWzBdWzBdID0gRElGRl9ERUxFVEUsIGRpZmZzWzJdWzBdID0gRElGRl9ERUxFVEUpLCBkaWZmcztcbiAgaWYgKHNob3J0dGV4dC5sZW5ndGggPT09IDEpIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV0sIFtESUZGX0lOU0VSVCwgdGV4dDJdXTtcbiAgY29uc3QgaGFsZk1hdGNoID0gZmluZEhhbGZNYXRjaCh0ZXh0MSwgdGV4dDIpO1xuICBpZiAoaGFsZk1hdGNoKSB7XG4gICAgY29uc3QgdGV4dDFBID0gaGFsZk1hdGNoWzBdLCB0ZXh0MUIgPSBoYWxmTWF0Y2hbMV0sIHRleHQyQSA9IGhhbGZNYXRjaFsyXSwgdGV4dDJCID0gaGFsZk1hdGNoWzNdLCBtaWRDb21tb24gPSBoYWxmTWF0Y2hbNF0sIGRpZmZzQSA9IGRvRGlmZih0ZXh0MUEsIHRleHQyQSwgb3B0cyksIGRpZmZzQiA9IGRvRGlmZih0ZXh0MUIsIHRleHQyQiwgb3B0cyk7XG4gICAgcmV0dXJuIGRpZmZzQS5jb25jYXQoW1tESUZGX0VRVUFMLCBtaWRDb21tb25dXSwgZGlmZnNCKTtcbiAgfVxuICByZXR1cm4gb3B0cy5jaGVja0xpbmVzICYmIHRleHQxLmxlbmd0aCA+IDEwMCAmJiB0ZXh0Mi5sZW5ndGggPiAxMDAgPyBkb0xpbmVNb2RlRGlmZih0ZXh0MSwgdGV4dDIsIG9wdHMpIDogYmlzZWN0KHRleHQxLCB0ZXh0Miwgb3B0cy5kZWFkbGluZSk7XG59XG52YXIgX19kZWZQcm9wJDIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIF9fZ2V0T3duUHJvcFN5bWJvbHMkMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsIF9faGFzT3duUHJvcCQyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwgX19wcm9wSXNFbnVtJDIgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLCBfX2RlZk5vcm1hbFByb3AkMiA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3AkMihvYmosIGtleSwge1xuICBlbnVtZXJhYmxlOiAhMCxcbiAgY29uZmlndXJhYmxlOiAhMCxcbiAgd3JpdGFibGU6ICEwLFxuICB2YWx1ZVxufSkgOiBvYmpba2V5XSA9IHZhbHVlLCBfX3NwcmVhZFZhbHVlcyQyID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKSBfX2hhc093blByb3AkMi5jYWxsKGIsIHByb3ApICYmIF9fZGVmTm9ybWFsUHJvcCQyKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scyQyKSBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMkMihiKSkgX19wcm9wSXNFbnVtJDIuY2FsbChiLCBwcm9wKSAmJiBfX2RlZk5vcm1hbFByb3AkMihhLCBwcm9wLCBiW3Byb3BdKTtcbiAgcmV0dXJuIGE7XG59O1xuY29uc3QgRElGRl9ERUxFVEUgPSAtMSwgRElGRl9JTlNFUlQgPSAxLCBESUZGX0VRVUFMID0gMDtcbmZ1bmN0aW9uIGRpZmYodGV4dEEsIHRleHRCLCBvcHRzKSB7XG4gIGlmICh0ZXh0QSA9PT0gbnVsbCB8fCB0ZXh0QiA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiTnVsbCBpbnB1dC4gKGRpZmYpXCIpO1xuICBjb25zdCBkaWZmcyA9IGRvRGlmZih0ZXh0QSwgdGV4dEIsIGNyZWF0ZUludGVybmFsT3B0cyhvcHRzIHx8IHt9KSk7XG4gIHJldHVybiBhZGp1c3REaWZmRm9yU3Vycm9nYXRlUGFpcnMoZGlmZnMpLCBkaWZmcztcbn1cbmZ1bmN0aW9uIGRvRGlmZih0ZXh0QSwgdGV4dEIsIG9wdGlvbnMpIHtcbiAgbGV0IHRleHQxID0gdGV4dEEsIHRleHQyID0gdGV4dEI7XG4gIGlmICh0ZXh0MSA9PT0gdGV4dDIpIHJldHVybiB0ZXh0MSA/IFtbRElGRl9FUVVBTCwgdGV4dDFdXSA6IFtdO1xuICBsZXQgY29tbW9ubGVuZ3RoID0gZ2V0Q29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mik7XG4gIGNvbnN0IGNvbW1vbnByZWZpeCA9IHRleHQxLnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICB0ZXh0MSA9IHRleHQxLnN1YnN0cmluZyhjb21tb25sZW5ndGgpLCB0ZXh0MiA9IHRleHQyLnN1YnN0cmluZyhjb21tb25sZW5ndGgpLCBjb21tb25sZW5ndGggPSBnZXRDb21tb25TdWZmaXgodGV4dDEsIHRleHQyKTtcbiAgY29uc3QgY29tbW9uc3VmZml4ID0gdGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKDAsIHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCksIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKDAsIHRleHQyLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIGxldCBkaWZmcyA9IGNvbXB1dGVEaWZmKHRleHQxLCB0ZXh0Miwgb3B0aW9ucyk7XG4gIHJldHVybiBjb21tb25wcmVmaXggJiYgZGlmZnMudW5zaGlmdChbRElGRl9FUVVBTCwgY29tbW9ucHJlZml4XSksIGNvbW1vbnN1ZmZpeCAmJiBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBjb21tb25zdWZmaXhdKSwgZGlmZnMgPSBjbGVhbnVwTWVyZ2UoZGlmZnMpLCBkaWZmcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlYWRMaW5lKHRpbWVvdXQpIHtcbiAgbGV0IHQgPSAxO1xuICByZXR1cm4gdHlwZW9mIHRpbWVvdXQgPCBcInVcIiAmJiAodCA9IHRpbWVvdXQgPD0gMCA/IE51bWJlci5NQVhfVkFMVUUgOiB0aW1lb3V0KSwgRGF0ZS5ub3coKSArIHQgKiAxZTM7XG59XG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbE9wdHMob3B0cykge1xuICByZXR1cm4gX19zcHJlYWRWYWx1ZXMkMih7XG4gICAgY2hlY2tMaW5lczogITAsXG4gICAgZGVhZGxpbmU6IGNyZWF0ZURlYWRMaW5lKG9wdHMudGltZW91dCB8fCAxKVxuICB9LCBvcHRzKTtcbn1cbmZ1bmN0aW9uIGNvbWJpbmVDaGFyKGRhdGEsIGNoYXIsIGRpcikge1xuICByZXR1cm4gZGlyID09PSAxID8gZGF0YSArIGNoYXIgOiBjaGFyICsgZGF0YTtcbn1cbmZ1bmN0aW9uIHNwbGl0Q2hhcihkYXRhLCBkaXIpIHtcbiAgcmV0dXJuIGRpciA9PT0gMSA/IFtkYXRhLnN1YnN0cmluZygwLCBkYXRhLmxlbmd0aCAtIDEpLCBkYXRhW2RhdGEubGVuZ3RoIC0gMV1dIDogW2RhdGEuc3Vic3RyaW5nKDEpLCBkYXRhWzBdXTtcbn1cbmZ1bmN0aW9uIGhhc1NoYXJlZENoYXIoZGlmZnMsIGksIGosIGRpcikge1xuICByZXR1cm4gZGlyID09PSAxID8gZGlmZnNbaV1bMV1bZGlmZnNbaV1bMV0ubGVuZ3RoIC0gMV0gPT09IGRpZmZzW2pdWzFdW2RpZmZzW2pdWzFdLmxlbmd0aCAtIDFdIDogZGlmZnNbaV1bMV1bMF0gPT09IGRpZmZzW2pdWzFdWzBdO1xufVxuZnVuY3Rpb24gZGVpc29sYXRlQ2hhcihkaWZmcywgaSwgZGlyKSB7XG4gIGNvbnN0IGludiA9IGRpciA9PT0gMSA/IC0xIDogMTtcbiAgbGV0IGluc2VydElkeCA9IG51bGwsIGRlbGV0ZUlkeCA9IG51bGwsIGogPSBpICsgZGlyO1xuICBmb3IgKDsgaiA+PSAwICYmIGogPCBkaWZmcy5sZW5ndGggJiYgKGluc2VydElkeCA9PT0gbnVsbCB8fCBkZWxldGVJZHggPT09IG51bGwpOyBqICs9IGRpcikge1xuICAgIGNvbnN0IFtvcCwgdGV4dDJdID0gZGlmZnNbal07XG4gICAgaWYgKHRleHQyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgaWYgKG9wID09PSBESUZGX0lOU0VSVCkge1xuICAgICAgICBpbnNlcnRJZHggPT09IG51bGwgJiYgKGluc2VydElkeCA9IGopO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAob3AgPT09IERJRkZfREVMRVRFKSB7XG4gICAgICAgIGRlbGV0ZUlkeCA9PT0gbnVsbCAmJiAoZGVsZXRlSWR4ID0gaik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChvcCA9PT0gRElGRl9FUVVBTCkge1xuICAgICAgICBpZiAoaW5zZXJ0SWR4ID09PSBudWxsICYmIGRlbGV0ZUlkeCA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IFtyZXN0LCBjaGFyMl0gPSBzcGxpdENoYXIoZGlmZnNbaV1bMV0sIGRpcik7XG4gICAgICAgICAgZGlmZnNbaV1bMV0gPSByZXN0LCBkaWZmc1tqXVsxXSA9IGNvbWJpbmVDaGFyKGRpZmZzW2pdWzFdLCBjaGFyMiwgaW52KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpbnNlcnRJZHggIT09IG51bGwgJiYgZGVsZXRlSWR4ICE9PSBudWxsICYmIGhhc1NoYXJlZENoYXIoZGlmZnMsIGluc2VydElkeCwgZGVsZXRlSWR4LCBkaXIpKSB7XG4gICAgY29uc3QgW2luc2VydFRleHQsIGluc2VydENoYXJdID0gc3BsaXRDaGFyKGRpZmZzW2luc2VydElkeF1bMV0sIGludiksIFtkZWxldGVUZXh0Ml0gPSBzcGxpdENoYXIoZGlmZnNbZGVsZXRlSWR4XVsxXSwgaW52KTtcbiAgICBkaWZmc1tpbnNlcnRJZHhdWzFdID0gaW5zZXJ0VGV4dCwgZGlmZnNbZGVsZXRlSWR4XVsxXSA9IGRlbGV0ZVRleHQyLCBkaWZmc1tpXVsxXSA9IGNvbWJpbmVDaGFyKGRpZmZzW2ldWzFdLCBpbnNlcnRDaGFyLCBkaXIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBbdGV4dCwgY2hhcl0gPSBzcGxpdENoYXIoZGlmZnNbaV1bMV0sIGRpcik7XG4gIGRpZmZzW2ldWzFdID0gdGV4dCwgaW5zZXJ0SWR4ID09PSBudWxsID8gKGRpZmZzLnNwbGljZShqLCAwLCBbRElGRl9JTlNFUlQsIGNoYXJdKSwgZGVsZXRlSWR4ICE9PSBudWxsICYmIGRlbGV0ZUlkeCA+PSBqICYmIGRlbGV0ZUlkeCsrKSA6IGRpZmZzW2luc2VydElkeF1bMV0gPSBjb21iaW5lQ2hhcihkaWZmc1tpbnNlcnRJZHhdWzFdLCBjaGFyLCBpbnYpLCBkZWxldGVJZHggPT09IG51bGwgPyBkaWZmcy5zcGxpY2UoaiwgMCwgW0RJRkZfREVMRVRFLCBjaGFyXSkgOiBkaWZmc1tkZWxldGVJZHhdWzFdID0gY29tYmluZUNoYXIoZGlmZnNbZGVsZXRlSWR4XVsxXSwgY2hhciwgaW52KTtcbn1cbmZ1bmN0aW9uIGFkanVzdERpZmZGb3JTdXJyb2dhdGVQYWlycyhkaWZmcykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgW2RpZmZUeXBlLCBkaWZmVGV4dF0gPSBkaWZmc1tpXTtcbiAgICBpZiAoZGlmZlRleHQubGVuZ3RoID09PSAwKSBjb250aW51ZTtcbiAgICBjb25zdCBmaXJzdENoYXIgPSBkaWZmVGV4dFswXSwgbGFzdENoYXIgPSBkaWZmVGV4dFtkaWZmVGV4dC5sZW5ndGggLSAxXTtcbiAgICBpc0hpZ2hTdXJyb2dhdGUobGFzdENoYXIpICYmIGRpZmZUeXBlID09PSBESUZGX0VRVUFMICYmIGRlaXNvbGF0ZUNoYXIoZGlmZnMsIGksIDEpLCBpc0xvd1N1cnJvZ2F0ZShmaXJzdENoYXIpICYmIGRpZmZUeXBlID09PSBESUZGX0VRVUFMICYmIGRlaXNvbGF0ZUNoYXIoZGlmZnMsIGksIC0xKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSsrKSBkaWZmc1tpXVsxXS5sZW5ndGggPT09IDAgJiYgZGlmZnMuc3BsaWNlKGksIDEpO1xufVxuZnVuY3Rpb24gY2xlYW51cFNlbWFudGljKHJhd0RpZmZzKSB7XG4gIGxldCBkaWZmcyA9IHJhd0RpZmZzLm1hcCgoZGlmZjIpID0+IGNsb25lRGlmZihkaWZmMikpLCBoYXNDaGFuZ2VzID0gITE7XG4gIGNvbnN0IGVxdWFsaXRpZXMgPSBbXTtcbiAgbGV0IGVxdWFsaXRpZXNMZW5ndGggPSAwLCBsYXN0RXF1YWxpdHkgPSBudWxsLCBwb2ludGVyID0gMCwgbGVuZ3RoSW5zZXJ0aW9uczEgPSAwLCBsZW5ndGhEZWxldGlvbnMxID0gMCwgbGVuZ3RoSW5zZXJ0aW9uczIgPSAwLCBsZW5ndGhEZWxldGlvbnMyID0gMDtcbiAgZm9yICg7IHBvaW50ZXIgPCBkaWZmcy5sZW5ndGg7ICkgZGlmZnNbcG9pbnRlcl1bMF0gPT09IERJRkZfRVFVQUwgPyAoZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoKytdID0gcG9pbnRlciwgbGVuZ3RoSW5zZXJ0aW9uczEgPSBsZW5ndGhJbnNlcnRpb25zMiwgbGVuZ3RoRGVsZXRpb25zMSA9IGxlbmd0aERlbGV0aW9uczIsIGxlbmd0aEluc2VydGlvbnMyID0gMCwgbGVuZ3RoRGVsZXRpb25zMiA9IDAsIGxhc3RFcXVhbGl0eSA9IGRpZmZzW3BvaW50ZXJdWzFdKSA6IChkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9JTlNFUlQgPyBsZW5ndGhJbnNlcnRpb25zMiArPSBkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggOiBsZW5ndGhEZWxldGlvbnMyICs9IGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCwgbGFzdEVxdWFsaXR5ICYmIGxhc3RFcXVhbGl0eS5sZW5ndGggPD0gTWF0aC5tYXgobGVuZ3RoSW5zZXJ0aW9uczEsIGxlbmd0aERlbGV0aW9uczEpICYmIGxhc3RFcXVhbGl0eS5sZW5ndGggPD0gTWF0aC5tYXgobGVuZ3RoSW5zZXJ0aW9uczIsIGxlbmd0aERlbGV0aW9uczIpICYmIChkaWZmcy5zcGxpY2UoZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0sIDAsIFtESUZGX0RFTEVURSwgbGFzdEVxdWFsaXR5XSksIGRpZmZzW2VxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCAtIDFdICsgMV1bMF0gPSBESUZGX0lOU0VSVCwgZXF1YWxpdGllc0xlbmd0aC0tLCBlcXVhbGl0aWVzTGVuZ3RoLS0sIHBvaW50ZXIgPSBlcXVhbGl0aWVzTGVuZ3RoID4gMCA/IGVxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCAtIDFdIDogLTEsIGxlbmd0aEluc2VydGlvbnMxID0gMCwgbGVuZ3RoRGVsZXRpb25zMSA9IDAsIGxlbmd0aEluc2VydGlvbnMyID0gMCwgbGVuZ3RoRGVsZXRpb25zMiA9IDAsIGxhc3RFcXVhbGl0eSA9IG51bGwsIGhhc0NoYW5nZXMgPSAhMCkpLCBwb2ludGVyKys7XG4gIGZvciAoaGFzQ2hhbmdlcyAmJiAoZGlmZnMgPSBjbGVhbnVwTWVyZ2UoZGlmZnMpKSwgZGlmZnMgPSBjbGVhbnVwU2VtYW50aWNMb3NzbGVzcyhkaWZmcyksIHBvaW50ZXIgPSAxOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoOyApIHtcbiAgICBpZiAoZGlmZnNbcG9pbnRlciAtIDFdWzBdID09PSBESUZGX0RFTEVURSAmJiBkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9JTlNFUlQpIHtcbiAgICAgIGNvbnN0IGRlbGV0aW9uID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdLCBpbnNlcnRpb24gPSBkaWZmc1twb2ludGVyXVsxXSwgb3ZlcmxhcExlbmd0aDEgPSBnZXRDb21tb25PdmVybGFwKGRlbGV0aW9uLCBpbnNlcnRpb24pLCBvdmVybGFwTGVuZ3RoMiA9IGdldENvbW1vbk92ZXJsYXAoaW5zZXJ0aW9uLCBkZWxldGlvbik7XG4gICAgICBvdmVybGFwTGVuZ3RoMSA+PSBvdmVybGFwTGVuZ3RoMiA/IChvdmVybGFwTGVuZ3RoMSA+PSBkZWxldGlvbi5sZW5ndGggLyAyIHx8IG92ZXJsYXBMZW5ndGgxID49IGluc2VydGlvbi5sZW5ndGggLyAyKSAmJiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDAsIFtESUZGX0VRVUFMLCBpbnNlcnRpb24uc3Vic3RyaW5nKDAsIG92ZXJsYXBMZW5ndGgxKV0pLCBkaWZmc1twb2ludGVyIC0gMV1bMV0gPSBkZWxldGlvbi5zdWJzdHJpbmcoMCwgZGVsZXRpb24ubGVuZ3RoIC0gb3ZlcmxhcExlbmd0aDEpLCBkaWZmc1twb2ludGVyICsgMV1bMV0gPSBpbnNlcnRpb24uc3Vic3RyaW5nKG92ZXJsYXBMZW5ndGgxKSwgcG9pbnRlcisrKSA6IChvdmVybGFwTGVuZ3RoMiA+PSBkZWxldGlvbi5sZW5ndGggLyAyIHx8IG92ZXJsYXBMZW5ndGgyID49IGluc2VydGlvbi5sZW5ndGggLyAyKSAmJiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDAsIFtESUZGX0VRVUFMLCBkZWxldGlvbi5zdWJzdHJpbmcoMCwgb3ZlcmxhcExlbmd0aDIpXSksIGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9IERJRkZfSU5TRVJULCBkaWZmc1twb2ludGVyIC0gMV1bMV0gPSBpbnNlcnRpb24uc3Vic3RyaW5nKDAsIGluc2VydGlvbi5sZW5ndGggLSBvdmVybGFwTGVuZ3RoMiksIGRpZmZzW3BvaW50ZXIgKyAxXVswXSA9IERJRkZfREVMRVRFLCBkaWZmc1twb2ludGVyICsgMV1bMV0gPSBkZWxldGlvbi5zdWJzdHJpbmcob3ZlcmxhcExlbmd0aDIpLCBwb2ludGVyKyspLCBwb2ludGVyKys7XG4gICAgfVxuICAgIHBvaW50ZXIrKztcbiAgfVxuICByZXR1cm4gZGlmZnM7XG59XG5jb25zdCBub25BbHBoYU51bWVyaWNSZWdleCA9IC9bXmEtekEtWjAtOV0vLCB3aGl0ZXNwYWNlUmVnZXggPSAvXFxzLywgbGluZWJyZWFrUmVnZXggPSAvW1xcclxcbl0vLCBibGFua2xpbmVFbmRSZWdleCA9IC9cXG5cXHI/XFxuJC8sIGJsYW5rbGluZVN0YXJ0UmVnZXggPSAvXlxccj9cXG5cXHI/XFxuLztcbmZ1bmN0aW9uIGNsZWFudXBTZW1hbnRpY0xvc3NsZXNzKHJhd0RpZmZzKSB7XG4gIGNvbnN0IGRpZmZzID0gcmF3RGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSk7XG4gIGZ1bmN0aW9uIGRpZmZDbGVhbnVwU2VtYW50aWNTY29yZShvbmUsIHR3bykge1xuICAgIGlmICghb25lIHx8ICF0d28pIHJldHVybiA2O1xuICAgIGNvbnN0IGNoYXIxID0gb25lLmNoYXJBdChvbmUubGVuZ3RoIC0gMSksIGNoYXIyID0gdHdvLmNoYXJBdCgwKSwgbm9uQWxwaGFOdW1lcmljMSA9IGNoYXIxLm1hdGNoKG5vbkFscGhhTnVtZXJpY1JlZ2V4KSwgbm9uQWxwaGFOdW1lcmljMiA9IGNoYXIyLm1hdGNoKG5vbkFscGhhTnVtZXJpY1JlZ2V4KSwgd2hpdGVzcGFjZTEgPSBub25BbHBoYU51bWVyaWMxICYmIGNoYXIxLm1hdGNoKHdoaXRlc3BhY2VSZWdleCksIHdoaXRlc3BhY2UyID0gbm9uQWxwaGFOdW1lcmljMiAmJiBjaGFyMi5tYXRjaCh3aGl0ZXNwYWNlUmVnZXgpLCBsaW5lQnJlYWsxID0gd2hpdGVzcGFjZTEgJiYgY2hhcjEubWF0Y2gobGluZWJyZWFrUmVnZXgpLCBsaW5lQnJlYWsyID0gd2hpdGVzcGFjZTIgJiYgY2hhcjIubWF0Y2gobGluZWJyZWFrUmVnZXgpLCBibGFua0xpbmUxID0gbGluZUJyZWFrMSAmJiBvbmUubWF0Y2goYmxhbmtsaW5lRW5kUmVnZXgpLCBibGFua0xpbmUyID0gbGluZUJyZWFrMiAmJiB0d28ubWF0Y2goYmxhbmtsaW5lU3RhcnRSZWdleCk7XG4gICAgcmV0dXJuIGJsYW5rTGluZTEgfHwgYmxhbmtMaW5lMiA/IDUgOiBsaW5lQnJlYWsxIHx8IGxpbmVCcmVhazIgPyA0IDogbm9uQWxwaGFOdW1lcmljMSAmJiAhd2hpdGVzcGFjZTEgJiYgd2hpdGVzcGFjZTIgPyAzIDogd2hpdGVzcGFjZTEgfHwgd2hpdGVzcGFjZTIgPyAyIDogbm9uQWxwaGFOdW1lcmljMSB8fCBub25BbHBoYU51bWVyaWMyID8gMSA6IDA7XG4gIH1cbiAgbGV0IHBvaW50ZXIgPSAxO1xuICBmb3IgKDsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aCAtIDE7ICkge1xuICAgIGlmIChkaWZmc1twb2ludGVyIC0gMV1bMF0gPT09IERJRkZfRVFVQUwgJiYgZGlmZnNbcG9pbnRlciArIDFdWzBdID09PSBESUZGX0VRVUFMKSB7XG4gICAgICBsZXQgZXF1YWxpdHkxID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdLCBlZGl0ID0gZGlmZnNbcG9pbnRlcl1bMV0sIGVxdWFsaXR5MiA9IGRpZmZzW3BvaW50ZXIgKyAxXVsxXTtcbiAgICAgIGNvbnN0IGNvbW1vbk9mZnNldCA9IGdldENvbW1vblN1ZmZpeChlcXVhbGl0eTEsIGVkaXQpO1xuICAgICAgaWYgKGNvbW1vbk9mZnNldCkge1xuICAgICAgICBjb25zdCBjb21tb25TdHJpbmcgPSBlZGl0LnN1YnN0cmluZyhlZGl0Lmxlbmd0aCAtIGNvbW1vbk9mZnNldCk7XG4gICAgICAgIGVxdWFsaXR5MSA9IGVxdWFsaXR5MS5zdWJzdHJpbmcoMCwgZXF1YWxpdHkxLmxlbmd0aCAtIGNvbW1vbk9mZnNldCksIGVkaXQgPSBjb21tb25TdHJpbmcgKyBlZGl0LnN1YnN0cmluZygwLCBlZGl0Lmxlbmd0aCAtIGNvbW1vbk9mZnNldCksIGVxdWFsaXR5MiA9IGNvbW1vblN0cmluZyArIGVxdWFsaXR5MjtcbiAgICAgIH1cbiAgICAgIGxldCBiZXN0RXF1YWxpdHkxID0gZXF1YWxpdHkxLCBiZXN0RWRpdCA9IGVkaXQsIGJlc3RFcXVhbGl0eTIgPSBlcXVhbGl0eTIsIGJlc3RTY29yZSA9IGRpZmZDbGVhbnVwU2VtYW50aWNTY29yZShlcXVhbGl0eTEsIGVkaXQpICsgZGlmZkNsZWFudXBTZW1hbnRpY1Njb3JlKGVkaXQsIGVxdWFsaXR5Mik7XG4gICAgICBmb3IgKDsgZWRpdC5jaGFyQXQoMCkgPT09IGVxdWFsaXR5Mi5jaGFyQXQoMCk7ICkge1xuICAgICAgICBlcXVhbGl0eTEgKz0gZWRpdC5jaGFyQXQoMCksIGVkaXQgPSBlZGl0LnN1YnN0cmluZygxKSArIGVxdWFsaXR5Mi5jaGFyQXQoMCksIGVxdWFsaXR5MiA9IGVxdWFsaXR5Mi5zdWJzdHJpbmcoMSk7XG4gICAgICAgIGNvbnN0IHNjb3JlID0gZGlmZkNsZWFudXBTZW1hbnRpY1Njb3JlKGVxdWFsaXR5MSwgZWRpdCkgKyBkaWZmQ2xlYW51cFNlbWFudGljU2NvcmUoZWRpdCwgZXF1YWxpdHkyKTtcbiAgICAgICAgc2NvcmUgPj0gYmVzdFNjb3JlICYmIChiZXN0U2NvcmUgPSBzY29yZSwgYmVzdEVxdWFsaXR5MSA9IGVxdWFsaXR5MSwgYmVzdEVkaXQgPSBlZGl0LCBiZXN0RXF1YWxpdHkyID0gZXF1YWxpdHkyKTtcbiAgICAgIH1cbiAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSAhPT0gYmVzdEVxdWFsaXR5MSAmJiAoYmVzdEVxdWFsaXR5MSA/IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSA9IGJlc3RFcXVhbGl0eTEgOiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSAxLCAxKSwgcG9pbnRlci0tKSwgZGlmZnNbcG9pbnRlcl1bMV0gPSBiZXN0RWRpdCwgYmVzdEVxdWFsaXR5MiA/IGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGJlc3RFcXVhbGl0eTIgOiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIgKyAxLCAxKSwgcG9pbnRlci0tKSk7XG4gICAgfVxuICAgIHBvaW50ZXIrKztcbiAgfVxuICByZXR1cm4gZGlmZnM7XG59XG5mdW5jdGlvbiBjbGVhbnVwTWVyZ2UocmF3RGlmZnMpIHtcbiAgbGV0IGRpZmZzID0gcmF3RGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSk7XG4gIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIFwiXCJdKTtcbiAgbGV0IHBvaW50ZXIgPSAwLCBjb3VudERlbGV0ZSA9IDAsIGNvdW50SW5zZXJ0ID0gMCwgdGV4dERlbGV0ZSA9IFwiXCIsIHRleHRJbnNlcnQgPSBcIlwiLCBjb21tb25sZW5ndGg7XG4gIGZvciAoOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoOyApIHN3aXRjaCAoZGlmZnNbcG9pbnRlcl1bMF0pIHtcbiAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgY291bnRJbnNlcnQrKywgdGV4dEluc2VydCArPSBkaWZmc1twb2ludGVyXVsxXSwgcG9pbnRlcisrO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBESUZGX0RFTEVURTpcbiAgICAgIGNvdW50RGVsZXRlKyssIHRleHREZWxldGUgKz0gZGlmZnNbcG9pbnRlcl1bMV0sIHBvaW50ZXIrKztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgRElGRl9FUVVBTDpcbiAgICAgIGNvdW50RGVsZXRlICsgY291bnRJbnNlcnQgPiAxID8gKGNvdW50RGVsZXRlICE9PSAwICYmIGNvdW50SW5zZXJ0ICE9PSAwICYmIChjb21tb25sZW5ndGggPSBnZXRDb21tb25QcmVmaXgodGV4dEluc2VydCwgdGV4dERlbGV0ZSksIGNvbW1vbmxlbmd0aCAhPT0gMCAmJiAocG9pbnRlciAtIGNvdW50RGVsZXRlIC0gY291bnRJbnNlcnQgPiAwICYmIGRpZmZzW3BvaW50ZXIgLSBjb3VudERlbGV0ZSAtIGNvdW50SW5zZXJ0IC0gMV1bMF0gPT09IERJRkZfRVFVQUwgPyBkaWZmc1twb2ludGVyIC0gY291bnREZWxldGUgLSBjb3VudEluc2VydCAtIDFdWzFdICs9IHRleHRJbnNlcnQuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCkgOiAoZGlmZnMuc3BsaWNlKDAsIDAsIFtESUZGX0VRVUFMLCB0ZXh0SW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpXSksIHBvaW50ZXIrKyksIHRleHRJbnNlcnQgPSB0ZXh0SW5zZXJ0LnN1YnN0cmluZyhjb21tb25sZW5ndGgpLCB0ZXh0RGVsZXRlID0gdGV4dERlbGV0ZS5zdWJzdHJpbmcoY29tbW9ubGVuZ3RoKSksIGNvbW1vbmxlbmd0aCA9IGdldENvbW1vblN1ZmZpeCh0ZXh0SW5zZXJ0LCB0ZXh0RGVsZXRlKSwgY29tbW9ubGVuZ3RoICE9PSAwICYmIChkaWZmc1twb2ludGVyXVsxXSA9IHRleHRJbnNlcnQuc3Vic3RyaW5nKHRleHRJbnNlcnQubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKSArIGRpZmZzW3BvaW50ZXJdWzFdLCB0ZXh0SW5zZXJ0ID0gdGV4dEluc2VydC5zdWJzdHJpbmcoMCwgdGV4dEluc2VydC5sZW5ndGggLSBjb21tb25sZW5ndGgpLCB0ZXh0RGVsZXRlID0gdGV4dERlbGV0ZS5zdWJzdHJpbmcoMCwgdGV4dERlbGV0ZS5sZW5ndGggLSBjb21tb25sZW5ndGgpKSksIHBvaW50ZXIgLT0gY291bnREZWxldGUgKyBjb3VudEluc2VydCwgZGlmZnMuc3BsaWNlKHBvaW50ZXIsIGNvdW50RGVsZXRlICsgY291bnRJbnNlcnQpLCB0ZXh0RGVsZXRlLmxlbmd0aCAmJiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDAsIFtESUZGX0RFTEVURSwgdGV4dERlbGV0ZV0pLCBwb2ludGVyKyspLCB0ZXh0SW5zZXJ0Lmxlbmd0aCAmJiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDAsIFtESUZGX0lOU0VSVCwgdGV4dEluc2VydF0pLCBwb2ludGVyKyspLCBwb2ludGVyKyspIDogcG9pbnRlciAhPT0gMCAmJiBkaWZmc1twb2ludGVyIC0gMV1bMF0gPT09IERJRkZfRVFVQUwgPyAoZGlmZnNbcG9pbnRlciAtIDFdWzFdICs9IGRpZmZzW3BvaW50ZXJdWzFdLCBkaWZmcy5zcGxpY2UocG9pbnRlciwgMSkpIDogcG9pbnRlcisrLCBjb3VudEluc2VydCA9IDAsIGNvdW50RGVsZXRlID0gMCwgdGV4dERlbGV0ZSA9IFwiXCIsIHRleHRJbnNlcnQgPSBcIlwiO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGlmZiBvcGVyYXRpb25cIik7XG4gIH1cbiAgZGlmZnNbZGlmZnMubGVuZ3RoIC0gMV1bMV0gPT09IFwiXCIgJiYgZGlmZnMucG9wKCk7XG4gIGxldCBoYXNDaGFuZ2VzID0gITE7XG4gIGZvciAocG9pbnRlciA9IDE7IHBvaW50ZXIgPCBkaWZmcy5sZW5ndGggLSAxOyApIGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PT0gRElGRl9FUVVBTCAmJiBkaWZmc1twb2ludGVyICsgMV1bMF0gPT09IERJRkZfRVFVQUwgJiYgKGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggLSBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKSA9PT0gZGlmZnNbcG9pbnRlciAtIDFdWzFdID8gKGRpZmZzW3BvaW50ZXJdWzFdID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdICsgZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtIGRpZmZzW3BvaW50ZXIgLSAxXVsxXS5sZW5ndGgpLCBkaWZmc1twb2ludGVyICsgMV1bMV0gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0gKyBkaWZmc1twb2ludGVyICsgMV1bMV0sIGRpZmZzLnNwbGljZShwb2ludGVyIC0gMSwgMSksIGhhc0NoYW5nZXMgPSAhMCkgOiBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlciArIDFdWzFdLmxlbmd0aCkgPT09IGRpZmZzW3BvaW50ZXIgKyAxXVsxXSAmJiAoZGlmZnNbcG9pbnRlciAtIDFdWzFdICs9IGRpZmZzW3BvaW50ZXIgKyAxXVsxXSwgZGlmZnNbcG9pbnRlcl1bMV0gPSBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoZGlmZnNbcG9pbnRlciArIDFdWzFdLmxlbmd0aCkgKyBkaWZmc1twb2ludGVyICsgMV1bMV0sIGRpZmZzLnNwbGljZShwb2ludGVyICsgMSwgMSksIGhhc0NoYW5nZXMgPSAhMCkpLCBwb2ludGVyKys7XG4gIHJldHVybiBoYXNDaGFuZ2VzICYmIChkaWZmcyA9IGNsZWFudXBNZXJnZShkaWZmcykpLCBkaWZmcztcbn1cbmZ1bmN0aW9uIHRydWVDb3VudCguLi5hcmdzKSB7XG4gIHJldHVybiBhcmdzLnJlZHVjZSgobiwgYm9vbCkgPT4gbiArIChib29sID8gMSA6IDApLCAwKTtcbn1cbmZ1bmN0aW9uIGNsZWFudXBFZmZpY2llbmN5KHJhd0RpZmZzLCBlZGl0Q29zdCA9IDQpIHtcbiAgbGV0IGRpZmZzID0gcmF3RGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSksIGhhc0NoYW5nZXMgPSAhMTtcbiAgY29uc3QgZXF1YWxpdGllcyA9IFtdO1xuICBsZXQgZXF1YWxpdGllc0xlbmd0aCA9IDAsIGxhc3RFcXVhbGl0eSA9IG51bGwsIHBvaW50ZXIgPSAwLCBwcmVJbnMgPSAhMSwgcHJlRGVsID0gITEsIHBvc3RJbnMgPSAhMSwgcG9zdERlbCA9ICExO1xuICBmb3IgKDsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aDsgKSBkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9FUVVBTCA/IChkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggPCBlZGl0Q29zdCAmJiAocG9zdElucyB8fCBwb3N0RGVsKSA/IChlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGgrK10gPSBwb2ludGVyLCBwcmVJbnMgPSBwb3N0SW5zLCBwcmVEZWwgPSBwb3N0RGVsLCBsYXN0RXF1YWxpdHkgPSBkaWZmc1twb2ludGVyXVsxXSkgOiAoZXF1YWxpdGllc0xlbmd0aCA9IDAsIGxhc3RFcXVhbGl0eSA9IG51bGwpLCBwb3N0SW5zID0gITEsIHBvc3REZWwgPSAhMSkgOiAoZGlmZnNbcG9pbnRlcl1bMF0gPT09IERJRkZfREVMRVRFID8gcG9zdERlbCA9ICEwIDogcG9zdElucyA9ICEwLCBsYXN0RXF1YWxpdHkgJiYgKHByZUlucyAmJiBwcmVEZWwgJiYgcG9zdElucyAmJiBwb3N0RGVsIHx8IGxhc3RFcXVhbGl0eS5sZW5ndGggPCBlZGl0Q29zdCAvIDIgJiYgdHJ1ZUNvdW50KHByZUlucywgcHJlRGVsLCBwb3N0SW5zLCBwb3N0RGVsKSA9PT0gMykgJiYgKGRpZmZzLnNwbGljZShlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGggLSAxXSwgMCwgW0RJRkZfREVMRVRFLCBsYXN0RXF1YWxpdHldKSwgZGlmZnNbZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0gKyAxXVswXSA9IERJRkZfSU5TRVJULCBlcXVhbGl0aWVzTGVuZ3RoLS0sIGxhc3RFcXVhbGl0eSA9IG51bGwsIHByZUlucyAmJiBwcmVEZWwgPyAocG9zdElucyA9ICEwLCBwb3N0RGVsID0gITAsIGVxdWFsaXRpZXNMZW5ndGggPSAwKSA6IChlcXVhbGl0aWVzTGVuZ3RoLS0sIHBvaW50ZXIgPSBlcXVhbGl0aWVzTGVuZ3RoID4gMCA/IGVxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCAtIDFdIDogLTEsIHBvc3RJbnMgPSAhMSwgcG9zdERlbCA9ICExKSwgaGFzQ2hhbmdlcyA9ICEwKSksIHBvaW50ZXIrKztcbiAgcmV0dXJuIGhhc0NoYW5nZXMgJiYgKGRpZmZzID0gY2xlYW51cE1lcmdlKGRpZmZzKSksIGRpZmZzO1xufVxudmFyIF9fZGVmUHJvcCQxID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBfX2dldE93blByb3BTeW1ib2xzJDEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLCBfX2hhc093blByb3AkMSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksIF9fcHJvcElzRW51bSQxID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSwgX19kZWZOb3JtYWxQcm9wJDEgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wJDEob2JqLCBrZXksIHtcbiAgZW51bWVyYWJsZTogITAsXG4gIGNvbmZpZ3VyYWJsZTogITAsXG4gIHdyaXRhYmxlOiAhMCxcbiAgdmFsdWVcbn0pIDogb2JqW2tleV0gPSB2YWx1ZSwgX19zcHJlYWRWYWx1ZXMkMSA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSkgX19oYXNPd25Qcm9wJDEuY2FsbChiLCBwcm9wKSAmJiBfX2RlZk5vcm1hbFByb3AkMShhLCBwcm9wLCBiW3Byb3BdKTtcbiAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMkMSkgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzJDEoYikpIF9fcHJvcElzRW51bSQxLmNhbGwoYiwgcHJvcCkgJiYgX19kZWZOb3JtYWxQcm9wJDEoYSwgcHJvcCwgYltwcm9wXSk7XG4gIHJldHVybiBhO1xufTtcbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgLyoqXG4gICAqIEF0IHdoYXQgcG9pbnQgaXMgbm8gbWF0Y2ggZGVjbGFyZWQgKDAuMCA9IHBlcmZlY3Rpb24sIDEuMCA9IHZlcnkgbG9vc2UpLlxuICAgKi9cbiAgdGhyZXNob2xkOiAwLjUsXG4gIC8qKlxuICAgKiBIb3cgZmFyIHRvIHNlYXJjaCBmb3IgYSBtYXRjaCAoMCA9IGV4YWN0IGxvY2F0aW9uLCAxMDAwKyA9IGJyb2FkIG1hdGNoKS5cbiAgICogQSBtYXRjaCB0aGlzIG1hbnkgY2hhcmFjdGVycyBhd2F5IGZyb20gdGhlIGV4cGVjdGVkIGxvY2F0aW9uIHdpbGwgYWRkXG4gICAqIDEuMCB0byB0aGUgc2NvcmUgKDAuMCBpcyBhIHBlcmZlY3QgbWF0Y2gpLlxuICAgKi9cbiAgZGlzdGFuY2U6IDFlM1xufTtcbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdHMob3B0aW9ucykge1xuICByZXR1cm4gX19zcHJlYWRWYWx1ZXMkMShfX3NwcmVhZFZhbHVlcyQxKHt9LCBERUZBVUxUX09QVElPTlMpLCBvcHRpb25zKTtcbn1cbmNvbnN0IE1BWF9CSVRTJDEgPSAzMjtcbmZ1bmN0aW9uIGJpdGFwKHRleHQsIHBhdHRlcm4sIGxvYywgb3B0cyA9IHt9KSB7XG4gIGlmIChwYXR0ZXJuLmxlbmd0aCA+IE1BWF9CSVRTJDEpIHRocm93IG5ldyBFcnJvcihcIlBhdHRlcm4gdG9vIGxvbmcgZm9yIHRoaXMgYnJvd3Nlci5cIik7XG4gIGNvbnN0IG9wdGlvbnMgPSBhcHBseURlZmF1bHRzKG9wdHMpLCBzID0gZ2V0QWxwaGFiZXRGcm9tUGF0dGVybihwYXR0ZXJuKTtcbiAgZnVuY3Rpb24gZ2V0Qml0YXBTY29yZShlLCB4KSB7XG4gICAgY29uc3QgYWNjdXJhY3kgPSBlIC8gcGF0dGVybi5sZW5ndGgsIHByb3hpbWl0eSA9IE1hdGguYWJzKGxvYyAtIHgpO1xuICAgIHJldHVybiBvcHRpb25zLmRpc3RhbmNlID8gYWNjdXJhY3kgKyBwcm94aW1pdHkgLyBvcHRpb25zLmRpc3RhbmNlIDogcHJveGltaXR5ID8gMSA6IGFjY3VyYWN5O1xuICB9XG4gIGxldCBzY29yZVRocmVzaG9sZCA9IG9wdGlvbnMudGhyZXNob2xkLCBiZXN0TG9jID0gdGV4dC5pbmRleE9mKHBhdHRlcm4sIGxvYyk7XG4gIGJlc3RMb2MgIT09IC0xICYmIChzY29yZVRocmVzaG9sZCA9IE1hdGgubWluKGdldEJpdGFwU2NvcmUoMCwgYmVzdExvYyksIHNjb3JlVGhyZXNob2xkKSwgYmVzdExvYyA9IHRleHQubGFzdEluZGV4T2YocGF0dGVybiwgbG9jICsgcGF0dGVybi5sZW5ndGgpLCBiZXN0TG9jICE9PSAtMSAmJiAoc2NvcmVUaHJlc2hvbGQgPSBNYXRoLm1pbihnZXRCaXRhcFNjb3JlKDAsIGJlc3RMb2MpLCBzY29yZVRocmVzaG9sZCkpKTtcbiAgY29uc3QgbWF0Y2htYXNrID0gMSA8PCBwYXR0ZXJuLmxlbmd0aCAtIDE7XG4gIGJlc3RMb2MgPSAtMTtcbiAgbGV0IGJpbk1pbiwgYmluTWlkLCBiaW5NYXggPSBwYXR0ZXJuLmxlbmd0aCArIHRleHQubGVuZ3RoLCBsYXN0UmQgPSBbXTtcbiAgZm9yIChsZXQgZCA9IDA7IGQgPCBwYXR0ZXJuLmxlbmd0aDsgZCsrKSB7XG4gICAgZm9yIChiaW5NaW4gPSAwLCBiaW5NaWQgPSBiaW5NYXg7IGJpbk1pbiA8IGJpbk1pZDsgKSBnZXRCaXRhcFNjb3JlKGQsIGxvYyArIGJpbk1pZCkgPD0gc2NvcmVUaHJlc2hvbGQgPyBiaW5NaW4gPSBiaW5NaWQgOiBiaW5NYXggPSBiaW5NaWQsIGJpbk1pZCA9IE1hdGguZmxvb3IoKGJpbk1heCAtIGJpbk1pbikgLyAyICsgYmluTWluKTtcbiAgICBiaW5NYXggPSBiaW5NaWQ7XG4gICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgoMSwgbG9jIC0gYmluTWlkICsgMSk7XG4gICAgY29uc3QgZmluaXNoID0gTWF0aC5taW4obG9jICsgYmluTWlkLCB0ZXh0Lmxlbmd0aCkgKyBwYXR0ZXJuLmxlbmd0aCwgcmQgPSBuZXcgQXJyYXkoZmluaXNoICsgMik7XG4gICAgcmRbZmluaXNoICsgMV0gPSAoMSA8PCBkKSAtIDE7XG4gICAgZm9yIChsZXQgaiA9IGZpbmlzaDsgaiA+PSBzdGFydDsgai0tKSB7XG4gICAgICBjb25zdCBjaGFyTWF0Y2ggPSBzW3RleHQuY2hhckF0KGogLSAxKV07XG4gICAgICBpZiAoZCA9PT0gMCA/IHJkW2pdID0gKHJkW2ogKyAxXSA8PCAxIHwgMSkgJiBjaGFyTWF0Y2ggOiByZFtqXSA9IChyZFtqICsgMV0gPDwgMSB8IDEpICYgY2hhck1hdGNoIHwgKChsYXN0UmRbaiArIDFdIHwgbGFzdFJkW2pdKSA8PCAxIHwgMSkgfCBsYXN0UmRbaiArIDFdLCByZFtqXSAmIG1hdGNobWFzaykge1xuICAgICAgICBjb25zdCBzY29yZSA9IGdldEJpdGFwU2NvcmUoZCwgaiAtIDEpO1xuICAgICAgICBpZiAoc2NvcmUgPD0gc2NvcmVUaHJlc2hvbGQpIGlmIChzY29yZVRocmVzaG9sZCA9IHNjb3JlLCBiZXN0TG9jID0gaiAtIDEsIGJlc3RMb2MgPiBsb2MpIHN0YXJ0ID0gTWF0aC5tYXgoMSwgMiAqIGxvYyAtIGJlc3RMb2MpO1xuICAgICAgICBlbHNlIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZ2V0Qml0YXBTY29yZShkICsgMSwgbG9jKSA+IHNjb3JlVGhyZXNob2xkKSBicmVhaztcbiAgICBsYXN0UmQgPSByZDtcbiAgfVxuICByZXR1cm4gYmVzdExvYztcbn1cbmZ1bmN0aW9uIGdldEFscGhhYmV0RnJvbVBhdHRlcm4ocGF0dGVybikge1xuICBjb25zdCBzID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7IGkrKykgc1twYXR0ZXJuLmNoYXJBdChpKV0gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyBpKyspIHNbcGF0dGVybi5jaGFyQXQoaSldIHw9IDEgPDwgcGF0dGVybi5sZW5ndGggLSBpIC0gMTtcbiAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBtYXRjaCh0ZXh0LCBwYXR0ZXJuLCBzZWFyY2hMb2NhdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0ZXh0ID09PSBudWxsIHx8IHBhdHRlcm4gPT09IG51bGwgfHwgc2VhcmNoTG9jYXRpb24gPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIk51bGwgaW5wdXQuIChtYXRjaCgpKVwiKTtcbiAgY29uc3QgbG9jID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2VhcmNoTG9jYXRpb24sIHRleHQubGVuZ3RoKSk7XG4gIGlmICh0ZXh0ID09PSBwYXR0ZXJuKSByZXR1cm4gMDtcbiAgaWYgKHRleHQubGVuZ3RoKSB7XG4gICAgaWYgKHRleHQuc3Vic3RyaW5nKGxvYywgbG9jICsgcGF0dGVybi5sZW5ndGgpID09PSBwYXR0ZXJuKSByZXR1cm4gbG9jO1xuICB9IGVsc2UgcmV0dXJuIC0xO1xuICByZXR1cm4gYml0YXAodGV4dCwgcGF0dGVybiwgbG9jLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGRpZmZUZXh0MShkaWZmcykge1xuICBjb25zdCB0ZXh0ID0gW107XG4gIGZvciAobGV0IHggPSAwOyB4IDwgZGlmZnMubGVuZ3RoOyB4KyspIGRpZmZzW3hdWzBdICE9PSBESUZGX0lOU0VSVCAmJiAodGV4dFt4XSA9IGRpZmZzW3hdWzFdKTtcbiAgcmV0dXJuIHRleHQuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIGRpZmZUZXh0MihkaWZmcykge1xuICBjb25zdCB0ZXh0ID0gW107XG4gIGZvciAobGV0IHggPSAwOyB4IDwgZGlmZnMubGVuZ3RoOyB4KyspIGRpZmZzW3hdWzBdICE9PSBESUZGX0RFTEVURSAmJiAodGV4dFt4XSA9IGRpZmZzW3hdWzFdKTtcbiAgcmV0dXJuIHRleHQuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIGxldmVuc2h0ZWluKGRpZmZzKSB7XG4gIGxldCBsZXZlbiA9IDAsIGluc2VydGlvbnMgPSAwLCBkZWxldGlvbnMgPSAwO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGRpZmZzLmxlbmd0aDsgeCsrKSB7XG4gICAgY29uc3Qgb3AgPSBkaWZmc1t4XVswXSwgZGF0YSA9IGRpZmZzW3hdWzFdO1xuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgIGNhc2UgRElGRl9JTlNFUlQ6XG4gICAgICAgIGluc2VydGlvbnMgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0RFTEVURTpcbiAgICAgICAgZGVsZXRpb25zICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9FUVVBTDpcbiAgICAgICAgbGV2ZW4gKz0gTWF0aC5tYXgoaW5zZXJ0aW9ucywgZGVsZXRpb25zKSwgaW5zZXJ0aW9ucyA9IDAsIGRlbGV0aW9ucyA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkaWZmIG9wZXJhdGlvbi5cIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBsZXZlbiArPSBNYXRoLm1heChpbnNlcnRpb25zLCBkZWxldGlvbnMpLCBsZXZlbjtcbn1cbmZ1bmN0aW9uIHhJbmRleChkaWZmcywgbG9jYXRpb24pIHtcbiAgbGV0IGNoYXJzMSA9IDAsIGNoYXJzMiA9IDAsIGxhc3RDaGFyczEgPSAwLCBsYXN0Q2hhcnMyID0gMCwgeDtcbiAgZm9yICh4ID0gMDsgeCA8IGRpZmZzLmxlbmd0aCAmJiAoZGlmZnNbeF1bMF0gIT09IERJRkZfSU5TRVJUICYmIChjaGFyczEgKz0gZGlmZnNbeF1bMV0ubGVuZ3RoKSwgZGlmZnNbeF1bMF0gIT09IERJRkZfREVMRVRFICYmIChjaGFyczIgKz0gZGlmZnNbeF1bMV0ubGVuZ3RoKSwgIShjaGFyczEgPiBsb2NhdGlvbikpOyB4KyspIGxhc3RDaGFyczEgPSBjaGFyczEsIGxhc3RDaGFyczIgPSBjaGFyczI7XG4gIHJldHVybiBkaWZmcy5sZW5ndGggIT09IHggJiYgZGlmZnNbeF1bMF0gPT09IERJRkZfREVMRVRFID8gbGFzdENoYXJzMiA6IGxhc3RDaGFyczIgKyAobG9jYXRpb24gLSBsYXN0Q2hhcnMxKTtcbn1cbmZ1bmN0aW9uIGNvdW50VXRmOEJ5dGVzKHN0cikge1xuICBsZXQgYnl0ZXMgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNvZGVQb2ludCA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICBpZiAodHlwZW9mIGNvZGVQb2ludCA+IFwidVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGNvZGVwb2ludFwiKTtcbiAgICBieXRlcyArPSB1dGY4bGVuKGNvZGVQb2ludCk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gYWRqdXN0SW5kaWNpZXNUb1VjczIocGF0Y2hlcywgYmFzZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBieXRlT2Zmc2V0ID0gMCwgaWR4ID0gMDtcbiAgZnVuY3Rpb24gYWR2YW5jZVRvKHRhcmdldCkge1xuICAgIGZvciAoOyBieXRlT2Zmc2V0IDwgdGFyZ2V0OyApIHtcbiAgICAgIGNvbnN0IGNvZGVQb2ludCA9IGJhc2UuY29kZVBvaW50QXQoaWR4KTtcbiAgICAgIGlmICh0eXBlb2YgY29kZVBvaW50ID4gXCJ1XCIpIHJldHVybiBpZHg7XG4gICAgICBieXRlT2Zmc2V0ICs9IHV0ZjhsZW4oY29kZVBvaW50KSwgY29kZVBvaW50ID4gNjU1MzUgPyBpZHggKz0gMiA6IGlkeCArPSAxO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuYWxsb3dFeGNlZWRpbmdJbmRpY2VzICYmIGJ5dGVPZmZzZXQgIT09IHRhcmdldCkgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRldGVybWluZSBieXRlIG9mZnNldFwiKTtcbiAgICByZXR1cm4gaWR4O1xuICB9XG4gIGNvbnN0IGFkanVzdGVkID0gW107XG4gIGZvciAoY29uc3QgcGF0Y2ggb2YgcGF0Y2hlcykgYWRqdXN0ZWQucHVzaCh7XG4gICAgZGlmZnM6IHBhdGNoLmRpZmZzLm1hcCgoZGlmZjIpID0+IGNsb25lRGlmZihkaWZmMikpLFxuICAgIHN0YXJ0MTogYWR2YW5jZVRvKHBhdGNoLnN0YXJ0MSksXG4gICAgc3RhcnQyOiBhZHZhbmNlVG8ocGF0Y2guc3RhcnQyKSxcbiAgICB1dGY4U3RhcnQxOiBwYXRjaC51dGY4U3RhcnQxLFxuICAgIHV0ZjhTdGFydDI6IHBhdGNoLnV0ZjhTdGFydDIsXG4gICAgbGVuZ3RoMTogcGF0Y2gubGVuZ3RoMSxcbiAgICBsZW5ndGgyOiBwYXRjaC5sZW5ndGgyLFxuICAgIHV0ZjhMZW5ndGgxOiBwYXRjaC51dGY4TGVuZ3RoMSxcbiAgICB1dGY4TGVuZ3RoMjogcGF0Y2gudXRmOExlbmd0aDJcbiAgfSk7XG4gIHJldHVybiBhZGp1c3RlZDtcbn1cbmZ1bmN0aW9uIHV0ZjhsZW4oY29kZVBvaW50KSB7XG4gIHJldHVybiBjb2RlUG9pbnQgPD0gMTI3ID8gMSA6IGNvZGVQb2ludCA8PSAyMDQ3ID8gMiA6IGNvZGVQb2ludCA8PSA2NTUzNSA/IDMgOiA0O1xufVxuY29uc3QgTUFYX0JJVFMgPSAzMiwgREVGQVVMVF9NQVJHSU4gPSA0O1xuZnVuY3Rpb24gYWRkUGFkZGluZyhwYXRjaGVzLCBtYXJnaW4gPSBERUZBVUxUX01BUkdJTikge1xuICBjb25zdCBwYWRkaW5nTGVuZ3RoID0gbWFyZ2luO1xuICBsZXQgbnVsbFBhZGRpbmcgPSBcIlwiO1xuICBmb3IgKGxldCB4ID0gMTsgeCA8PSBwYWRkaW5nTGVuZ3RoOyB4KyspIG51bGxQYWRkaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7XG4gIGZvciAoY29uc3QgcCBvZiBwYXRjaGVzKSBwLnN0YXJ0MSArPSBwYWRkaW5nTGVuZ3RoLCBwLnN0YXJ0MiArPSBwYWRkaW5nTGVuZ3RoLCBwLnV0ZjhTdGFydDEgKz0gcGFkZGluZ0xlbmd0aCwgcC51dGY4U3RhcnQyICs9IHBhZGRpbmdMZW5ndGg7XG4gIGxldCBwYXRjaCA9IHBhdGNoZXNbMF0sIGRpZmZzID0gcGF0Y2guZGlmZnM7XG4gIGlmIChkaWZmcy5sZW5ndGggPT09IDAgfHwgZGlmZnNbMF1bMF0gIT09IERJRkZfRVFVQUwpIGRpZmZzLnVuc2hpZnQoW0RJRkZfRVFVQUwsIG51bGxQYWRkaW5nXSksIHBhdGNoLnN0YXJ0MSAtPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC5zdGFydDIgLT0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOFN0YXJ0MSAtPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4U3RhcnQyIC09IHBhZGRpbmdMZW5ndGgsIHBhdGNoLmxlbmd0aDEgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gubGVuZ3RoMiArPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMiArPSBwYWRkaW5nTGVuZ3RoO1xuICBlbHNlIGlmIChwYWRkaW5nTGVuZ3RoID4gZGlmZnNbMF1bMV0ubGVuZ3RoKSB7XG4gICAgY29uc3QgZmlyc3REaWZmTGVuZ3RoID0gZGlmZnNbMF1bMV0ubGVuZ3RoLCBleHRyYUxlbmd0aCA9IHBhZGRpbmdMZW5ndGggLSBmaXJzdERpZmZMZW5ndGg7XG4gICAgZGlmZnNbMF1bMV0gPSBudWxsUGFkZGluZy5zdWJzdHJpbmcoZmlyc3REaWZmTGVuZ3RoKSArIGRpZmZzWzBdWzFdLCBwYXRjaC5zdGFydDEgLT0gZXh0cmFMZW5ndGgsIHBhdGNoLnN0YXJ0MiAtPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOFN0YXJ0MSAtPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOFN0YXJ0MiAtPSBleHRyYUxlbmd0aCwgcGF0Y2gubGVuZ3RoMSArPSBleHRyYUxlbmd0aCwgcGF0Y2gubGVuZ3RoMiArPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gZXh0cmFMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IGV4dHJhTGVuZ3RoO1xuICB9XG4gIGlmIChwYXRjaCA9IHBhdGNoZXNbcGF0Y2hlcy5sZW5ndGggLSAxXSwgZGlmZnMgPSBwYXRjaC5kaWZmcywgZGlmZnMubGVuZ3RoID09PSAwIHx8IGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzBdICE9PSBESUZGX0VRVUFMKSBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBudWxsUGFkZGluZ10pLCBwYXRjaC5sZW5ndGgxICs9IHBhZGRpbmdMZW5ndGgsIHBhdGNoLmxlbmd0aDIgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gcGFkZGluZ0xlbmd0aDtcbiAgZWxzZSBpZiAocGFkZGluZ0xlbmd0aCA+IGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdLmxlbmd0aCkge1xuICAgIGNvbnN0IGV4dHJhTGVuZ3RoID0gcGFkZGluZ0xlbmd0aCAtIGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdLmxlbmd0aDtcbiAgICBkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXSArPSBudWxsUGFkZGluZy5zdWJzdHJpbmcoMCwgZXh0cmFMZW5ndGgpLCBwYXRjaC5sZW5ndGgxICs9IGV4dHJhTGVuZ3RoLCBwYXRjaC5sZW5ndGgyICs9IGV4dHJhTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gZXh0cmFMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG51bGxQYWRkaW5nO1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hPYmplY3Qoc3RhcnQxLCBzdGFydDIpIHtcbiAgcmV0dXJuIHtcbiAgICBkaWZmczogW10sXG4gICAgc3RhcnQxLFxuICAgIHN0YXJ0MixcbiAgICB1dGY4U3RhcnQxOiBzdGFydDEsXG4gICAgdXRmOFN0YXJ0Mjogc3RhcnQyLFxuICAgIGxlbmd0aDE6IDAsXG4gICAgbGVuZ3RoMjogMCxcbiAgICB1dGY4TGVuZ3RoMTogMCxcbiAgICB1dGY4TGVuZ3RoMjogMFxuICB9O1xufVxuZnVuY3Rpb24gc3BsaXRNYXgocGF0Y2hlcywgbWFyZ2luID0gREVGQVVMVF9NQVJHSU4pIHtcbiAgY29uc3QgcGF0Y2hTaXplID0gTUFYX0JJVFM7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgcGF0Y2hlcy5sZW5ndGg7IHgrKykge1xuICAgIGlmIChwYXRjaGVzW3hdLmxlbmd0aDEgPD0gcGF0Y2hTaXplKSBjb250aW51ZTtcbiAgICBjb25zdCBiaWdwYXRjaCA9IHBhdGNoZXNbeF07XG4gICAgcGF0Y2hlcy5zcGxpY2UoeC0tLCAxKTtcbiAgICBsZXQgc3RhcnQxID0gYmlncGF0Y2guc3RhcnQxLCBzdGFydDIgPSBiaWdwYXRjaC5zdGFydDIsIHByZUNvbnRleHQgPSBcIlwiO1xuICAgIGZvciAoOyBiaWdwYXRjaC5kaWZmcy5sZW5ndGggIT09IDA7ICkge1xuICAgICAgY29uc3QgcGF0Y2ggPSBjcmVhdGVQYXRjaE9iamVjdChzdGFydDEgLSBwcmVDb250ZXh0Lmxlbmd0aCwgc3RhcnQyIC0gcHJlQ29udGV4dC5sZW5ndGgpO1xuICAgICAgbGV0IGVtcHR5ID0gITA7XG4gICAgICBpZiAocHJlQ29udGV4dCAhPT0gXCJcIikge1xuICAgICAgICBjb25zdCBwcmVjb250ZXh0Qnl0ZUNvdW50ID0gY291bnRVdGY4Qnl0ZXMocHJlQ29udGV4dCk7XG4gICAgICAgIHBhdGNoLmxlbmd0aDEgPSBwcmVDb250ZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgPSBwcmVjb250ZXh0Qnl0ZUNvdW50LCBwYXRjaC5sZW5ndGgyID0gcHJlQ29udGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyID0gcHJlY29udGV4dEJ5dGVDb3VudCwgcGF0Y2guZGlmZnMucHVzaChbRElGRl9FUVVBTCwgcHJlQ29udGV4dF0pO1xuICAgICAgfVxuICAgICAgZm9yICg7IGJpZ3BhdGNoLmRpZmZzLmxlbmd0aCAhPT0gMCAmJiBwYXRjaC5sZW5ndGgxIDwgcGF0Y2hTaXplIC0gbWFyZ2luOyApIHtcbiAgICAgICAgY29uc3QgZGlmZlR5cGUgPSBiaWdwYXRjaC5kaWZmc1swXVswXTtcbiAgICAgICAgbGV0IGRpZmZUZXh0ID0gYmlncGF0Y2guZGlmZnNbMF1bMV0sIGRpZmZUZXh0Qnl0ZUNvdW50ID0gY291bnRVdGY4Qnl0ZXMoZGlmZlRleHQpO1xuICAgICAgICBpZiAoZGlmZlR5cGUgPT09IERJRkZfSU5TRVJUKSB7XG4gICAgICAgICAgcGF0Y2gubGVuZ3RoMiArPSBkaWZmVGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IGRpZmZUZXh0Qnl0ZUNvdW50LCBzdGFydDIgKz0gZGlmZlRleHQubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IGRpZmYyID0gYmlncGF0Y2guZGlmZnMuc2hpZnQoKTtcbiAgICAgICAgICBkaWZmMiAmJiBwYXRjaC5kaWZmcy5wdXNoKGRpZmYyKSwgZW1wdHkgPSAhMTtcbiAgICAgICAgfSBlbHNlIGRpZmZUeXBlID09PSBESUZGX0RFTEVURSAmJiBwYXRjaC5kaWZmcy5sZW5ndGggPT09IDEgJiYgcGF0Y2guZGlmZnNbMF1bMF0gPT09IERJRkZfRVFVQUwgJiYgZGlmZlRleHQubGVuZ3RoID4gMiAqIHBhdGNoU2l6ZSA/IChwYXRjaC5sZW5ndGgxICs9IGRpZmZUZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gZGlmZlRleHRCeXRlQ291bnQsIHN0YXJ0MSArPSBkaWZmVGV4dC5sZW5ndGgsIGVtcHR5ID0gITEsIHBhdGNoLmRpZmZzLnB1c2goW2RpZmZUeXBlLCBkaWZmVGV4dF0pLCBiaWdwYXRjaC5kaWZmcy5zaGlmdCgpKSA6IChkaWZmVGV4dCA9IGRpZmZUZXh0LnN1YnN0cmluZygwLCBwYXRjaFNpemUgLSBwYXRjaC5sZW5ndGgxIC0gbWFyZ2luKSwgZGlmZlRleHRCeXRlQ291bnQgPSBjb3VudFV0ZjhCeXRlcyhkaWZmVGV4dCksIHBhdGNoLmxlbmd0aDEgKz0gZGlmZlRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBkaWZmVGV4dEJ5dGVDb3VudCwgc3RhcnQxICs9IGRpZmZUZXh0Lmxlbmd0aCwgZGlmZlR5cGUgPT09IERJRkZfRVFVQUwgPyAocGF0Y2gubGVuZ3RoMiArPSBkaWZmVGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IGRpZmZUZXh0Qnl0ZUNvdW50LCBzdGFydDIgKz0gZGlmZlRleHQubGVuZ3RoKSA6IGVtcHR5ID0gITEsIHBhdGNoLmRpZmZzLnB1c2goW2RpZmZUeXBlLCBkaWZmVGV4dF0pLCBkaWZmVGV4dCA9PT0gYmlncGF0Y2guZGlmZnNbMF1bMV0gPyBiaWdwYXRjaC5kaWZmcy5zaGlmdCgpIDogYmlncGF0Y2guZGlmZnNbMF1bMV0gPSBiaWdwYXRjaC5kaWZmc1swXVsxXS5zdWJzdHJpbmcoZGlmZlRleHQubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgICBwcmVDb250ZXh0ID0gZGlmZlRleHQyKHBhdGNoLmRpZmZzKSwgcHJlQ29udGV4dCA9IHByZUNvbnRleHQuc3Vic3RyaW5nKHByZUNvbnRleHQubGVuZ3RoIC0gbWFyZ2luKTtcbiAgICAgIGNvbnN0IHBvc3RDb250ZXh0ID0gZGlmZlRleHQxKGJpZ3BhdGNoLmRpZmZzKS5zdWJzdHJpbmcoMCwgbWFyZ2luKSwgcG9zdENvbnRleHRCeXRlQ291bnQgPSBjb3VudFV0ZjhCeXRlcyhwb3N0Q29udGV4dCk7XG4gICAgICBwb3N0Q29udGV4dCAhPT0gXCJcIiAmJiAocGF0Y2gubGVuZ3RoMSArPSBwb3N0Q29udGV4dC5sZW5ndGgsIHBhdGNoLmxlbmd0aDIgKz0gcG9zdENvbnRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBwb3N0Q29udGV4dEJ5dGVDb3VudCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gcG9zdENvbnRleHRCeXRlQ291bnQsIHBhdGNoLmRpZmZzLmxlbmd0aCAhPT0gMCAmJiBwYXRjaC5kaWZmc1twYXRjaC5kaWZmcy5sZW5ndGggLSAxXVswXSA9PT0gRElGRl9FUVVBTCA/IHBhdGNoLmRpZmZzW3BhdGNoLmRpZmZzLmxlbmd0aCAtIDFdWzFdICs9IHBvc3RDb250ZXh0IDogcGF0Y2guZGlmZnMucHVzaChbRElGRl9FUVVBTCwgcG9zdENvbnRleHRdKSksIGVtcHR5IHx8IHBhdGNoZXMuc3BsaWNlKCsreCwgMCwgcGF0Y2gpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYXBwbHkocGF0Y2hlcywgb3JpZ2luYWxUZXh0LCBvcHRzID0ge30pIHtcbiAgaWYgKHR5cGVvZiBwYXRjaGVzID09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcIlBhdGNoZXMgbXVzdCBiZSBhbiBhcnJheSAtIHBhc3MgdGhlIHBhdGNoIHRvIGBwYXJzZVBhdGNoKClgIGZpcnN0XCIpO1xuICBsZXQgdGV4dCA9IG9yaWdpbmFsVGV4dDtcbiAgaWYgKHBhdGNoZXMubGVuZ3RoID09PSAwKSByZXR1cm4gW3RleHQsIFtdXTtcbiAgY29uc3QgcGFyc2VkID0gYWRqdXN0SW5kaWNpZXNUb1VjczIocGF0Y2hlcywgdGV4dCwge1xuICAgIGFsbG93RXhjZWVkaW5nSW5kaWNlczogb3B0cy5hbGxvd0V4Y2VlZGluZ0luZGljZXNcbiAgfSksIG1hcmdpbiA9IG9wdHMubWFyZ2luIHx8IERFRkFVTFRfTUFSR0lOLCBkZWxldGVUaHJlc2hvbGQgPSBvcHRzLmRlbGV0ZVRocmVzaG9sZCB8fCAwLjQsIG51bGxQYWRkaW5nID0gYWRkUGFkZGluZyhwYXJzZWQsIG1hcmdpbik7XG4gIHRleHQgPSBudWxsUGFkZGluZyArIHRleHQgKyBudWxsUGFkZGluZywgc3BsaXRNYXgocGFyc2VkLCBtYXJnaW4pO1xuICBsZXQgZGVsdGEgPSAwO1xuICBjb25zdCByZXN1bHRzID0gW107XG4gIGZvciAobGV0IHggPSAwOyB4IDwgcGFyc2VkLmxlbmd0aDsgeCsrKSB7XG4gICAgY29uc3QgZXhwZWN0ZWRMb2MgPSBwYXJzZWRbeF0uc3RhcnQyICsgZGVsdGEsIHRleHQxID0gZGlmZlRleHQxKHBhcnNlZFt4XS5kaWZmcyk7XG4gICAgbGV0IHN0YXJ0TG9jLCBlbmRMb2MgPSAtMTtcbiAgICBpZiAodGV4dDEubGVuZ3RoID4gTUFYX0JJVFMgPyAoc3RhcnRMb2MgPSBtYXRjaCh0ZXh0LCB0ZXh0MS5zdWJzdHJpbmcoMCwgTUFYX0JJVFMpLCBleHBlY3RlZExvYyksIHN0YXJ0TG9jICE9PSAtMSAmJiAoZW5kTG9jID0gbWF0Y2godGV4dCwgdGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIE1BWF9CSVRTKSwgZXhwZWN0ZWRMb2MgKyB0ZXh0MS5sZW5ndGggLSBNQVhfQklUUyksIChlbmRMb2MgPT09IC0xIHx8IHN0YXJ0TG9jID49IGVuZExvYykgJiYgKHN0YXJ0TG9jID0gLTEpKSkgOiBzdGFydExvYyA9IG1hdGNoKHRleHQsIHRleHQxLCBleHBlY3RlZExvYyksIHN0YXJ0TG9jID09PSAtMSkgcmVzdWx0c1t4XSA9ICExLCBkZWx0YSAtPSBwYXJzZWRbeF0ubGVuZ3RoMiAtIHBhcnNlZFt4XS5sZW5ndGgxO1xuICAgIGVsc2Uge1xuICAgICAgcmVzdWx0c1t4XSA9ICEwLCBkZWx0YSA9IHN0YXJ0TG9jIC0gZXhwZWN0ZWRMb2M7XG4gICAgICBsZXQgdGV4dDI7XG4gICAgICBpZiAoZW5kTG9jID09PSAtMSA/IHRleHQyID0gdGV4dC5zdWJzdHJpbmcoc3RhcnRMb2MsIHN0YXJ0TG9jICsgdGV4dDEubGVuZ3RoKSA6IHRleHQyID0gdGV4dC5zdWJzdHJpbmcoc3RhcnRMb2MsIGVuZExvYyArIE1BWF9CSVRTKSwgdGV4dDEgPT09IHRleHQyKSB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRMb2MpICsgZGlmZlRleHQyKHBhcnNlZFt4XS5kaWZmcykgKyB0ZXh0LnN1YnN0cmluZyhzdGFydExvYyArIHRleHQxLmxlbmd0aCk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IGRpZmZzID0gZGlmZih0ZXh0MSwgdGV4dDIsIHtcbiAgICAgICAgICBjaGVja0xpbmVzOiAhMVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRleHQxLmxlbmd0aCA+IE1BWF9CSVRTICYmIGxldmVuc2h0ZWluKGRpZmZzKSAvIHRleHQxLmxlbmd0aCA+IGRlbGV0ZVRocmVzaG9sZCkgcmVzdWx0c1t4XSA9ICExO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkaWZmcyA9IGNsZWFudXBTZW1hbnRpY0xvc3NsZXNzKGRpZmZzKTtcbiAgICAgICAgICBsZXQgaW5kZXgxID0gMCwgaW5kZXgyID0gMDtcbiAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHBhcnNlZFt4XS5kaWZmcy5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgY29uc3QgbW9kID0gcGFyc2VkW3hdLmRpZmZzW3ldO1xuICAgICAgICAgICAgbW9kWzBdICE9PSBESUZGX0VRVUFMICYmIChpbmRleDIgPSB4SW5kZXgoZGlmZnMsIGluZGV4MSkpLCBtb2RbMF0gPT09IERJRkZfSU5TRVJUID8gdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0TG9jICsgaW5kZXgyKSArIG1vZFsxXSArIHRleHQuc3Vic3RyaW5nKHN0YXJ0TG9jICsgaW5kZXgyKSA6IG1vZFswXSA9PT0gRElGRl9ERUxFVEUgJiYgKHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydExvYyArIGluZGV4MikgKyB0ZXh0LnN1YnN0cmluZyhzdGFydExvYyArIHhJbmRleChkaWZmcywgaW5kZXgxICsgbW9kWzFdLmxlbmd0aCkpKSwgbW9kWzBdICE9PSBESUZGX0RFTEVURSAmJiAoaW5kZXgxICs9IG1vZFsxXS5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGV4dCA9IHRleHQuc3Vic3RyaW5nKG51bGxQYWRkaW5nLmxlbmd0aCwgdGV4dC5sZW5ndGggLSBudWxsUGFkZGluZy5sZW5ndGgpLCBbdGV4dCwgcmVzdWx0c107XG59XG5jb25zdCBwYXRjaEhlYWRlciA9IC9eQEAgLShcXGQrKSw/KFxcZCopIFxcKyhcXGQrKSw/KFxcZCopIEBAJC87XG5mdW5jdGlvbiBwYXJzZSh0ZXh0bGluZSkge1xuICBpZiAoIXRleHRsaW5lKSByZXR1cm4gW107XG4gIGNvbnN0IHBhdGNoZXMgPSBbXSwgbGluZXMgPSB0ZXh0bGluZS5zcGxpdChgXG5gKTtcbiAgbGV0IHRleHRQb2ludGVyID0gMDtcbiAgZm9yICg7IHRleHRQb2ludGVyIDwgbGluZXMubGVuZ3RoOyApIHtcbiAgICBjb25zdCBtID0gbGluZXNbdGV4dFBvaW50ZXJdLm1hdGNoKHBhdGNoSGVhZGVyKTtcbiAgICBpZiAoIW0pIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXRjaCBzdHJpbmc6ICR7bGluZXNbdGV4dFBvaW50ZXJdfWApO1xuICAgIGNvbnN0IHBhdGNoID0gY3JlYXRlUGF0Y2hPYmplY3QodG9JbnQobVsxXSksIHRvSW50KG1bM10pKTtcbiAgICBmb3IgKHBhdGNoZXMucHVzaChwYXRjaCksIG1bMl0gPT09IFwiXCIgPyAocGF0Y2guc3RhcnQxLS0sIHBhdGNoLnV0ZjhTdGFydDEtLSwgcGF0Y2gubGVuZ3RoMSA9IDEsIHBhdGNoLnV0ZjhMZW5ndGgxID0gMSkgOiBtWzJdID09PSBcIjBcIiA/IChwYXRjaC5sZW5ndGgxID0gMCwgcGF0Y2gudXRmOExlbmd0aDEgPSAwKSA6IChwYXRjaC5zdGFydDEtLSwgcGF0Y2gudXRmOFN0YXJ0MS0tLCBwYXRjaC51dGY4TGVuZ3RoMSA9IHRvSW50KG1bMl0pLCBwYXRjaC5sZW5ndGgxID0gcGF0Y2gudXRmOExlbmd0aDEpLCBtWzRdID09PSBcIlwiID8gKHBhdGNoLnN0YXJ0Mi0tLCBwYXRjaC51dGY4U3RhcnQyLS0sIHBhdGNoLmxlbmd0aDIgPSAxLCBwYXRjaC51dGY4TGVuZ3RoMiA9IDEpIDogbVs0XSA9PT0gXCIwXCIgPyAocGF0Y2gubGVuZ3RoMiA9IDAsIHBhdGNoLnV0ZjhMZW5ndGgyID0gMCkgOiAocGF0Y2guc3RhcnQyLS0sIHBhdGNoLnV0ZjhTdGFydDItLSwgcGF0Y2gudXRmOExlbmd0aDIgPSB0b0ludChtWzRdKSwgcGF0Y2gubGVuZ3RoMiA9IHBhdGNoLnV0ZjhMZW5ndGgyKSwgdGV4dFBvaW50ZXIrKzsgdGV4dFBvaW50ZXIgPCBsaW5lcy5sZW5ndGg7ICkge1xuICAgICAgY29uc3QgY3VycmVudExpbmUgPSBsaW5lc1t0ZXh0UG9pbnRlcl0sIHNpZ24gPSBjdXJyZW50TGluZS5jaGFyQXQoMCk7XG4gICAgICBpZiAoc2lnbiA9PT0gXCJAXCIpIGJyZWFrO1xuICAgICAgaWYgKHNpZ24gPT09IFwiXCIpIHtcbiAgICAgICAgdGV4dFBvaW50ZXIrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBsZXQgbGluZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpbmUgPSBkZWNvZGVVUkkoY3VycmVudExpbmUuc2xpY2UoMSkpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSWxsZWdhbCBlc2NhcGUgaW4gcGFyc2U6ICR7Y3VycmVudExpbmV9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCB1dGY4RGlmZiA9IGNvdW50VXRmOEJ5dGVzKGxpbmUpIC0gbGluZS5sZW5ndGg7XG4gICAgICBpZiAoc2lnbiA9PT0gXCItXCIpIHBhdGNoLmRpZmZzLnB1c2goW0RJRkZfREVMRVRFLCBsaW5lXSksIHBhdGNoLmxlbmd0aDEgLT0gdXRmOERpZmY7XG4gICAgICBlbHNlIGlmIChzaWduID09PSBcIitcIikgcGF0Y2guZGlmZnMucHVzaChbRElGRl9JTlNFUlQsIGxpbmVdKSwgcGF0Y2gubGVuZ3RoMiAtPSB1dGY4RGlmZjtcbiAgICAgIGVsc2UgaWYgKHNpZ24gPT09IFwiIFwiKSBwYXRjaC5kaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBsaW5lXSksIHBhdGNoLmxlbmd0aDEgLT0gdXRmOERpZmYsIHBhdGNoLmxlbmd0aDIgLT0gdXRmOERpZmY7XG4gICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXRjaCBtb2RlIFwiJHtzaWdufVwiIGluOiAke2xpbmV9YCk7XG4gICAgICB0ZXh0UG9pbnRlcisrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0Y2hlcztcbn1cbmZ1bmN0aW9uIHRvSW50KG51bSkge1xuICByZXR1cm4gcGFyc2VJbnQobnVtLCAxMCk7XG59XG5jb25zdCBDVVJSRU5UX1VORE9fU1RFUCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gd2l0aFVuZG9TdGVwKGVkaXRvciwgZm4pIHtcbiAgY29uc3QgY3VycmVudCA9IENVUlJFTlRfVU5ET19TVEVQLmdldChlZGl0b3IpO1xuICBpZiAoY3VycmVudCkge1xuICAgIGZuKCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIENVUlJFTlRfVU5ET19TVEVQLnNldChlZGl0b3IsIGN1cnJlbnQgPz8ge1xuICAgIHVuZG9TdGVwSWQ6IGRlZmF1bHRLZXlHZW5lcmF0b3IoKVxuICB9KSwgZm4oKSwgQ1VSUkVOVF9VTkRPX1NURVAuc2V0KGVkaXRvciwgdm9pZCAwKTtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRVbmRvU3RlcElkKGVkaXRvcikge1xuICByZXR1cm4gQ1VSUkVOVF9VTkRPX1NURVAuZ2V0KGVkaXRvcik/LnVuZG9TdGVwSWQ7XG59XG5jb25zdCBkZWJ1ZyRkID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoVW5kb1JlZG9cIiksIFNBVklORyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBSRU1PVEVfUEFUQ0hFUyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBVTkRPX1NURVBfTElNSVQgPSAxZTMsIGlzU2F2aW5nID0gKGVkaXRvcikgPT4ge1xuICBjb25zdCBzdGF0ZSA9IFNBVklORy5nZXQoZWRpdG9yKTtcbiAgcmV0dXJuIHN0YXRlID09PSB2b2lkIDAgPyAhMCA6IHN0YXRlO1xufSwgZ2V0UmVtb3RlUGF0Y2hlcyA9IChlZGl0b3IpID0+IChSRU1PVEVfUEFUQ0hFUy5nZXQoZWRpdG9yKSB8fCBSRU1PVEVfUEFUQ0hFUy5zZXQoZWRpdG9yLCBbXSksIFJFTU9URV9QQVRDSEVTLmdldChlZGl0b3IpIHx8IFtdKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhVbmRvUmVkbyhvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBlZGl0b3JBY3RvclxuICB9ID0gb3B0aW9ucztcbiAgcmV0dXJuIChlZGl0b3IpID0+IHtcbiAgICBsZXQgcHJldmlvdXNTbmFwc2hvdCA9IGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lKTtcbiAgICBjb25zdCByZW1vdGVQYXRjaGVzID0gZ2V0UmVtb3RlUGF0Y2hlcyhlZGl0b3IpO1xuICAgIGxldCBwcmV2aW91c1VuZG9TdGVwSWQgPSBnZXRDdXJyZW50VW5kb1N0ZXBJZChlZGl0b3IpO1xuICAgIG9wdGlvbnMuc3Vic2NyaXB0aW9ucy5wdXNoKCgpID0+IHtcbiAgICAgIGRlYnVnJGQoXCJTdWJzY3JpYmluZyB0byBwYXRjaGVzXCIpO1xuICAgICAgY29uc3Qgc3ViID0gZWRpdG9yQWN0b3Iub24oXCJwYXRjaGVzXCIsICh7XG4gICAgICAgIHBhdGNoZXMsXG4gICAgICAgIHNuYXBzaG90XG4gICAgICB9KSA9PiB7XG4gICAgICAgIGxldCByZXNldCA9ICExO1xuICAgICAgICBwYXRjaGVzLmZvckVhY2goKHBhdGNoKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXNldCAmJiBwYXRjaC5vcmlnaW4gIT09IFwibG9jYWxcIiAmJiByZW1vdGVQYXRjaGVzKSB7XG4gICAgICAgICAgICBpZiAocGF0Y2gudHlwZSA9PT0gXCJ1bnNldFwiICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIGRlYnVnJGQoXCJTb21lb25lIGVsc2UgY2xlYXJlZCB0aGUgY29udGVudCwgcmVzZXR0aW5nIHVuZG8vcmVkbyBoaXN0b3J5XCIpLCBlZGl0b3IuaGlzdG9yeSA9IHtcbiAgICAgICAgICAgICAgICB1bmRvczogW10sXG4gICAgICAgICAgICAgICAgcmVkb3M6IFtdXG4gICAgICAgICAgICAgIH0sIHJlbW90ZVBhdGNoZXMuc3BsaWNlKDAsIHJlbW90ZVBhdGNoZXMubGVuZ3RoKSwgU0FWSU5HLnNldChlZGl0b3IsICEwKSwgcmVzZXQgPSAhMDtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3RlUGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgcGF0Y2gsXG4gICAgICAgICAgICAgIHRpbWU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICBzbmFwc2hvdCxcbiAgICAgICAgICAgICAgcHJldmlvdXNTbmFwc2hvdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSwgcHJldmlvdXNTbmFwc2hvdCA9IHNuYXBzaG90O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkZWJ1ZyRkKFwiVW5zdWJzY3JpYmluZyB0byBwYXRjaGVzXCIpLCBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgIH07XG4gICAgfSksIGVkaXRvci5oaXN0b3J5ID0ge1xuICAgICAgdW5kb3M6IFtdLFxuICAgICAgcmVkb3M6IFtdXG4gICAgfTtcbiAgICBjb25zdCB7XG4gICAgICBhcHBseTogYXBwbHkyXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmFwcGx5ID0gKG9wKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSkpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZG9pbmcoZWRpdG9yKSB8fCBpc1JlZG9pbmcoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9wZXJhdGlvbnMsXG4gICAgICAgIGhpc3RvcnlcbiAgICAgIH0gPSBlZGl0b3IsIHtcbiAgICAgICAgdW5kb3NcbiAgICAgIH0gPSBoaXN0b3J5LCBzdGVwID0gdW5kb3NbdW5kb3MubGVuZ3RoIC0gMV0sIGxhc3RPcCA9IHN0ZXAgJiYgc3RlcC5vcGVyYXRpb25zICYmIHN0ZXAub3BlcmF0aW9uc1tzdGVwLm9wZXJhdGlvbnMubGVuZ3RoIC0gMV0sIG92ZXJ3cml0ZSA9IHNob3VsZE92ZXJ3cml0ZShvcCwgbGFzdE9wKSwgc2F2ZSA9IGlzU2F2aW5nKGVkaXRvciksIGN1cnJlbnRVbmRvU3RlcElkID0gZ2V0Q3VycmVudFVuZG9TdGVwSWQoZWRpdG9yKTtcbiAgICAgIGxldCBtZXJnZSA9IGN1cnJlbnRVbmRvU3RlcElkID09PSBwcmV2aW91c1VuZG9TdGVwSWQ7XG4gICAgICBpZiAoc2F2ZSkge1xuICAgICAgICBpZiAoc3RlcCA/IG9wZXJhdGlvbnMubGVuZ3RoID09PSAwICYmIChtZXJnZSA9IGN1cnJlbnRVbmRvU3RlcElkID09PSB2b2lkIDAgJiYgcHJldmlvdXNVbmRvU3RlcElkID09PSB2b2lkIDAgPyBzaG91bGRNZXJnZShvcCwgbGFzdE9wKSB8fCBvdmVyd3JpdGUgOiBtZXJnZSkgOiBtZXJnZSA9ICExLCBzdGVwICYmIG1lcmdlKVxuICAgICAgICAgIHN0ZXAub3BlcmF0aW9ucy5wdXNoKG9wKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29uc3QgbmV3U3RlcCA9IHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnM6IFsuLi5lZGl0b3Iuc2VsZWN0aW9uID09PSBudWxsID8gW10gOiBbY3JlYXRlU2VsZWN0T3BlcmF0aW9uKGVkaXRvcildLCBvcF0sXG4gICAgICAgICAgICB0aW1lc3RhbXA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpXG4gICAgICAgICAgfTtcbiAgICAgICAgICB1bmRvcy5wdXNoKG5ld1N0ZXApLCBkZWJ1ZyRkKFwiQ3JlYXRlZCBuZXcgdW5kbyBzdGVwXCIsIHN0ZXApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyB1bmRvcy5sZW5ndGggPiBVTkRPX1NURVBfTElNSVQ7IClcbiAgICAgICAgICB1bmRvcy5zaGlmdCgpO1xuICAgICAgICBzaG91bGRDbGVhcihvcCkgJiYgKGhpc3RvcnkucmVkb3MgPSBbXSk7XG4gICAgICB9XG4gICAgICBwcmV2aW91c1VuZG9TdGVwSWQgPSBjdXJyZW50VW5kb1N0ZXBJZCwgYXBwbHkyKG9wKTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5jb25zdCBoaXN0b3J5VW5kb09wZXJhdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgb3BlcmF0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IG9wZXJhdGlvbi5lZGl0b3IsIHtcbiAgICB1bmRvc1xuICB9ID0gZWRpdG9yLmhpc3RvcnksIHJlbW90ZVBhdGNoZXMgPSBnZXRSZW1vdGVQYXRjaGVzKGVkaXRvcik7XG4gIGlmICh1bmRvcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgc3RlcCA9IHVuZG9zW3VuZG9zLmxlbmd0aCAtIDFdO1xuICAgIGlmIChkZWJ1ZyRkKFwiVW5kb2luZ1wiLCBzdGVwKSwgc3RlcC5vcGVyYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IG90aGVyUGF0Y2hlcyA9IHJlbW90ZVBhdGNoZXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnRpbWUgPj0gc3RlcC50aW1lc3RhbXApO1xuICAgICAgbGV0IHRyYW5zZm9ybWVkT3BlcmF0aW9ucyA9IHN0ZXAub3BlcmF0aW9ucztcbiAgICAgIG90aGVyUGF0Y2hlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIHRyYW5zZm9ybWVkT3BlcmF0aW9ucyA9IGZsYXR0ZW4odHJhbnNmb3JtZWRPcGVyYXRpb25zLm1hcCgob3ApID0+IHRyYW5zZm9ybU9wZXJhdGlvbihlZGl0b3IsIGl0ZW0ucGF0Y2gsIG9wLCBpdGVtLnNuYXBzaG90LCBpdGVtLnByZXZpb3VzU25hcHNob3QpKSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHJldmVyc2VkT3BlcmF0aW9ucyA9IHRyYW5zZm9ybWVkT3BlcmF0aW9ucy5tYXAoT3BlcmF0aW9uLmludmVyc2UpLnJldmVyc2UoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgd2l0aFVuZG9pbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICB3aXRob3V0U2F2aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICByZXZlcnNlZE9wZXJhdGlvbnMuZm9yRWFjaCgob3ApID0+IHtcbiAgICAgICAgICAgICAgICBlZGl0b3IuYXBwbHkob3ApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBkZWJ1ZyRkKFwiQ291bGQgbm90IHBlcmZvcm0gdW5kbyBzdGVwXCIsIGVyciksIHJlbW90ZVBhdGNoZXMuc3BsaWNlKDAsIHJlbW90ZVBhdGNoZXMubGVuZ3RoKSwgVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpLCBlZGl0b3IuaGlzdG9yeSA9IHtcbiAgICAgICAgICB1bmRvczogW10sXG4gICAgICAgICAgcmVkb3M6IFtdXG4gICAgICAgIH0sIFNBVklORy5zZXQoZWRpdG9yLCAhMCksIHNldElzVW5kb2luZyhlZGl0b3IsICExKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvci5oaXN0b3J5LnJlZG9zLnB1c2goc3RlcCksIGVkaXRvci5oaXN0b3J5LnVuZG9zLnBvcCgpO1xuICAgIH1cbiAgfVxufSwgaGlzdG9yeVJlZG9PcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBjb25zdCBlZGl0b3IgPSBvcGVyYXRpb24uZWRpdG9yLCB7XG4gICAgcmVkb3NcbiAgfSA9IGVkaXRvci5oaXN0b3J5LCByZW1vdGVQYXRjaGVzID0gZ2V0UmVtb3RlUGF0Y2hlcyhlZGl0b3IpO1xuICBpZiAocmVkb3MubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSByZWRvc1tyZWRvcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoZGVidWckZChcIlJlZG9pbmdcIiwgc3RlcCksIHN0ZXAub3BlcmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBvdGhlclBhdGNoZXMgPSByZW1vdGVQYXRjaGVzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50aW1lID49IHN0ZXAudGltZXN0YW1wKTtcbiAgICAgIGxldCB0cmFuc2Zvcm1lZE9wZXJhdGlvbnMgPSBzdGVwLm9wZXJhdGlvbnM7XG4gICAgICBvdGhlclBhdGNoZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbnMgPSBmbGF0dGVuKHRyYW5zZm9ybWVkT3BlcmF0aW9ucy5tYXAoKG9wKSA9PiB0cmFuc2Zvcm1PcGVyYXRpb24oZWRpdG9yLCBpdGVtLnBhdGNoLCBvcCwgaXRlbS5zbmFwc2hvdCwgaXRlbS5wcmV2aW91c1NuYXBzaG90KSkpO1xuICAgICAgfSk7XG4gICAgICB0cnkge1xuICAgICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIHdpdGhSZWRvaW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgd2l0aG91dFNhdmluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgdHJhbnNmb3JtZWRPcGVyYXRpb25zLmZvckVhY2goKG9wKSA9PiB7XG4gICAgICAgICAgICAgICAgZWRpdG9yLmFwcGx5KG9wKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZGVidWckZChcIkNvdWxkIG5vdCBwZXJmb3JtIHJlZG8gc3RlcFwiLCBlcnIpLCByZW1vdGVQYXRjaGVzLnNwbGljZSgwLCByZW1vdGVQYXRjaGVzLmxlbmd0aCksIFRyYW5zZm9ybXMuZGVzZWxlY3QoZWRpdG9yKSwgZWRpdG9yLmhpc3RvcnkgPSB7XG4gICAgICAgICAgdW5kb3M6IFtdLFxuICAgICAgICAgIHJlZG9zOiBbXVxuICAgICAgICB9LCBTQVZJTkcuc2V0KGVkaXRvciwgITApLCBzZXRJc1JlZG9pbmcoZWRpdG9yLCAhMSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3IuaGlzdG9yeS51bmRvcy5wdXNoKHN0ZXApLCBlZGl0b3IuaGlzdG9yeS5yZWRvcy5wb3AoKTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiB0cmFuc2Zvcm1PcGVyYXRpb24oZWRpdG9yLCBwYXRjaCwgb3BlcmF0aW9uLCBzbmFwc2hvdCwgcHJldmlvdXNTbmFwc2hvdCkge1xuICBjb25zdCB0cmFuc2Zvcm1lZE9wZXJhdGlvbiA9IHtcbiAgICAuLi5vcGVyYXRpb25cbiAgfTtcbiAgaWYgKHBhdGNoLnR5cGUgPT09IFwiaW5zZXJ0XCIgJiYgcGF0Y2gucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBpbnNlcnRCbG9ja0luZGV4ID0gKHNuYXBzaG90IHx8IFtdKS5maW5kSW5kZXgoKGJsaykgPT4gaXNFcXVhbCh7XG4gICAgICBfa2V5OiBibGsuX2tleVxuICAgIH0sIHBhdGNoLnBhdGhbMF0pKTtcbiAgICByZXR1cm4gZGVidWckZChgQWRqdXN0aW5nIGJsb2NrIHBhdGggKCske3BhdGNoLml0ZW1zLmxlbmd0aH0pIGZvciAnJHt0cmFuc2Zvcm1lZE9wZXJhdGlvbi50eXBlfScgb3BlcmF0aW9uIGFuZCBwYXRjaCAnJHtwYXRjaC50eXBlfSdgKSwgW2FkanVzdEJsb2NrUGF0aCh0cmFuc2Zvcm1lZE9wZXJhdGlvbiwgcGF0Y2guaXRlbXMubGVuZ3RoLCBpbnNlcnRCbG9ja0luZGV4KV07XG4gIH1cbiAgaWYgKHBhdGNoLnR5cGUgPT09IFwidW5zZXRcIiAmJiBwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IHVuc2V0QmxvY2tJbmRleCA9IChwcmV2aW91c1NuYXBzaG90IHx8IFtdKS5maW5kSW5kZXgoKGJsaykgPT4gaXNFcXVhbCh7XG4gICAgICBfa2V5OiBibGsuX2tleVxuICAgIH0sIHBhdGNoLnBhdGhbMF0pKTtcbiAgICByZXR1cm4gXCJwYXRoXCIgaW4gdHJhbnNmb3JtZWRPcGVyYXRpb24gJiYgQXJyYXkuaXNBcnJheSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoKSAmJiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoWzBdID09PSB1bnNldEJsb2NrSW5kZXggPyAoZGVidWckZChcIlNraXBwaW5nIHRyYW5zZm9ybWF0aW9uIHRoYXQgdGFyZ2V0ZWQgcmVtb3ZlZCBibG9ja1wiKSwgW10pIDogW2FkanVzdEJsb2NrUGF0aCh0cmFuc2Zvcm1lZE9wZXJhdGlvbiwgLTEsIHVuc2V0QmxvY2tJbmRleCldO1xuICB9XG4gIGlmIChwYXRjaC50eXBlID09PSBcInVuc2V0XCIgJiYgcGF0Y2gucGF0aC5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIGRlYnVnJGQoYEFkanVzdGluZyBzZWxlY3Rpb24gZm9yIHVuc2V0IGV2ZXJ5dGhpbmcgcGF0Y2ggYW5kICR7b3BlcmF0aW9uLnR5cGV9IG9wZXJhdGlvbmApLCBbXTtcbiAgaWYgKHBhdGNoLnR5cGUgPT09IFwiZGlmZk1hdGNoUGF0Y2hcIikge1xuICAgIGNvbnN0IG9wZXJhdGlvblRhcmdldEJsb2NrID0gZmluZE9wZXJhdGlvblRhcmdldEJsb2NrKGVkaXRvciwgdHJhbnNmb3JtZWRPcGVyYXRpb24pO1xuICAgIHJldHVybiAhb3BlcmF0aW9uVGFyZ2V0QmxvY2sgfHwgIWlzRXF1YWwoe1xuICAgICAgX2tleTogb3BlcmF0aW9uVGFyZ2V0QmxvY2suX2tleVxuICAgIH0sIHBhdGNoLnBhdGhbMF0pID8gW3RyYW5zZm9ybWVkT3BlcmF0aW9uXSA6IChwYXJzZShwYXRjaC52YWx1ZSkuZm9yRWFjaCgoZGlmZlBhdGNoKSA9PiB7XG4gICAgICBsZXQgYWRqdXN0T2Zmc2V0QnkgPSAwLCBjaGFuZ2VkT2Zmc2V0ID0gZGlmZlBhdGNoLnV0ZjhTdGFydDE7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGRpZmZzXG4gICAgICB9ID0gZGlmZlBhdGNoO1xuICAgICAgaWYgKGRpZmZzLmZvckVhY2goKGRpZmYyLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBbZGlmZlR5cGUsIHRleHRdID0gZGlmZjI7XG4gICAgICAgIGRpZmZUeXBlID09PSBESUZGX0lOU0VSVCA/IChhZGp1c3RPZmZzZXRCeSArPSB0ZXh0Lmxlbmd0aCwgY2hhbmdlZE9mZnNldCArPSB0ZXh0Lmxlbmd0aCkgOiBkaWZmVHlwZSA9PT0gRElGRl9ERUxFVEUgPyAoYWRqdXN0T2Zmc2V0QnkgLT0gdGV4dC5sZW5ndGgsIGNoYW5nZWRPZmZzZXQgLT0gdGV4dC5sZW5ndGgpIDogZGlmZlR5cGUgPT09IERJRkZfRVFVQUwgJiYgKGRpZmZzLnNsaWNlKGluZGV4KS5ldmVyeSgoW2RUeXBlXSkgPT4gZFR5cGUgPT09IERJRkZfRVFVQUwpIHx8IChjaGFuZ2VkT2Zmc2V0ICs9IHRleHQubGVuZ3RoKSk7XG4gICAgICB9KSwgdHJhbnNmb3JtZWRPcGVyYXRpb24udHlwZSA9PT0gXCJpbnNlcnRfdGV4dFwiICYmIGNoYW5nZWRPZmZzZXQgPCB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vZmZzZXQgJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9mZnNldCArPSBhZGp1c3RPZmZzZXRCeSksIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGUgPT09IFwicmVtb3ZlX3RleHRcIiAmJiBjaGFuZ2VkT2Zmc2V0IDw9IHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9mZnNldCAtIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnRleHQubGVuZ3RoICYmICh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vZmZzZXQgKz0gYWRqdXN0T2Zmc2V0QnkpLCB0cmFuc2Zvcm1lZE9wZXJhdGlvbi50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIikge1xuICAgICAgICBjb25zdCBjdXJyZW50Rm9jdXMgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzPy5mb2N1cyA/IHtcbiAgICAgICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzLmZvY3VzXG4gICAgICAgIH0gOiB2b2lkIDAsIGN1cnJlbnRBbmNob3IgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbj8ucHJvcGVydGllcz8uYW5jaG9yID8ge1xuICAgICAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMuYW5jaG9yXG4gICAgICAgIH0gOiB2b2lkIDAsIG5ld0ZvY3VzID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/Lm5ld1Byb3BlcnRpZXM/LmZvY3VzID8ge1xuICAgICAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMuZm9jdXNcbiAgICAgICAgfSA6IHZvaWQgMCwgbmV3QW5jaG9yID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/Lm5ld1Byb3BlcnRpZXM/LmFuY2hvciA/IHtcbiAgICAgICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzLmFuY2hvclxuICAgICAgICB9IDogdm9pZCAwO1xuICAgICAgICAoY3VycmVudEZvY3VzICYmIGN1cnJlbnRBbmNob3IgfHwgbmV3Rm9jdXMgJiYgbmV3QW5jaG9yKSAmJiAoW2N1cnJlbnRGb2N1cywgY3VycmVudEFuY2hvciwgbmV3Rm9jdXMsIG5ld0FuY2hvcl0uZm9yRWFjaCgocG9pbnQpID0+IHtcbiAgICAgICAgICBwb2ludCAmJiBjaGFuZ2VkT2Zmc2V0IDwgcG9pbnQub2Zmc2V0ICYmIChwb2ludC5vZmZzZXQgKz0gYWRqdXN0T2Zmc2V0QnkpO1xuICAgICAgICB9KSwgY3VycmVudEZvY3VzICYmIGN1cnJlbnRBbmNob3IgJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgZm9jdXM6IGN1cnJlbnRGb2N1cyxcbiAgICAgICAgICBhbmNob3I6IGN1cnJlbnRBbmNob3JcbiAgICAgICAgfSksIG5ld0ZvY3VzICYmIG5ld0FuY2hvciAmJiAodHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcyA9IHtcbiAgICAgICAgICBmb2N1czogbmV3Rm9jdXMsXG4gICAgICAgICAgYW5jaG9yOiBuZXdBbmNob3JcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pLCBbdHJhbnNmb3JtZWRPcGVyYXRpb25dKTtcbiAgfVxuICByZXR1cm4gW3RyYW5zZm9ybWVkT3BlcmF0aW9uXTtcbn1cbmZ1bmN0aW9uIGFkanVzdEJsb2NrUGF0aChvcGVyYXRpb24sIGxldmVsLCBibG9ja0luZGV4KSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVkT3BlcmF0aW9uID0ge1xuICAgIC4uLm9wZXJhdGlvblxuICB9O1xuICBpZiAoYmxvY2tJbmRleCA+PSAwICYmIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGUgIT09IFwic2V0X3NlbGVjdGlvblwiICYmIEFycmF5LmlzQXJyYXkodHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aCkgJiYgdHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aFswXSA+PSBibG9ja0luZGV4ICsgbGV2ZWwgJiYgdHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aFswXSArIGxldmVsID4gLTEpIHtcbiAgICBjb25zdCBuZXdQYXRoID0gW3RyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGhbMF0gKyBsZXZlbCwgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aC5zbGljZSgxKV07XG4gICAgdHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aCA9IG5ld1BhdGg7XG4gIH1cbiAgaWYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiKSB7XG4gICAgY29uc3QgY3VycmVudEZvY3VzID0gdHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcz8uZm9jdXMgPyB7XG4gICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzLmZvY3VzXG4gICAgfSA6IHZvaWQgMCwgY3VycmVudEFuY2hvciA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uPy5wcm9wZXJ0aWVzPy5hbmNob3IgPyB7XG4gICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzLmFuY2hvclxuICAgIH0gOiB2b2lkIDAsIG5ld0ZvY3VzID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/Lm5ld1Byb3BlcnRpZXM/LmZvY3VzID8ge1xuICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcy5mb2N1c1xuICAgIH0gOiB2b2lkIDAsIG5ld0FuY2hvciA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uPy5uZXdQcm9wZXJ0aWVzPy5hbmNob3IgPyB7XG4gICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzLmFuY2hvclxuICAgIH0gOiB2b2lkIDA7XG4gICAgKGN1cnJlbnRGb2N1cyAmJiBjdXJyZW50QW5jaG9yIHx8IG5ld0ZvY3VzICYmIG5ld0FuY2hvcikgJiYgKFtjdXJyZW50Rm9jdXMsIGN1cnJlbnRBbmNob3IsIG5ld0ZvY3VzLCBuZXdBbmNob3JdLmZvckVhY2goKHBvaW50KSA9PiB7XG4gICAgICBwb2ludCAmJiBwb2ludC5wYXRoWzBdID49IGJsb2NrSW5kZXggKyBsZXZlbCAmJiBwb2ludC5wYXRoWzBdICsgbGV2ZWwgPiAtMSAmJiAocG9pbnQucGF0aCA9IFtwb2ludC5wYXRoWzBdICsgbGV2ZWwsIC4uLnBvaW50LnBhdGguc2xpY2UoMSldKTtcbiAgICB9KSwgY3VycmVudEZvY3VzICYmIGN1cnJlbnRBbmNob3IgJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMgPSB7XG4gICAgICBmb2N1czogY3VycmVudEZvY3VzLFxuICAgICAgYW5jaG9yOiBjdXJyZW50QW5jaG9yXG4gICAgfSksIG5ld0ZvY3VzICYmIG5ld0FuY2hvciAmJiAodHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcyA9IHtcbiAgICAgIGZvY3VzOiBuZXdGb2N1cyxcbiAgICAgIGFuY2hvcjogbmV3QW5jaG9yXG4gICAgfSkpO1xuICB9XG4gIHJldHVybiB0cmFuc2Zvcm1lZE9wZXJhdGlvbjtcbn1cbmNvbnN0IHNob3VsZE1lcmdlID0gKG9wLCBwcmV2KSA9PiAhIShvcC50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIiB8fCBwcmV2ICYmIG9wLnR5cGUgPT09IFwiaW5zZXJ0X3RleHRcIiAmJiBwcmV2LnR5cGUgPT09IFwiaW5zZXJ0X3RleHRcIiAmJiBvcC5vZmZzZXQgPT09IHByZXYub2Zmc2V0ICsgcHJldi50ZXh0Lmxlbmd0aCAmJiBQYXRoLmVxdWFscyhvcC5wYXRoLCBwcmV2LnBhdGgpICYmIG9wLnRleHQgIT09IFwiIFwiIHx8IHByZXYgJiYgb3AudHlwZSA9PT0gXCJyZW1vdmVfdGV4dFwiICYmIHByZXYudHlwZSA9PT0gXCJyZW1vdmVfdGV4dFwiICYmIG9wLm9mZnNldCArIG9wLnRleHQubGVuZ3RoID09PSBwcmV2Lm9mZnNldCAmJiBQYXRoLmVxdWFscyhvcC5wYXRoLCBwcmV2LnBhdGgpKSwgc2hvdWxkT3ZlcndyaXRlID0gKG9wLCBwcmV2KSA9PiAhIShwcmV2ICYmIG9wLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiICYmIHByZXYudHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIpLCBzaG91bGRDbGVhciA9IChvcCkgPT4gb3AudHlwZSAhPT0gXCJzZXRfc2VsZWN0aW9uXCI7XG5mdW5jdGlvbiB3aXRob3V0U2F2aW5nKGVkaXRvciwgZm4pIHtcbiAgY29uc3QgcHJldiA9IGlzU2F2aW5nKGVkaXRvcik7XG4gIFNBVklORy5zZXQoZWRpdG9yLCAhMSksIGZuKCksIFNBVklORy5zZXQoZWRpdG9yLCBwcmV2KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdE9wZXJhdGlvbihlZGl0b3IpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcInNldF9zZWxlY3Rpb25cIixcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAuLi5lZGl0b3Iuc2VsZWN0aW9uXG4gICAgfSxcbiAgICBuZXdQcm9wZXJ0aWVzOiB7XG4gICAgICAuLi5lZGl0b3Iuc2VsZWN0aW9uXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZmluZE9wZXJhdGlvblRhcmdldEJsb2NrKGVkaXRvciwgb3BlcmF0aW9uKSB7XG4gIGxldCBibG9jaztcbiAgcmV0dXJuIG9wZXJhdGlvbi50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIiAmJiBlZGl0b3Iuc2VsZWN0aW9uID8gYmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdXSA6IFwicGF0aFwiIGluIG9wZXJhdGlvbiAmJiAoYmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dKSwgYmxvY2s7XG59XG5jb25zdCBhZGRBbm5vdGF0aW9uT3BlcmF0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBvcGVyYXRpb25cbn0pID0+IHtcbiAgY29uc3QgcGFyc2VkQW5ub3RhdGlvbiA9IHBhcnNlQW5ub3RhdGlvbih7XG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgX3R5cGU6IG9wZXJhdGlvbi5hbm5vdGF0aW9uLm5hbWUsXG4gICAgICAuLi5vcGVyYXRpb24uYW5ub3RhdGlvbi52YWx1ZVxuICAgIH0sXG4gICAgY29udGV4dCxcbiAgICBvcHRpb25zOiB7XG4gICAgICByZWZyZXNoS2V5czogITEsXG4gICAgICB2YWxpZGF0ZUZpZWxkczogITBcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBhcnNlZEFubm90YXRpb24pXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2UgYW5ub3RhdGlvbiAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5hbm5vdGF0aW9uKX1gKTtcbiAgY29uc3QgZWRpdG9yID0gb3BlcmF0aW9uLmVkaXRvcjtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8IFJhbmdlLmlzQ29sbGFwc2VkKGVkaXRvci5zZWxlY3Rpb24pKVxuICAgIHJldHVybjtcbiAgbGV0IHBhdGhzLCBzcGFuUGF0aCwgbWFya0RlZlBhdGg7XG4gIGNvbnN0IG1hcmtEZWZQYXRocyA9IFtdLCBzZWxlY3RlZEJsb2NrcyA9IEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRCbG9jayhub2RlKSxcbiAgICByZXZlcnNlOiBSYW5nZS5pc0JhY2t3YXJkKGVkaXRvci5zZWxlY3Rpb24pXG4gIH0pO1xuICBsZXQgYmxvY2tJbmRleCA9IDA7XG4gIGZvciAoY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdIG9mIHNlbGVjdGVkQmxvY2tzKSB7XG4gICAgaWYgKGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCB8fCBibG9jay5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgYmxvY2suY2hpbGRyZW5bMF0udGV4dCA9PT0gXCJcIilcbiAgICAgIGNvbnRpbnVlO1xuICAgIGNvbnN0IGFubm90YXRpb25LZXkgPSBibG9ja0luZGV4ID09PSAwID8gcGFyc2VkQW5ub3RhdGlvbi5fa2V5IDogY29udGV4dC5rZXlHZW5lcmF0b3IoKSwgbWFya0RlZnMgPSBibG9jay5tYXJrRGVmcyA/PyBbXTtcbiAgICBtYXJrRGVmcy5maW5kKChtYXJrRGVmKSA9PiBtYXJrRGVmLl90eXBlID09PSBwYXJzZWRBbm5vdGF0aW9uLl90eXBlICYmIG1hcmtEZWYuX2tleSA9PT0gYW5ub3RhdGlvbktleSkgPT09IHZvaWQgMCAmJiAoVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgIG1hcmtEZWZzOiBbLi4ubWFya0RlZnMsIHtcbiAgICAgICAgLi4ucGFyc2VkQW5ub3RhdGlvbixcbiAgICAgICAgX2tleTogYW5ub3RhdGlvbktleVxuICAgICAgfV1cbiAgICB9LCB7XG4gICAgICBhdDogYmxvY2tQYXRoXG4gICAgfSksIG1hcmtEZWZQYXRoID0gW3tcbiAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICB9LCBcIm1hcmtEZWZzXCIsIHtcbiAgICAgIF9rZXk6IGFubm90YXRpb25LZXlcbiAgICB9XSwgUmFuZ2UuaXNCYWNrd2FyZChlZGl0b3Iuc2VsZWN0aW9uKSA/IG1hcmtEZWZQYXRocy51bnNoaWZ0KG1hcmtEZWZQYXRoKSA6IG1hcmtEZWZQYXRocy5wdXNoKG1hcmtEZWZQYXRoKSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7fSwge1xuICAgICAgbWF0Y2g6IFRleHQuaXNUZXh0LFxuICAgICAgc3BsaXQ6ICEwXG4gICAgfSk7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoKTtcbiAgICBmb3IgKGNvbnN0IFtzcGFuLCBwYXRoXSBvZiBjaGlsZHJlbikge1xuICAgICAgaWYgKCFlZGl0b3IuaXNUZXh0U3BhbihzcGFuKSB8fCAhUmFuZ2UuaW5jbHVkZXMoZWRpdG9yLnNlbGVjdGlvbiwgcGF0aCkpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY29uc3QgbWFya3MgPSBzcGFuLm1hcmtzID8/IFtdLCBleGlzdGluZ1NhbWVUeXBlQW5ub3RhdGlvbnMgPSBtYXJrcy5maWx0ZXIoKG1hcmspID0+IG1hcmtEZWZzLnNvbWUoKG1hcmtEZWYpID0+IG1hcmtEZWYuX2tleSA9PT0gbWFyayAmJiBtYXJrRGVmLl90eXBlID09PSBwYXJzZWRBbm5vdGF0aW9uLl90eXBlKSk7XG4gICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICBtYXJrczogWy4uLm1hcmtzLmZpbHRlcigobWFyaykgPT4gIWV4aXN0aW5nU2FtZVR5cGVBbm5vdGF0aW9ucy5pbmNsdWRlcyhtYXJrKSksIGFubm90YXRpb25LZXldXG4gICAgICB9LCB7XG4gICAgICAgIGF0OiBwYXRoXG4gICAgICB9KSwgc3BhblBhdGggPSBbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogc3Bhbi5fa2V5XG4gICAgICB9XTtcbiAgICB9XG4gICAgYmxvY2tJbmRleCsrO1xuICB9XG4gIHJldHVybiBtYXJrRGVmUGF0aCAmJiBzcGFuUGF0aCAmJiAocGF0aHMgPSB7XG4gICAgbWFya0RlZlBhdGgsXG4gICAgbWFya0RlZlBhdGhzLFxuICAgIHNwYW5QYXRoXG4gIH0pLCBwYXRocztcbn0sIHJlbW92ZUFubm90YXRpb25PcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBjb25zdCBlZGl0b3IgPSBvcGVyYXRpb24uZWRpdG9yO1xuICBpZiAoZWRpdG9yLnNlbGVjdGlvbilcbiAgICBpZiAoUmFuZ2UuaXNDb2xsYXBzZWQoZWRpdG9yLnNlbGVjdGlvbikpIHtcbiAgICAgIGNvbnN0IFtibG9jaywgYmxvY2tQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgZWRpdG9yLnNlbGVjdGlvbiwge1xuICAgICAgICBkZXB0aDogMVxuICAgICAgfSk7XG4gICAgICBpZiAoIWVkaXRvci5pc1RleHRCbG9jayhibG9jaykpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHBvdGVudGlhbEFubm90YXRpb25zID0gKGJsb2NrLm1hcmtEZWZzID8/IFtdKS5maWx0ZXIoKG1hcmtEZWYpID0+IG1hcmtEZWYuX3R5cGUgPT09IG9wZXJhdGlvbi5hbm5vdGF0aW9uLm5hbWUpLCBbc2VsZWN0ZWRDaGlsZCwgc2VsZWN0ZWRDaGlsZFBhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLCB7XG4gICAgICAgIGRlcHRoOiAyXG4gICAgICB9KTtcbiAgICAgIGlmICghZWRpdG9yLmlzVGV4dFNwYW4oc2VsZWN0ZWRDaGlsZCkpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IGFubm90YXRpb25Ub1JlbW92ZSA9IHNlbGVjdGVkQ2hpbGQubWFya3M/LmZpbmQoKG1hcmspID0+IHBvdGVudGlhbEFubm90YXRpb25zLnNvbWUoKG1hcmtEZWYpID0+IG1hcmtEZWYuX2tleSA9PT0gbWFyaykpO1xuICAgICAgaWYgKCFhbm5vdGF0aW9uVG9SZW1vdmUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHByZXZpb3VzU3BhbnNXaXRoU2FtZUFubm90YXRpb24gPSBbXTtcbiAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBibG9ja1BhdGgsIHtcbiAgICAgICAgcmV2ZXJzZTogITBcbiAgICAgIH0pKVxuICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpICYmIFBhdGguaXNCZWZvcmUoY2hpbGRQYXRoLCBzZWxlY3RlZENoaWxkUGF0aCkpXG4gICAgICAgICAgaWYgKGNoaWxkLm1hcmtzPy5pbmNsdWRlcyhhbm5vdGF0aW9uVG9SZW1vdmUpKVxuICAgICAgICAgICAgcHJldmlvdXNTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbi5wdXNoKFtjaGlsZCwgY2hpbGRQYXRoXSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICBjb25zdCBuZXh0U3BhbnNXaXRoU2FtZUFubm90YXRpb24gPSBbXTtcbiAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBibG9ja1BhdGgpKVxuICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpICYmIFBhdGguaXNBZnRlcihjaGlsZFBhdGgsIHNlbGVjdGVkQ2hpbGRQYXRoKSlcbiAgICAgICAgICBpZiAoY2hpbGQubWFya3M/LmluY2x1ZGVzKGFubm90YXRpb25Ub1JlbW92ZSkpXG4gICAgICAgICAgICBuZXh0U3BhbnNXaXRoU2FtZUFubm90YXRpb24ucHVzaChbY2hpbGQsIGNoaWxkUGF0aF0pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgWy4uLnByZXZpb3VzU3BhbnNXaXRoU2FtZUFubm90YXRpb24sIFtzZWxlY3RlZENoaWxkLCBzZWxlY3RlZENoaWxkUGF0aF0sIC4uLm5leHRTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbl0pXG4gICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya3M6IGNoaWxkLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+IG1hcmsgIT09IGFubm90YXRpb25Ub1JlbW92ZSlcbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7fSwge1xuICAgICAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRTcGFuKG5vZGUpLFxuICAgICAgICBzcGxpdDogITAsXG4gICAgICAgIGhhbmdpbmc6ICEwXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGJsb2NrcyA9IEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gICAgICB9KTtcbiAgICAgIGZvciAoY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdIG9mIGJsb2Nrcykge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBibG9ja1BhdGgpO1xuICAgICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBjaGlsZHJlbikge1xuICAgICAgICAgIGlmICghZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpIHx8ICFSYW5nZS5pbmNsdWRlcyhlZGl0b3Iuc2VsZWN0aW9uLCBjaGlsZFBhdGgpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY29uc3QgbWFya0RlZnMgPSBibG9jay5tYXJrRGVmcyA/PyBbXSwgbWFya3MgPSBjaGlsZC5tYXJrcyA/PyBbXSwgbWFya3NXaXRob3V0QW5ub3RhdGlvbiA9IG1hcmtzLmZpbHRlcigobWFyaykgPT4gbWFya0RlZnMuZmluZCgobWFya0RlZjIpID0+IG1hcmtEZWYyLl9rZXkgPT09IG1hcmspPy5fdHlwZSAhPT0gb3BlcmF0aW9uLmFubm90YXRpb24ubmFtZSk7XG4gICAgICAgICAgbWFya3NXaXRob3V0QW5ub3RhdGlvbi5sZW5ndGggIT09IG1hcmtzLmxlbmd0aCAmJiBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbWFya3M6IG1hcmtzV2l0aG91dEFubm90YXRpb25cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogY2hpbGRQYXRoXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG59LCBibG9ja1NldE9wZXJhdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgb3BlcmF0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGxvY2F0aW9uID0gdG9TbGF0ZVJhbmdlKHtcbiAgICBjb250ZXh0OiB7XG4gICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hLFxuICAgICAgdmFsdWU6IG9wZXJhdGlvbi5lZGl0b3IudmFsdWUsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogb3BlcmF0aW9uLmF0LFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuICAgICAgICBmb2N1czoge1xuICAgICAgICAgIHBhdGg6IG9wZXJhdGlvbi5hdCxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYmxvY2tJbmRleE1hcDogb3BlcmF0aW9uLmVkaXRvci5ibG9ja0luZGV4TWFwXG4gIH0pO1xuICBpZiAoIWxvY2F0aW9uKVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGNvbnZlcnQgJHtKU09OLnN0cmluZ2lmeShvcGVyYXRpb24uYXQpfSBpbnRvIGEgU2xhdGUgUmFuZ2VgKTtcbiAgY29uc3QgYmxvY2sgPSBFZGl0b3Iubm9kZShvcGVyYXRpb24uZWRpdG9yLCBsb2NhdGlvbiwge1xuICAgIGRlcHRoOiAxXG4gIH0pPy5bMF07XG4gIGlmICghYmxvY2spXG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBibG9jayBhdCAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5hdCl9YCk7XG4gIGNvbnN0IHBhcnNlZEJsb2NrID0gZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgY29udGV4dC5zY2hlbWEuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KG9wZXJhdGlvbi5lZGl0b3IpKS5hdCgwKTtcbiAgaWYgKCFwYXJzZWRCbG9jaylcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBwYXJzZSBibG9jayBhdCAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5hdCl9YCk7XG4gIGNvbnN0IHtcbiAgICBfdHlwZSxcbiAgICAuLi5maWx0ZXJlZFByb3BzXG4gIH0gPSBvcGVyYXRpb24ucHJvcHMsIHVwZGF0ZWRCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2s6IHtcbiAgICAgIC4uLnBhcnNlZEJsb2NrLFxuICAgICAgLi4uZmlsdGVyZWRQcm9wc1xuICAgIH0sXG4gICAgb3B0aW9uczoge1xuICAgICAgcmVmcmVzaEtleXM6ICExLFxuICAgICAgdmFsaWRhdGVGaWVsZHM6ICEwXG4gICAgfVxuICB9KTtcbiAgaWYgKCF1cGRhdGVkQmxvY2spXG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gdXBkYXRlIGJsb2NrIGF0ICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLmF0KX1gKTtcbiAgY29uc3Qgc2xhdGVCbG9jayA9IHRvU2xhdGVWYWx1ZShbdXBkYXRlZEJsb2NrXSwge1xuICAgIHNjaGVtYVR5cGVzOiBjb250ZXh0LnNjaGVtYVxuICB9KT8uYXQoMCk7XG4gIGlmICghc2xhdGVCbG9jaylcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY29udmVydCBibG9jayB0byBTbGF0ZSB2YWx1ZVwiKTtcbiAgVHJhbnNmb3Jtcy5zZXROb2RlcyhvcGVyYXRpb24uZWRpdG9yLCBzbGF0ZUJsb2NrLCB7XG4gICAgYXQ6IGxvY2F0aW9uXG4gIH0pO1xufSwgYmxvY2tVbnNldE9wZXJhdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgb3BlcmF0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGxvY2F0aW9uID0gdG9TbGF0ZVJhbmdlKHtcbiAgICBjb250ZXh0OiB7XG4gICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hLFxuICAgICAgdmFsdWU6IG9wZXJhdGlvbi5lZGl0b3IudmFsdWUsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogb3BlcmF0aW9uLmF0LFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuICAgICAgICBmb2N1czoge1xuICAgICAgICAgIHBhdGg6IG9wZXJhdGlvbi5hdCxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYmxvY2tJbmRleE1hcDogb3BlcmF0aW9uLmVkaXRvci5ibG9ja0luZGV4TWFwXG4gIH0pO1xuICBpZiAoIWxvY2F0aW9uKVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGNvbnZlcnQgJHtKU09OLnN0cmluZ2lmeShvcGVyYXRpb24uYXQpfSBpbnRvIGEgU2xhdGUgUmFuZ2VgKTtcbiAgY29uc3QgYmxvY2sgPSBFZGl0b3Iubm9kZShvcGVyYXRpb24uZWRpdG9yLCBsb2NhdGlvbiwge1xuICAgIGRlcHRoOiAxXG4gIH0pPy5bMF07XG4gIGlmICghYmxvY2spXG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBibG9jayBhdCAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5hdCl9YCk7XG4gIGNvbnN0IHBhcnNlZEJsb2NrID0gZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgY29udGV4dC5zY2hlbWEuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KG9wZXJhdGlvbi5lZGl0b3IpKS5hdCgwKTtcbiAgaWYgKCFwYXJzZWRCbG9jaylcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBwYXJzZSBibG9jayBhdCAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5hdCl9YCk7XG4gIGlmIChpc1RleHRCbG9jayhjb250ZXh0LCBwYXJzZWRCbG9jaykpIHtcbiAgICBjb25zdCBwcm9wc1RvUmVtb3ZlID0gb3BlcmF0aW9uLnByb3BzLmZpbHRlcigocHJvcCkgPT4gcHJvcCAhPT0gXCJfdHlwZVwiKSwgdXBkYXRlZFRleHRCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgICAgY29udGV4dCxcbiAgICAgIGJsb2NrOiBvbWl0KHBhcnNlZEJsb2NrLCBwcm9wc1RvUmVtb3ZlKSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcmVmcmVzaEtleXM6ICExLFxuICAgICAgICB2YWxpZGF0ZUZpZWxkczogITBcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIXVwZGF0ZWRUZXh0QmxvY2spXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byB1cGRhdGUgYmxvY2sgYXQgJHtKU09OLnN0cmluZ2lmeShvcGVyYXRpb24uYXQpfWApO1xuICAgIGNvbnN0IHByb3BzVG9TZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcHNUb1JlbW92ZSlcbiAgICAgIHByb3AgaW4gdXBkYXRlZFRleHRCbG9jayA/IHByb3BzVG9TZXRbcHJvcF0gPSB1cGRhdGVkVGV4dEJsb2NrW3Byb3BdIDogcHJvcHNUb1NldFtwcm9wXSA9IHZvaWQgMDtcbiAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKG9wZXJhdGlvbi5lZGl0b3IsIHByb3BzVG9TZXQsIHtcbiAgICAgIGF0OiBsb2NhdGlvblxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB1cGRhdGVkQmxvY2tPYmplY3QgPSBwYXJzZUJsb2NrKHtcbiAgICBjb250ZXh0LFxuICAgIGJsb2NrOiBvbWl0KHBhcnNlZEJsb2NrLCBvcGVyYXRpb24ucHJvcHMuZmlsdGVyKChwcm9wKSA9PiBwcm9wICE9PSBcIl90eXBlXCIpKSxcbiAgICBvcHRpb25zOiB7XG4gICAgICByZWZyZXNoS2V5czogITEsXG4gICAgICB2YWxpZGF0ZUZpZWxkczogITBcbiAgICB9XG4gIH0pO1xuICBpZiAoIXVwZGF0ZWRCbG9ja09iamVjdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byB1cGRhdGUgYmxvY2sgYXQgJHtKU09OLnN0cmluZ2lmeShvcGVyYXRpb24uYXQpfWApO1xuICBjb25zdCB7XG4gICAgX3R5cGUsXG4gICAgX2tleSxcbiAgICAuLi5wcm9wc1xuICB9ID0gdXBkYXRlZEJsb2NrT2JqZWN0O1xuICBUcmFuc2Zvcm1zLnNldE5vZGVzKG9wZXJhdGlvbi5lZGl0b3IsIHtcbiAgICBfdHlwZSxcbiAgICBfa2V5LFxuICAgIHZhbHVlOiBwcm9wc1xuICB9LCB7XG4gICAgYXQ6IGxvY2F0aW9uXG4gIH0pO1xufSwgY2hpbGRTZXRPcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBjb25zdCBsb2NhdGlvbiA9IHRvU2xhdGVSYW5nZSh7XG4gICAgY29udGV4dDoge1xuICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgIHZhbHVlOiBvcGVyYXRpb24uZWRpdG9yLnZhbHVlLFxuICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgIHBhdGg6IG9wZXJhdGlvbi5hdCxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICBwYXRoOiBvcGVyYXRpb24uYXQsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGJsb2NrSW5kZXhNYXA6IG9wZXJhdGlvbi5lZGl0b3IuYmxvY2tJbmRleE1hcFxuICB9KTtcbiAgaWYgKCFsb2NhdGlvbilcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjb252ZXJ0ICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLmF0KX0gaW50byBhIFNsYXRlIFJhbmdlYCk7XG4gIGNvbnN0IGNoaWxkRW50cnkgPSBFZGl0b3Iubm9kZShvcGVyYXRpb24uZWRpdG9yLCBsb2NhdGlvbiwge1xuICAgIGRlcHRoOiAyXG4gIH0pLCBjaGlsZCA9IGNoaWxkRW50cnk/LlswXSwgY2hpbGRQYXRoID0gY2hpbGRFbnRyeT8uWzFdO1xuICBpZiAoIWNoaWxkIHx8ICFjaGlsZFBhdGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBjaGlsZCBhdCAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5hdCl9YCk7XG4gIGlmIChvcGVyYXRpb24uZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgY29uc3Qge1xuICAgICAgX3R5cGUsXG4gICAgICB0ZXh0LFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSBvcGVyYXRpb24ucHJvcHM7XG4gICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhvcGVyYXRpb24uZWRpdG9yLCB7XG4gICAgICAuLi5jaGlsZCxcbiAgICAgIC4uLnJlc3RcbiAgICB9LCB7XG4gICAgICBhdDogY2hpbGRQYXRoXG4gICAgfSksIHR5cGVvZiB0ZXh0ID09IFwic3RyaW5nXCIgJiYgY2hpbGQudGV4dCAhPT0gdGV4dCAmJiAob3BlcmF0aW9uLmVkaXRvci5hcHBseSh7XG4gICAgICB0eXBlOiBcInJlbW92ZV90ZXh0XCIsXG4gICAgICBwYXRoOiBjaGlsZFBhdGgsXG4gICAgICBvZmZzZXQ6IDAsXG4gICAgICB0ZXh0OiBjaGlsZC50ZXh0XG4gICAgfSksIG9wZXJhdGlvbi5lZGl0b3IuYXBwbHkoe1xuICAgICAgdHlwZTogXCJpbnNlcnRfdGV4dFwiLFxuICAgICAgcGF0aDogY2hpbGRQYXRoLFxuICAgICAgb2Zmc2V0OiAwLFxuICAgICAgdGV4dFxuICAgIH0pKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKEVsZW1lbnQkMS5pc0VsZW1lbnQoY2hpbGQpKSB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IGNvbnRleHQuc2NoZW1hLmlubGluZU9iamVjdHMuZmluZCgoZGVmaW5pdGlvbjIpID0+IGRlZmluaXRpb24yLm5hbWUgPT09IGNoaWxkLl90eXBlKTtcbiAgICBpZiAoIWRlZmluaXRpb24pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBmaW5kIHNjaGVtYSBkZWZpbml0aW9uIGZvciBJbmxpbmUgT2JqZWN0IHR5cGUgJHtjaGlsZC5fdHlwZX1gKTtcbiAgICBjb25zdCB2YWx1ZSA9IFwidmFsdWVcIiBpbiBjaGlsZCAmJiB0eXBlb2YgY2hpbGQudmFsdWUgPT0gXCJvYmplY3RcIiA/IGNoaWxkLnZhbHVlIDoge30sIHtcbiAgICAgIF90eXBlLFxuICAgICAgX2tleSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gb3BlcmF0aW9uLnByb3BzO1xuICAgIGZvciAoY29uc3QgcHJvcCBpbiByZXN0KVxuICAgICAgZGVmaW5pdGlvbi5maWVsZHMuc29tZSgoZmllbGQpID0+IGZpZWxkLm5hbWUgPT09IHByb3ApIHx8IGRlbGV0ZSByZXN0W3Byb3BdO1xuICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMob3BlcmF0aW9uLmVkaXRvciwge1xuICAgICAgLi4uY2hpbGQsXG4gICAgICBfa2V5OiB0eXBlb2YgX2tleSA9PSBcInN0cmluZ1wiID8gX2tleSA6IGNoaWxkLl9rZXksXG4gICAgICB2YWx1ZToge1xuICAgICAgICAuLi52YWx1ZSxcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGNoaWxkIGF0ICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLmF0KX1gKTtcbn0sIGNoaWxkVW5zZXRPcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBjb25zdCBsb2NhdGlvbiA9IHRvU2xhdGVSYW5nZSh7XG4gICAgY29udGV4dDoge1xuICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgIHZhbHVlOiBvcGVyYXRpb24uZWRpdG9yLnZhbHVlLFxuICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgIHBhdGg6IG9wZXJhdGlvbi5hdCxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICBwYXRoOiBvcGVyYXRpb24uYXQsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGJsb2NrSW5kZXhNYXA6IG9wZXJhdGlvbi5lZGl0b3IuYmxvY2tJbmRleE1hcFxuICB9KTtcbiAgaWYgKCFsb2NhdGlvbilcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjb252ZXJ0ICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLmF0KX0gaW50byBhIFNsYXRlIFJhbmdlYCk7XG4gIGNvbnN0IGNoaWxkRW50cnkgPSBFZGl0b3Iubm9kZShvcGVyYXRpb24uZWRpdG9yLCBsb2NhdGlvbiwge1xuICAgIGRlcHRoOiAyXG4gIH0pLCBjaGlsZCA9IGNoaWxkRW50cnk/LlswXSwgY2hpbGRQYXRoID0gY2hpbGRFbnRyeT8uWzFdO1xuICBpZiAoIWNoaWxkIHx8ICFjaGlsZFBhdGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBjaGlsZCBhdCAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5hdCl9YCk7XG4gIGlmIChvcGVyYXRpb24uZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgb3BlcmF0aW9uLnByb3BzLmluY2x1ZGVzKFwidGV4dFwiKSAmJiBvcGVyYXRpb24uZWRpdG9yLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwicmVtb3ZlX3RleHRcIixcbiAgICAgIHBhdGg6IGNoaWxkUGF0aCxcbiAgICAgIG9mZnNldDogMCxcbiAgICAgIHRleHQ6IGNoaWxkLnRleHRcbiAgICB9KTtcbiAgICBjb25zdCBuZXdOb2RlID0ge307XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIG9wZXJhdGlvbi5wcm9wcylcbiAgICAgIGlmIChwcm9wICE9PSBcIl90eXBlXCIpIHtcbiAgICAgICAgaWYgKHByb3AgPT09IFwiX2tleVwiKSB7XG4gICAgICAgICAgbmV3Tm9kZS5fa2V5ID0gY29udGV4dC5rZXlHZW5lcmF0b3IoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBuZXdOb2RlW3Byb3BdID0gbnVsbDtcbiAgICAgIH1cbiAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKG9wZXJhdGlvbi5lZGl0b3IsIG5ld05vZGUsIHtcbiAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKEVsZW1lbnQkMS5pc0VsZW1lbnQoY2hpbGQpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBcInZhbHVlXCIgaW4gY2hpbGQgJiYgdHlwZW9mIGNoaWxkLnZhbHVlID09IFwib2JqZWN0XCIgPyBjaGlsZC52YWx1ZSA6IHt9LCBwYXRjaGVzID0gb3BlcmF0aW9uLnByb3BzLm1hcCgocHJvcCkgPT4gKHtcbiAgICAgIHR5cGU6IFwidW5zZXRcIixcbiAgICAgIHBhdGg6IFtwcm9wXVxuICAgIH0pKSwgbmV3VmFsdWUgPSBhcHBseUFsbCh2YWx1ZSwgcGF0Y2hlcyk7XG4gICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhvcGVyYXRpb24uZWRpdG9yLCB7XG4gICAgICAuLi5jaGlsZCxcbiAgICAgIF9rZXk6IG9wZXJhdGlvbi5wcm9wcy5pbmNsdWRlcyhcIl9rZXlcIikgPyBjb250ZXh0LmtleUdlbmVyYXRvcigpIDogY2hpbGQuX2tleSxcbiAgICAgIHZhbHVlOiBuZXdWYWx1ZVxuICAgIH0sIHtcbiAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGNoaWxkIGF0ICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLmF0KX1gKTtcbn0sIGRlY29yYXRvckFkZE9wZXJhdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgb3BlcmF0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IG9wZXJhdGlvbi5lZGl0b3IsIG1hcmsgPSBvcGVyYXRpb24uZGVjb3JhdG9yLCB2YWx1ZSA9IGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgY29udGV4dC5zY2hlbWEuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCBtYW51YWxBbmNob3IgPSBvcGVyYXRpb24uYXQ/LmFuY2hvciA/IGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLmNvbnRleHQsXG4gICAgICB2YWx1ZVxuICAgIH0sXG4gICAgYmxvY2tPZmZzZXQ6IG9wZXJhdGlvbi5hdC5hbmNob3IsXG4gICAgZGlyZWN0aW9uOiBcImJhY2t3YXJkXCJcbiAgfSkgOiB2b2lkIDAsIG1hbnVhbEZvY3VzID0gb3BlcmF0aW9uLmF0Py5mb2N1cyA/IGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLmNvbnRleHQsXG4gICAgICB2YWx1ZVxuICAgIH0sXG4gICAgYmxvY2tPZmZzZXQ6IG9wZXJhdGlvbi5hdC5mb2N1cyxcbiAgICBkaXJlY3Rpb246IFwiZm9yd2FyZFwiXG4gIH0pIDogdm9pZCAwLCBtYW51YWxTZWxlY3Rpb24gPSBtYW51YWxBbmNob3IgJiYgbWFudWFsRm9jdXMgPyB7XG4gICAgYW5jaG9yOiBtYW51YWxBbmNob3IsXG4gICAgZm9jdXM6IG1hbnVhbEZvY3VzXG4gIH0gOiB2b2lkIDAsIHNlbGVjdGlvbiA9IG1hbnVhbFNlbGVjdGlvbiA/IHRvU2xhdGVSYW5nZSh7XG4gICAgY29udGV4dDoge1xuICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgIHZhbHVlOiBvcGVyYXRpb24uZWRpdG9yLnZhbHVlLFxuICAgICAgc2VsZWN0aW9uOiBtYW51YWxTZWxlY3Rpb25cbiAgICB9LFxuICAgIGJsb2NrSW5kZXhNYXA6IG9wZXJhdGlvbi5lZGl0b3IuYmxvY2tJbmRleE1hcFxuICB9KSA/PyBlZGl0b3Iuc2VsZWN0aW9uIDogZWRpdG9yLnNlbGVjdGlvbjtcbiAgaWYgKCFzZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBlZGl0b3JTZWxlY3Rpb24gPSBzbGF0ZVJhbmdlVG9TZWxlY3Rpb24oe1xuICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWEsXG4gICAgZWRpdG9yLFxuICAgIHJhbmdlOiBzZWxlY3Rpb25cbiAgfSksIGFuY2hvck9mZnNldCA9IGVkaXRvclNlbGVjdGlvbiA/IHNlbGVjdGlvblBvaW50VG9CbG9ja09mZnNldCh7XG4gICAgY29udGV4dDoge1xuICAgICAgLi4uY29udGV4dCxcbiAgICAgIHZhbHVlXG4gICAgfSxcbiAgICBzZWxlY3Rpb25Qb2ludDogZWRpdG9yU2VsZWN0aW9uLmFuY2hvclxuICB9KSA6IHZvaWQgMCwgZm9jdXNPZmZzZXQgPSBlZGl0b3JTZWxlY3Rpb24gPyBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLmNvbnRleHQsXG4gICAgICB2YWx1ZVxuICAgIH0sXG4gICAgc2VsZWN0aW9uUG9pbnQ6IGVkaXRvclNlbGVjdGlvbi5mb2N1c1xuICB9KSA6IHZvaWQgMDtcbiAgaWYgKCFhbmNob3JPZmZzZXQgfHwgIWZvY3VzT2Zmc2V0KVxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIGFuY2hvciBvciBmb2N1cyBvZmZzZXRcIik7XG4gIGlmIChSYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpIHtcbiAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge30sIHtcbiAgICAgIGF0OiBzZWxlY3Rpb24sXG4gICAgICBtYXRjaDogVGV4dC5pc1RleHQsXG4gICAgICBzcGxpdDogITAsXG4gICAgICBoYW5naW5nOiAhMFxuICAgIH0pO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIG5ld1NlbGVjdGlvbiA9IGJsb2NrT2Zmc2V0c1RvU2VsZWN0aW9uKHtcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgLi4uY29udGV4dCxcbiAgICAgICAgdmFsdWU6IG5ld1ZhbHVlXG4gICAgICB9LFxuICAgICAgb2Zmc2V0czoge1xuICAgICAgICBhbmNob3I6IGFuY2hvck9mZnNldCxcbiAgICAgICAgZm9jdXM6IGZvY3VzT2Zmc2V0XG4gICAgICB9LFxuICAgICAgYmFja3dhcmQ6IGVkaXRvclNlbGVjdGlvbj8uYmFja3dhcmRcbiAgICB9KSwgdHJpbW1lZFNlbGVjdGlvbiA9IGdldFRyaW1tZWRTZWxlY3Rpb24oe1xuICAgICAgYmxvY2tJbmRleE1hcDogZWRpdG9yLmJsb2NrSW5kZXhNYXAsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIGNvbnZlcnRlcnM6IFtdLFxuICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICByZWFkT25seTogITEsXG4gICAgICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWEsXG4gICAgICAgIHNlbGVjdGlvbjogbmV3U2VsZWN0aW9uLFxuICAgICAgICB2YWx1ZTogbmV3VmFsdWVcbiAgICAgIH0sXG4gICAgICBkZWNvcmF0b3JTdGF0ZTogZWRpdG9yLmRlY29yYXRvclN0YXRlXG4gICAgfSk7XG4gICAgaWYgKCF0cmltbWVkU2VsZWN0aW9uKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGZpbmQgdHJpbW1lZCBzZWxlY3Rpb25cIik7XG4gICAgY29uc3QgbmV3UmFuZ2UgPSB0b1NsYXRlUmFuZ2Uoe1xuICAgICAgY29udGV4dDoge1xuICAgICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hLFxuICAgICAgICB2YWx1ZTogb3BlcmF0aW9uLmVkaXRvci52YWx1ZSxcbiAgICAgICAgc2VsZWN0aW9uOiB0cmltbWVkU2VsZWN0aW9uXG4gICAgICB9LFxuICAgICAgYmxvY2tJbmRleE1hcDogb3BlcmF0aW9uLmVkaXRvci5ibG9ja0luZGV4TWFwXG4gICAgfSk7XG4gICAgaWYgKCFuZXdSYW5nZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIG5ldyBzZWxlY3Rpb25cIik7XG4gICAgY29uc3Qgc3BsaXRUZXh0Tm9kZXMgPSBSYW5nZS5pc1JhbmdlKG5ld1JhbmdlKSA/IFsuLi5FZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogbmV3UmFuZ2UsXG4gICAgICBtYXRjaDogKG5vZGUpID0+IFRleHQuaXNUZXh0KG5vZGUpXG4gICAgfSldIDogW107XG4gICAgZm9yIChjb25zdCBbbm9kZSwgcGF0aF0gb2Ygc3BsaXRUZXh0Tm9kZXMpIHtcbiAgICAgIGNvbnN0IG1hcmtzID0gWy4uLihBcnJheS5pc0FycmF5KG5vZGUubWFya3MpID8gbm9kZS5tYXJrcyA6IFtdKS5maWx0ZXIoKGVNYXJrKSA9PiBlTWFyayAhPT0gbWFyayksIG1hcmtdO1xuICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgbWFya3NcbiAgICAgIH0sIHtcbiAgICAgICAgYXQ6IHBhdGgsXG4gICAgICAgIG1hdGNoOiBUZXh0LmlzVGV4dCxcbiAgICAgICAgc3BsaXQ6ICEwLFxuICAgICAgICBoYW5naW5nOiAhMFxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICghQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogc2VsZWN0aW9uLFxuICAgICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0U3Bhbihub2RlKVxuICAgIH0pKT8uYXQoMCkpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBzZWxlY3Rpb24sIHtcbiAgICAgIGRlcHRoOiAxXG4gICAgfSksIGxvbmVseUVtcHR5U3BhbiA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGVkaXRvci5pc1RleHRTcGFuKGJsb2NrLmNoaWxkcmVuWzBdKSAmJiBibG9jay5jaGlsZHJlblswXS50ZXh0ID09PSBcIlwiID8gYmxvY2suY2hpbGRyZW5bMF0gOiB2b2lkIDA7XG4gICAgaWYgKGxvbmVseUVtcHR5U3Bhbikge1xuICAgICAgY29uc3QgZXhpc3RpbmdNYXJrcyA9IGxvbmVseUVtcHR5U3Bhbi5tYXJrcyA/PyBbXSwgZXhpc3RpbmdNYXJrc1dpdGhvdXREZWNvcmF0b3IgPSBleGlzdGluZ01hcmtzLmZpbHRlcigoZXhpc3RpbmdNYXJrKSA9PiBleGlzdGluZ01hcmsgIT09IG1hcmspO1xuICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgbWFya3M6IGV4aXN0aW5nTWFya3MubGVuZ3RoID09PSBleGlzdGluZ01hcmtzV2l0aG91dERlY29yYXRvci5sZW5ndGggPyBbLi4uZXhpc3RpbmdNYXJrcywgbWFya10gOiBleGlzdGluZ01hcmtzV2l0aG91dERlY29yYXRvclxuICAgICAgfSwge1xuICAgICAgICBhdDogYmxvY2tQYXRoLFxuICAgICAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRTcGFuKG5vZGUpXG4gICAgICB9KTtcbiAgICB9IGVsc2VcbiAgICAgIGVkaXRvci5kZWNvcmF0b3JTdGF0ZVttYXJrXSA9ICEwO1xuICB9XG4gIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uMiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgZWRpdG9yLnNlbGVjdGlvbiA9IHtcbiAgICAgIC4uLnNlbGVjdGlvbjJcbiAgICB9O1xuICB9XG59LCBkZWxldGVPcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBjb25zdCBhbmNob3JCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KG9wZXJhdGlvbi5hdC5hbmNob3IpLCBmb2N1c0Jsb2NrS2V5ID0gZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQob3BlcmF0aW9uLmF0LmZvY3VzKSwgc3RhcnRCbG9ja0tleSA9IG9wZXJhdGlvbi5hdC5iYWNrd2FyZCA/IGZvY3VzQmxvY2tLZXkgOiBhbmNob3JCbG9ja0tleSwgZW5kQmxvY2tLZXkgPSBvcGVyYXRpb24uYXQuYmFja3dhcmQgPyBhbmNob3JCbG9ja0tleSA6IGZvY3VzQmxvY2tLZXksIGVuZE9mZnNldCA9IG9wZXJhdGlvbi5hdC5iYWNrd2FyZCA/IG9wZXJhdGlvbi5hdC5mb2N1cy5vZmZzZXQgOiBvcGVyYXRpb24uYXQuYW5jaG9yLm9mZnNldDtcbiAgaWYgKCFzdGFydEJsb2NrS2V5KVxuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgc3RhcnQgYmxvY2sga2V5XCIpO1xuICBpZiAoIWVuZEJsb2NrS2V5KVxuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgZW5kIGJsb2NrIGtleVwiKTtcbiAgY29uc3Qgc3RhcnRCbG9ja0luZGV4ID0gb3BlcmF0aW9uLmVkaXRvci5ibG9ja0luZGV4TWFwLmdldChzdGFydEJsb2NrS2V5KTtcbiAgaWYgKHN0YXJ0QmxvY2tJbmRleCA9PT0gdm9pZCAwKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgc3RhcnQgYmxvY2sgaW5kZXhcIik7XG4gIGNvbnN0IHN0YXJ0QmxvY2sgPSBvcGVyYXRpb24uZWRpdG9yLnZhbHVlLmF0KHN0YXJ0QmxvY2tJbmRleCk7XG4gIGlmICghc3RhcnRCbG9jaylcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IHN0YXJ0IGJsb2NrXCIpO1xuICBjb25zdCBlbmRCbG9ja0luZGV4ID0gb3BlcmF0aW9uLmVkaXRvci5ibG9ja0luZGV4TWFwLmdldChlbmRCbG9ja0tleSk7XG4gIGlmIChlbmRCbG9ja0luZGV4ID09PSB2b2lkIDApXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBlbmQgYmxvY2sgaW5kZXhcIik7XG4gIGNvbnN0IGVuZEJsb2NrID0gb3BlcmF0aW9uLmVkaXRvci52YWx1ZS5hdChlbmRCbG9ja0luZGV4KTtcbiAgaWYgKCFlbmRCbG9jaylcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGVuZCBibG9ja1wiKTtcbiAgY29uc3QgYW5jaG9yQmxvY2tQYXRoID0gYW5jaG9yQmxvY2tLZXkgIT09IHZvaWQgMCA/IGdldEJsb2NrUGF0aCh7XG4gICAgZWRpdG9yOiBvcGVyYXRpb24uZWRpdG9yLFxuICAgIF9rZXk6IGFuY2hvckJsb2NrS2V5XG4gIH0pIDogdm9pZCAwLCBmb2N1c0Jsb2NrUGF0aCA9IGZvY3VzQmxvY2tLZXkgIT09IHZvaWQgMCA/IGdldEJsb2NrUGF0aCh7XG4gICAgZWRpdG9yOiBvcGVyYXRpb24uZWRpdG9yLFxuICAgIF9rZXk6IGZvY3VzQmxvY2tLZXlcbiAgfSkgOiB2b2lkIDA7XG4gIGlmIChvcGVyYXRpb24uYXQuYW5jaG9yLnBhdGgubGVuZ3RoID09PSAxICYmIG9wZXJhdGlvbi5hdC5mb2N1cy5wYXRoLmxlbmd0aCA9PT0gMSAmJiBhbmNob3JCbG9ja1BhdGggJiYgZm9jdXNCbG9ja1BhdGggJiYgYW5jaG9yQmxvY2tQYXRoWzBdID09PSBmb2N1c0Jsb2NrUGF0aFswXSkge1xuICAgIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMob3BlcmF0aW9uLmVkaXRvciwge1xuICAgICAgYXQ6IFthbmNob3JCbG9ja1BhdGhbMF1dXG4gICAgfSksIG9wZXJhdGlvbi5lZGl0b3IuY2hpbGRyZW4ubGVuZ3RoID09PSAwICYmIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMob3BlcmF0aW9uLmVkaXRvciwgY3JlYXRlUGxhY2Vob2xkZXJCbG9jayhjb250ZXh0KSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJhbmdlID0gdG9TbGF0ZVJhbmdlKHtcbiAgICBjb250ZXh0OiB7XG4gICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hLFxuICAgICAgdmFsdWU6IG9wZXJhdGlvbi5lZGl0b3IudmFsdWUsXG4gICAgICBzZWxlY3Rpb246IG9wZXJhdGlvbi5hdFxuICAgIH0sXG4gICAgYmxvY2tJbmRleE1hcDogb3BlcmF0aW9uLmVkaXRvci5ibG9ja0luZGV4TWFwXG4gIH0pO1xuICBpZiAoIXJhbmdlKVxuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdldCBTbGF0ZSBSYW5nZSBmb3Igc2VsZWN0aW9uICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLmF0KX1gKTtcbiAgY29uc3QgaGFuZ2luZyA9IGlzVGV4dEJsb2NrKGNvbnRleHQsIGVuZEJsb2NrKSAmJiBlbmRPZmZzZXQgPT09IDA7XG4gIGRlbGV0ZVRleHQob3BlcmF0aW9uLmVkaXRvciwge1xuICAgIGF0OiByYW5nZSxcbiAgICByZXZlcnNlOiBvcGVyYXRpb24uZGlyZWN0aW9uID09PSBcImJhY2t3YXJkXCIsXG4gICAgdW5pdDogb3BlcmF0aW9uLnVuaXQsXG4gICAgaGFuZ2luZ1xuICB9KSwgb3BlcmF0aW9uLmVkaXRvci5zZWxlY3Rpb24gJiYgaXNUZXh0QmxvY2soY29udGV4dCwgc3RhcnRCbG9jaykgJiYgaXNUZXh0QmxvY2soY29udGV4dCwgZW5kQmxvY2spICYmIHNldFNlbGVjdGlvbihvcGVyYXRpb24uZWRpdG9yLCB7XG4gICAgYW5jaG9yOiBvcGVyYXRpb24uZWRpdG9yLnNlbGVjdGlvbi5mb2N1cyxcbiAgICBmb2N1czogb3BlcmF0aW9uLmVkaXRvci5zZWxlY3Rpb24uZm9jdXNcbiAgfSk7XG59LCBpbnNlcnRJbmxpbmVPYmplY3RPcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBjb25zdCBwYXJzZWRJbmxpbmVPYmplY3QgPSBwYXJzZUlubGluZU9iamVjdCh7XG4gICAgY29udGV4dCxcbiAgICBpbmxpbmVPYmplY3Q6IHtcbiAgICAgIF90eXBlOiBvcGVyYXRpb24uaW5saW5lT2JqZWN0Lm5hbWUsXG4gICAgICAuLi5vcGVyYXRpb24uaW5saW5lT2JqZWN0LnZhbHVlID8/IHt9XG4gICAgfSxcbiAgICBvcHRpb25zOiB7XG4gICAgICByZWZyZXNoS2V5czogITEsXG4gICAgICB2YWxpZGF0ZUZpZWxkczogITBcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBhcnNlZElubGluZU9iamVjdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBpbmxpbmUgb2JqZWN0ICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLmlubGluZU9iamVjdCl9YCk7XG4gIGlmICghb3BlcmF0aW9uLmVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGluc2VydCBpbmxpbmUgb2JqZWN0IHdpdGhvdXQgc2VsZWN0aW9uXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBbZm9jdXNUZXh0QmxvY2tdID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMob3BlcmF0aW9uLmVkaXRvciwge1xuICAgIGF0OiBvcGVyYXRpb24uZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLFxuICAgIG1hdGNoOiAobm9kZSkgPT4gb3BlcmF0aW9uLmVkaXRvci5pc1RleHRCbG9jayhub2RlKVxuICB9KSkuYXQoMCkgPz8gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgaWYgKCFmb2N1c1RleHRCbG9jaykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gcGVyZm9ybSBhY3Rpb24gd2l0aG91dCBmb2N1cyB0ZXh0IGJsb2NrXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBjaGlsZCA9IHRvU2xhdGVWYWx1ZShbe1xuICAgIF90eXBlOiBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLFxuICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgY2hpbGRyZW46IFtwYXJzZWRJbmxpbmVPYmplY3RdXG4gIH1dLCB7XG4gICAgc2NoZW1hVHlwZXM6IGNvbnRleHQuc2NoZW1hXG4gIH0pLmF0KDApPy5jaGlsZHJlbi5hdCgwKTtcbiAgaWYgKCFjaGlsZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5zZXJ0IGlubGluZSBvYmplY3RcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMob3BlcmF0aW9uLmVkaXRvciwgY2hpbGQpO1xufSwgaW5zZXJ0U3Bhbk9wZXJhdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgb3BlcmF0aW9uXG59KSA9PiB7XG4gIGlmICghb3BlcmF0aW9uLmVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHBlcmZvcm0gYWN0aW9uIHdpdGhvdXQgc2VsZWN0aW9uXCIsIG9wZXJhdGlvbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IFtmb2N1c0Jsb2NrLCBmb2N1c0Jsb2NrUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhvcGVyYXRpb24uZWRpdG9yLCB7XG4gICAgYXQ6IG9wZXJhdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGgsXG4gICAgbWF0Y2g6IChub2RlKSA9PiBvcGVyYXRpb24uZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pKVswXSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICBpZiAoIWZvY3VzQmxvY2sgfHwgIWZvY3VzQmxvY2tQYXRoKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBwZXJmb3JtIGFjdGlvbiB3aXRob3V0IGZvY3VzIGJsb2NrXCIsIG9wZXJhdGlvbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG1hcmtEZWZzID0gZm9jdXNCbG9jay5tYXJrRGVmcyA/PyBbXSwgYW5ub3RhdGlvbnMgPSBvcGVyYXRpb24uYW5ub3RhdGlvbnMgPyBvcGVyYXRpb24uYW5ub3RhdGlvbnMubWFwKChhbm5vdGF0aW9uKSA9PiAoe1xuICAgIF90eXBlOiBhbm5vdGF0aW9uLm5hbWUsXG4gICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAuLi5hbm5vdGF0aW9uLnZhbHVlXG4gIH0pKSA6IHZvaWQgMDtcbiAgYW5ub3RhdGlvbnMgJiYgYW5ub3RhdGlvbnMubGVuZ3RoID4gMCAmJiBUcmFuc2Zvcm1zLnNldE5vZGVzKG9wZXJhdGlvbi5lZGl0b3IsIHtcbiAgICBtYXJrRGVmczogWy4uLm1hcmtEZWZzLCAuLi5hbm5vdGF0aW9uc11cbiAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMob3BlcmF0aW9uLmVkaXRvciwge1xuICAgIF90eXBlOiBcInNwYW5cIixcbiAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgIHRleHQ6IG9wZXJhdGlvbi50ZXh0LFxuICAgIG1hcmtzOiBbLi4uYW5ub3RhdGlvbnM/Lm1hcCgoYW5ub3RhdGlvbikgPT4gYW5ub3RhdGlvbi5fa2V5KSA/PyBbXSwgLi4ub3BlcmF0aW9uLmRlY29yYXRvcnMgPz8gW11dXG4gIH0pO1xufSwgaW5zZXJ0QmxvY2tPcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBjb25zdCBwYXJzZWRCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgIGJsb2NrOiBvcGVyYXRpb24uYmxvY2ssXG4gICAgY29udGV4dCxcbiAgICBvcHRpb25zOiB7XG4gICAgICByZWZyZXNoS2V5czogITEsXG4gICAgICB2YWxpZGF0ZUZpZWxkczogITBcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBhcnNlZEJsb2NrKVxuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIGJsb2NrICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLmJsb2NrKX1gKTtcbiAgY29uc3QgZnJhZ21lbnQgPSB0b1NsYXRlVmFsdWUoW3BhcnNlZEJsb2NrXSwge1xuICAgIHNjaGVtYVR5cGVzOiBjb250ZXh0LnNjaGVtYVxuICB9KVswXTtcbiAgaWYgKCFmcmFnbWVudClcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjb252ZXJ0IGJsb2NrIHRvIFNsYXRlIGZyYWdtZW50ICR7SlNPTi5zdHJpbmdpZnkocGFyc2VkQmxvY2spfWApO1xuICBpbnNlcnRCbG9jayh7XG4gICAgY29udGV4dCxcbiAgICBibG9jazogZnJhZ21lbnQsXG4gICAgcGxhY2VtZW50OiBvcGVyYXRpb24ucGxhY2VtZW50LFxuICAgIHNlbGVjdDogb3BlcmF0aW9uLnNlbGVjdCA/PyBcInN0YXJ0XCIsXG4gICAgZWRpdG9yOiBvcGVyYXRpb24uZWRpdG9yXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGluc2VydEJsb2NrKHtcbiAgY29udGV4dCxcbiAgYmxvY2ssXG4gIHBsYWNlbWVudCxcbiAgc2VsZWN0LFxuICBlZGl0b3Jcbn0pIHtcbiAgY29uc3QgW3N0YXJ0QmxvY2ssIHN0YXJ0QmxvY2tQYXRoXSA9IGdldFNlbGVjdGlvblN0YXJ0QmxvY2soe1xuICAgIGVkaXRvclxuICB9KSwgW2VuZEJsb2NrLCBlbmRCbG9ja1BhdGhdID0gZ2V0U2VsZWN0aW9uRW5kQmxvY2soe1xuICAgIGVkaXRvclxuICB9KTtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8ICFzdGFydEJsb2NrIHx8ICFzdGFydEJsb2NrUGF0aCB8fCAhZW5kQmxvY2sgfHwgIWVuZEJsb2NrUGF0aCkge1xuICAgIHNlbGVjdCAhPT0gXCJub25lXCIgJiYgRE9NRWRpdG9yLmZvY3VzKGVkaXRvcik7XG4gICAgY29uc3QgW2xhc3RCbG9jaywgbGFzdEJsb2NrUGF0aF0gPSBnZXRMYXN0QmxvY2soe1xuICAgICAgZWRpdG9yXG4gICAgfSk7XG4gICAgaWYgKHBsYWNlbWVudCA9PT0gXCJiZWZvcmVcIilcbiAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBbYmxvY2tdLCB7XG4gICAgICAgIGF0OiBbMF1cbiAgICAgIH0pLCBzZWxlY3QgPT09IFwic3RhcnRcIiA/IFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgWzBdKSkgOiBzZWxlY3QgPT09IFwiZW5kXCIgJiYgVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBFZGl0b3IuZW5kKGVkaXRvciwgWzBdKSk7XG4gICAgZWxzZSBpZiAocGxhY2VtZW50ID09PSBcImFmdGVyXCIpIHtcbiAgICAgIGNvbnN0IG5leHRQYXRoID0gbGFzdEJsb2NrUGF0aCA/IFtsYXN0QmxvY2tQYXRoWzBdICsgMV0gOiBbMF07XG4gICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgW2Jsb2NrXSwge1xuICAgICAgICBhdDogbmV4dFBhdGhcbiAgICAgIH0pLCBzZWxlY3QgPT09IFwic3RhcnRcIiA/IFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgbmV4dFBhdGgpKSA6IHNlbGVjdCA9PT0gXCJlbmRcIiAmJiBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIEVkaXRvci5lbmQoZWRpdG9yLCBuZXh0UGF0aCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobGFzdEJsb2NrICYmIGlzRXF1YWxUb0VtcHR5RWRpdG9yKFtsYXN0QmxvY2tdLCBjb250ZXh0LnNjaGVtYSkpIHtcbiAgICAgICAgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBhdDogbGFzdEJsb2NrUGF0aFxuICAgICAgICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIFtibG9ja10sIHtcbiAgICAgICAgICBhdDogbGFzdEJsb2NrUGF0aCxcbiAgICAgICAgICBzZWxlY3Q6ICExXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLmRlc2VsZWN0KGVkaXRvciksIHNlbGVjdCA9PT0gXCJzdGFydFwiID8gVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBFZGl0b3Iuc3RhcnQoZWRpdG9yLCBsYXN0QmxvY2tQYXRoKSkgOiBzZWxlY3QgPT09IFwiZW5kXCIgJiYgVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBFZGl0b3IuZW5kKGVkaXRvciwgbGFzdEJsb2NrUGF0aCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBsYXN0QmxvY2sgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKGxhc3RCbG9jaykpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uQmVmb3JlID0gRWRpdG9yLmVuZChlZGl0b3IsIGxhc3RCbG9ja1BhdGgpO1xuICAgICAgICBUcmFuc2Zvcm1zLmluc2VydEZyYWdtZW50KGVkaXRvciwgW2Jsb2NrXSwge1xuICAgICAgICAgIGF0OiBFZGl0b3IuZW5kKGVkaXRvciwgbGFzdEJsb2NrUGF0aClcbiAgICAgICAgfSksIHNlbGVjdCA9PT0gXCJzdGFydFwiID8gVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBzZWxlY3Rpb25CZWZvcmUpIDogc2VsZWN0ID09PSBcIm5vbmVcIiAmJiBUcmFuc2Zvcm1zLmRlc2VsZWN0KGVkaXRvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5leHRQYXRoID0gbGFzdEJsb2NrUGF0aCA/IFtsYXN0QmxvY2tQYXRoWzBdICsgMV0gOiBbMF07XG4gICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgW2Jsb2NrXSwge1xuICAgICAgICBhdDogbmV4dFBhdGgsXG4gICAgICAgIHNlbGVjdDogITFcbiAgICAgIH0pLCBzZWxlY3QgPT09IFwic3RhcnRcIiA/IFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgbmV4dFBhdGgpKSA6IHNlbGVjdCA9PT0gXCJlbmRcIiAmJiBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIEVkaXRvci5lbmQoZWRpdG9yLCBuZXh0UGF0aCkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwbGFjZW1lbnQgPT09IFwiYmVmb3JlXCIpIHtcbiAgICBjb25zdCBjdXJyZW50U2VsZWN0aW9uID0gZWRpdG9yLnNlbGVjdGlvbiwgc2VsZWN0aW9uU3RhcnRQb2ludCA9IFJhbmdlLnN0YXJ0KGN1cnJlbnRTZWxlY3Rpb24pO1xuICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBbYmxvY2tdLCB7XG4gICAgICBhdDogW3NlbGVjdGlvblN0YXJ0UG9pbnQucGF0aFswXV0sXG4gICAgICBzZWxlY3Q6ICExXG4gICAgfSksIHNlbGVjdCA9PT0gXCJzdGFydFwiID8gVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBFZGl0b3Iuc3RhcnQoZWRpdG9yLCBbc2VsZWN0aW9uU3RhcnRQb2ludC5wYXRoWzBdXSkpIDogc2VsZWN0ID09PSBcImVuZFwiICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLmVuZChlZGl0b3IsIFtzZWxlY3Rpb25TdGFydFBvaW50LnBhdGhbMF1dKSk7XG4gIH0gZWxzZSBpZiAocGxhY2VtZW50ID09PSBcImFmdGVyXCIpIHtcbiAgICBjb25zdCBjdXJyZW50U2VsZWN0aW9uID0gZWRpdG9yLnNlbGVjdGlvbiwgbmV4dFBhdGggPSBbUmFuZ2UuZW5kKGN1cnJlbnRTZWxlY3Rpb24pLnBhdGhbMF0gKyAxXTtcbiAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgW2Jsb2NrXSwge1xuICAgICAgYXQ6IG5leHRQYXRoLFxuICAgICAgc2VsZWN0OiAhMVxuICAgIH0pLCBzZWxlY3QgPT09IFwic3RhcnRcIiA/IFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgbmV4dFBhdGgpKSA6IHNlbGVjdCA9PT0gXCJlbmRcIiAmJiBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIEVkaXRvci5lbmQoZWRpdG9yLCBuZXh0UGF0aCkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGN1cnJlbnRTZWxlY3Rpb24gPSBlZGl0b3Iuc2VsZWN0aW9uLCBlbmRCbG9ja0VuZFBvaW50ID0gRWRpdG9yLnN0YXJ0KGVkaXRvciwgZW5kQmxvY2tQYXRoKTtcbiAgICBpZiAoUmFuZ2UuaXNFeHBhbmRlZChjdXJyZW50U2VsZWN0aW9uKSAmJiAhZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgVHJhbnNmb3Jtcy5kZWxldGUoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBjdXJyZW50U2VsZWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IG5ld1NlbGVjdGlvbiA9IGVkaXRvci5zZWxlY3Rpb24sIFtmb2N1c0Jsb2NrLCBmb2N1c0Jsb2NrUGF0aF0gPSBnZXRGb2N1c0Jsb2NrKHtcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBbYmxvY2tdLCB7XG4gICAgICAgIHZvaWRzOiAhMFxuICAgICAgfSk7XG4gICAgICBjb25zdCBhZGp1c3RlZFNlbGVjdGlvbiA9IG5ld1NlbGVjdGlvbi5hbmNob3Iub2Zmc2V0ID09PSAwID8gUmFuZ2UudHJhbnNmb3JtKG5ld1NlbGVjdGlvbiwge1xuICAgICAgICB0eXBlOiBcImluc2VydF9ub2RlXCIsXG4gICAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgICBwYXRoOiBbbmV3U2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdXVxuICAgICAgfSkgOiBuZXdTZWxlY3Rpb247XG4gICAgICBzZWxlY3QgPT09IFwibm9uZVwiICYmIGFkanVzdGVkU2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgYWRqdXN0ZWRTZWxlY3Rpb24pLCBmb2N1c0Jsb2NrICYmIGlzRXF1YWxUb0VtcHR5RWRpdG9yKFtmb2N1c0Jsb2NrXSwgY29udGV4dC5zY2hlbWEpICYmIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBmb2N1c0Jsb2NrUGF0aFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soZW5kQmxvY2spICYmIGVkaXRvci5pc1RleHRCbG9jayhibG9jaykpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0UG9pbnQgPSBSYW5nZS5zdGFydChjdXJyZW50U2VsZWN0aW9uKTtcbiAgICAgIGlmIChpc0VxdWFsVG9FbXB0eUVkaXRvcihbZW5kQmxvY2tdLCBjb250ZXh0LnNjaGVtYSkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNlbGVjdGlvbjIgPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgW2Jsb2NrXSwge1xuICAgICAgICAgIGF0OiBlbmRCbG9ja1BhdGgsXG4gICAgICAgICAgc2VsZWN0OiAhMVxuICAgICAgICB9KSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBhdDogUGF0aC5uZXh0KGVuZEJsb2NrUGF0aClcbiAgICAgICAgfSksIHNlbGVjdCA9PT0gXCJzdGFydFwiID8gVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBzZWxlY3Rpb25TdGFydFBvaW50KSA6IHNlbGVjdCA9PT0gXCJlbmRcIiA/IFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLmVuZChlZGl0b3IsIGVuZEJsb2NrUGF0aCkpIDogVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBjdXJyZW50U2VsZWN0aW9uMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVuZEJsb2NrQ2hpbGRLZXlzID0gZW5kQmxvY2suY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gY2hpbGQuX2tleSksIGVuZEJsb2NrTWFya0RlZnNLZXlzID0gZW5kQmxvY2subWFya0RlZnM/Lm1hcCgobWFya0RlZikgPT4gbWFya0RlZi5fa2V5KSA/PyBbXSwgbWFya0RlZktleU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIGFkanVzdGVkTWFya0RlZnMgPSBibG9jay5tYXJrRGVmcz8ubWFwKChtYXJrRGVmKSA9PiB7XG4gICAgICAgIGlmIChlbmRCbG9ja01hcmtEZWZzS2V5cy5pbmNsdWRlcyhtYXJrRGVmLl9rZXkpKSB7XG4gICAgICAgICAgY29uc3QgbmV3S2V5ID0gY29udGV4dC5rZXlHZW5lcmF0b3IoKTtcbiAgICAgICAgICByZXR1cm4gbWFya0RlZktleU1hcC5zZXQobWFya0RlZi5fa2V5LCBuZXdLZXkpLCB7XG4gICAgICAgICAgICAuLi5tYXJrRGVmLFxuICAgICAgICAgICAgX2tleTogbmV3S2V5XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFya0RlZjtcbiAgICAgIH0pLCBhZGp1c3RlZENoaWxkcmVuID0gYmxvY2suY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICBpZiAoaXNTcGFuKGNvbnRleHQsIGNoaWxkKSkge1xuICAgICAgICAgIGNvbnN0IG1hcmtzID0gY2hpbGQubWFya3M/Lm1hcCgobWFyaykgPT4gbWFya0RlZktleU1hcC5nZXQobWFyaykgfHwgbWFyaykgPz8gW107XG4gICAgICAgICAgaWYgKCFpc0VxdWFsKGNoaWxkLm1hcmtzLCBtYXJrcykpXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgICAgICAgX2tleTogZW5kQmxvY2tDaGlsZEtleXMuaW5jbHVkZXMoY2hpbGQuX2tleSkgPyBjb250ZXh0LmtleUdlbmVyYXRvcigpIDogY2hpbGQuX2tleSxcbiAgICAgICAgICAgICAgbWFya3NcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuZEJsb2NrQ2hpbGRLZXlzLmluY2x1ZGVzKGNoaWxkLl9rZXkpID8ge1xuICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKClcbiAgICAgICAgfSA6IGNoaWxkO1xuICAgICAgfSk7XG4gICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICBtYXJrRGVmczogWy4uLmVuZEJsb2NrLm1hcmtEZWZzID8/IFtdLCAuLi5hZGp1c3RlZE1hcmtEZWZzID8/IFtdXVxuICAgICAgfSwge1xuICAgICAgICBhdDogZW5kQmxvY2tQYXRoXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGFkanVzdGVkQmxvY2sgPSBpc0VxdWFsKGJsb2NrLmNoaWxkcmVuLCBhZGp1c3RlZENoaWxkcmVuKSA/IGJsb2NrIDoge1xuICAgICAgICAuLi5ibG9jayxcbiAgICAgICAgY2hpbGRyZW46IGFkanVzdGVkQ2hpbGRyZW5cbiAgICAgIH07XG4gICAgICBpZiAoc2VsZWN0ID09PSBcImVuZFwiKSB7XG4gICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0RnJhZ21lbnQoZWRpdG9yLCBbYWRqdXN0ZWRCbG9ja10sIHtcbiAgICAgICAgICB2b2lkczogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0RnJhZ21lbnQoZWRpdG9yLCBbYWRqdXN0ZWRCbG9ja10sIHtcbiAgICAgICAgYXQ6IGN1cnJlbnRTZWxlY3Rpb24sXG4gICAgICAgIHZvaWRzOiAhMFxuICAgICAgfSksIHNlbGVjdCA9PT0gXCJzdGFydFwiID8gVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBzZWxlY3Rpb25TdGFydFBvaW50KSA6IFBvaW50LmVxdWFscyhzZWxlY3Rpb25TdGFydFBvaW50LCBlbmRCbG9ja0VuZFBvaW50KSB8fCBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHNlbGVjdGlvblN0YXJ0UG9pbnQpO1xuICAgIH0gZWxzZSBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKGVuZEJsb2NrKSkge1xuICAgICAgY29uc3QgZW5kQmxvY2tTdGFydFBvaW50ID0gRWRpdG9yLnN0YXJ0KGVkaXRvciwgZW5kQmxvY2tQYXRoKSwgZW5kQmxvY2tFbmRQb2ludDIgPSBFZGl0b3IuZW5kKGVkaXRvciwgZW5kQmxvY2tQYXRoKSwgc2VsZWN0aW9uU3RhcnRQb2ludCA9IFJhbmdlLnN0YXJ0KGN1cnJlbnRTZWxlY3Rpb24pLCBzZWxlY3Rpb25FbmRQb2ludCA9IFJhbmdlLmVuZChjdXJyZW50U2VsZWN0aW9uKTtcbiAgICAgIGlmIChSYW5nZS5pc0NvbGxhcHNlZChjdXJyZW50U2VsZWN0aW9uKSAmJiBQb2ludC5lcXVhbHMoc2VsZWN0aW9uU3RhcnRQb2ludCwgZW5kQmxvY2tTdGFydFBvaW50KSlcbiAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIFtibG9ja10sIHtcbiAgICAgICAgICBhdDogZW5kQmxvY2tQYXRoLFxuICAgICAgICAgIHNlbGVjdDogITFcbiAgICAgICAgfSksIChzZWxlY3QgPT09IFwic3RhcnRcIiB8fCBzZWxlY3QgPT09IFwiZW5kXCIpICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgZW5kQmxvY2tQYXRoKSksIGlzRW1wdHlUZXh0QmxvY2soY29udGV4dCwgZW5kQmxvY2spICYmIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgYXQ6IFBhdGgubmV4dChlbmRCbG9ja1BhdGgpXG4gICAgICAgIH0pO1xuICAgICAgZWxzZSBpZiAoUmFuZ2UuaXNDb2xsYXBzZWQoY3VycmVudFNlbGVjdGlvbikgJiYgUG9pbnQuZXF1YWxzKHNlbGVjdGlvbkVuZFBvaW50LCBlbmRCbG9ja0VuZFBvaW50MikpIHtcbiAgICAgICAgY29uc3QgbmV4dFBhdGggPSBbZW5kQmxvY2tQYXRoWzBdICsgMV07XG4gICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBbYmxvY2tdLCB7XG4gICAgICAgICAgYXQ6IG5leHRQYXRoLFxuICAgICAgICAgIHNlbGVjdDogITFcbiAgICAgICAgfSksIChzZWxlY3QgPT09IFwic3RhcnRcIiB8fCBzZWxlY3QgPT09IFwiZW5kXCIpICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgbmV4dFBhdGgpKTtcbiAgICAgIH0gZWxzZSBpZiAoUmFuZ2UuaXNFeHBhbmRlZChjdXJyZW50U2VsZWN0aW9uKSAmJiBQb2ludC5lcXVhbHMoc2VsZWN0aW9uU3RhcnRQb2ludCwgZW5kQmxvY2tTdGFydFBvaW50KSAmJiBQb2ludC5lcXVhbHMoc2VsZWN0aW9uRW5kUG9pbnQsIGVuZEJsb2NrRW5kUG9pbnQyKSlcbiAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnRGcmFnbWVudChlZGl0b3IsIFtibG9ja10sIHtcbiAgICAgICAgICBhdDogY3VycmVudFNlbGVjdGlvblxuICAgICAgICB9KSwgc2VsZWN0ID09PSBcInN0YXJ0XCIgPyBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIEVkaXRvci5zdGFydChlZGl0b3IsIGVuZEJsb2NrUGF0aCkpIDogc2VsZWN0ID09PSBcImVuZFwiICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLmVuZChlZGl0b3IsIGVuZEJsb2NrUGF0aCkpO1xuICAgICAgZWxzZSBpZiAoUmFuZ2UuaXNFeHBhbmRlZChjdXJyZW50U2VsZWN0aW9uKSAmJiBQb2ludC5lcXVhbHMoc2VsZWN0aW9uU3RhcnRQb2ludCwgZW5kQmxvY2tTdGFydFBvaW50KSlcbiAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnRGcmFnbWVudChlZGl0b3IsIFtibG9ja10sIHtcbiAgICAgICAgICBhdDogY3VycmVudFNlbGVjdGlvblxuICAgICAgICB9KSwgc2VsZWN0ID09PSBcInN0YXJ0XCIgPyBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIEVkaXRvci5zdGFydChlZGl0b3IsIGVuZEJsb2NrUGF0aCkpIDogc2VsZWN0ID09PSBcImVuZFwiICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLmVuZChlZGl0b3IsIGVuZEJsb2NrUGF0aCkpO1xuICAgICAgZWxzZSBpZiAoUmFuZ2UuaXNFeHBhbmRlZChjdXJyZW50U2VsZWN0aW9uKSAmJiBQb2ludC5lcXVhbHMoc2VsZWN0aW9uRW5kUG9pbnQsIGVuZEJsb2NrRW5kUG9pbnQyKSlcbiAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnRGcmFnbWVudChlZGl0b3IsIFtibG9ja10sIHtcbiAgICAgICAgICBhdDogY3VycmVudFNlbGVjdGlvblxuICAgICAgICB9KSwgc2VsZWN0ID09PSBcInN0YXJ0XCIgPyBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIEVkaXRvci5zdGFydChlZGl0b3IsIFBhdGgubmV4dChlbmRCbG9ja1BhdGgpKSkgOiBzZWxlY3QgPT09IFwiZW5kXCIgJiYgVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBFZGl0b3IuZW5kKGVkaXRvciwgUGF0aC5uZXh0KGVuZEJsb2NrUGF0aCkpKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBjdXJyZW50U2VsZWN0aW9uMiA9IGVkaXRvci5zZWxlY3Rpb24sIFtmb2N1c0NoaWxkXSA9IGdldEZvY3VzQ2hpbGQoe1xuICAgICAgICAgIGVkaXRvclxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZvY3VzQ2hpbGQgJiYgZWRpdG9yLmlzVGV4dFNwYW4oZm9jdXNDaGlsZCkpXG4gICAgICAgICAgVHJhbnNmb3Jtcy5zcGxpdE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgYXQ6IGN1cnJlbnRTZWxlY3Rpb24yXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0RnJhZ21lbnQoZWRpdG9yLCBbYmxvY2tdLCB7XG4gICAgICAgICAgICBhdDogY3VycmVudFNlbGVjdGlvbjJcbiAgICAgICAgICB9KSwgc2VsZWN0ID09PSBcInN0YXJ0XCIgfHwgc2VsZWN0ID09PSBcImVuZFwiID8gVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBbZW5kQmxvY2tQYXRoWzBdICsgMV0pIDogVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBjdXJyZW50U2VsZWN0aW9uMik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG5leHRQYXRoID0gW2VuZEJsb2NrUGF0aFswXSArIDFdO1xuICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBbYmxvY2tdLCB7XG4gICAgICAgICAgICBhdDogbmV4dFBhdGgsXG4gICAgICAgICAgICBzZWxlY3Q6ICExXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgY3VycmVudFNlbGVjdGlvbjIpLCBzZWxlY3QgPT09IFwic3RhcnRcIiA/IFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgbmV4dFBhdGgpKSA6IHNlbGVjdCA9PT0gXCJlbmRcIiAmJiBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIEVkaXRvci5lbmQoZWRpdG9yLCBuZXh0UGF0aCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBbYmxvY2tdLCB7XG4gICAgICAgIHNlbGVjdDogITFcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbmV4dFBhdGggPSBbZW5kQmxvY2tQYXRoWzBdICsgMV07XG4gICAgICBzZWxlY3QgPT09IFwic3RhcnRcIiA/IFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgbmV4dFBhdGgpKSA6IHNlbGVjdCA9PT0gXCJlbmRcIiAmJiBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIEVkaXRvci5lbmQoZWRpdG9yLCBuZXh0UGF0aCkpO1xuICAgIH1cbiAgfVxufVxuY29uc3QgbW92ZUJhY2t3YXJkT3BlcmF0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBvcGVyYXRpb25cbn0pID0+IHtcbiAgVHJhbnNmb3Jtcy5tb3ZlKG9wZXJhdGlvbi5lZGl0b3IsIHtcbiAgICB1bml0OiBcImNoYXJhY3RlclwiLFxuICAgIGRpc3RhbmNlOiBvcGVyYXRpb24uZGlzdGFuY2UsXG4gICAgcmV2ZXJzZTogITBcbiAgfSk7XG59LCBtb3ZlQmxvY2tPcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBjb25zdCBvcmlnaW5LZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludCh7XG4gICAgcGF0aDogb3BlcmF0aW9uLmF0XG4gIH0pO1xuICBpZiAoIW9yaWdpbktleSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGJsb2NrIGtleSBmcm9tIHNlbGVjdGlvbiBwb2ludFwiKTtcbiAgY29uc3Qgb3JpZ2luQmxvY2tJbmRleCA9IG9wZXJhdGlvbi5lZGl0b3IuYmxvY2tJbmRleE1hcC5nZXQob3JpZ2luS2V5KTtcbiAgaWYgKG9yaWdpbkJsb2NrSW5kZXggPT09IHZvaWQgMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGJsb2NrIGluZGV4IGZyb20gYmxvY2sga2V5XCIpO1xuICBjb25zdCBkZXN0aW5hdGlvbktleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHtcbiAgICBwYXRoOiBvcGVyYXRpb24udG9cbiAgfSk7XG4gIGlmICghZGVzdGluYXRpb25LZXkpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBibG9jayBrZXkgZnJvbSBzZWxlY3Rpb24gcG9pbnRcIik7XG4gIGNvbnN0IGRlc3RpbmF0aW9uQmxvY2tJbmRleCA9IG9wZXJhdGlvbi5lZGl0b3IuYmxvY2tJbmRleE1hcC5nZXQoZGVzdGluYXRpb25LZXkpO1xuICBpZiAoZGVzdGluYXRpb25CbG9ja0luZGV4ID09PSB2b2lkIDApXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBibG9jayBpbmRleCBmcm9tIGJsb2NrIGtleVwiKTtcbiAgVHJhbnNmb3Jtcy5tb3ZlTm9kZXMob3BlcmF0aW9uLmVkaXRvciwge1xuICAgIGF0OiBbb3JpZ2luQmxvY2tJbmRleF0sXG4gICAgdG86IFtkZXN0aW5hdGlvbkJsb2NrSW5kZXhdLFxuICAgIG1vZGU6IFwiaGlnaGVzdFwiXG4gIH0pO1xufSwgbW92ZUZvcndhcmRPcGVyYXRpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIG9wZXJhdGlvblxufSkgPT4ge1xuICBUcmFuc2Zvcm1zLm1vdmUob3BlcmF0aW9uLmVkaXRvciwge1xuICAgIHVuaXQ6IFwiY2hhcmFjdGVyXCIsXG4gICAgZGlzdGFuY2U6IG9wZXJhdGlvbi5kaXN0YW5jZVxuICB9KTtcbn0sIHNlbGVjdE9wZXJhdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgb3BlcmF0aW9uXG59KSA9PiB7XG4gIGNvbnN0IG5ld1NlbGVjdGlvbiA9IHRvU2xhdGVSYW5nZSh7XG4gICAgY29udGV4dDoge1xuICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgIHZhbHVlOiBvcGVyYXRpb24uZWRpdG9yLnZhbHVlLFxuICAgICAgc2VsZWN0aW9uOiBvcGVyYXRpb24uYXRcbiAgICB9LFxuICAgIGJsb2NrSW5kZXhNYXA6IG9wZXJhdGlvbi5lZGl0b3IuYmxvY2tJbmRleE1hcFxuICB9KTtcbiAgbmV3U2VsZWN0aW9uID8gVHJhbnNmb3Jtcy5zZWxlY3Qob3BlcmF0aW9uLmVkaXRvciwgbmV3U2VsZWN0aW9uKSA6IFRyYW5zZm9ybXMuZGVzZWxlY3Qob3BlcmF0aW9uLmVkaXRvcik7XG59LCBiZWhhdmlvck9wZXJhdGlvbkltcGxlbWVudGF0aW9ucyA9IHtcbiAgXCJhbm5vdGF0aW9uLmFkZFwiOiBhZGRBbm5vdGF0aW9uT3BlcmF0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiYW5ub3RhdGlvbi5yZW1vdmVcIjogcmVtb3ZlQW5ub3RhdGlvbk9wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImJsb2NrLnNldFwiOiBibG9ja1NldE9wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImJsb2NrLnVuc2V0XCI6IGJsb2NrVW5zZXRPcGVyYXRpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJjaGlsZC5zZXRcIjogY2hpbGRTZXRPcGVyYXRpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJjaGlsZC51bnNldFwiOiBjaGlsZFVuc2V0T3BlcmF0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiZGVjb3JhdG9yLmFkZFwiOiBkZWNvcmF0b3JBZGRPcGVyYXRpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJkZWNvcmF0b3IucmVtb3ZlXCI6IHJlbW92ZURlY29yYXRvck9wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBkZWxldGU6IGRlbGV0ZU9wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImhpc3RvcnkucmVkb1wiOiBoaXN0b3J5UmVkb09wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImhpc3RvcnkudW5kb1wiOiBoaXN0b3J5VW5kb09wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC5ibG9ja1wiOiBpbnNlcnRCbG9ja09wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC5pbmxpbmUgb2JqZWN0XCI6IGluc2VydElubGluZU9iamVjdE9wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC5zcGFuXCI6IGluc2VydFNwYW5PcGVyYXRpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJpbnNlcnQudGV4dFwiOiBpbnNlcnRUZXh0T3BlcmF0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwibW92ZS5iYWNrd2FyZFwiOiBtb3ZlQmFja3dhcmRPcGVyYXRpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJtb3ZlLmJsb2NrXCI6IG1vdmVCbG9ja09wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBcIm1vdmUuZm9yd2FyZFwiOiBtb3ZlRm9yd2FyZE9wZXJhdGlvbkltcGxlbWVudGF0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdE9wZXJhdGlvbkltcGxlbWVudGF0aW9uXG59O1xuZnVuY3Rpb24gcGVyZm9ybU9wZXJhdGlvbih7XG4gIGNvbnRleHQsXG4gIG9wZXJhdGlvblxufSkge1xuICB0cnkge1xuICAgIHN3aXRjaCAob3BlcmF0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJhbm5vdGF0aW9uLmFkZFwiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wiYW5ub3RhdGlvbi5hZGRcIl0oe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJhbm5vdGF0aW9uLnJlbW92ZVwiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wiYW5ub3RhdGlvbi5yZW1vdmVcIl0oe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJibG9jay5zZXRcIjoge1xuICAgICAgICBiZWhhdmlvck9wZXJhdGlvbkltcGxlbWVudGF0aW9uc1tcImJsb2NrLnNldFwiXSh7XG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBvcGVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImJsb2NrLnVuc2V0XCI6IHtcbiAgICAgICAgYmVoYXZpb3JPcGVyYXRpb25JbXBsZW1lbnRhdGlvbnNbXCJibG9jay51bnNldFwiXSh7XG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBvcGVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNoaWxkLnNldFwiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wiY2hpbGQuc2V0XCJdKHtcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wZXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY2hpbGQudW5zZXRcIjoge1xuICAgICAgICBiZWhhdmlvck9wZXJhdGlvbkltcGxlbWVudGF0aW9uc1tcImNoaWxkLnVuc2V0XCJdKHtcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wZXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZGVjb3JhdG9yLmFkZFwiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVjb3JhdG9yLmFkZFwiXSh7XG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBvcGVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImRlY29yYXRvci5yZW1vdmVcIjoge1xuICAgICAgICBiZWhhdmlvck9wZXJhdGlvbkltcGxlbWVudGF0aW9uc1tcImRlY29yYXRvci5yZW1vdmVcIl0oe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJkZWxldGVcIjoge1xuICAgICAgICBiZWhhdmlvck9wZXJhdGlvbkltcGxlbWVudGF0aW9ucy5kZWxldGUoe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJoaXN0b3J5LnJlZG9cIjoge1xuICAgICAgICBiZWhhdmlvck9wZXJhdGlvbkltcGxlbWVudGF0aW9uc1tcImhpc3RvcnkucmVkb1wiXSh7XG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBvcGVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImhpc3RvcnkudW5kb1wiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wiaGlzdG9yeS51bmRvXCJdKHtcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wZXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiaW5zZXJ0LmJsb2NrXCI6IHtcbiAgICAgICAgYmVoYXZpb3JPcGVyYXRpb25JbXBsZW1lbnRhdGlvbnNbXCJpbnNlcnQuYmxvY2tcIl0oe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJpbnNlcnQuaW5saW5lIG9iamVjdFwiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LmlubGluZSBvYmplY3RcIl0oe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJpbnNlcnQuc3BhblwiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LnNwYW5cIl0oe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJpbnNlcnQudGV4dFwiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LnRleHRcIl0oe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJtb3ZlLmJhY2t3YXJkXCI6IHtcbiAgICAgICAgYmVoYXZpb3JPcGVyYXRpb25JbXBsZW1lbnRhdGlvbnNbXCJtb3ZlLmJhY2t3YXJkXCJdKHtcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wZXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwibW92ZS5ibG9ja1wiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wibW92ZS5ibG9ja1wiXSh7XG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBvcGVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcIm1vdmUuZm9yd2FyZFwiOiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zW1wibW92ZS5mb3J3YXJkXCJdKHtcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wZXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGJlaGF2aW9yT3BlcmF0aW9uSW1wbGVtZW50YXRpb25zLnNlbGVjdCh7XG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBvcGVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcihgRXhlY3V0aW5nIFwiJHtvcGVyYXRpb24udHlwZX1cIiBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICB9XG59XG5jb25zdCBDVVJSRU5UX09QRVJBVElPTl9JRCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gd2l0aEFwcGx5aW5nQmVoYXZpb3JPcGVyYXRpb25zKGVkaXRvciwgZm4pIHtcbiAgQ1VSUkVOVF9PUEVSQVRJT05fSUQuc2V0KGVkaXRvciwgZGVmYXVsdEtleUdlbmVyYXRvcigpKSwgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsIGZuKSwgQ1VSUkVOVF9PUEVSQVRJT05fSUQuc2V0KGVkaXRvciwgdm9pZCAwKTtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRPcGVyYXRpb25JZChlZGl0b3IpIHtcbiAgcmV0dXJuIENVUlJFTlRfT1BFUkFUSU9OX0lELmdldChlZGl0b3IpO1xufVxuZnVuY3Rpb24gaXNBcHBseWluZ0JlaGF2aW9yT3BlcmF0aW9ucyhlZGl0b3IpIHtcbiAgcmV0dXJuIGdldEN1cnJlbnRPcGVyYXRpb25JZChlZGl0b3IpICE9PSB2b2lkIDA7XG59XG5mdW5jdGlvbiBjcmVhdGVXaXRoRXZlbnRMaXN0ZW5lcnMoZWRpdG9yQWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQubWF4QmxvY2tzICE9PSB2b2lkIDApXG4gICAgICByZXR1cm4gZWRpdG9yO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbGV0ZTogZWRpdG9yRGVsZXRlLFxuICAgICAgc2VsZWN0XG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmRlbGV0ZSA9IChvcHRpb25zKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yT3BlcmF0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGVkaXRvckRlbGV0ZShvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgYXQgPSBvcHRpb25zPy5hdCA/PyBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgaWYgKCFhdCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5leHBlY3RlZCBjYWxsIHRvIC5kZWxldGUoLi4uKSB3aXRob3V0IGBhdGAgb3B0aW9uXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCByYW5nZSA9IEVkaXRvci5yYW5nZShlZGl0b3IsIGF0KSwgc2VsZWN0aW9uID0gc2xhdGVSYW5nZVRvU2VsZWN0aW9uKHtcbiAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgICAgICBlZGl0b3IsXG4gICAgICAgIHJhbmdlXG4gICAgICB9KTtcbiAgICAgIGlmICghc2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIGNhbGwgdG8gLmRlbGV0ZSguLi4pIHdpdGggaW52YWxpZCBgYXRgIG9wdGlvblwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgICAgICAgYXQ6IHNlbGVjdGlvbixcbiAgICAgICAgICBkaXJlY3Rpb246IG9wdGlvbnM/LnJldmVyc2UgPyBcImJhY2t3YXJkXCIgOiBcImZvcndhcmRcIixcbiAgICAgICAgICB1bml0OiBvcHRpb25zPy51bml0XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yLmRlbGV0ZUJhY2t3YXJkID0gKHVuaXQpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JPcGVyYXRpb25zKGVkaXRvcikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgY2FsbCB0byAuZGVsZXRlQmFja3dhcmQoLi4uKVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZGVsZXRlLmJhY2t3YXJkXCIsXG4gICAgICAgICAgdW5pdFxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvci5kZWxldGVGb3J3YXJkID0gKHVuaXQpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JPcGVyYXRpb25zKGVkaXRvcikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgY2FsbCB0byAuZGVsZXRlRm9yd2FyZCguLi4pXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJkZWxldGUuZm9yd2FyZFwiLFxuICAgICAgICAgIHVuaXRcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0QnJlYWsgPSAoKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yT3BlcmF0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIGNhbGwgdG8gLmluc2VydEJyZWFrKC4uLilcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImluc2VydC5icmVha1wiXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yLmluc2VydERhdGEgPSAoZGF0YVRyYW5zZmVyKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yT3BlcmF0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIGNhbGwgdG8gLmluc2VydERhdGEoLi4uKVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiaW5wdXQuKlwiLFxuICAgICAgICAgIG9yaWdpbkV2ZW50OiB7XG4gICAgICAgICAgICBkYXRhVHJhbnNmZXJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yLmluc2VydFNvZnRCcmVhayA9ICgpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JPcGVyYXRpb25zKGVkaXRvcikpIHtcbiAgICAgICAgaW5zZXJ0VGV4dE9wZXJhdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBrZXlHZW5lcmF0b3I6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICAgICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWFcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wZXJhdGlvbjoge1xuICAgICAgICAgICAgdGV4dDogYFxuYCxcbiAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImluc2VydC5zb2Z0IGJyZWFrXCJcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0VGV4dCA9ICh0ZXh0KSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yT3BlcmF0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGluc2VydFRleHRPcGVyYXRpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAga2V5R2VuZXJhdG9yOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcGVyYXRpb246IHtcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJpbnNlcnQudGV4dFwiLFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3IucmVkbyA9ICgpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JPcGVyYXRpb25zKGVkaXRvcikpIHtcbiAgICAgICAgcGVyZm9ybU9wZXJhdGlvbih7XG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAga2V5R2VuZXJhdG9yOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcGVyYXRpb246IHtcbiAgICAgICAgICAgIHR5cGU6IFwiaGlzdG9yeS5yZWRvXCIsXG4gICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJoaXN0b3J5LnJlZG9cIlxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvci5zZWxlY3QgPSAobG9jYXRpb24pID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JPcGVyYXRpb25zKGVkaXRvcikpIHtcbiAgICAgICAgc2VsZWN0KGxvY2F0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmFuZ2UgPSBFZGl0b3IucmFuZ2UoZWRpdG9yLCBsb2NhdGlvbik7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgICAgICBhdDogc2xhdGVSYW5nZVRvU2VsZWN0aW9uKHtcbiAgICAgICAgICAgIHNjaGVtYTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSxcbiAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgIHJhbmdlXG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3Iuc2V0RnJhZ21lbnREYXRhID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgY2FsbCB0byAuc2V0RnJhZ21lbnREYXRhKC4uLilcIik7XG4gICAgfSwgZWRpdG9yLnVuZG8gPSAoKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yT3BlcmF0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIHBlcmZvcm1PcGVyYXRpb24oe1xuICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIGtleUdlbmVyYXRvcjogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcixcbiAgICAgICAgICAgIHNjaGVtYTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3BlcmF0aW9uOiB7XG4gICAgICAgICAgICB0eXBlOiBcImhpc3RvcnkudW5kb1wiLFxuICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiaGlzdG9yeS51bmRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVXaXRoTWF4QmxvY2tzKGVkaXRvckFjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBseTogYXBwbHkyXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmFwcGx5ID0gKG9wZXJhdGlvbikgPT4ge1xuICAgICAgaWYgKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgICAgIH0pKSB7XG4gICAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZG9pbmcoZWRpdG9yKSB8fCBpc1JlZG9pbmcoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgcm93cyA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5tYXhCbG9ja3MgPz8gLTE7XG4gICAgICByb3dzID4gMCAmJiBlZGl0b3IuY2hpbGRyZW4ubGVuZ3RoID49IHJvd3MgJiYgKG9wZXJhdGlvbi50eXBlID09PSBcImluc2VydF9ub2RlXCIgfHwgb3BlcmF0aW9uLnR5cGUgPT09IFwic3BsaXRfbm9kZVwiKSAmJiBvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEgfHwgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlV2l0aE9iamVjdEtleXMoZWRpdG9yQWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGx5OiBhcHBseTIsXG4gICAgICBub3JtYWxpemVOb2RlXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmFwcGx5ID0gKG9wZXJhdGlvbikgPT4ge1xuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRvaW5nKGVkaXRvcikgfHwgaXNSZWRvaW5nKGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gXCJzcGxpdF9ub2RlXCIpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdLZXlzID0gWy4uLk5vZGUuZGVzY2VuZGFudHMoZWRpdG9yKV0ubWFwKChbbm9kZV0pID0+IG5vZGUuX2tleSk7XG4gICAgICAgIGFwcGx5Mih7XG4gICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIC4uLm9wZXJhdGlvbi5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgX2tleTogb3BlcmF0aW9uLnByb3BlcnRpZXMuX2tleSA9PT0gdm9pZCAwIHx8IGV4aXN0aW5nS2V5cy5pbmNsdWRlcyhvcGVyYXRpb24ucHJvcGVydGllcy5fa2V5KSA/IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSA6IG9wZXJhdGlvbi5wcm9wZXJ0aWVzLl9rZXlcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAob3BlcmF0aW9uLnR5cGUgPT09IFwiaW5zZXJ0X25vZGVcIiAmJiAhRWRpdG9yLmlzRWRpdG9yKG9wZXJhdGlvbi5ub2RlKSkge1xuICAgICAgICBjb25zdCBleGlzdGluZ0tleXMgPSBbLi4uTm9kZS5kZXNjZW5kYW50cyhlZGl0b3IpXS5tYXAoKFtub2RlXSkgPT4gbm9kZS5fa2V5KTtcbiAgICAgICAgYXBwbHkyKHtcbiAgICAgICAgICAuLi5vcGVyYXRpb24sXG4gICAgICAgICAgbm9kZToge1xuICAgICAgICAgICAgLi4ub3BlcmF0aW9uLm5vZGUsXG4gICAgICAgICAgICBfa2V5OiBvcGVyYXRpb24ubm9kZS5fa2V5ID09PSB2b2lkIDAgfHwgZXhpc3RpbmdLZXlzLmluY2x1ZGVzKG9wZXJhdGlvbi5ub2RlLl9rZXkpID8gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpIDogb3BlcmF0aW9uLm5vZGUuX2tleVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gXCJtZXJnZV9ub2RlXCIpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBvcGVyYXRpb24ucGF0aFtvcGVyYXRpb24ucGF0aC5sZW5ndGggLSAxXSwgcHJldlBhdGggPSBQYXRoLnByZXZpb3VzKG9wZXJhdGlvbi5wYXRoKSwgcHJldkluZGV4ID0gcHJldlBhdGhbcHJldlBhdGgubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggIT09IDEgfHwgcHJldlBhdGgubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZWRpdG9yLnZhbHVlLmF0KGluZGV4KSwgcHJldmlvdXNCbG9jayA9IGVkaXRvci52YWx1ZS5hdChwcmV2SW5kZXgpO1xuICAgICAgICBpZiAoIWJsb2NrIHx8ICFwcmV2aW91c0Jsb2NrKSB7XG4gICAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNUZXh0QmxvY2soZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LCBibG9jaykgfHwgIWlzVGV4dEJsb2NrKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dCwgcHJldmlvdXNCbG9jaykpIHtcbiAgICAgICAgICBhcHBseTIob3BlcmF0aW9uKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldmlvdXNCbG9ja0NoaWxkS2V5cyA9IHByZXZpb3VzQmxvY2suY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gY2hpbGQuX2tleSksIHByZXZpb3VzQmxvY2tNYXJrRGVmS2V5cyA9IHByZXZpb3VzQmxvY2subWFya0RlZnM/Lm1hcCgobWFya0RlZikgPT4gbWFya0RlZi5fa2V5KSA/PyBbXSwgbWFya0RlZktleU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIGFkanVzdGVkTWFya0RlZnMgPSBibG9jay5tYXJrRGVmcz8ubWFwKChtYXJrRGVmKSA9PiB7XG4gICAgICAgICAgaWYgKHByZXZpb3VzQmxvY2tNYXJrRGVmS2V5cy5pbmNsdWRlcyhtYXJrRGVmLl9rZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdLZXkgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCk7XG4gICAgICAgICAgICByZXR1cm4gbWFya0RlZktleU1hcC5zZXQobWFya0RlZi5fa2V5LCBuZXdLZXkpLCB7XG4gICAgICAgICAgICAgIC4uLm1hcmtEZWYsXG4gICAgICAgICAgICAgIF9rZXk6IG5ld0tleVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hcmtEZWY7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgY2hpbGRJbmRleCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoaXNTcGFuKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dCwgY2hpbGQpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrcyA9IGNoaWxkLm1hcmtzPy5tYXAoKG1hcmspID0+IG1hcmtEZWZLZXlNYXAuZ2V0KG1hcmspIHx8IG1hcmspID8/IFtdO1xuICAgICAgICAgICAgaXNFcXVhbChjaGlsZC5tYXJrcywgbWFya3MpIHx8IFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIG1hcmtzXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGF0OiBbaW5kZXgsIGNoaWxkSW5kZXhdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJldmlvdXNCbG9ja0NoaWxkS2V5cy5pbmNsdWRlcyhjaGlsZC5fa2V5KSAmJiBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IFtpbmRleCwgY2hpbGRJbmRleF1cbiAgICAgICAgICB9KSwgY2hpbGRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5Mih7XG4gICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIC4uLm9wZXJhdGlvbi5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBhZGp1c3RlZCBtYXJrRGVmcyBhcmUgY2FycmllZCBhbG9uZyBmb3IgdGhlIG1lcmdlXG4gICAgICAgICAgICAvLyBvcGVyYXRpb25cbiAgICAgICAgICAgIG1hcmtEZWZzOiBhZGp1c3RlZE1hcmtEZWZzXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgfSwgZWRpdG9yLm5vcm1hbGl6ZU5vZGUgPSAoZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IFtub2RlLCBwYXRoXSA9IGVudHJ5O1xuICAgICAgaWYgKEVsZW1lbnQkMS5pc0VsZW1lbnQobm9kZSkgJiYgbm9kZS5fdHlwZSA9PT0gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lKSB7XG4gICAgICAgIGlmICghbm9kZS5fa2V5KSB7XG4gICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgTm9kZS5jaGlsZHJlbihlZGl0b3IsIHBhdGgpKVxuICAgICAgICAgIGlmICghY2hpbGQuX2tleSkge1xuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhdDogY2hpbGRQYXRoXG4gICAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBub3JtYWxpemVOb2RlKGVudHJ5KTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVBcHBseVBhdGNoKHNjaGVtYSkge1xuICByZXR1cm4gKGVkaXRvciwgcGF0Y2gpID0+IHtcbiAgICBsZXQgY2hhbmdlZCA9ICExO1xuICAgIHRyeSB7XG4gICAgICBzd2l0Y2ggKHBhdGNoLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImluc2VydFwiOlxuICAgICAgICAgIGNoYW5nZWQgPSBpbnNlcnRQYXRjaChlZGl0b3IsIHBhdGNoLCBzY2hlbWEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICBjaGFuZ2VkID0gdW5zZXRQYXRjaChlZGl0b3IsIHBhdGNoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNldFwiOlxuICAgICAgICAgIGNoYW5nZWQgPSBzZXRQYXRjaChlZGl0b3IsIHBhdGNoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImRpZmZNYXRjaFBhdGNoXCI6XG4gICAgICAgICAgY2hhbmdlZCA9IGRpZmZNYXRjaFBhdGNoKGVkaXRvciwgcGF0Y2gpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRpZmZNYXRjaFBhdGNoKGVkaXRvciwgcGF0Y2gpIHtcbiAgY29uc3QgYmxvY2sgPSBmaW5kQmxvY2soZWRpdG9yLmNoaWxkcmVuLCBwYXRjaC5wYXRoKTtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IGNoaWxkID0gZmluZEJsb2NrQ2hpbGQoYmxvY2ssIHBhdGNoLnBhdGgpO1xuICBpZiAoIWNoaWxkIHx8ICEoYmxvY2sgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrLm5vZGUpICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSA0ICYmIHBhdGNoLnBhdGhbMV0gPT09IFwiY2hpbGRyZW5cIiAmJiBwYXRjaC5wYXRoWzNdID09PSBcInRleHRcIikgfHwgIVRleHQuaXNUZXh0KGNoaWxkLm5vZGUpKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3QgcGF0Y2hlcyA9IHBhcnNlKHBhdGNoLnZhbHVlKSwgW25ld1ZhbHVlXSA9IGFwcGx5KHBhdGNoZXMsIGNoaWxkLm5vZGUudGV4dCwge1xuICAgIGFsbG93RXhjZWVkaW5nSW5kaWNlczogITBcbiAgfSksIGRpZmYkMSA9IGNsZWFudXBFZmZpY2llbmN5KGRpZmYoY2hpbGQubm9kZS50ZXh0LCBuZXdWYWx1ZSksIDUpO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBbb3AsIHRleHRdIG9mIGRpZmYkMSlcbiAgICBvcCA9PT0gRElGRl9JTlNFUlQgPyAoZWRpdG9yLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwiaW5zZXJ0X3RleHRcIixcbiAgICAgIHBhdGg6IFtibG9jay5pbmRleCwgY2hpbGQuaW5kZXhdLFxuICAgICAgb2Zmc2V0LFxuICAgICAgdGV4dFxuICAgIH0pLCBvZmZzZXQgKz0gdGV4dC5sZW5ndGgpIDogb3AgPT09IERJRkZfREVMRVRFID8gZWRpdG9yLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwicmVtb3ZlX3RleHRcIixcbiAgICAgIHBhdGg6IFtibG9jay5pbmRleCwgY2hpbGQuaW5kZXhdLFxuICAgICAgb2Zmc2V0LFxuICAgICAgdGV4dFxuICAgIH0pIDogb3AgPT09IERJRkZfRVFVQUwgJiYgKG9mZnNldCArPSB0ZXh0Lmxlbmd0aCk7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGluc2VydFBhdGNoKGVkaXRvciwgcGF0Y2gsIHNjaGVtYSkge1xuICBjb25zdCBibG9jayA9IGZpbmRCbG9jayhlZGl0b3IuY2hpbGRyZW4sIHBhdGNoLnBhdGgpO1xuICBpZiAoIWJsb2NrIHx8IHBhdGNoLnBhdGgubGVuZ3RoID4gMSAmJiBwYXRjaC5wYXRoWzFdICE9PSBcImNoaWxkcmVuXCIpXG4gICAgcmV0dXJuICExO1xuICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCB7XG4gICAgICBpdGVtczogaXRlbXMyLFxuICAgICAgcG9zaXRpb246IHBvc2l0aW9uMlxuICAgIH0gPSBwYXRjaCwgYmxvY2tzVG9JbnNlcnQgPSB0b1NsYXRlVmFsdWUoaXRlbXMyLCB7XG4gICAgICBzY2hlbWFUeXBlczogc2NoZW1hXG4gICAgfSwgS0VZX1RPX1NMQVRFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCB0YXJnZXRCbG9ja0luZGV4ID0gYmxvY2suaW5kZXgsIG5vcm1hbGl6ZWRJZHgyID0gcG9zaXRpb24yID09PSBcImFmdGVyXCIgPyB0YXJnZXRCbG9ja0luZGV4ICsgMSA6IHRhcmdldEJsb2NrSW5kZXgsIGVkaXRvcldhc0VtcHR5QmVmb3JlID0gaXNFcXVhbFRvRW1wdHlFZGl0b3IoZWRpdG9yLmNoaWxkcmVuLCBzY2hlbWEpO1xuICAgIHJldHVybiBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgYmxvY2tzVG9JbnNlcnQsIHtcbiAgICAgIGF0OiBbbm9ybWFsaXplZElkeDJdXG4gICAgfSksIGVkaXRvcldhc0VtcHR5QmVmb3JlICYmIHR5cGVvZiBwYXRjaC5wYXRoWzBdID09IFwibnVtYmVyXCIgJiYgcGF0Y2gucGF0aFswXSA9PT0gMCAmJiBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgYXQ6IFtwb3NpdGlvbjIgPT09IFwiYmVmb3JlXCIgPyB0YXJnZXRCbG9ja0luZGV4ICsgMSA6IHRhcmdldEJsb2NrSW5kZXhdXG4gICAgfSksICEwO1xuICB9XG4gIGNvbnN0IHtcbiAgICBpdGVtcyxcbiAgICBwb3NpdGlvblxuICB9ID0gcGF0Y2gsIHRhcmdldENoaWxkID0gZmluZEJsb2NrQ2hpbGQoYmxvY2ssIHBhdGNoLnBhdGgpO1xuICBpZiAoIXRhcmdldENoaWxkKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3QgY2hpbGRyZW5Ub0luc2VydCA9IHRvU2xhdGVWYWx1ZShbe1xuICAgIC4uLmJsb2NrLm5vZGUsXG4gICAgY2hpbGRyZW46IGl0ZW1zXG4gIH1dLCB7XG4gICAgc2NoZW1hVHlwZXM6IHNjaGVtYVxuICB9LCBLRVlfVE9fU0xBVEVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIG5vcm1hbGl6ZWRJZHggPSBwb3NpdGlvbiA9PT0gXCJhZnRlclwiID8gdGFyZ2V0Q2hpbGQuaW5kZXggKyAxIDogdGFyZ2V0Q2hpbGQuaW5kZXgsIGNoaWxkSW5zZXJ0UGF0aCA9IFtibG9jay5pbmRleCwgbm9ybWFsaXplZElkeF07XG4gIHJldHVybiBjaGlsZHJlblRvSW5zZXJ0ICYmIEVsZW1lbnQkMS5pc0VsZW1lbnQoY2hpbGRyZW5Ub0luc2VydFswXSkgJiYgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGNoaWxkcmVuVG9JbnNlcnRbMF0uY2hpbGRyZW4sIHtcbiAgICBhdDogY2hpbGRJbnNlcnRQYXRoXG4gIH0pLCAhMDtcbn1cbmZ1bmN0aW9uIHNldFBhdGNoKGVkaXRvciwgcGF0Y2gpIHtcbiAgbGV0IHZhbHVlID0gcGF0Y2gudmFsdWU7XG4gIHR5cGVvZiBwYXRjaC5wYXRoWzNdID09IFwic3RyaW5nXCIgJiYgKHZhbHVlID0ge30sIHZhbHVlW3BhdGNoLnBhdGhbM11dID0gcGF0Y2gudmFsdWUpO1xuICBjb25zdCBibG9jayA9IGZpbmRCbG9jayhlZGl0b3IuY2hpbGRyZW4sIHBhdGNoLnBhdGgpO1xuICBpZiAoIWJsb2NrKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3QgaXNUZXh0QmxvY2syID0gZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrLm5vZGUpO1xuICBpZiAoaXNUZXh0QmxvY2syICYmIHBhdGNoLnBhdGgubGVuZ3RoID4gMSAmJiBwYXRjaC5wYXRoWzFdICE9PSBcImNoaWxkcmVuXCIpXG4gICAgcmV0dXJuICExO1xuICBjb25zdCBjaGlsZCA9IGZpbmRCbG9ja0NoaWxkKGJsb2NrLCBwYXRjaC5wYXRoKTtcbiAgaWYgKGlzVGV4dEJsb2NrMiAmJiBjaGlsZCkge1xuICAgIGlmIChUZXh0LmlzVGV4dChjaGlsZC5ub2RlKSlcbiAgICAgIGlmIChUZXh0LmlzVGV4dCh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3Qgb2xkVGV4dCA9IGNoaWxkLm5vZGUudGV4dCwgbmV3VGV4dCA9IHZhbHVlLnRleHQ7XG4gICAgICAgIG9sZFRleHQgIT09IG5ld1RleHQgJiYgKGVkaXRvci5hcHBseSh7XG4gICAgICAgICAgdHlwZTogXCJyZW1vdmVfdGV4dFwiLFxuICAgICAgICAgIHBhdGg6IFtibG9jay5pbmRleCwgY2hpbGQuaW5kZXhdLFxuICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICB0ZXh0OiBvbGRUZXh0XG4gICAgICAgIH0pLCBlZGl0b3IuYXBwbHkoe1xuICAgICAgICAgIHR5cGU6IFwiaW5zZXJ0X3RleHRcIixcbiAgICAgICAgICBwYXRoOiBbYmxvY2suaW5kZXgsIGNoaWxkLmluZGV4XSxcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgdGV4dDogbmV3VGV4dFxuICAgICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcHJvcFBhdGggPSBwYXRjaC5wYXRoLnNsaWNlKDMpLCBwcm9wRW50cnkgPSBwcm9wUGF0aC5hdCgwKTtcbiAgICAgICAgaWYgKHByb3BFbnRyeSA9PT0gdm9pZCAwIHx8IHR5cGVvZiBwcm9wRW50cnkgPT0gXCJzdHJpbmdcIiAmJiBbXCJfa2V5XCIsIFwiX3R5cGVcIiwgXCJ0ZXh0XCJdLmluY2x1ZGVzKHByb3BFbnRyeSkpXG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICBjb25zdCBuZXdOb2RlID0gYXBwbHlBbGwoY2hpbGQubm9kZSwgW3tcbiAgICAgICAgICAuLi5wYXRjaCxcbiAgICAgICAgICBwYXRoOiBwcm9wUGF0aFxuICAgICAgICB9XSk7XG4gICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCBuZXdOb2RlLCB7XG4gICAgICAgICAgYXQ6IFtibG9jay5pbmRleCwgY2hpbGQuaW5kZXhdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgcHJvcFBhdGggPSBwYXRjaC5wYXRoLnNsaWNlKDMpLCByZXNlcnZlZFByb3BzID0gW1wiX2tleVwiLCBcIl90eXBlXCIsIFwiY2hpbGRyZW5cIiwgXCJfX2lubGluZVwiXSwgcHJvcEVudHJ5ID0gcHJvcFBhdGguYXQoMCk7XG4gICAgICBpZiAocHJvcEVudHJ5ID09PSB2b2lkIDAgfHwgdHlwZW9mIHByb3BFbnRyeSA9PSBcInN0cmluZ1wiICYmIHJlc2VydmVkUHJvcHMuaW5jbHVkZXMocHJvcEVudHJ5KSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgY29uc3QgdmFsdWUyID0gXCJ2YWx1ZVwiIGluIGNoaWxkLm5vZGUgJiYgdHlwZW9mIGNoaWxkLm5vZGUudmFsdWUgPT0gXCJvYmplY3RcIiA/IGNoaWxkLm5vZGUudmFsdWUgOiB7fSwgbmV3VmFsdWUgPSBhcHBseUFsbCh2YWx1ZTIsIFt7XG4gICAgICAgIC4uLnBhdGNoLFxuICAgICAgICBwYXRoOiBwYXRjaC5wYXRoLnNsaWNlKDMpXG4gICAgICB9XSk7XG4gICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAuLi5jaGlsZC5ub2RlLFxuICAgICAgICB2YWx1ZTogbmV3VmFsdWVcbiAgICAgIH0sIHtcbiAgICAgICAgYXQ6IFtibG9jay5pbmRleCwgY2hpbGQuaW5kZXhdXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuICEwO1xuICB9IGVsc2UgaWYgKEVsZW1lbnQkMS5pc0VsZW1lbnQoYmxvY2subm9kZSkgJiYgcGF0Y2gucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIC4uLm5leHRSZXN0XG4gICAgfSA9IHZhbHVlLCB7XG4gICAgICBjaGlsZHJlbjogX3ByZXZDaGlsZHJlbixcbiAgICAgIC4uLnByZXZSZXN0XG4gICAgfSA9IGJsb2NrLm5vZGUgfHwge1xuICAgICAgY2hpbGRyZW46IHZvaWQgMFxuICAgIH07XG4gICAgZWRpdG9yLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwic2V0X25vZGVcIixcbiAgICAgIHBhdGg6IFtibG9jay5pbmRleF0sXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC4uLnByZXZSZXN0XG4gICAgICB9LFxuICAgICAgbmV3UHJvcGVydGllczogbmV4dFJlc3RcbiAgICB9KTtcbiAgICBjb25zdCBibG9ja05vZGUgPSBibG9jay5ub2RlO1xuICAgIGJsb2NrTm9kZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDIsIGNoaWxkSW5kZXgpID0+IHtcbiAgICAgIGVkaXRvci5hcHBseSh7XG4gICAgICAgIHR5cGU6IFwicmVtb3ZlX25vZGVcIixcbiAgICAgICAgcGF0aDogW2Jsb2NrLmluZGV4LCBibG9ja05vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gMSAtIGNoaWxkSW5kZXhdLFxuICAgICAgICBub2RlOiBjaGlsZDJcbiAgICAgIH0pO1xuICAgIH0pLCBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZDIsIGNoaWxkSW5kZXgpID0+IHtcbiAgICAgIGVkaXRvci5hcHBseSh7XG4gICAgICAgIHR5cGU6IFwiaW5zZXJ0X25vZGVcIixcbiAgICAgICAgcGF0aDogW2Jsb2NrLmluZGV4LCBjaGlsZEluZGV4XSxcbiAgICAgICAgbm9kZTogY2hpbGQyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChibG9jayAmJiBcInZhbHVlXCIgaW4gYmxvY2subm9kZSlcbiAgICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPiAxICYmIHBhdGNoLnBhdGhbMV0gIT09IFwiY2hpbGRyZW5cIikge1xuICAgICAgY29uc3QgbmV3VmFsID0gYXBwbHlBbGwoYmxvY2subm9kZS52YWx1ZSwgW3tcbiAgICAgICAgLi4ucGF0Y2gsXG4gICAgICAgIHBhdGg6IHBhdGNoLnBhdGguc2xpY2UoMSlcbiAgICAgIH1dKTtcbiAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIC4uLmJsb2NrLm5vZGUsXG4gICAgICAgIHZhbHVlOiBuZXdWYWxcbiAgICAgIH0sIHtcbiAgICAgICAgYXQ6IFtibG9jay5pbmRleF1cbiAgICAgIH0pO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuICExO1xuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiB1bnNldFBhdGNoKGVkaXRvciwgcGF0Y2gpIHtcbiAgaWYgKHBhdGNoLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgcHJldmlvdXNTZWxlY3Rpb24gPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgIFRyYW5zZm9ybXMuZGVzZWxlY3QoZWRpdG9yKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBbXSwge1xuICAgICAgcmV2ZXJzZTogITBcbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IFtfLCBwYXRoXSBvZiBjaGlsZHJlbilcbiAgICAgIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBwYXRoXG4gICAgICB9KTtcbiAgICByZXR1cm4gVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2soe1xuICAgICAgZGVjb3JhdG9yczogW11cbiAgICB9KSksIHByZXZpb3VzU2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwge1xuICAgICAgYW5jaG9yOiB7XG4gICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9LFxuICAgICAgZm9jdXM6IHtcbiAgICAgICAgcGF0aDogWzAsIDBdLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH1cbiAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCksICEwO1xuICB9XG4gIGNvbnN0IGJsb2NrID0gZmluZEJsb2NrKGVkaXRvci5jaGlsZHJlbiwgcGF0Y2gucGF0aCk7XG4gIGlmICghYmxvY2spXG4gICAgcmV0dXJuICExO1xuICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoZWRpdG9yLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgcHJldmlvdXNTZWxlY3Rpb24gPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgcmV0dXJuIFRyYW5zZm9ybXMuZGVzZWxlY3QoZWRpdG9yKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IFtibG9jay5pbmRleF1cbiAgICAgIH0pLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgZWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgICAgIGRlY29yYXRvcnM6IFtdXG4gICAgICB9KSksIHByZXZpb3VzU2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwge1xuICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICBwYXRoOiBbMCwgMF0sXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgcGF0aDogWzAsIDBdLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9XG4gICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCksICEwO1xuICAgIH1cbiAgICByZXR1cm4gVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBbYmxvY2suaW5kZXhdXG4gICAgfSksICEwO1xuICB9XG4gIGNvbnN0IGNoaWxkID0gZmluZEJsb2NrQ2hpbGQoYmxvY2ssIHBhdGNoLnBhdGgpO1xuICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrLm5vZGUpICYmIGNoaWxkICYmIHBhdGNoLnBhdGhbMV0gPT09IFwiY2hpbGRyZW5cIiAmJiBwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBbYmxvY2suaW5kZXgsIGNoaWxkLmluZGV4XVxuICAgIH0pLCAhMDtcbiAgaWYgKGNoaWxkICYmICFUZXh0LmlzVGV4dChjaGlsZC5ub2RlKSkge1xuICAgIGNvbnN0IHByb3BFbnRyeSA9IHBhdGNoLnBhdGguc2xpY2UoMykuYXQoMCk7XG4gICAgaWYgKHByb3BFbnRyeSA9PT0gdm9pZCAwIHx8IHR5cGVvZiBwcm9wRW50cnkgPT0gXCJzdHJpbmdcIiAmJiBbXCJfa2V5XCIsIFwiX3R5cGVcIiwgXCJjaGlsZHJlblwiLCBcIl9faW5saW5lXCJdLmluY2x1ZGVzKHByb3BFbnRyeSkpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgdmFsdWUgPSBcInZhbHVlXCIgaW4gY2hpbGQubm9kZSAmJiB0eXBlb2YgY2hpbGQubm9kZS52YWx1ZSA9PSBcIm9iamVjdFwiID8gY2hpbGQubm9kZS52YWx1ZSA6IHt9LCBuZXdWYWx1ZSA9IGFwcGx5QWxsKHZhbHVlLCBbe1xuICAgICAgLi4ucGF0Y2gsXG4gICAgICBwYXRoOiBwYXRjaC5wYXRoLnNsaWNlKDMpXG4gICAgfV0pO1xuICAgIHJldHVybiBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgLi4uY2hpbGQubm9kZSxcbiAgICAgIHZhbHVlOiBuZXdWYWx1ZVxuICAgIH0sIHtcbiAgICAgIGF0OiBbYmxvY2suaW5kZXgsIGNoaWxkLmluZGV4XVxuICAgIH0pLCAhMDtcbiAgfVxuICBpZiAoY2hpbGQgJiYgVGV4dC5pc1RleHQoY2hpbGQubm9kZSkpIHtcbiAgICBjb25zdCBwcm9wUGF0aCA9IHBhdGNoLnBhdGguc2xpY2UoMyksIHByb3BFbnRyeSA9IHByb3BQYXRoLmF0KDApO1xuICAgIGlmIChwcm9wRW50cnkgPT09IHZvaWQgMCB8fCB0eXBlb2YgcHJvcEVudHJ5ID09IFwic3RyaW5nXCIgJiYgW1wiX2tleVwiLCBcIl90eXBlXCJdLmluY2x1ZGVzKHByb3BFbnRyeSkpXG4gICAgICByZXR1cm4gITE7XG4gICAgaWYgKHR5cGVvZiBwcm9wRW50cnkgPT0gXCJzdHJpbmdcIiAmJiBwcm9wRW50cnkgPT09IFwidGV4dFwiKVxuICAgICAgcmV0dXJuIGVkaXRvci5hcHBseSh7XG4gICAgICAgIHR5cGU6IFwicmVtb3ZlX3RleHRcIixcbiAgICAgICAgcGF0aDogW2Jsb2NrLmluZGV4LCBjaGlsZC5pbmRleF0sXG4gICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgdGV4dDogY2hpbGQubm9kZS50ZXh0XG4gICAgICB9KSwgITA7XG4gICAgY29uc3QgbmV3Tm9kZSA9IGFwcGx5QWxsKGNoaWxkLm5vZGUsIFt7XG4gICAgICAuLi5wYXRjaCxcbiAgICAgIHBhdGg6IHByb3BQYXRoXG4gICAgfV0pLCBuZXdLZXlzID0gT2JqZWN0LmtleXMobmV3Tm9kZSksIHJlbW92ZWRQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoY2hpbGQubm9kZSkuZmlsdGVyKChwcm9wZXJ0eSkgPT4gIW5ld0tleXMuaW5jbHVkZXMocHJvcGVydHkpKTtcbiAgICByZXR1cm4gVHJhbnNmb3Jtcy51bnNldE5vZGVzKGVkaXRvciwgcmVtb3ZlZFByb3BlcnRpZXMsIHtcbiAgICAgIGF0OiBbYmxvY2suaW5kZXgsIGNoaWxkLmluZGV4XVxuICAgIH0pLCAhMDtcbiAgfVxuICBpZiAoIWNoaWxkKSB7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBibG9jay5ub2RlKSB7XG4gICAgICBjb25zdCBuZXdWYWwgPSBhcHBseUFsbChibG9jay5ub2RlLnZhbHVlLCBbe1xuICAgICAgICAuLi5wYXRjaCxcbiAgICAgICAgcGF0aDogcGF0Y2gucGF0aC5zbGljZSgxKVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIC4uLmJsb2NrLm5vZGUsXG4gICAgICAgIHZhbHVlOiBuZXdWYWxcbiAgICAgIH0sIHtcbiAgICAgICAgYXQ6IFtibG9jay5pbmRleF1cbiAgICAgIH0pLCAhMDtcbiAgICB9XG4gICAgcmV0dXJuICExO1xuICB9XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGZpbmRCbG9jayhjaGlsZHJlbiwgcGF0aCkge1xuICBsZXQgYmxvY2tJbmRleCA9IC0xO1xuICBjb25zdCBibG9jayA9IGNoaWxkcmVuLmZpbmQoKG5vZGUsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgaXNNYXRjaCA9IGlzS2V5ZWRTZWdtZW50KHBhdGhbMF0pID8gbm9kZS5fa2V5ID09PSBwYXRoWzBdLl9rZXkgOiBpbmRleCA9PT0gcGF0aFswXTtcbiAgICByZXR1cm4gaXNNYXRjaCAmJiAoYmxvY2tJbmRleCA9IGluZGV4KSwgaXNNYXRjaDtcbiAgfSk7XG4gIGlmIChibG9jaylcbiAgICByZXR1cm4ge1xuICAgICAgbm9kZTogYmxvY2ssXG4gICAgICBpbmRleDogYmxvY2tJbmRleFxuICAgIH07XG59XG5mdW5jdGlvbiBmaW5kQmxvY2tDaGlsZChibG9jaywgcGF0aCkge1xuICBjb25zdCBibG9ja05vZGUgPSBibG9jay5ub2RlO1xuICBpZiAoIUVsZW1lbnQkMS5pc0VsZW1lbnQoYmxvY2tOb2RlKSB8fCBwYXRoWzFdICE9PSBcImNoaWxkcmVuXCIpXG4gICAgcmV0dXJuO1xuICBsZXQgY2hpbGRJbmRleCA9IC0xO1xuICBjb25zdCBjaGlsZCA9IGJsb2NrTm9kZS5jaGlsZHJlbi5maW5kKChub2RlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBpc0tleWVkU2VnbWVudChwYXRoWzJdKSA/IG5vZGUuX2tleSA9PT0gcGF0aFsyXS5fa2V5IDogaW5kZXggPT09IHBhdGhbMl07XG4gICAgcmV0dXJuIGlzTWF0Y2ggJiYgKGNoaWxkSW5kZXggPSBpbmRleCksIGlzTWF0Y2g7XG4gIH0pO1xuICBpZiAoY2hpbGQpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5vZGU6IGNoaWxkLFxuICAgICAgaW5kZXg6IGNoaWxkSW5kZXhcbiAgICB9O1xufVxuZnVuY3Rpb24gaW5zZXJ0VGV4dFBhdGNoKHNjaGVtYSwgY2hpbGRyZW4sIG9wZXJhdGlvbiwgYmVmb3JlVmFsdWUpIHtcbiAgY29uc3QgYmxvY2sgPSBpc1RleHRCbG9jayh7XG4gICAgc2NoZW1hXG4gIH0sIGNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXSkgJiYgY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dO1xuICBpZiAoIWJsb2NrKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGJsb2NrXCIpO1xuICBjb25zdCB0ZXh0Q2hpbGQgPSBpc1RleHRCbG9jayh7XG4gICAgc2NoZW1hXG4gIH0sIGJsb2NrKSAmJiBpc1NwYW4oe1xuICAgIHNjaGVtYVxuICB9LCBibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0pICYmIGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgaWYgKCF0ZXh0Q2hpbGQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgY2hpbGRcIik7XG4gIGNvbnN0IHBhdGggPSBbe1xuICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgX2tleTogdGV4dENoaWxkLl9rZXlcbiAgfSwgXCJ0ZXh0XCJdLCBwcmV2QmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIHByZXZDaGlsZCA9IGlzVGV4dEJsb2NrKHtcbiAgICBzY2hlbWFcbiAgfSwgcHJldkJsb2NrKSAmJiBwcmV2QmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dLCBwcmV2VGV4dCA9IGlzU3Bhbih7XG4gICAgc2NoZW1hXG4gIH0sIHByZXZDaGlsZCkgPyBwcmV2Q2hpbGQudGV4dCA6IFwiXCIsIHBhdGNoID0gZGlmZk1hdGNoUGF0Y2gkMShwcmV2VGV4dCwgdGV4dENoaWxkLnRleHQsIHBhdGgpO1xuICByZXR1cm4gcGF0Y2gudmFsdWUubGVuZ3RoID8gW3BhdGNoXSA6IFtdO1xufVxuZnVuY3Rpb24gcmVtb3ZlVGV4dFBhdGNoKHNjaGVtYSwgY2hpbGRyZW4sIG9wZXJhdGlvbiwgYmVmb3JlVmFsdWUpIHtcbiAgY29uc3QgYmxvY2sgPSBjaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV07XG4gIGlmICghYmxvY2spXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYmxvY2tcIik7XG4gIGNvbnN0IGNoaWxkID0gaXNUZXh0QmxvY2soe1xuICAgIHNjaGVtYVxuICB9LCBibG9jaykgJiYgYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dIHx8IHZvaWQgMCwgdGV4dENoaWxkID0gaXNTcGFuKHtcbiAgICBzY2hlbWFcbiAgfSwgY2hpbGQpID8gY2hpbGQgOiB2b2lkIDA7XG4gIGlmIChjaGlsZCAmJiAhdGV4dENoaWxkKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIHNwYW5cIik7XG4gIGlmICghdGV4dENoaWxkKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGNoaWxkXCIpO1xuICBjb25zdCBwYXRoID0gW3tcbiAgICBfa2V5OiBibG9jay5fa2V5XG4gIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgIF9rZXk6IHRleHRDaGlsZC5fa2V5XG4gIH0sIFwidGV4dFwiXSwgYmVmb3JlQmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIHByZXZUZXh0Q2hpbGQgPSBpc1RleHRCbG9jayh7XG4gICAgc2NoZW1hXG4gIH0sIGJlZm9yZUJsb2NrKSAmJiBiZWZvcmVCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0sIHByZXZUZXh0ID0gaXNTcGFuKHtcbiAgICBzY2hlbWFcbiAgfSwgcHJldlRleHRDaGlsZCkgJiYgcHJldlRleHRDaGlsZC50ZXh0LCBwYXRjaCA9IGRpZmZNYXRjaFBhdGNoJDEocHJldlRleHQgfHwgXCJcIiwgdGV4dENoaWxkLnRleHQsIHBhdGgpO1xuICByZXR1cm4gcGF0Y2gudmFsdWUgPyBbcGF0Y2hdIDogW107XG59XG5mdW5jdGlvbiBzZXROb2RlUGF0Y2goc2NoZW1hLCBjaGlsZHJlbiwgb3BlcmF0aW9uKSB7XG4gIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBibG9jayA9IGNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICBpZiAodHlwZW9mIGJsb2NrLl9rZXkgIT0gXCJzdHJpbmdcIilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGJsb2NrIHRvIGhhdmUgYSBfa2V5XCIpO1xuICAgIGNvbnN0IHNldE5vZGUgPSBvbWl0Qnkoe1xuICAgICAgLi4uY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dLFxuICAgICAgLi4ub3BlcmF0aW9uLm5ld1Byb3BlcnRpZXNcbiAgICB9LCBpc1VuZGVmaW5lZCk7XG4gICAgcmV0dXJuIFtzZXQoZnJvbVNsYXRlVmFsdWUoW3NldE5vZGVdLCBzY2hlbWEuYmxvY2submFtZSlbMF0sIFt7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfV0pXTtcbiAgfSBlbHNlIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIpIHtcbiAgICBjb25zdCBibG9jayA9IGNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICBpZiAoaXNUZXh0QmxvY2soe1xuICAgICAgc2NoZW1hXG4gICAgfSwgYmxvY2spKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICBjb25zdCBibG9ja0tleSA9IGJsb2NrLl9rZXksIGNoaWxkS2V5ID0gY2hpbGQuX2tleSwgcGF0Y2hlcyA9IFtdLCBrZXlzID0gT2JqZWN0LmtleXMob3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMpO1xuICAgICAgICByZXR1cm4ga2V5cy5mb3JFYWNoKChrZXlOYW1lKSA9PiB7XG4gICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmIGtleU5hbWUgPT09IFwiX2tleVwiKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBnZXQob3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMsIGtleU5hbWUpO1xuICAgICAgICAgICAgcGF0Y2hlcy5wdXNoKHNldCh2YWwsIFt7XG4gICAgICAgICAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIGJsb2NrLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLCBrZXlOYW1lXSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBnZXQob3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMsIGtleU5hbWUpO1xuICAgICAgICAgICAgcGF0Y2hlcy5wdXNoKHNldCh2YWwsIFt7XG4gICAgICAgICAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgICAgX2tleTogY2hpbGRLZXlcbiAgICAgICAgICAgIH0sIGtleU5hbWVdKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSwgcGF0Y2hlcztcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgdmFsaWQgY2hpbGRcIik7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgdmFsaWQgYmxvY2tcIik7XG4gIH0gZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBwYXRoIGVuY291bnRlcmVkOiAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5wYXRoKX1gKTtcbn1cbmZ1bmN0aW9uIGluc2VydE5vZGVQYXRjaChzY2hlbWEsIGNoaWxkcmVuLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gIGNvbnN0IGJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLnBhdGhbMF1dO1xuICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgcG9zaXRpb24gPSBvcGVyYXRpb24ucGF0aFswXSA9PT0gMCA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCIsIGJlZm9yZUJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLnBhdGhbMF0gLSAxXSwgdGFyZ2V0S2V5ID0gb3BlcmF0aW9uLnBhdGhbMF0gPT09IDAgPyBibG9jaz8uX2tleSA6IGJlZm9yZUJsb2NrPy5fa2V5O1xuICAgIHJldHVybiB0YXJnZXRLZXkgPyBbaW5zZXJ0KFtmcm9tU2xhdGVWYWx1ZShbb3BlcmF0aW9uLm5vZGVdLCBzY2hlbWEuYmxvY2submFtZSlbMF1dLCBwb3NpdGlvbiwgW3tcbiAgICAgIF9rZXk6IHRhcmdldEtleVxuICAgIH1dKV0gOiBbc2V0SWZNaXNzaW5nKGJlZm9yZVZhbHVlLCBbXSksIGluc2VydChbZnJvbVNsYXRlVmFsdWUoW29wZXJhdGlvbi5ub2RlXSwgc2NoZW1hLmJsb2NrLm5hbWUpWzBdXSwgXCJiZWZvcmVcIiwgW29wZXJhdGlvbi5wYXRoWzBdXSldO1xuICB9IGVsc2UgaWYgKGlzVGV4dEJsb2NrKHtcbiAgICBzY2hlbWFcbiAgfSwgYmxvY2spICYmIG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMiAmJiBjaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV0pIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCB8fCAhYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV0gLSAxXSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCIsIG5vZGUgPSB7XG4gICAgICAuLi5vcGVyYXRpb24ubm9kZVxuICAgIH07XG4gICAgIW5vZGUuX3R5cGUgJiYgVGV4dC5pc1RleHQobm9kZSkgJiYgKG5vZGUuX3R5cGUgPSBcInNwYW5cIiwgbm9kZS5tYXJrcyA9IFtdKTtcbiAgICBjb25zdCBjaGlsZCA9IGZyb21TbGF0ZVZhbHVlKFt7XG4gICAgICBfa2V5OiBcImJvZ3VzXCIsXG4gICAgICBfdHlwZTogc2NoZW1hLmJsb2NrLm5hbWUsXG4gICAgICBjaGlsZHJlbjogW25vZGVdXG4gICAgfV0sIHNjaGVtYS5ibG9jay5uYW1lKVswXS5jaGlsZHJlblswXTtcbiAgICByZXR1cm4gW2luc2VydChbY2hpbGRdLCBwb3NpdGlvbiwgW3tcbiAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICB9LCBcImNoaWxkcmVuXCIsIGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA8PSAxIHx8ICFibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdID8gMCA6IHtcbiAgICAgIF9rZXk6IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdIC0gMV0uX2tleVxuICAgIH1dKV07XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuZnVuY3Rpb24gc3BsaXROb2RlUGF0Y2goc2NoZW1hLCBjaGlsZHJlbiwgb3BlcmF0aW9uLCBiZWZvcmVWYWx1ZSkge1xuICBjb25zdCBwYXRjaGVzID0gW10sIHNwbGl0QmxvY2sgPSBjaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV07XG4gIGlmICghaXNUZXh0QmxvY2soe1xuICAgIHNjaGVtYVxuICB9LCBzcGxpdEJsb2NrKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEJsb2NrIHdpdGggcGF0aCAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5wYXRoWzBdKX0gaXMgbm90IGEgdGV4dCBibG9jayBhbmQgY2FuJ3QgYmUgc3BsaXRgKTtcbiAgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IG9sZEJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgIGlmIChpc1RleHRCbG9jayh7XG4gICAgICBzY2hlbWFcbiAgICB9LCBvbGRCbG9jaykpIHtcbiAgICAgIGNvbnN0IHRhcmdldFZhbHVlID0gZnJvbVNsYXRlVmFsdWUoW2NoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdICsgMV1dLCBzY2hlbWEuYmxvY2submFtZSlbMF07XG4gICAgICB0YXJnZXRWYWx1ZSAmJiAocGF0Y2hlcy5wdXNoKGluc2VydChbdGFyZ2V0VmFsdWVdLCBcImFmdGVyXCIsIFt7XG4gICAgICAgIF9rZXk6IHNwbGl0QmxvY2suX2tleVxuICAgICAgfV0pKSwgb2xkQmxvY2suY2hpbGRyZW4uc2xpY2Uob3BlcmF0aW9uLnBvc2l0aW9uKS5mb3JFYWNoKChzcGFuKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBbe1xuICAgICAgICAgIF9rZXk6IG9sZEJsb2NrLl9rZXlcbiAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgX2tleTogc3Bhbi5fa2V5XG4gICAgICAgIH1dO1xuICAgICAgICBwYXRjaGVzLnB1c2godW5zZXQocGF0aCkpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0Y2hlcztcbiAgfVxuICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAyKSB7XG4gICAgY29uc3Qgc3BsaXRTcGFuID0gc3BsaXRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV07XG4gICAgaWYgKGlzU3Bhbih7XG4gICAgICBzY2hlbWFcbiAgICB9LCBzcGxpdFNwYW4pKSB7XG4gICAgICBjb25zdCB0YXJnZXRTcGFucyA9IGZyb21TbGF0ZVZhbHVlKFt7XG4gICAgICAgIC4uLnNwbGl0QmxvY2ssXG4gICAgICAgIGNoaWxkcmVuOiBzcGxpdEJsb2NrLmNoaWxkcmVuLnNsaWNlKG9wZXJhdGlvbi5wYXRoWzFdICsgMSwgb3BlcmF0aW9uLnBhdGhbMV0gKyAyKVxuICAgICAgfV0sIHNjaGVtYS5ibG9jay5uYW1lKVswXS5jaGlsZHJlbjtcbiAgICAgIHBhdGNoZXMucHVzaChpbnNlcnQodGFyZ2V0U3BhbnMsIFwiYWZ0ZXJcIiwgW3tcbiAgICAgICAgX2tleTogc3BsaXRCbG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogc3BsaXRTcGFuLl9rZXlcbiAgICAgIH1dKSksIHBhdGNoZXMucHVzaChzZXQoc3BsaXRTcGFuLnRleHQsIFt7XG4gICAgICAgIF9rZXk6IHNwbGl0QmxvY2suX2tleVxuICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgIF9rZXk6IHNwbGl0U3Bhbi5fa2V5XG4gICAgICB9LCBcInRleHRcIl0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGNoZXM7XG4gIH1cbiAgcmV0dXJuIHBhdGNoZXM7XG59XG5mdW5jdGlvbiByZW1vdmVOb2RlUGF0Y2goc2NoZW1hLCBiZWZvcmVWYWx1ZSwgb3BlcmF0aW9uKSB7XG4gIGNvbnN0IGJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLnBhdGhbMF1dO1xuICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLl9rZXkpXG4gICAgICByZXR1cm4gW3Vuc2V0KFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH1dKV07XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmxvY2sgbm90IGZvdW5kXCIpO1xuICB9IGVsc2UgaWYgKGlzVGV4dEJsb2NrKHtcbiAgICBzY2hlbWFcbiAgfSwgYmxvY2spICYmIG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMikge1xuICAgIGNvbnN0IHNwYW5Ub1JlbW92ZSA9IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgICByZXR1cm4gc3BhblRvUmVtb3ZlID8gYmxvY2suY2hpbGRyZW4uZmlsdGVyKChzcGFuKSA9PiBzcGFuLl9rZXkgPT09IG9wZXJhdGlvbi5ub2RlLl9rZXkpLmxlbmd0aCA+IDEgPyAoY29uc29sZS53YXJuKGBNdWx0aXBsZSBzcGFucyBoYXZlIFxcYF9rZXlcXGAgJHtvcGVyYXRpb24ubm9kZS5fa2V5fS4gSXQncyBhbWJpZ3VvdXMgd2hpY2ggb25lIHRvIHJlbW92ZS5gLCBKU09OLnN0cmluZ2lmeShibG9jaywgbnVsbCwgMikpLCBbXSkgOiBbdW5zZXQoW3tcbiAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgIF9rZXk6IHNwYW5Ub1JlbW92ZS5fa2V5XG4gICAgfV0pXSA6IFtdO1xuICB9IGVsc2VcbiAgICByZXR1cm4gW107XG59XG5mdW5jdGlvbiBtZXJnZU5vZGVQYXRjaChzY2hlbWEsIGNoaWxkcmVuLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gIGNvbnN0IHBhdGNoZXMgPSBbXSwgYmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIHVwZGF0ZWRCbG9jayA9IGNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSlcbiAgICBpZiAoYmxvY2s/Ll9rZXkpIHtcbiAgICAgIGNvbnN0IG5ld0Jsb2NrID0gZnJvbVNsYXRlVmFsdWUoW2NoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdIC0gMV1dLCBzY2hlbWEuYmxvY2submFtZSlbMF07XG4gICAgICBwYXRjaGVzLnB1c2goc2V0KG5ld0Jsb2NrLCBbe1xuICAgICAgICBfa2V5OiBuZXdCbG9jay5fa2V5XG4gICAgICB9XSkpLCBwYXRjaGVzLnB1c2godW5zZXQoW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV0pKTtcbiAgICB9IGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRhcmdldCBrZXkgbm90IGZvdW5kIVwiKTtcbiAgZWxzZSBpZiAoaXNUZXh0QmxvY2soe1xuICAgIHNjaGVtYVxuICB9LCBibG9jaykgJiYgaXNUZXh0QmxvY2soe1xuICAgIHNjaGVtYVxuICB9LCB1cGRhdGVkQmxvY2spICYmIG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMikge1xuICAgIGNvbnN0IHVwZGF0ZWRTcGFuID0gdXBkYXRlZEJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdIC0gMV0gJiYgaXNTcGFuKHtcbiAgICAgIHNjaGVtYVxuICAgIH0sIHVwZGF0ZWRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdKSA/IHVwZGF0ZWRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdIDogdm9pZCAwLCByZW1vdmVkU3BhbiA9IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSAmJiBpc1NwYW4oe1xuICAgICAgc2NoZW1hXG4gICAgfSwgYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dKSA/IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSA6IHZvaWQgMDtcbiAgICB1cGRhdGVkU3BhbiAmJiAoYmxvY2suY2hpbGRyZW4uZmlsdGVyKChzcGFuKSA9PiBzcGFuLl9rZXkgPT09IHVwZGF0ZWRTcGFuLl9rZXkpLmxlbmd0aCA9PT0gMSA/IHBhdGNoZXMucHVzaChzZXQodXBkYXRlZFNwYW4udGV4dCwgW3tcbiAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgIF9rZXk6IHVwZGF0ZWRTcGFuLl9rZXlcbiAgICB9LCBcInRleHRcIl0pKSA6IGNvbnNvbGUud2FybihgTXVsdGlwbGUgc3BhbnMgaGF2ZSBcXGBfa2V5XFxgICR7dXBkYXRlZFNwYW4uX2tleX0uIEl0J3MgYW1iaWd1b3VzIHdoaWNoIG9uZSB0byB1cGRhdGUuYCwgSlNPTi5zdHJpbmdpZnkoYmxvY2ssIG51bGwsIDIpKSksIHJlbW92ZWRTcGFuICYmIChibG9jay5jaGlsZHJlbi5maWx0ZXIoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0gcmVtb3ZlZFNwYW4uX2tleSkubGVuZ3RoID09PSAxID8gcGF0Y2hlcy5wdXNoKHVuc2V0KFt7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICBfa2V5OiByZW1vdmVkU3Bhbi5fa2V5XG4gICAgfV0pKSA6IGNvbnNvbGUud2FybihgTXVsdGlwbGUgc3BhbnMgaGF2ZSBcXGBfa2V5XFxgICR7cmVtb3ZlZFNwYW4uX2tleX0uIEl0J3MgYW1iaWd1b3VzIHdoaWNoIG9uZSB0byByZW1vdmUuYCwgSlNPTi5zdHJpbmdpZnkoYmxvY2ssIG51bGwsIDIpKSk7XG4gIH1cbiAgcmV0dXJuIHBhdGNoZXM7XG59XG5mdW5jdGlvbiBtb3ZlTm9kZVBhdGNoKHNjaGVtYSwgYmVmb3JlVmFsdWUsIG9wZXJhdGlvbikge1xuICBjb25zdCBwYXRjaGVzID0gW10sIGJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLnBhdGhbMF1dLCB0YXJnZXRCbG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5uZXdQYXRoWzBdXTtcbiAgaWYgKCF0YXJnZXRCbG9jaylcbiAgICByZXR1cm4gcGF0Y2hlcztcbiAgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gb3BlcmF0aW9uLnBhdGhbMF0gPiBvcGVyYXRpb24ubmV3UGF0aFswXSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCI7XG4gICAgcGF0Y2hlcy5wdXNoKHVuc2V0KFt7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfV0pKSwgcGF0Y2hlcy5wdXNoKGluc2VydChbZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgc2NoZW1hLmJsb2NrLm5hbWUpWzBdXSwgcG9zaXRpb24sIFt7XG4gICAgICBfa2V5OiB0YXJnZXRCbG9jay5fa2V5XG4gICAgfV0pKTtcbiAgfSBlbHNlIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIgJiYgaXNUZXh0QmxvY2soe1xuICAgIHNjaGVtYVxuICB9LCBibG9jaykgJiYgaXNUZXh0QmxvY2soe1xuICAgIHNjaGVtYVxuICB9LCB0YXJnZXRCbG9jaykpIHtcbiAgICBjb25zdCBjaGlsZCA9IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSwgdGFyZ2V0Q2hpbGQgPSB0YXJnZXRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ubmV3UGF0aFsxXV0sIHBvc2l0aW9uID0gb3BlcmF0aW9uLm5ld1BhdGhbMV0gPT09IHRhcmdldEJsb2NrLmNoaWxkcmVuLmxlbmd0aCA/IFwiYWZ0ZXJcIiA6IFwiYmVmb3JlXCIsIGNoaWxkVG9JbnNlcnQgPSBmcm9tU2xhdGVWYWx1ZShbYmxvY2tdLCBzY2hlbWEuYmxvY2submFtZSlbMF0uY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dO1xuICAgIHBhdGNoZXMucHVzaCh1bnNldChbe1xuICAgICAgX2tleTogYmxvY2suX2tleVxuICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgIH1dKSksIHBhdGNoZXMucHVzaChpbnNlcnQoW2NoaWxkVG9JbnNlcnRdLCBwb3NpdGlvbiwgW3tcbiAgICAgIF9rZXk6IHRhcmdldEJsb2NrLl9rZXlcbiAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgIF9rZXk6IHRhcmdldENoaWxkLl9rZXlcbiAgICB9XSkpO1xuICB9XG4gIHJldHVybiBwYXRjaGVzO1xufVxuY29uc3QgUEFUQ0hJTkcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHdpdGhvdXRQYXRjaGluZyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc1BhdGNoaW5nKGVkaXRvcik7XG4gIFBBVENISU5HLnNldChlZGl0b3IsICExKSwgZm4oKSwgUEFUQ0hJTkcuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBpc1BhdGNoaW5nKGVkaXRvcikge1xuICByZXR1cm4gUEFUQ0hJTkcuZ2V0KGVkaXRvcik7XG59XG5jb25zdCBkZWJ1ZyRjID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoUGF0Y2hlc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhQYXRjaGVzKHtcbiAgZWRpdG9yQWN0b3IsXG4gIHJlbGF5QWN0b3IsXG4gIHN1YnNjcmlwdGlvbnNcbn0pIHtcbiAgbGV0IHByZXZpb3VzQ2hpbGRyZW47XG4gIGNvbnN0IGFwcGx5UGF0Y2ggPSBjcmVhdGVBcHBseVBhdGNoKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEpO1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgSVNfUFJPQ0VTU0lOR19SRU1PVEVfQ0hBTkdFUy5zZXQoZWRpdG9yLCAhMSksIFBBVENISU5HLnNldChlZGl0b3IsICEwKSwgcHJldmlvdXNDaGlsZHJlbiA9IFsuLi5lZGl0b3IuY2hpbGRyZW5dO1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGx5OiBhcHBseTJcbiAgICB9ID0gZWRpdG9yO1xuICAgIGxldCBidWZmZXJlZFBhdGNoZXMgPSBbXTtcbiAgICBjb25zdCBoYW5kbGVCdWZmZXJlZFJlbW90ZVBhdGNoZXMgPSAoKSA9PiB7XG4gICAgICBpZiAoYnVmZmVyZWRQYXRjaGVzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcGF0Y2hlcyA9IGJ1ZmZlcmVkUGF0Y2hlcztcbiAgICAgIGJ1ZmZlcmVkUGF0Y2hlcyA9IFtdO1xuICAgICAgbGV0IGNoYW5nZWQgPSAhMTtcbiAgICAgIHdpdGhSZW1vdGVDaGFuZ2VzKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIHdpdGhvdXRQYXRjaGluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgIHdpdGhvdXRTYXZpbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAoY29uc3QgcGF0Y2ggb2YgcGF0Y2hlcykge1xuICAgICAgICAgICAgICAgIGRlYnVnJGMuZW5hYmxlZCAmJiBkZWJ1ZyRjKGBIYW5kbGluZyByZW1vdGUgcGF0Y2ggJHtKU09OLnN0cmluZ2lmeShwYXRjaCl9YCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBhcHBseVBhdGNoKGVkaXRvciwgcGF0Y2gpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBBcHBseWluZyBwYXRjaCAke0pTT04uc3RyaW5naWZ5KHBhdGNoKX0gZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLCBjaGFuZ2VkICYmIChlZGl0b3Iubm9ybWFsaXplKCksIGVkaXRvci5vbkNoYW5nZSgpKTtcbiAgICAgIH0pO1xuICAgIH0sIGhhbmRsZVBhdGNoZXMgPSAoe1xuICAgICAgcGF0Y2hlc1xuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHJlbW90ZVBhdGNoZXMgPSBwYXRjaGVzLmZpbHRlcigocCkgPT4gcC5vcmlnaW4gIT09IFwibG9jYWxcIik7XG4gICAgICByZW1vdGVQYXRjaGVzLmxlbmd0aCAhPT0gMCAmJiAoYnVmZmVyZWRQYXRjaGVzID0gYnVmZmVyZWRQYXRjaGVzLmNvbmNhdChyZW1vdGVQYXRjaGVzKSwgaGFuZGxlQnVmZmVyZWRSZW1vdGVQYXRjaGVzKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiB7XG4gICAgICBkZWJ1ZyRjKFwiU3Vic2NyaWJpbmcgdG8gcmVtb3RlIHBhdGNoZXNcIik7XG4gICAgICBjb25zdCBzdWIgPSBlZGl0b3JBY3Rvci5vbihcInBhdGNoZXNcIiwgaGFuZGxlUGF0Y2hlcyk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkZWJ1ZyRjKFwiVW5zdWJzY3JpYmluZyB0byByZW1vdGUgcGF0Y2hlc1wiKSwgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pLCBlZGl0b3IuYXBwbHkgPSAob3BlcmF0aW9uKSA9PiB7XG4gICAgICBsZXQgcGF0Y2hlcyA9IFtdO1xuICAgICAgcHJldmlvdXNDaGlsZHJlbiA9IGVkaXRvci5jaGlsZHJlbjtcbiAgICAgIGNvbnN0IGVkaXRvcldhc0VtcHR5ID0gaXNFcXVhbFRvRW1wdHlFZGl0b3IocHJldmlvdXNDaGlsZHJlbiwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSk7XG4gICAgICBhcHBseTIob3BlcmF0aW9uKTtcbiAgICAgIGNvbnN0IGVkaXRvcklzRW1wdHkgPSBpc0VxdWFsVG9FbXB0eUVkaXRvcihlZGl0b3IuY2hpbGRyZW4sIGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEpO1xuICAgICAgaWYgKCFpc1BhdGNoaW5nKGVkaXRvcikpXG4gICAgICAgIHJldHVybiBlZGl0b3I7XG4gICAgICBzd2l0Y2ggKGVkaXRvcldhc0VtcHR5ICYmICFlZGl0b3JJc0VtcHR5ICYmIG9wZXJhdGlvbi50eXBlICE9PSBcInNldF9zZWxlY3Rpb25cIiAmJiBwYXRjaGVzLnB1c2goaW5zZXJ0KHByZXZpb3VzQ2hpbGRyZW4sIFwiYmVmb3JlXCIsIFswXSkpLCBvcGVyYXRpb24udHlwZSkge1xuICAgICAgICBjYXNlIFwiaW5zZXJ0X3RleHRcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLmluc2VydFRleHRQYXRjaChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLCBlZGl0b3IuY2hpbGRyZW4sIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlX3RleHRcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnJlbW92ZVRleHRQYXRjaChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLCBlZGl0b3IuY2hpbGRyZW4sIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlX25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnJlbW92ZU5vZGVQYXRjaChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLCBwcmV2aW91c0NoaWxkcmVuLCBvcGVyYXRpb24pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNwbGl0X25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnNwbGl0Tm9kZVBhdGNoKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsIGVkaXRvci5jaGlsZHJlbiwgb3BlcmF0aW9uLCBwcmV2aW91c0NoaWxkcmVuKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbnNlcnRfbm9kZVwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4uaW5zZXJ0Tm9kZVBhdGNoKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsIGVkaXRvci5jaGlsZHJlbiwgb3BlcmF0aW9uLCBwcmV2aW91c0NoaWxkcmVuKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzZXRfbm9kZVwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4uc2V0Tm9kZVBhdGNoKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsIGVkaXRvci5jaGlsZHJlbiwgb3BlcmF0aW9uKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtZXJnZV9ub2RlXCI6XG4gICAgICAgICAgcGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCAuLi5tZXJnZU5vZGVQYXRjaChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLCBlZGl0b3IuY2hpbGRyZW4sIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibW92ZV9ub2RlXCI6XG4gICAgICAgICAgcGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCAuLi5tb3ZlTm9kZVBhdGNoKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsIHByZXZpb3VzQ2hpbGRyZW4sIG9wZXJhdGlvbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKCFlZGl0b3JXYXNFbXB0eSAmJiBlZGl0b3JJc0VtcHR5ICYmIFtcIm1lcmdlX25vZGVcIiwgXCJzZXRfbm9kZVwiLCBcInJlbW92ZV90ZXh0XCIsIFwicmVtb3ZlX25vZGVcIl0uaW5jbHVkZXMob3BlcmF0aW9uLnR5cGUpICYmIChwYXRjaGVzID0gWy4uLnBhdGNoZXMsIHVuc2V0KFtdKV0sIHJlbGF5QWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwidW5zZXRcIixcbiAgICAgICAgcHJldmlvdXNWYWx1ZTogZnJvbVNsYXRlVmFsdWUocHJldmlvdXNDaGlsZHJlbiwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSlcbiAgICAgIH0pKSwgZWRpdG9yV2FzRW1wdHkgJiYgcGF0Y2hlcy5sZW5ndGggPiAwICYmIChwYXRjaGVzID0gW3NldElmTWlzc2luZyhbXSwgW10pLCAuLi5wYXRjaGVzXSksIHBhdGNoZXMubGVuZ3RoID4gMClcbiAgICAgICAgZm9yIChjb25zdCBwYXRjaCBvZiBwYXRjaGVzKVxuICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJpbnRlcm5hbC5wYXRjaFwiLFxuICAgICAgICAgICAgcGF0Y2g6IHtcbiAgICAgICAgICAgICAgLi4ucGF0Y2gsXG4gICAgICAgICAgICAgIG9yaWdpbjogXCJsb2NhbFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3BlcmF0aW9uSWQ6IGdldEN1cnJlbnRPcGVyYXRpb25JZChlZGl0b3IpLFxuICAgICAgICAgICAgdmFsdWU6IGVkaXRvci52YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgcmV0dXJuIGVkaXRvcjtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5jb25zdCBkZWJ1ZyRiID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoUGxhY2Vob2xkZXJCbG9ja1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhQbGFjZWhvbGRlckJsb2NrKGVkaXRvckFjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBseTogYXBwbHkyXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmFwcGx5ID0gKG9wKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSkpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZG9pbmcoZWRpdG9yKSB8fCBpc1JlZG9pbmcoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJyZW1vdmVfbm9kZVwiKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrSW5kZXggPSBvcC5wYXRoLmF0KDApLCBpc0xvbmVseUJsb2NrID0gb3AucGF0aC5sZW5ndGggPT09IDEgJiYgYmxvY2tJbmRleCA9PT0gMCAmJiBlZGl0b3IuY2hpbGRyZW4ubGVuZ3RoID09PSAxLCBpc0Jsb2NrT2JqZWN0ID0gb3Aubm9kZS5fdHlwZSAhPT0gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lO1xuICAgICAgICBpc0xvbmVseUJsb2NrICYmIGlzQmxvY2tPYmplY3QgJiYgKGRlYnVnJGIoXCJBZGRpbmcgcGxhY2Vob2xkZXIgYmxvY2tcIiksIEVkaXRvci5pbnNlcnROb2RlKGVkaXRvciwgZWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgICAgICAgZGVjb3JhdG9yczogW11cbiAgICAgICAgfSkpKTtcbiAgICAgIH1cbiAgICAgIGFwcGx5MihvcCk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgZGVidWckYSA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aFNjaGVtYVR5cGVzXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFNjaGVtYVR5cGVzKHtcbiAgZWRpdG9yQWN0b3Jcbn0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGVkaXRvci5pc1RleHRCbG9jayA9ICh2YWx1ZSkgPT4gRWRpdG9yLmlzRWRpdG9yKHZhbHVlKSA/ICExIDogaXNUZXh0QmxvY2soZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LCB2YWx1ZSksIGVkaXRvci5pc1RleHRTcGFuID0gKHZhbHVlKSA9PiBFZGl0b3IuaXNFZGl0b3IodmFsdWUpID8gITEgOiBpc1NwYW4oZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LCB2YWx1ZSksIGVkaXRvci5pc0xpc3RCbG9jayA9ICh2YWx1ZSkgPT4gRWRpdG9yLmlzRWRpdG9yKHZhbHVlKSA/ICExIDogaXNMaXN0QmxvY2soZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LCB2YWx1ZSksIGVkaXRvci5pc1ZvaWQgPSAoZWxlbWVudCkgPT4gRWRpdG9yLmlzRWRpdG9yKGVsZW1lbnQpID8gITEgOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUgIT09IGVsZW1lbnQuX3R5cGUgJiYgKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEuYmxvY2tPYmplY3RzLm1hcCgob2JqKSA9PiBvYmoubmFtZSkuaW5jbHVkZXMoZWxlbWVudC5fdHlwZSkgfHwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5pbmxpbmVPYmplY3RzLm1hcCgob2JqKSA9PiBvYmoubmFtZSkuaW5jbHVkZXMoZWxlbWVudC5fdHlwZSkpLCBlZGl0b3IuaXNJbmxpbmUgPSAoZWxlbWVudCkgPT4gRWRpdG9yLmlzRWRpdG9yKGVsZW1lbnQpID8gITEgOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLmlubGluZU9iamVjdHMubWFwKChvYmopID0+IG9iai5uYW1lKS5pbmNsdWRlcyhlbGVtZW50Ll90eXBlKSAmJiBcIl9faW5saW5lXCIgaW4gZWxlbWVudCAmJiBlbGVtZW50Ll9faW5saW5lID09PSAhMDtcbiAgICBjb25zdCB7XG4gICAgICBub3JtYWxpemVOb2RlXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLm5vcm1hbGl6ZU5vZGUgPSAoZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IFtub2RlLCBwYXRoXSA9IGVudHJ5O1xuICAgICAgaWYgKG5vZGUuX3R5cGUgPT09IHZvaWQgMCAmJiBwYXRoLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBkZWJ1ZyRhKFwiU2V0dGluZyBzcGFuIHR5cGUgb24gdGV4dCBub2RlIHdpdGhvdXQgYSB0eXBlXCIpO1xuICAgICAgICBjb25zdCBzcGFuID0gbm9kZSwga2V5ID0gc3Bhbi5fa2V5IHx8IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKTtcbiAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIC4uLnNwYW4sXG4gICAgICAgICAgX3R5cGU6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lLFxuICAgICAgICAgIF9rZXk6IGtleVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5fa2V5ID09PSB2b2lkIDAgJiYgKHBhdGgubGVuZ3RoID09PSAxIHx8IHBhdGgubGVuZ3RoID09PSAyKSkge1xuICAgICAgICBkZWJ1ZyRhKFwiU2V0dGluZyBtaXNzaW5nIGtleSBvbiBjaGlsZCBub2RlIHdpdGhvdXQgYSBrZXlcIik7XG4gICAgICAgIGNvbnN0IGtleSA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKTtcbiAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIF9rZXk6IGtleVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub3JtYWxpemVOb2RlKGVudHJ5KTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVXaXRoVXRpbHMoe1xuICBlZGl0b3JBY3RvclxufSkge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2sgPSAob3B0aW9ucykgPT4gdG9TbGF0ZVZhbHVlKFt7XG4gICAgICBfdHlwZTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLFxuICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgc3R5bGU6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEuc3R5bGVzWzBdLm5hbWUgfHwgXCJub3JtYWxcIixcbiAgICAgIC4uLm9wdGlvbnMubGlzdEl0ZW0gPyB7XG4gICAgICAgIGxpc3RJdGVtOiBvcHRpb25zLmxpc3RJdGVtXG4gICAgICB9IDoge30sXG4gICAgICAuLi5vcHRpb25zLmxldmVsID8ge1xuICAgICAgICBsZXZlbDogb3B0aW9ucy5sZXZlbFxuICAgICAgfSA6IHt9LFxuICAgICAgbWFya0RlZnM6IFtdLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICBtYXJrczogb3B0aW9ucy5kZWNvcmF0b3JzLmZpbHRlcigoZGVjb3JhdG9yKSA9PiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLmRlY29yYXRvcnMuZmluZCgoe1xuICAgICAgICAgIG5hbWVcbiAgICAgICAgfSkgPT4gbmFtZSA9PT0gZGVjb3JhdG9yKSlcbiAgICAgIH1dXG4gICAgfV0sIHtcbiAgICAgIHNjaGVtYVR5cGVzOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hXG4gICAgfSlbMF0sIGVkaXRvcjtcbiAgfTtcbn1cbmZ1bmN0aW9uIHBsdWdpblVwZGF0ZVNlbGVjdGlvbih7XG4gIGVkaXRvcixcbiAgZWRpdG9yQWN0b3Jcbn0pIHtcbiAgY29uc3QgdXBkYXRlU2VsZWN0aW9uID0gKCkgPT4ge1xuICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICBjb25zdCBleGlzdGluZ1NlbGVjdGlvbiA9IFNMQVRFX1RPX1BPUlRBQkxFX1RFWFRfUkFOR0UuZ2V0KGVkaXRvci5zZWxlY3Rpb24pO1xuICAgICAgaWYgKGV4aXN0aW5nU2VsZWN0aW9uKVxuICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcInVwZGF0ZSBzZWxlY3Rpb25cIixcbiAgICAgICAgICBzZWxlY3Rpb246IGV4aXN0aW5nU2VsZWN0aW9uXG4gICAgICAgIH0pO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHNsYXRlUmFuZ2VUb1NlbGVjdGlvbih7XG4gICAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICByYW5nZTogZWRpdG9yLnNlbGVjdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRS5zZXQoZWRpdG9yLnNlbGVjdGlvbiwgc2VsZWN0aW9uKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJ1cGRhdGUgc2VsZWN0aW9uXCIsXG4gICAgICAgICAgc2VsZWN0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwidXBkYXRlIHNlbGVjdGlvblwiLFxuICAgICAgICBzZWxlY3Rpb246IG51bGxcbiAgICAgIH0pO1xuICB9LCB7XG4gICAgb25DaGFuZ2VcbiAgfSA9IGVkaXRvcjtcbiAgcmV0dXJuIGVkaXRvci5vbkNoYW5nZSA9ICgpID0+IHtcbiAgICBvbkNoYW5nZSgpLCBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgc2V0dXA6IFwic2V0dGluZyB1cFwiXG4gICAgfSkgfHwgdXBkYXRlU2VsZWN0aW9uKCk7XG4gIH0sIGVkaXRvcjtcbn1cbmZ1bmN0aW9uIGlzRWRpdG9yTm9kZShub2RlKSB7XG4gIHJldHVybiB0eXBlb2Ygbm9kZSA9PSBcIm9iamVjdFwiICYmIG5vZGUgIT09IG51bGwgPyAhKFwiX3R5cGVcIiBpbiBub2RlKSAmJiBcImNoaWxkcmVuXCIgaW4gbm9kZSAmJiBBcnJheS5pc0FycmF5KG5vZGUuY2hpbGRyZW4pIDogITE7XG59XG5mdW5jdGlvbiBpc1RleHRCbG9ja05vZGUoY29udGV4dCwgbm9kZSkge1xuICByZXR1cm4gaXNUeXBlZE9iamVjdChub2RlKSAmJiBub2RlLl90eXBlID09PSBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lO1xufVxuZnVuY3Rpb24gaXNTcGFuTm9kZShjb250ZXh0LCBub2RlKSB7XG4gIHJldHVybiB0eXBlb2Ygbm9kZSAhPSBcIm9iamVjdFwiIHx8IG5vZGUgPT09IG51bGwgfHwgXCJjaGlsZHJlblwiIGluIG5vZGUgPyAhMSA6IFwiX3R5cGVcIiBpbiBub2RlID8gbm9kZS5fdHlwZSA9PT0gY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lIDogXCJ0ZXh0XCIgaW4gbm9kZTtcbn1cbmZ1bmN0aW9uIGlzUGFydGlhbFNwYW5Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIHR5cGVvZiBub2RlID09IFwib2JqZWN0XCIgJiYgbm9kZSAhPT0gbnVsbCAmJiBcInRleHRcIiBpbiBub2RlICYmIHR5cGVvZiBub2RlLnRleHQgPT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0Tm9kZShjb250ZXh0LCBub2RlKSB7XG4gIHJldHVybiAhaXNFZGl0b3JOb2RlKG5vZGUpICYmICFpc1RleHRCbG9ja05vZGUoY29udGV4dCwgbm9kZSkgJiYgIWlzU3Bhbk5vZGUoY29udGV4dCwgbm9kZSkgJiYgIWlzUGFydGlhbFNwYW5Ob2RlKG5vZGUpO1xufVxuZnVuY3Rpb24gZ2V0QmxvY2socm9vdCwgcGF0aCkge1xuICBjb25zdCBpbmRleCA9IHBhdGguYXQoMCk7XG4gIGlmICghKGluZGV4ID09PSB2b2lkIDAgfHwgcGF0aC5sZW5ndGggIT09IDEpKVxuICAgIHJldHVybiByb290LmNoaWxkcmVuLmF0KGluZGV4KTtcbn1cbmZ1bmN0aW9uIGdldE5vZGUoY29udGV4dCwgcm9vdCwgcGF0aCkge1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIHJvb3Q7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gZ2V0QmxvY2socm9vdCwgcGF0aCk7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMikge1xuICAgIGNvbnN0IGJsb2NrID0gZ2V0QmxvY2socm9vdCwgcGF0aC5zbGljZSgwLCAxKSk7XG4gICAgcmV0dXJuICFibG9jayB8fCAhaXNUZXh0QmxvY2tOb2RlKGNvbnRleHQsIGJsb2NrKSA/IHZvaWQgMCA6IGJsb2NrLmNoaWxkcmVuLmF0KHBhdGhbMV0pIHx8IHZvaWQgMDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3Bhbihjb250ZXh0LCByb290LCBwYXRoKSB7XG4gIGNvbnN0IG5vZGUgPSBnZXROb2RlKGNvbnRleHQsIHJvb3QsIHBhdGgpO1xuICBpZiAobm9kZSAmJiBpc1NwYW5Ob2RlKGNvbnRleHQsIG5vZGUpKVxuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gZ2V0UGFyZW50KGNvbnRleHQsIHJvb3QsIHBhdGgpIHtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKVxuICAgIHJldHVybjtcbiAgY29uc3QgcGFyZW50UGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpO1xuICBpZiAocGFyZW50UGF0aC5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIHJvb3Q7XG4gIGNvbnN0IGJsb2NrSW5kZXggPSBwYXJlbnRQYXRoLmF0KDApO1xuICBpZiAoYmxvY2tJbmRleCA9PT0gdm9pZCAwIHx8IHBhcmVudFBhdGgubGVuZ3RoICE9PSAxKVxuICAgIHJldHVybjtcbiAgY29uc3QgYmxvY2sgPSByb290LmNoaWxkcmVuLmF0KGJsb2NrSW5kZXgpO1xuICBpZiAoYmxvY2sgJiYgaXNUZXh0QmxvY2tOb2RlKGNvbnRleHQsIGJsb2NrKSlcbiAgICByZXR1cm4gYmxvY2s7XG59XG5mdW5jdGlvbiBhcHBseU9wZXJhdGlvblRvUG9ydGFibGVUZXh0KGNvbnRleHQsIHZhbHVlLCBvcGVyYXRpb24pIHtcbiAgY29uc3QgZHJhZnQgPSBjcmVhdGVEcmFmdCh7XG4gICAgY2hpbGRyZW46IHZhbHVlXG4gIH0pO1xuICB0cnkge1xuICAgIGFwcGx5T3BlcmF0aW9uVG9Qb3J0YWJsZVRleHREcmFmdChjb250ZXh0LCBkcmFmdCwgb3BlcmF0aW9uKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gIH1cbiAgcmV0dXJuIGZpbmlzaERyYWZ0KGRyYWZ0KS5jaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIGFwcGx5T3BlcmF0aW9uVG9Qb3J0YWJsZVRleHREcmFmdChjb250ZXh0LCByb290LCBvcGVyYXRpb24pIHtcbiAgc3dpdGNoIChvcGVyYXRpb24udHlwZSkge1xuICAgIGNhc2UgXCJpbnNlcnRfbm9kZVwiOiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIG5vZGU6IGluc2VydGVkTm9kZVxuICAgICAgfSA9IG9wZXJhdGlvbiwgcGFyZW50ID0gZ2V0UGFyZW50KGNvbnRleHQsIHJvb3QsIHBhdGgpLCBpbmRleCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICAgIGlmICghcGFyZW50IHx8IGluZGV4ID4gcGFyZW50LmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgYnJlYWs7XG4gICAgICBpZiAocGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKGlzVGV4dEJsb2NrTm9kZShjb250ZXh0LCBpbnNlcnRlZE5vZGUpKSB7XG4gICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwge1xuICAgICAgICAgICAgLi4uaW5zZXJ0ZWROb2RlLFxuICAgICAgICAgICAgY2hpbGRyZW46IGluc2VydGVkTm9kZS5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBcIl9faW5saW5lXCIgaW4gY2hpbGQgPyB7XG4gICAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXksXG4gICAgICAgICAgICAgIF90eXBlOiBjaGlsZC5fdHlwZSxcbiAgICAgICAgICAgICAgLi4uXCJ2YWx1ZVwiIGluIGNoaWxkICYmIHR5cGVvZiBjaGlsZC52YWx1ZSA9PSBcIm9iamVjdFwiID8gY2hpbGQudmFsdWUgOiB7fVxuICAgICAgICAgICAgfSA6IGNoaWxkKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChFbGVtZW50JDEuaXNFbGVtZW50KGluc2VydGVkTm9kZSkgJiYgIShcIl9faW5saW5lXCIgaW4gaW5zZXJ0ZWROb2RlKSkge1xuICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIHtcbiAgICAgICAgICAgIF9rZXk6IGluc2VydGVkTm9kZS5fa2V5LFxuICAgICAgICAgICAgX3R5cGU6IGluc2VydGVkTm9kZS5fdHlwZSxcbiAgICAgICAgICAgIC4uLlwidmFsdWVcIiBpbiBpbnNlcnRlZE5vZGUgJiYgdHlwZW9mIGluc2VydGVkTm9kZS52YWx1ZSA9PSBcIm9iamVjdFwiID8gaW5zZXJ0ZWROb2RlLnZhbHVlIDoge31cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGlmICghaXNUZXh0QmxvY2tOb2RlKGNvbnRleHQsIHBhcmVudCkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmIChpc1BhcnRpYWxTcGFuTm9kZShpbnNlcnRlZE5vZGUpKSB7XG4gICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgaW5zZXJ0ZWROb2RlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJfX2lubGluZVwiIGluIGluc2VydGVkTm9kZSkge1xuICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIHtcbiAgICAgICAgICAgIF9rZXk6IGluc2VydGVkTm9kZS5fa2V5LFxuICAgICAgICAgICAgX3R5cGU6IGluc2VydGVkTm9kZS5fdHlwZSxcbiAgICAgICAgICAgIC4uLlwidmFsdWVcIiBpbiBpbnNlcnRlZE5vZGUgJiYgdHlwZW9mIGluc2VydGVkTm9kZS52YWx1ZSA9PSBcIm9iamVjdFwiID8gaW5zZXJ0ZWROb2RlLnZhbHVlIDoge31cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJpbnNlcnRfdGV4dFwiOiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgdGV4dFxuICAgICAgfSA9IG9wZXJhdGlvbjtcbiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgYnJlYWs7XG4gICAgICBjb25zdCBzcGFuID0gZ2V0U3Bhbihjb250ZXh0LCByb290LCBwYXRoKTtcbiAgICAgIGlmICghc3BhbilcbiAgICAgICAgYnJlYWs7XG4gICAgICBjb25zdCBiZWZvcmUgPSBzcGFuLnRleHQuc2xpY2UoMCwgb2Zmc2V0KSwgYWZ0ZXIgPSBzcGFuLnRleHQuc2xpY2Uob2Zmc2V0KTtcbiAgICAgIHNwYW4udGV4dCA9IGJlZm9yZSArIHRleHQgKyBhZnRlcjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwibWVyZ2Vfbm9kZVwiOiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhdGhcbiAgICAgIH0gPSBvcGVyYXRpb24sIG5vZGUgPSBnZXROb2RlKGNvbnRleHQsIHJvb3QsIHBhdGgpLCBwcmV2UGF0aCA9IFBhdGgucHJldmlvdXMocGF0aCksIHByZXYgPSBnZXROb2RlKGNvbnRleHQsIHJvb3QsIHByZXZQYXRoKSwgcGFyZW50ID0gZ2V0UGFyZW50KGNvbnRleHQsIHJvb3QsIHBhdGgpO1xuICAgICAgaWYgKCFub2RlIHx8ICFwcmV2IHx8ICFwYXJlbnQpXG4gICAgICAgIGJyZWFrO1xuICAgICAgY29uc3QgaW5kZXggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoaXNQYXJ0aWFsU3Bhbk5vZGUobm9kZSkgJiYgaXNQYXJ0aWFsU3Bhbk5vZGUocHJldikpXG4gICAgICAgIHByZXYudGV4dCArPSBub2RlLnRleHQ7XG4gICAgICBlbHNlIGlmIChpc1RleHRCbG9ja05vZGUoY29udGV4dCwgbm9kZSkgJiYgaXNUZXh0QmxvY2tOb2RlKGNvbnRleHQsIHByZXYpKVxuICAgICAgICBwcmV2LmNoaWxkcmVuLnB1c2goLi4ubm9kZS5jaGlsZHJlbik7XG4gICAgICBlbHNlXG4gICAgICAgIGJyZWFrO1xuICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcIm1vdmVfbm9kZVwiOiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIG5ld1BhdGhcbiAgICAgIH0gPSBvcGVyYXRpb247XG4gICAgICBpZiAoUGF0aC5pc0FuY2VzdG9yKHBhdGgsIG5ld1BhdGgpKVxuICAgICAgICBicmVhaztcbiAgICAgIGNvbnN0IG5vZGUgPSBnZXROb2RlKGNvbnRleHQsIHJvb3QsIHBhdGgpLCBwYXJlbnQgPSBnZXRQYXJlbnQoY29udGV4dCwgcm9vdCwgcGF0aCksIGluZGV4ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKCFub2RlIHx8ICFwYXJlbnQpXG4gICAgICAgIGJyZWFrO1xuICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjb25zdCB0cnVlUGF0aCA9IFBhdGgudHJhbnNmb3JtKHBhdGgsIG9wZXJhdGlvbiksIG5ld1BhcmVudCA9IGdldE5vZGUoY29udGV4dCwgcm9vdCwgUGF0aC5wYXJlbnQodHJ1ZVBhdGgpKSwgbmV3SW5kZXggPSB0cnVlUGF0aFt0cnVlUGF0aC5sZW5ndGggLSAxXTtcbiAgICAgIGlmICghbmV3UGFyZW50IHx8ICEoXCJjaGlsZHJlblwiIGluIG5ld1BhcmVudCkgfHwgIUFycmF5LmlzQXJyYXkobmV3UGFyZW50LmNoaWxkcmVuKSlcbiAgICAgICAgYnJlYWs7XG4gICAgICBuZXdQYXJlbnQuY2hpbGRyZW4uc3BsaWNlKG5ld0luZGV4LCAwLCBub2RlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwicmVtb3ZlX25vZGVcIjoge1xuICAgICAgY29uc3Qge1xuICAgICAgICBwYXRoXG4gICAgICB9ID0gb3BlcmF0aW9uLCBpbmRleCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICAgIGdldFBhcmVudChjb250ZXh0LCByb290LCBwYXRoKT8uY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwicmVtb3ZlX3RleHRcIjoge1xuICAgICAgY29uc3Qge1xuICAgICAgICBwYXRoLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIHRleHRcbiAgICAgIH0gPSBvcGVyYXRpb247XG4gICAgICBpZiAodGV4dC5sZW5ndGggPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgICAgY29uc3Qgc3BhbiA9IGdldFNwYW4oY29udGV4dCwgcm9vdCwgcGF0aCk7XG4gICAgICBpZiAoIXNwYW4pXG4gICAgICAgIGJyZWFrO1xuICAgICAgY29uc3QgYmVmb3JlID0gc3Bhbi50ZXh0LnNsaWNlKDAsIG9mZnNldCksIGFmdGVyID0gc3Bhbi50ZXh0LnNsaWNlKG9mZnNldCArIHRleHQubGVuZ3RoKTtcbiAgICAgIHNwYW4udGV4dCA9IGJlZm9yZSArIGFmdGVyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzZXRfbm9kZVwiOiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIHByb3BlcnRpZXMsXG4gICAgICAgIG5ld1Byb3BlcnRpZXNcbiAgICAgIH0gPSBvcGVyYXRpb24sIG5vZGUgPSBnZXROb2RlKGNvbnRleHQsIHJvb3QsIHBhdGgpO1xuICAgICAgaWYgKCFub2RlIHx8IGlzRWRpdG9yTm9kZShub2RlKSlcbiAgICAgICAgYnJlYWs7XG4gICAgICBpZiAoaXNPYmplY3ROb2RlKGNvbnRleHQsIG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlQmVmb3JlID0gXCJ2YWx1ZVwiIGluIHByb3BlcnRpZXMgJiYgdHlwZW9mIHByb3BlcnRpZXMudmFsdWUgPT0gXCJvYmplY3RcIiA/IHByb3BlcnRpZXMudmFsdWUgOiB7fSwgdmFsdWVBZnRlciA9IFwidmFsdWVcIiBpbiBuZXdQcm9wZXJ0aWVzICYmIHR5cGVvZiBuZXdQcm9wZXJ0aWVzLnZhbHVlID09IFwib2JqZWN0XCIgPyBuZXdQcm9wZXJ0aWVzLnZhbHVlIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BlcnRpZXMpIHtcbiAgICAgICAgICBpZiAoa2V5ID09PSBcInZhbHVlXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5ld1Byb3BlcnRpZXNba2V5XTtcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsID8gZGVsZXRlIG5vZGVba2V5XSA6IG5vZGVba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BlcnRpZXMpXG4gICAgICAgICAga2V5ICE9PSBcInZhbHVlXCIgJiYgKG5ld1Byb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoa2V5KSB8fCBkZWxldGUgbm9kZVtrZXldKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWVBZnRlcikge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVBZnRlcltrZXldO1xuICAgICAgICAgIHZhbHVlID09IG51bGwgPyBkZWxldGUgbm9kZVtrZXldIDogbm9kZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWVCZWZvcmUpXG4gICAgICAgICAgdmFsdWVBZnRlci5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IGRlbGV0ZSBub2RlW2tleV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGlzVGV4dEJsb2NrTm9kZShjb250ZXh0LCBub2RlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gXCJjaGlsZHJlblwiIHx8IGtleSA9PT0gXCJ0ZXh0XCIpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5ld1Byb3BlcnRpZXNba2V5XTtcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsID8gZGVsZXRlIG5vZGVba2V5XSA6IG5vZGVba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BlcnRpZXMpXG4gICAgICAgICAgbmV3UHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IGRlbGV0ZSBub2RlW2tleV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGlzUGFydGlhbFNwYW5Ob2RlKG5vZGUpKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BlcnRpZXMpIHtcbiAgICAgICAgICBpZiAoa2V5ID09PSBcInRleHRcIilcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gbmV3UHJvcGVydGllc1trZXldO1xuICAgICAgICAgIHZhbHVlID09IG51bGwgPyBkZWxldGUgbm9kZVtrZXldIDogbm9kZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcGVydGllcylcbiAgICAgICAgICBuZXdQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGtleSkgfHwgZGVsZXRlIG5vZGVba2V5XTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInNwbGl0X25vZGVcIjoge1xuICAgICAgY29uc3Qge1xuICAgICAgICBwYXRoLFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgcHJvcGVydGllc1xuICAgICAgfSA9IG9wZXJhdGlvbjtcbiAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgICBjb25zdCBwYXJlbnQgPSBnZXRQYXJlbnQoY29udGV4dCwgcm9vdCwgcGF0aCksIGluZGV4ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKCFwYXJlbnQpXG4gICAgICAgIGJyZWFrO1xuICAgICAgaWYgKGlzRWRpdG9yTm9kZShwYXJlbnQpKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZ2V0QmxvY2socm9vdCwgcGF0aCk7XG4gICAgICAgIGlmICghYmxvY2sgfHwgIWlzVGV4dEJsb2NrTm9kZShjb250ZXh0LCBibG9jaykpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNvbnN0IGJlZm9yZSA9IGJsb2NrLmNoaWxkcmVuLnNsaWNlKDAsIHBvc2l0aW9uKSwgYWZ0ZXIgPSBibG9jay5jaGlsZHJlbi5zbGljZShwb3NpdGlvbik7XG4gICAgICAgIGJsb2NrLmNoaWxkcmVuID0gYmVmb3JlO1xuICAgICAgICBjb25zdCBuZXdUZXh0QmxvY2tOb2RlID0ge1xuICAgICAgICAgIC4uLnByb3BlcnRpZXMsXG4gICAgICAgICAgY2hpbGRyZW46IGFmdGVyLFxuICAgICAgICAgIF90eXBlOiBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lXG4gICAgICAgIH07XG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXggKyAxLCAwLCBuZXdUZXh0QmxvY2tOb2RlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaXNUZXh0QmxvY2tOb2RlKGNvbnRleHQsIHBhcmVudCkpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGdldE5vZGUoY29udGV4dCwgcm9vdCwgcGF0aCk7XG4gICAgICAgIGlmICghbm9kZSB8fCAhaXNTcGFuTm9kZShjb250ZXh0LCBub2RlKSlcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY29uc3QgYmVmb3JlID0gbm9kZS50ZXh0LnNsaWNlKDAsIHBvc2l0aW9uKSwgYWZ0ZXIgPSBub2RlLnRleHQuc2xpY2UocG9zaXRpb24pO1xuICAgICAgICBub2RlLnRleHQgPSBiZWZvcmU7XG4gICAgICAgIGNvbnN0IG5ld1NwYW5Ob2RlID0ge1xuICAgICAgICAgIC4uLnByb3BlcnRpZXMsXG4gICAgICAgICAgdGV4dDogYWZ0ZXJcbiAgICAgICAgfTtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCArIDEsIDAsIG5ld1NwYW5Ob2RlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcm9vdDtcbn1cbmZ1bmN0aW9uIHBsdWdpblVwZGF0ZVZhbHVlKGNvbnRleHQsIGVkaXRvcikge1xuICBjb25zdCB7XG4gICAgYXBwbHk6IGFwcGx5MlxuICB9ID0gZWRpdG9yO1xuICByZXR1cm4gZWRpdG9yLmFwcGx5ID0gKG9wZXJhdGlvbikgPT4ge1xuICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIpIHtcbiAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWRpdG9yLnZhbHVlID0gYXBwbHlPcGVyYXRpb25Ub1BvcnRhYmxlVGV4dChjb250ZXh0LCBlZGl0b3IudmFsdWUsIG9wZXJhdGlvbiksIG9wZXJhdGlvbi50eXBlID09PSBcImluc2VydF90ZXh0XCIgfHwgb3BlcmF0aW9uLnR5cGUgPT09IFwicmVtb3ZlX3RleHRcIikge1xuICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGJ1aWxkSW5kZXhNYXBzKHtcbiAgICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWEsXG4gICAgICB2YWx1ZTogZWRpdG9yLnZhbHVlXG4gICAgfSwge1xuICAgICAgYmxvY2tJbmRleE1hcDogZWRpdG9yLmJsb2NrSW5kZXhNYXAsXG4gICAgICBsaXN0SW5kZXhNYXA6IGVkaXRvci5saXN0SW5kZXhNYXBcbiAgICB9KSwgYXBwbHkyKG9wZXJhdGlvbik7XG4gIH0sIGVkaXRvcjtcbn1cbmNvbnN0IHdpdGhQbHVnaW5zID0gKGVkaXRvciwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBlID0gZWRpdG9yLCB7XG4gICAgZWRpdG9yQWN0b3IsXG4gICAgcmVsYXlBY3RvclxuICB9ID0gb3B0aW9ucywgd2l0aE9iamVjdEtleXMgPSBjcmVhdGVXaXRoT2JqZWN0S2V5cyhlZGl0b3JBY3RvciksIHdpdGhTY2hlbWFUeXBlcyA9IGNyZWF0ZVdpdGhTY2hlbWFUeXBlcyh7XG4gICAgZWRpdG9yQWN0b3JcbiAgfSksIHdpdGhQYXRjaGVzID0gY3JlYXRlV2l0aFBhdGNoZXMoe1xuICAgIGVkaXRvckFjdG9yLFxuICAgIHJlbGF5QWN0b3IsXG4gICAgc3Vic2NyaXB0aW9uczogb3B0aW9ucy5zdWJzY3JpcHRpb25zXG4gIH0pLCB3aXRoTWF4QmxvY2tzID0gY3JlYXRlV2l0aE1heEJsb2NrcyhlZGl0b3JBY3RvciksIHdpdGhVbmRvUmVkbyA9IGNyZWF0ZVdpdGhVbmRvUmVkbyh7XG4gICAgZWRpdG9yQWN0b3IsXG4gICAgc3Vic2NyaXB0aW9uczogb3B0aW9ucy5zdWJzY3JpcHRpb25zXG4gIH0pLCB3aXRoUG9ydGFibGVUZXh0TWFya01vZGVsID0gY3JlYXRlV2l0aFBvcnRhYmxlVGV4dE1hcmtNb2RlbChlZGl0b3JBY3RvciksIHdpdGhQbGFjZWhvbGRlckJsb2NrID0gY3JlYXRlV2l0aFBsYWNlaG9sZGVyQmxvY2soZWRpdG9yQWN0b3IpLCB3aXRoVXRpbHMgPSBjcmVhdGVXaXRoVXRpbHMoe1xuICAgIGVkaXRvckFjdG9yXG4gIH0pO1xuICByZXR1cm4gY3JlYXRlV2l0aEV2ZW50TGlzdGVuZXJzKGVkaXRvckFjdG9yKSh3aXRoU2NoZW1hVHlwZXMod2l0aE9iamVjdEtleXMod2l0aFBvcnRhYmxlVGV4dE1hcmtNb2RlbCh3aXRoUGxhY2Vob2xkZXJCbG9jayh3aXRoVXRpbHMod2l0aE1heEJsb2Nrcyh3aXRoVW5kb1JlZG8od2l0aFBhdGNoZXMocGx1Z2luVXBkYXRlVmFsdWUoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LCBwbHVnaW5VcGRhdGVTZWxlY3Rpb24oe1xuICAgIGVkaXRvckFjdG9yLFxuICAgIGVkaXRvcjogZVxuICB9KSkpKSkpKSkpKSk7XG59LCBkZWJ1ZyQ5ID0gZGVidWdXaXRoTmFtZShcInNldHVwXCIpO1xuZnVuY3Rpb24gY3JlYXRlU2xhdGVFZGl0b3IoY29uZmlnKSB7XG4gIGRlYnVnJDkoXCJDcmVhdGluZyBuZXcgU2xhdGUgZWRpdG9yIGluc3RhbmNlXCIpO1xuICBjb25zdCBpbnN0YW5jZSA9IHdpdGhQbHVnaW5zKHdpdGhSZWFjdChjcmVhdGVFZGl0b3IoKSksIHtcbiAgICBlZGl0b3JBY3RvcjogY29uZmlnLmVkaXRvckFjdG9yLFxuICAgIHJlbGF5QWN0b3I6IGNvbmZpZy5yZWxheUFjdG9yLFxuICAgIHN1YnNjcmlwdGlvbnM6IGNvbmZpZy5zdWJzY3JpcHRpb25zXG4gIH0pO1xuICBLRVlfVE9fVkFMVUVfRUxFTUVOVC5zZXQoaW5zdGFuY2UsIHt9KSwgS0VZX1RPX1NMQVRFX0VMRU1FTlQuc2V0KGluc3RhbmNlLCB7fSksIGluc3RhbmNlLmRlY29yYXRlZFJhbmdlcyA9IFtdLCBpbnN0YW5jZS5kZWNvcmF0b3JTdGF0ZSA9IHt9O1xuICBjb25zdCBwbGFjZWhvbGRlckJsb2NrID0gY3JlYXRlUGxhY2Vob2xkZXJCbG9jayhjb25maWcuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0KTtcbiAgaW5zdGFuY2UudmFsdWUgPSBbcGxhY2Vob2xkZXJCbG9ja10sIGluc3RhbmNlLmJsb2NrSW5kZXhNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCBpbnN0YW5jZS5saXN0SW5kZXhNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCBidWlsZEluZGV4TWFwcyh7XG4gICAgc2NoZW1hOiBjb25maWcuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSxcbiAgICB2YWx1ZTogaW5zdGFuY2UudmFsdWVcbiAgfSwge1xuICAgIGJsb2NrSW5kZXhNYXA6IGluc3RhbmNlLmJsb2NrSW5kZXhNYXAsXG4gICAgbGlzdEluZGV4TWFwOiBpbnN0YW5jZS5saXN0SW5kZXhNYXBcbiAgfSk7XG4gIGNvbnN0IGluaXRpYWxWYWx1ZSA9IHRvU2xhdGVWYWx1ZShpbnN0YW5jZS52YWx1ZSwge1xuICAgIHNjaGVtYVR5cGVzOiBjb25maWcuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZSxcbiAgICBpbml0aWFsVmFsdWVcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVkaXRvckRvbShzZW5kQmFjaywgc2xhdGVFZGl0b3IpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXRCbG9ja05vZGVzOiAoc25hcHNob3QpID0+IGdldEJsb2NrTm9kZXMoc2xhdGVFZGl0b3IsIHNuYXBzaG90KSxcbiAgICBnZXRDaGlsZE5vZGVzOiAoc25hcHNob3QpID0+IGdldENoaWxkTm9kZXMoc2xhdGVFZGl0b3IsIHNuYXBzaG90KSxcbiAgICBzZXREcmFnR2hvc3Q6ICh7XG4gICAgICBldmVudCxcbiAgICAgIGdob3N0XG4gICAgfSkgPT4gc2V0RHJhZ0dob3N0KHtcbiAgICAgIHNlbmRCYWNrLFxuICAgICAgZXZlbnQsXG4gICAgICBnaG9zdFxuICAgIH0pXG4gIH07XG59XG5mdW5jdGlvbiBnZXRCbG9ja05vZGVzKHNsYXRlRWRpdG9yLCBzbmFwc2hvdCkge1xuICBpZiAoIXNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybiBbXTtcbiAgY29uc3QgcmFuZ2UgPSB0b1NsYXRlUmFuZ2Uoc25hcHNob3QpO1xuICBpZiAoIXJhbmdlKVxuICAgIHJldHVybiBbXTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoc2xhdGVFZGl0b3IsIHtcbiAgICAgIGF0OiByYW5nZSxcbiAgICAgIG1vZGU6IFwiaGlnaGVzdFwiLFxuICAgICAgbWF0Y2g6IChuKSA9PiAhRWRpdG9yLmlzRWRpdG9yKG4pXG4gICAgfSkpLm1hcCgoW2Jsb2NrTm9kZV0pID0+IERPTUVkaXRvci50b0RPTU5vZGUoc2xhdGVFZGl0b3IsIGJsb2NrTm9kZSkpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENoaWxkTm9kZXMoc2xhdGVFZGl0b3IsIHNuYXBzaG90KSB7XG4gIGlmICghc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCByYW5nZSA9IHRvU2xhdGVSYW5nZShzbmFwc2hvdCk7XG4gIGlmICghcmFuZ2UpXG4gICAgcmV0dXJuIFtdO1xuICB0cnkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgYXQ6IHJhbmdlLFxuICAgICAgbW9kZTogXCJsb3dlc3RcIixcbiAgICAgIG1hdGNoOiAobikgPT4gIUVkaXRvci5pc0VkaXRvcihuKVxuICAgIH0pKS5tYXAoKFtjaGlsZE5vZGVdKSA9PiBET01FZGl0b3IudG9ET01Ob2RlKHNsYXRlRWRpdG9yLCBjaGlsZE5vZGUpKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5mdW5jdGlvbiBzZXREcmFnR2hvc3Qoe1xuICBzZW5kQmFjayxcbiAgZXZlbnQsXG4gIGdob3N0XG59KSB7XG4gIGV2ZW50Lm9yaWdpbkV2ZW50LmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UoZ2hvc3QuZWxlbWVudCwgZ2hvc3QueCwgZ2hvc3QueSksIHNlbmRCYWNrKHtcbiAgICB0eXBlOiBcInNldCBkcmFnIGdob3N0XCIsXG4gICAgZ2hvc3Q6IGdob3N0LmVsZW1lbnRcbiAgfSk7XG59XG5jb25zdCBhZGRBbm5vdGF0aW9uT25Db2xsYXBzZWRTZWxlY3Rpb24gPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImFubm90YXRpb24uYWRkXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IHtcbiAgICBpZiAoIWlzU2VsZWN0aW9uQ29sbGFwc2VkJDEoc25hcHNob3QpKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IGNhcmV0V29yZFNlbGVjdGlvbiA9IGdldENhcmV0V29yZFNlbGVjdGlvbihzbmFwc2hvdCk7XG4gICAgcmV0dXJuICFjYXJldFdvcmRTZWxlY3Rpb24gfHwgIWlzU2VsZWN0aW9uRXhwYW5kZWQoe1xuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICBzZWxlY3Rpb246IGNhcmV0V29yZFNlbGVjdGlvblxuICAgICAgfVxuICAgIH0pID8gITEgOiB7XG4gICAgICBjYXJldFdvcmRTZWxlY3Rpb25cbiAgICB9O1xuICB9LFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9LCB7XG4gICAgY2FyZXRXb3JkU2VsZWN0aW9uXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICBhdDogY2FyZXRXb3JkU2VsZWN0aW9uXG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJhbm5vdGF0aW9uLmFkZFwiLFxuICAgIGFubm90YXRpb246IGV2ZW50LmFubm90YXRpb25cbiAgfSldXVxufSksIGNvcmVBbm5vdGF0aW9uQmVoYXZpb3JzID0ge1xuICBhZGRBbm5vdGF0aW9uT25Db2xsYXBzZWRTZWxlY3Rpb25cbn0sIGRlZmF1bHRLZXlib2FyZFNob3J0Y3V0cyA9IHtcbiAgYXJyb3dEb3duOiBjcmVhdGVLZXlib2FyZFNob3J0Y3V0KHtcbiAgICBkZWZhdWx0OiBbe1xuICAgICAga2V5OiBcIkFycm93RG93blwiLFxuICAgICAgYWx0OiAhMSxcbiAgICAgIGN0cmw6ICExLFxuICAgICAgbWV0YTogITEsXG4gICAgICBzaGlmdDogITFcbiAgICB9XVxuICB9KSxcbiAgYXJyb3dVcDogY3JlYXRlS2V5Ym9hcmRTaG9ydGN1dCh7XG4gICAgZGVmYXVsdDogW3tcbiAgICAgIGtleTogXCJBcnJvd1VwXCIsXG4gICAgICBhbHQ6ICExLFxuICAgICAgY3RybDogITEsXG4gICAgICBtZXRhOiAhMSxcbiAgICAgIHNoaWZ0OiAhMVxuICAgIH1dXG4gIH0pLFxuICBicmVhazogY3JlYXRlS2V5Ym9hcmRTaG9ydGN1dCh7XG4gICAgZGVmYXVsdDogW3tcbiAgICAgIGtleTogXCJFbnRlclwiLFxuICAgICAgc2hpZnQ6ICExXG4gICAgfV1cbiAgfSksXG4gIGxpbmVCcmVhazogY3JlYXRlS2V5Ym9hcmRTaG9ydGN1dCh7XG4gICAgZGVmYXVsdDogW3tcbiAgICAgIGtleTogXCJFbnRlclwiLFxuICAgICAgc2hpZnQ6ICEwXG4gICAgfV1cbiAgfSksXG4gIGRlY29yYXRvcnM6IHtcbiAgICBzdHJvbmc6IGJvbGQsXG4gICAgZW06IGl0YWxpYyxcbiAgICB1bmRlcmxpbmUsXG4gICAgY29kZVxuICB9LFxuICBoaXN0b3J5OiB7XG4gICAgdW5kbyxcbiAgICByZWRvXG4gIH0sXG4gIHRhYjogY3JlYXRlS2V5Ym9hcmRTaG9ydGN1dCh7XG4gICAgZGVmYXVsdDogW3tcbiAgICAgIGtleTogXCJUYWJcIixcbiAgICAgIGFsdDogITEsXG4gICAgICBjdHJsOiAhMSxcbiAgICAgIG1ldGE6ICExLFxuICAgICAgc2hpZnQ6ICExXG4gICAgfV1cbiAgfSksXG4gIHNoaWZ0VGFiOiBjcmVhdGVLZXlib2FyZFNob3J0Y3V0KHtcbiAgICBkZWZhdWx0OiBbe1xuICAgICAga2V5OiBcIlRhYlwiLFxuICAgICAgYWx0OiAhMSxcbiAgICAgIGN0cmw6ICExLFxuICAgICAgbWV0YTogITEsXG4gICAgICBzaGlmdDogITBcbiAgICB9XVxuICB9KVxufSwgYXJyb3dEb3duT25Mb25lbHlCbG9ja09iamVjdCA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwia2V5Ym9hcmQua2V5ZG93blwiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgaWYgKCFkZWZhdWx0S2V5Ym9hcmRTaG9ydGN1dHMuYXJyb3dEb3duLmd1YXJkKGV2ZW50Lm9yaWdpbkV2ZW50KSB8fCAhaXNTZWxlY3Rpb25Db2xsYXBzZWQkMShzbmFwc2hvdCkpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgZm9jdXNCbG9ja09iamVjdCA9IGdldEZvY3VzQmxvY2tPYmplY3Qoc25hcHNob3QpLCBuZXh0QmxvY2sgPSBnZXROZXh0QmxvY2soc25hcHNob3QpO1xuICAgIHJldHVybiBmb2N1c0Jsb2NrT2JqZWN0ICYmICFuZXh0QmxvY2s7XG4gIH0sXG4gIGFjdGlvbnM6IFsoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJpbnNlcnQuYmxvY2tcIixcbiAgICBibG9jazoge1xuICAgICAgX3R5cGU6IHNuYXBzaG90LmNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWVcbiAgICB9LFxuICAgIHBsYWNlbWVudDogXCJhZnRlclwiXG4gIH0pXV1cbn0pLCBhcnJvd1VwT25Mb25lbHlCbG9ja09iamVjdCA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwia2V5Ym9hcmQua2V5ZG93blwiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgaWYgKCFkZWZhdWx0S2V5Ym9hcmRTaG9ydGN1dHMuYXJyb3dVcC5ndWFyZChldmVudC5vcmlnaW5FdmVudCkgfHwgIWlzU2VsZWN0aW9uQ29sbGFwc2VkJDEoc25hcHNob3QpKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IGZvY3VzQmxvY2tPYmplY3QgPSBnZXRGb2N1c0Jsb2NrT2JqZWN0KHNuYXBzaG90KSwgcHJldmlvdXNCbG9jayA9IGdldFByZXZpb3VzQmxvY2soc25hcHNob3QpO1xuICAgIHJldHVybiBmb2N1c0Jsb2NrT2JqZWN0ICYmICFwcmV2aW91c0Jsb2NrO1xuICB9LFxuICBhY3Rpb25zOiBbKHtcbiAgICBzbmFwc2hvdFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2s6IHtcbiAgICAgIF90eXBlOiBzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lXG4gICAgfSxcbiAgICBwbGFjZW1lbnQ6IFwiYmVmb3JlXCJcbiAgfSldXVxufSksIGJyZWFraW5nQmxvY2tPYmplY3QgPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImluc2VydC5icmVha1wiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdFxuICB9KSA9PiB7XG4gICAgY29uc3QgZm9jdXNCbG9ja09iamVjdCA9IGdldEZvY3VzQmxvY2tPYmplY3Qoc25hcHNob3QpO1xuICAgIHJldHVybiBpc1NlbGVjdGlvbkNvbGxhcHNlZCQxKHNuYXBzaG90KSAmJiBmb2N1c0Jsb2NrT2JqZWN0ICE9PSB2b2lkIDA7XG4gIH0sXG4gIGFjdGlvbnM6IFsoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJpbnNlcnQuYmxvY2tcIixcbiAgICBibG9jazoge1xuICAgICAgX3R5cGU6IHNuYXBzaG90LmNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWVcbiAgICB9LFxuICAgIHBsYWNlbWVudDogXCJhZnRlclwiXG4gIH0pXV1cbn0pLCBjbGlja2luZ0Fib3ZlTG9uZWx5QmxvY2tPYmplY3QgPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcIm1vdXNlLmNsaWNrXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBpZiAoc25hcHNob3QuY29udGV4dC5yZWFkT25seSB8fCBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbiAmJiAhaXNTZWxlY3Rpb25Db2xsYXBzZWQkMShzbmFwc2hvdCkpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgZm9jdXNCbG9ja09iamVjdCA9IGdldEZvY3VzQmxvY2tPYmplY3Qoe1xuICAgICAgLi4uc25hcHNob3QsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgIHNlbGVjdGlvbjogZXZlbnQucG9zaXRpb24uc2VsZWN0aW9uXG4gICAgICB9XG4gICAgfSksIHByZXZpb3VzQmxvY2sgPSBnZXRQcmV2aW91c0Jsb2NrKHtcbiAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICBzZWxlY3Rpb246IGV2ZW50LnBvc2l0aW9uLnNlbGVjdGlvblxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBldmVudC5wb3NpdGlvbi5pc0VkaXRvciAmJiBldmVudC5wb3NpdGlvbi5ibG9jayA9PT0gXCJzdGFydFwiICYmIGZvY3VzQmxvY2tPYmplY3QgJiYgIXByZXZpb3VzQmxvY2s7XG4gIH0sXG4gIGFjdGlvbnM6IFsoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICBhdDogZXZlbnQucG9zaXRpb24uc2VsZWN0aW9uXG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJpbnNlcnQuYmxvY2tcIixcbiAgICBibG9jazoge1xuICAgICAgX3R5cGU6IHNuYXBzaG90LmNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWVcbiAgICB9LFxuICAgIHBsYWNlbWVudDogXCJiZWZvcmVcIixcbiAgICBzZWxlY3Q6IFwic3RhcnRcIlxuICB9KV1dXG59KSwgY2xpY2tpbmdCZWxvd0xvbmVseUJsb2NrT2JqZWN0ID0gZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJtb3VzZS5jbGlja1wiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgaWYgKHNuYXBzaG90LmNvbnRleHQucmVhZE9ubHkgfHwgc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24gJiYgIWlzU2VsZWN0aW9uQ29sbGFwc2VkJDEoc25hcHNob3QpKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IGZvY3VzQmxvY2tPYmplY3QgPSBnZXRGb2N1c0Jsb2NrT2JqZWN0KHtcbiAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICBzZWxlY3Rpb246IGV2ZW50LnBvc2l0aW9uLnNlbGVjdGlvblxuICAgICAgfVxuICAgIH0pLCBuZXh0QmxvY2sgPSBnZXROZXh0QmxvY2soe1xuICAgICAgLi4uc25hcHNob3QsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgIHNlbGVjdGlvbjogZXZlbnQucG9zaXRpb24uc2VsZWN0aW9uXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGV2ZW50LnBvc2l0aW9uLmlzRWRpdG9yICYmIGV2ZW50LnBvc2l0aW9uLmJsb2NrID09PSBcImVuZFwiICYmIGZvY3VzQmxvY2tPYmplY3QgJiYgIW5leHRCbG9jaztcbiAgfSxcbiAgYWN0aW9uczogWyh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgIGF0OiBldmVudC5wb3NpdGlvbi5zZWxlY3Rpb25cbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC5ibG9ja1wiLFxuICAgIGJsb2NrOiB7XG4gICAgICBfdHlwZTogc25hcHNob3QuY29udGV4dC5zY2hlbWEuYmxvY2submFtZVxuICAgIH0sXG4gICAgcGxhY2VtZW50OiBcImFmdGVyXCIsXG4gICAgc2VsZWN0OiBcInN0YXJ0XCJcbiAgfSldXVxufSksIGRlbGV0aW5nRW1wdHlUZXh0QmxvY2tBZnRlckJsb2NrT2JqZWN0ID0gZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJkZWxldGUuYmFja3dhcmRcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3RcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGZvY3VzVGV4dEJsb2NrID0gZ2V0Rm9jdXNUZXh0QmxvY2soc25hcHNob3QpLCBzZWxlY3Rpb25Db2xsYXBzZWQgPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCQxKHNuYXBzaG90KSwgcHJldmlvdXNCbG9jayA9IGdldFByZXZpb3VzQmxvY2soc25hcHNob3QpO1xuICAgIHJldHVybiAhZm9jdXNUZXh0QmxvY2sgfHwgIXNlbGVjdGlvbkNvbGxhcHNlZCB8fCAhcHJldmlvdXNCbG9jayA/ICExIDogaXNFbXB0eVRleHRCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBmb2N1c1RleHRCbG9jay5ub2RlKSAmJiAhaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgcHJldmlvdXNCbG9jay5ub2RlKSA/IHtcbiAgICAgIGZvY3VzVGV4dEJsb2NrLFxuICAgICAgcHJldmlvdXNCbG9ja1xuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgZm9jdXNUZXh0QmxvY2ssXG4gICAgcHJldmlvdXNCbG9ja1xuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVsZXRlLmJsb2NrXCIsXG4gICAgYXQ6IGZvY3VzVGV4dEJsb2NrLnBhdGhcbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgIGF0OiB7XG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0aDogcHJldmlvdXNCbG9jay5wYXRoLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH0sXG4gICAgICBmb2N1czoge1xuICAgICAgICBwYXRoOiBwcmV2aW91c0Jsb2NrLnBhdGgsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfVxuICAgIH1cbiAgfSldXVxufSksIGRlbGV0aW5nRW1wdHlUZXh0QmxvY2tCZWZvcmVCbG9ja09iamVjdCA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiZGVsZXRlLmZvcndhcmRcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3RcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGZvY3VzVGV4dEJsb2NrID0gZ2V0Rm9jdXNUZXh0QmxvY2soc25hcHNob3QpLCBzZWxlY3Rpb25Db2xsYXBzZWQgPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCQxKHNuYXBzaG90KSwgbmV4dEJsb2NrID0gZ2V0TmV4dEJsb2NrKHNuYXBzaG90KTtcbiAgICByZXR1cm4gIWZvY3VzVGV4dEJsb2NrIHx8ICFzZWxlY3Rpb25Db2xsYXBzZWQgfHwgIW5leHRCbG9jayA/ICExIDogaXNFbXB0eVRleHRCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBmb2N1c1RleHRCbG9jay5ub2RlKSAmJiAhaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgbmV4dEJsb2NrLm5vZGUpID8ge1xuICAgICAgZm9jdXNUZXh0QmxvY2ssXG4gICAgICBuZXh0QmxvY2tcbiAgICB9IDogITE7XG4gIH0sXG4gIGFjdGlvbnM6IFsoXywge1xuICAgIGZvY3VzVGV4dEJsb2NrLFxuICAgIG5leHRCbG9ja1xuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVsZXRlLmJsb2NrXCIsXG4gICAgYXQ6IGZvY3VzVGV4dEJsb2NrLnBhdGhcbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgIGF0OiB7XG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0aDogbmV4dEJsb2NrLnBhdGgsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfSxcbiAgICAgIGZvY3VzOiB7XG4gICAgICAgIHBhdGg6IG5leHRCbG9jay5wYXRoLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0pXV1cbn0pLCBjb3JlQmxvY2tPYmplY3RCZWhhdmlvcnMgPSB7XG4gIGFycm93RG93bk9uTG9uZWx5QmxvY2tPYmplY3QsXG4gIGFycm93VXBPbkxvbmVseUJsb2NrT2JqZWN0LFxuICBicmVha2luZ0Jsb2NrT2JqZWN0LFxuICBjbGlja2luZ0Fib3ZlTG9uZWx5QmxvY2tPYmplY3QsXG4gIGNsaWNraW5nQmVsb3dMb25lbHlCbG9ja09iamVjdCxcbiAgZGVsZXRpbmdFbXB0eVRleHRCbG9ja0FmdGVyQmxvY2tPYmplY3QsXG4gIGRlbGV0aW5nRW1wdHlUZXh0QmxvY2tCZWZvcmVCbG9ja09iamVjdFxufSwgY29yZURlY29yYXRvckJlaGF2aW9ycyA9IHtcbiAgc3Ryb25nU2hvcnRjdXQ6IGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJrZXlib2FyZC5rZXlkb3duXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBzbmFwc2hvdCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gZGVmYXVsdEtleWJvYXJkU2hvcnRjdXRzLmRlY29yYXRvcnMuc3Ryb25nLmd1YXJkKGV2ZW50Lm9yaWdpbkV2ZW50KSAmJiBzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5kZWNvcmF0b3JzLnNvbWUoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLm5hbWUgPT09IFwic3Ryb25nXCIpLFxuICAgIGFjdGlvbnM6IFsoKSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJkZWNvcmF0b3IudG9nZ2xlXCIsXG4gICAgICBkZWNvcmF0b3I6IFwic3Ryb25nXCJcbiAgICB9KV1dXG4gIH0pLFxuICBlbVNob3J0Y3V0OiBkZWZpbmVCZWhhdmlvcih7XG4gICAgb246IFwia2V5Ym9hcmQua2V5ZG93blwiLFxuICAgIGd1YXJkOiAoe1xuICAgICAgc25hcHNob3QsXG4gICAgICBldmVudFxuICAgIH0pID0+IGRlZmF1bHRLZXlib2FyZFNob3J0Y3V0cy5kZWNvcmF0b3JzLmVtLmd1YXJkKGV2ZW50Lm9yaWdpbkV2ZW50KSAmJiBzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5kZWNvcmF0b3JzLnNvbWUoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLm5hbWUgPT09IFwiZW1cIiksXG4gICAgYWN0aW9uczogWygpID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlY29yYXRvci50b2dnbGVcIixcbiAgICAgIGRlY29yYXRvcjogXCJlbVwiXG4gICAgfSldXVxuICB9KSxcbiAgdW5kZXJsaW5lU2hvcnRjdXQ6IGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJrZXlib2FyZC5rZXlkb3duXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBzbmFwc2hvdCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gZGVmYXVsdEtleWJvYXJkU2hvcnRjdXRzLmRlY29yYXRvcnMudW5kZXJsaW5lLmd1YXJkKGV2ZW50Lm9yaWdpbkV2ZW50KSAmJiBzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5kZWNvcmF0b3JzLnNvbWUoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLm5hbWUgPT09IFwidW5kZXJsaW5lXCIpLFxuICAgIGFjdGlvbnM6IFsoKSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJkZWNvcmF0b3IudG9nZ2xlXCIsXG4gICAgICBkZWNvcmF0b3I6IFwidW5kZXJsaW5lXCJcbiAgICB9KV1dXG4gIH0pLFxuICBjb2RlU2hvcnRjdXQ6IGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJrZXlib2FyZC5rZXlkb3duXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBzbmFwc2hvdCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gZGVmYXVsdEtleWJvYXJkU2hvcnRjdXRzLmRlY29yYXRvcnMuY29kZS5ndWFyZChldmVudC5vcmlnaW5FdmVudCkgJiYgc25hcHNob3QuY29udGV4dC5zY2hlbWEuZGVjb3JhdG9ycy5zb21lKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci5uYW1lID09PSBcImNvZGVcIiksXG4gICAgYWN0aW9uczogWygpID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlY29yYXRvci50b2dnbGVcIixcbiAgICAgIGRlY29yYXRvcjogXCJjb2RlXCJcbiAgICB9KV1dXG4gIH0pXG59O1xuZnVuY3Rpb24gZ2V0Q29tcG91bmRDbGllbnRSZWN0KG5vZGVzKSB7XG4gIGlmIChub2Rlcy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIG5ldyBET01SZWN0KDAsIDAsIDAsIDApO1xuICBjb25zdCBlbGVtZW50cyA9IG5vZGVzLmZpbHRlcigobm9kZSkgPT4gbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQpLCBmaXJzdFJlY3QgPSBlbGVtZW50cy5hdCgwKT8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGlmICghZmlyc3RSZWN0KVxuICAgIHJldHVybiBuZXcgRE9NUmVjdCgwLCAwLCAwLCAwKTtcbiAgbGV0IGxlZnQgPSBmaXJzdFJlY3QubGVmdCwgdG9wID0gZmlyc3RSZWN0LnRvcCwgcmlnaHQgPSBmaXJzdFJlY3QucmlnaHQsIGJvdHRvbSA9IGZpcnN0UmVjdC5ib3R0b207XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByZWN0ID0gZWxlbWVudHNbaV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGVmdCA9IE1hdGgubWluKGxlZnQsIHJlY3QubGVmdCksIHRvcCA9IE1hdGgubWluKHRvcCwgcmVjdC50b3ApLCByaWdodCA9IE1hdGgubWF4KHJpZ2h0LCByZWN0LnJpZ2h0KSwgYm90dG9tID0gTWF0aC5tYXgoYm90dG9tLCByZWN0LmJvdHRvbSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBET01SZWN0KGxlZnQsIHRvcCwgcmlnaHQgLSBsZWZ0LCBib3R0b20gLSB0b3ApO1xufVxuY29uc3QgY29yZURuZEJlaGF2aW9ycyA9IFtcbiAgLyoqXG4gICAqIENvcmUgQmVoYXZpb3IgdGhhdDpcbiAgICogMS4gQ2FsY3VsYXRlcyBhbmQgc2VsZWN0cyBhIFwiZHJhZyBzZWxlY3Rpb25cIlxuICAgKiAyLiBDb25zdHJ1Y3RzIGFuZCBzZXRzIGEgZHJhZyBnaG9zdCBlbGVtZW50XG4gICAqIDMuIEZvcndhcmRzIHRoZSBkcmFnc3RhcnQgZXZlbnRcbiAgICovXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJkcmFnLmRyYWdzdGFydFwiLFxuICAgIGd1YXJkOiAoe1xuICAgICAgc25hcHNob3QsXG4gICAgICBkb20sXG4gICAgICBldmVudFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGRyYWdTZWxlY3Rpb24gPSBnZXREcmFnU2VsZWN0aW9uKHtcbiAgICAgICAgc25hcHNob3QsXG4gICAgICAgIGV2ZW50U2VsZWN0aW9uOiBldmVudC5wb3NpdGlvbi5zZWxlY3Rpb25cbiAgICAgIH0pLCBzZWxlY3RpbmdFbnRpcmVCbG9ja3MgPSBpc1NlbGVjdGluZ0VudGlyZUJsb2Nrcyh7XG4gICAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICBzZWxlY3Rpb246IGRyYWdTZWxlY3Rpb25cbiAgICAgICAgfVxuICAgICAgfSksIGRyYWdnZWREb21Ob2RlcyA9IHtcbiAgICAgICAgYmxvY2tOb2RlczogZG9tLmdldEJsb2NrTm9kZXMoe1xuICAgICAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgICAgICBzZWxlY3Rpb246IGRyYWdTZWxlY3Rpb25cbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBjaGlsZE5vZGVzOiBkb20uZ2V0Q2hpbGROb2Rlcyh7XG4gICAgICAgICAgLi4uc25hcHNob3QsXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogZHJhZ1NlbGVjdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkcmFnU2VsZWN0aW9uLFxuICAgICAgICBkcmFnZ2VkRG9tTm9kZXMsXG4gICAgICAgIHNlbGVjdGluZ0VudGlyZUJsb2Nrc1xuICAgICAgfTtcbiAgICB9LFxuICAgIGFjdGlvbnM6IFsoe1xuICAgICAgZG9tLFxuICAgICAgZXZlbnRcbiAgICB9LCB7XG4gICAgICBkcmFnU2VsZWN0aW9uLFxuICAgICAgZHJhZ2dlZERvbU5vZGVzLFxuICAgICAgc2VsZWN0aW5nRW50aXJlQmxvY2tzXG4gICAgfSkgPT4ge1xuICAgICAgY29uc3QgZHJhZ0dob3N0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmIChzZWxlY3RpbmdFbnRpcmVCbG9ja3MpIHtcbiAgICAgICAgY29uc3QgY2xvbmVkQmxvY2tOb2RlcyA9IGRyYWdnZWREb21Ob2Rlcy5ibG9ja05vZGVzLm1hcCgobm9kZSkgPT4gbm9kZS5jbG9uZU5vZGUoITApKTtcbiAgICAgICAgZm9yIChjb25zdCBibG9jayBvZiBjbG9uZWRCbG9ja05vZGVzKVxuICAgICAgICAgIGJsb2NrIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgKGJsb2NrLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiKSwgZHJhZ0dob3N0LmFwcGVuZENoaWxkKGJsb2NrKTtcbiAgICAgICAgY29uc3QgY3VzdG9tR2hvc3QgPSBkcmFnR2hvc3QucXVlcnlTZWxlY3RvcihcIltkYXRhLXB0LWRyYWctZ2hvc3QtZWxlbWVudF1cIik7XG4gICAgICAgIGlmIChjdXN0b21HaG9zdCAmJiBkcmFnR2hvc3QucmVwbGFjZUNoaWxkcmVuKGN1c3RvbUdob3N0KSwgZHJhZ0dob3N0LnNldEF0dHJpYnV0ZShcImRhdGEtZHJhZ2dlZFwiLCBcIlwiKSwgZHJhZ0dob3N0LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiLCBkcmFnR2hvc3Quc3R5bGUubGVmdCA9IFwiLTk5OTk5cHhcIiwgZHJhZ0dob3N0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiLCBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRyYWdHaG9zdCksIGN1c3RvbUdob3N0KSB7XG4gICAgICAgICAgY29uc3QgY3VzdG9tR2hvc3RSZWN0ID0gY3VzdG9tR2hvc3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHggPSBldmVudC5vcmlnaW5FdmVudC5jbGllbnRYIC0gY3VzdG9tR2hvc3RSZWN0LmxlZnQsIHkgPSBldmVudC5vcmlnaW5FdmVudC5jbGllbnRZIC0gY3VzdG9tR2hvc3RSZWN0LnRvcDtcbiAgICAgICAgICByZXR1cm4gZHJhZ0dob3N0LnN0eWxlLndpZHRoID0gYCR7Y3VzdG9tR2hvc3RSZWN0LndpZHRofXB4YCwgZHJhZ0dob3N0LnN0eWxlLmhlaWdodCA9IGAke2N1c3RvbUdob3N0UmVjdC5oZWlnaHR9cHhgLCBbcmFpc2Uoe1xuICAgICAgICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgICAgICAgIGF0OiBkcmFnU2VsZWN0aW9uXG4gICAgICAgICAgfSksIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBkb20uc2V0RHJhZ0dob3N0KHtcbiAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgIGdob3N0OiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogZHJhZ0dob3N0LFxuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSwgZm9yd2FyZChldmVudCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGJsb2Nrc0RvbVJlY3QgPSBnZXRDb21wb3VuZENsaWVudFJlY3QoZHJhZ2dlZERvbU5vZGVzLmJsb2NrTm9kZXMpLCB4ID0gZXZlbnQub3JpZ2luRXZlbnQuY2xpZW50WCAtIGJsb2Nrc0RvbVJlY3QubGVmdCwgeSA9IGV2ZW50Lm9yaWdpbkV2ZW50LmNsaWVudFkgLSBibG9ja3NEb21SZWN0LnRvcDtcbiAgICAgICAgICByZXR1cm4gZHJhZ0dob3N0LnN0eWxlLndpZHRoID0gYCR7YmxvY2tzRG9tUmVjdC53aWR0aH1weGAsIGRyYWdHaG9zdC5zdHlsZS5oZWlnaHQgPSBgJHtibG9ja3NEb21SZWN0LmhlaWdodH1weGAsIFtyYWlzZSh7XG4gICAgICAgICAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgICAgICAgICAgYXQ6IGRyYWdTZWxlY3Rpb25cbiAgICAgICAgICB9KSwgZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGRvbS5zZXREcmFnR2hvc3Qoe1xuICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgZ2hvc3Q6IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBkcmFnR2hvc3QsXG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLCBmb3J3YXJkKGV2ZW50KV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNsb25lZENoaWxkTm9kZXMgPSBkcmFnZ2VkRG9tTm9kZXMuY2hpbGROb2Rlcy5tYXAoKG5vZGUpID0+IG5vZGUuY2xvbmVOb2RlKCEwKSk7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2xvbmVkQ2hpbGROb2RlcylcbiAgICAgICAgICBkcmFnR2hvc3QuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICBkcmFnR2hvc3Quc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCIsIGRyYWdHaG9zdC5zdHlsZS5sZWZ0ID0gXCItOTk5OTlweFwiLCBkcmFnR2hvc3Quc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCIsIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHJhZ0dob3N0KTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW5Eb21SZWN0ID0gZ2V0Q29tcG91bmRDbGllbnRSZWN0KGRyYWdnZWREb21Ob2Rlcy5jaGlsZE5vZGVzKSwgeCA9IGV2ZW50Lm9yaWdpbkV2ZW50LmNsaWVudFggLSBjaGlsZHJlbkRvbVJlY3QubGVmdCwgeSA9IGV2ZW50Lm9yaWdpbkV2ZW50LmNsaWVudFkgLSBjaGlsZHJlbkRvbVJlY3QudG9wO1xuICAgICAgICByZXR1cm4gZHJhZ0dob3N0LnN0eWxlLndpZHRoID0gYCR7Y2hpbGRyZW5Eb21SZWN0LndpZHRofXB4YCwgZHJhZ0dob3N0LnN0eWxlLmhlaWdodCA9IGAke2NoaWxkcmVuRG9tUmVjdC5oZWlnaHR9cHhgLCBbcmFpc2Uoe1xuICAgICAgICAgIHR5cGU6IFwic2VsZWN0XCIsXG4gICAgICAgICAgYXQ6IGRyYWdTZWxlY3Rpb25cbiAgICAgICAgfSksIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgZG9tLnNldERyYWdHaG9zdCh7XG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGdob3N0OiB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IGRyYWdHaG9zdCxcbiAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgZm9yd2FyZChldmVudCldO1xuICAgICAgfVxuICAgIH1dXG4gIH0pLFxuICAvKipcbiAgICogV2hlbiBkcmFnZ2luZyBvdmVyIHRoZSBkcmFnIG9yaWdpbiwgd2UgZG9uJ3Qgd2FudCB0byBzaG93IHRoZSBjYXJldCBpbiB0aGVcbiAgICogdGV4dC5cbiAgICovXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJkcmFnLmRyYWdvdmVyXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBzbmFwc2hvdCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4ge1xuICAgICAgY29uc3QgZHJhZ09yaWdpbiA9IGV2ZW50LmRyYWdPcmlnaW47XG4gICAgICByZXR1cm4gZHJhZ09yaWdpbiA/IGlzT3ZlcmxhcHBpbmdTZWxlY3Rpb24oZXZlbnQucG9zaXRpb24uc2VsZWN0aW9uKSh7XG4gICAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICBzZWxlY3Rpb246IGRyYWdPcmlnaW4uc2VsZWN0aW9uXG4gICAgICAgIH1cbiAgICAgIH0pIDogITE7XG4gICAgfSxcbiAgICBhY3Rpb25zOiBbXVxuICB9KSxcbiAgLyoqXG4gICAqIElmIHRoZSBkcm9wIHBvc2l0aW9uIG92ZXJsYXBzIHRoZSBkcmFnIG9yaWdpbiwgdGhlbiB0aGUgZXZlbnQgc2hvdWxkIGJlXG4gICAqIGNhbmNlbGxlZC5cbiAgICovXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJkcmFnLmRyb3BcIixcbiAgICBndWFyZDogKHtcbiAgICAgIHNuYXBzaG90LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBkcmFnT3JpZ2luID0gZXZlbnQuZHJhZ09yaWdpbiwgZHJvcFBvc2l0aW9uID0gZXZlbnQucG9zaXRpb24uc2VsZWN0aW9uO1xuICAgICAgcmV0dXJuIGRyYWdPcmlnaW4gPyBpc092ZXJsYXBwaW5nU2VsZWN0aW9uKGRyb3BQb3NpdGlvbikoe1xuICAgICAgICAuLi5zbmFwc2hvdCxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgICAgc2VsZWN0aW9uOiBkcmFnT3JpZ2luLnNlbGVjdGlvblxuICAgICAgICB9XG4gICAgICB9KSA6ICExO1xuICAgIH0sXG4gICAgYWN0aW9uczogW11cbiAgfSksXG4gIC8qKlxuICAgKiBJZiB3ZSBkcm9wIGFuZCBoYXZlIGFjY2VzcyB0byBhIGRyYWcgb3JpZ2luLCB0aGVuIHdlIGNhbiBkZXNlcmlhbGl6ZVxuICAgKiB3aXRob3V0IGNyZWF0aW5nIGEgbmV3IHNlbGVjdGlvbi5cbiAgICovXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJkcmFnLmRyb3BcIixcbiAgICBndWFyZDogKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gZXZlbnQuZHJhZ09yaWdpbiAhPT0gdm9pZCAwLFxuICAgIGFjdGlvbnM6IFsoe1xuICAgICAgZXZlbnRcbiAgICB9KSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJkZXNlcmlhbGl6ZVwiLFxuICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50XG4gICAgfSldXVxuICB9KSxcbiAgLyoqXG4gICAqIE90aGVyd2lzZSwgd2Ugc2hvdWxkIHRvIGNyZWF0ZSBhIG5ldyBzZWxlY3Rpb24uXG4gICAqL1xuICBkZWZpbmVCZWhhdmlvcih7XG4gICAgb246IFwiZHJhZy5kcm9wXCIsXG4gICAgYWN0aW9uczogWyh7XG4gICAgICBldmVudFxuICAgIH0pID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgICAgYXQ6IGV2ZW50LnBvc2l0aW9uLnNlbGVjdGlvblxuICAgIH0pLCByYWlzZSh7XG4gICAgICB0eXBlOiBcImRlc2VyaWFsaXplXCIsXG4gICAgICBvcmlnaW5FdmVudDogZXZlbnRcbiAgICB9KV1dXG4gIH0pLFxuICAvKipcbiAgICogQ29yZSBCZWhhdmlvciB0aGF0IHVzZXMgdGhlIGRyYWcgb3JpZ2luIHRvIG1pbWljIGEgbW92ZSBvcGVyYXRpb24gZHVyaW5nXG4gICAqIGludGVybmFsIGRyYWdnaW5nLlxuICAgKi9cbiAgZGVmaW5lQmVoYXZpb3Ioe1xuICAgIG9uOiBcImRlc2VyaWFsaXphdGlvbi5zdWNjZXNzXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBzbmFwc2hvdCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4ge1xuICAgICAgaWYgKGV2ZW50Lm9yaWdpbkV2ZW50LnR5cGUgIT09IFwiZHJhZy5kcm9wXCIgfHwgZXZlbnQub3JpZ2luRXZlbnQuZHJhZ09yaWdpbiA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm4gITE7XG4gICAgICBjb25zdCBkcmFnT3JpZ2luID0gZXZlbnQub3JpZ2luRXZlbnQuZHJhZ09yaWdpbiwgZHJhZ1NlbGVjdGlvbiA9IGdldERyYWdTZWxlY3Rpb24oe1xuICAgICAgICBldmVudFNlbGVjdGlvbjogZHJhZ09yaWdpbi5zZWxlY3Rpb24sXG4gICAgICAgIHNuYXBzaG90XG4gICAgICB9KSwgZHJvcFBvc2l0aW9uID0gZXZlbnQub3JpZ2luRXZlbnQucG9zaXRpb24uc2VsZWN0aW9uLCBkcm9wcGluZ09uRHJhZ09yaWdpbiA9IGRyYWdPcmlnaW4gPyBpc092ZXJsYXBwaW5nU2VsZWN0aW9uKGRyb3BQb3NpdGlvbikoe1xuICAgICAgICAuLi5zbmFwc2hvdCxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgICAgc2VsZWN0aW9uOiBkcmFnU2VsZWN0aW9uXG4gICAgICAgIH1cbiAgICAgIH0pIDogITEsIGRyYWdnaW5nRW50aXJlQmxvY2tzID0gaXNTZWxlY3RpbmdFbnRpcmVCbG9ja3Moe1xuICAgICAgICAuLi5zbmFwc2hvdCxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgICAgc2VsZWN0aW9uOiBkcmFnU2VsZWN0aW9uXG4gICAgICAgIH1cbiAgICAgIH0pLCBkcmFnZ2VkQmxvY2tzID0gZ2V0U2VsZWN0ZWRCbG9ja3Moe1xuICAgICAgICAuLi5zbmFwc2hvdCxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgICAgc2VsZWN0aW9uOiBkcmFnU2VsZWN0aW9uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRyb3BwaW5nT25EcmFnT3JpZ2luID8gITEgOiB7XG4gICAgICAgIGRyb3BQb3NpdGlvbixcbiAgICAgICAgZHJhZ2dpbmdFbnRpcmVCbG9ja3MsXG4gICAgICAgIGRyYWdnZWRCbG9ja3MsXG4gICAgICAgIGRyYWdPcmlnaW4sXG4gICAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICAgICAgfTtcbiAgICB9LFxuICAgIGFjdGlvbnM6IFsoe1xuICAgICAgZXZlbnRcbiAgICB9LCB7XG4gICAgICBkcmFnZ2luZ0VudGlyZUJsb2NrcyxcbiAgICAgIGRyYWdnZWRCbG9ja3MsXG4gICAgICBkcmFnT3JpZ2luLFxuICAgICAgZHJvcFBvc2l0aW9uLFxuICAgICAgb3JpZ2luRXZlbnRcbiAgICB9KSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgIGF0OiBkcm9wUG9zaXRpb25cbiAgICB9KSwgLi4uZHJhZ2dpbmdFbnRpcmVCbG9ja3MgPyBkcmFnZ2VkQmxvY2tzLm1hcCgoYmxvY2spID0+IHJhaXNlKHtcbiAgICAgIHR5cGU6IFwiZGVsZXRlLmJsb2NrXCIsXG4gICAgICBhdDogYmxvY2sucGF0aFxuICAgIH0pKSA6IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlbGV0ZVwiLFxuICAgICAgYXQ6IGRyYWdPcmlnaW4uc2VsZWN0aW9uXG4gICAgfSldLCByYWlzZSh7XG4gICAgICB0eXBlOiBcImluc2VydC5ibG9ja3NcIixcbiAgICAgIGJsb2NrczogZXZlbnQuZGF0YSxcbiAgICAgIHBsYWNlbWVudDogZHJhZ2dpbmdFbnRpcmVCbG9ja3MgPyBvcmlnaW5FdmVudC5wb3NpdGlvbi5ibG9jayA9PT0gXCJzdGFydFwiID8gXCJiZWZvcmVcIiA6IG9yaWdpbkV2ZW50LnBvc2l0aW9uLmJsb2NrID09PSBcImVuZFwiID8gXCJhZnRlclwiIDogXCJhdXRvXCIgOiBcImF1dG9cIlxuICAgIH0pXV1cbiAgfSlcbl0sIGJyZWFraW5nQXRUaGVFbmRPZlRleHRCbG9jayA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LmJyZWFrXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IHtcbiAgICBjb25zdCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KSwgc2VsZWN0aW9uQ29sbGFwc2VkID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQkMShzbmFwc2hvdCk7XG4gICAgaWYgKCFzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbiB8fCAhZm9jdXNUZXh0QmxvY2sgfHwgIXNlbGVjdGlvbkNvbGxhcHNlZClcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBhdFRoZUVuZE9mQmxvY2sgPSBpc0F0VGhlRW5kT2ZCbG9jayhmb2N1c1RleHRCbG9jaykoc25hcHNob3QpLCBmb2N1c0xpc3RJdGVtID0gZm9jdXNUZXh0QmxvY2subm9kZS5saXN0SXRlbSwgZm9jdXNMZXZlbCA9IGZvY3VzVGV4dEJsb2NrLm5vZGUubGV2ZWw7XG4gICAgcmV0dXJuIGF0VGhlRW5kT2ZCbG9jayA/IHtcbiAgICAgIGZvY3VzTGlzdEl0ZW0sXG4gICAgICBmb2N1c0xldmVsXG4gICAgfSA6ICExO1xuICB9LFxuICBhY3Rpb25zOiBbKHtcbiAgICBzbmFwc2hvdFxuICB9LCB7XG4gICAgZm9jdXNMaXN0SXRlbSxcbiAgICBmb2N1c0xldmVsXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJpbnNlcnQuYmxvY2tcIixcbiAgICBibG9jazoge1xuICAgICAgX3R5cGU6IHNuYXBzaG90LmNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgX3R5cGU6IHNuYXBzaG90LmNvbnRleHQuc2NoZW1hLnNwYW4ubmFtZSxcbiAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgbWFya3M6IFtdXG4gICAgICB9XSxcbiAgICAgIG1hcmtEZWZzOiBbXSxcbiAgICAgIGxpc3RJdGVtOiBmb2N1c0xpc3RJdGVtLFxuICAgICAgbGV2ZWw6IGZvY3VzTGV2ZWwsXG4gICAgICBzdHlsZTogc25hcHNob3QuY29udGV4dC5zY2hlbWEuc3R5bGVzWzBdPy5uYW1lXG4gICAgfSxcbiAgICBwbGFjZW1lbnQ6IFwiYWZ0ZXJcIlxuICB9KV1dXG59KSwgYnJlYWtpbmdBdFRoZVN0YXJ0T2ZUZXh0QmxvY2sgPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImluc2VydC5icmVha1wiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdFxuICB9KSA9PiB7XG4gICAgY29uc3QgZm9jdXNUZXh0QmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayhzbmFwc2hvdCksIHNlbGVjdGlvbkNvbGxhcHNlZCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkJDEoc25hcHNob3QpO1xuICAgIGlmICghc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24gfHwgIWZvY3VzVGV4dEJsb2NrIHx8ICFzZWxlY3Rpb25Db2xsYXBzZWQpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgZm9jdXNTcGFuID0gZ2V0Rm9jdXNTcGFuJDEoc25hcHNob3QpLCBmb2N1c0RlY29yYXRvcnMgPSBmb2N1c1NwYW4/Lm5vZGUubWFya3M/LmZpbHRlcigobWFyaykgPT4gc25hcHNob3QuY29udGV4dC5zY2hlbWEuZGVjb3JhdG9ycy5zb21lKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci5uYW1lID09PSBtYXJrKSA/PyBbXSksIGZvY3VzQW5ub3RhdGlvbnMgPSBmb2N1c1NwYW4/Lm5vZGUubWFya3M/LmZpbHRlcigobWFyaykgPT4gIXNuYXBzaG90LmNvbnRleHQuc2NoZW1hLmRlY29yYXRvcnMuc29tZSgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IubmFtZSA9PT0gbWFyaykpID8/IFtdLCBmb2N1c0xpc3RJdGVtID0gZm9jdXNUZXh0QmxvY2subm9kZS5saXN0SXRlbSwgZm9jdXNMZXZlbCA9IGZvY3VzVGV4dEJsb2NrLm5vZGUubGV2ZWw7XG4gICAgcmV0dXJuIGlzQXRUaGVTdGFydE9mQmxvY2soZm9jdXNUZXh0QmxvY2spKHNuYXBzaG90KSA/IHtcbiAgICAgIGZvY3VzQW5ub3RhdGlvbnMsXG4gICAgICBmb2N1c0RlY29yYXRvcnMsXG4gICAgICBmb2N1c0xpc3RJdGVtLFxuICAgICAgZm9jdXNMZXZlbFxuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyh7XG4gICAgc25hcHNob3RcbiAgfSwge1xuICAgIGZvY3VzQW5ub3RhdGlvbnMsXG4gICAgZm9jdXNEZWNvcmF0b3JzLFxuICAgIGZvY3VzTGlzdEl0ZW0sXG4gICAgZm9jdXNMZXZlbFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2s6IHtcbiAgICAgIF90eXBlOiBzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIF90eXBlOiBzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5zcGFuLm5hbWUsXG4gICAgICAgIG1hcmtzOiBmb2N1c0Fubm90YXRpb25zLmxlbmd0aCA9PT0gMCA/IGZvY3VzRGVjb3JhdG9ycyA6IFtdLFxuICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICB9XSxcbiAgICAgIGxpc3RJdGVtOiBmb2N1c0xpc3RJdGVtLFxuICAgICAgbGV2ZWw6IGZvY3VzTGV2ZWwsXG4gICAgICBzdHlsZTogc25hcHNob3QuY29udGV4dC5zY2hlbWEuc3R5bGVzWzBdPy5uYW1lXG4gICAgfSxcbiAgICBwbGFjZW1lbnQ6IFwiYmVmb3JlXCIsXG4gICAgc2VsZWN0OiBcIm5vbmVcIlxuICB9KV1dXG59KSwgYnJlYWtpbmdFbnRpcmVEb2N1bWVudCA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LmJyZWFrXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IHtcbiAgICBpZiAoIXNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uIHx8ICFpc1NlbGVjdGlvbkV4cGFuZGVkKHNuYXBzaG90KSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBmaXJzdEJsb2NrID0gZ2V0Rmlyc3RCbG9jayQxKHNuYXBzaG90KSwgbGFzdEJsb2NrID0gZ2V0TGFzdEJsb2NrJDEoc25hcHNob3QpO1xuICAgIGlmICghZmlyc3RCbG9jayB8fCAhbGFzdEJsb2NrKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IGZpcnN0QmxvY2tTdGFydFBvaW50ID0gZ2V0QmxvY2tTdGFydFBvaW50KHtcbiAgICAgIGNvbnRleHQ6IHNuYXBzaG90LmNvbnRleHQsXG4gICAgICBibG9jazogZmlyc3RCbG9ja1xuICAgIH0pLCBzZWxlY3Rpb25TdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludChzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbiksIGxhc3RCbG9ja0VuZFBvaW50ID0gZ2V0QmxvY2tFbmRQb2ludCh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IGxhc3RCbG9ja1xuICAgIH0pLCBzZWxlY3Rpb25FbmRQb2ludCA9IGdldFNlbGVjdGlvbkVuZFBvaW50KHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKTtcbiAgICByZXR1cm4gaXNFcXVhbFNlbGVjdGlvblBvaW50cyhmaXJzdEJsb2NrU3RhcnRQb2ludCwgc2VsZWN0aW9uU3RhcnRQb2ludCkgJiYgaXNFcXVhbFNlbGVjdGlvblBvaW50cyhsYXN0QmxvY2tFbmRQb2ludCwgc2VsZWN0aW9uRW5kUG9pbnQpID8ge1xuICAgICAgc2VsZWN0aW9uOiBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvblxuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgc2VsZWN0aW9uXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJkZWxldGVcIixcbiAgICBhdDogc2VsZWN0aW9uXG4gIH0pXV1cbn0pLCBicmVha2luZ0VudGlyZUJsb2NrcyA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LmJyZWFrXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IHtcbiAgICBpZiAoIXNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uIHx8ICFpc1NlbGVjdGlvbkV4cGFuZGVkKHNuYXBzaG90KSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBzZWxlY3RlZEJsb2NrcyA9IGdldFNlbGVjdGVkQmxvY2tzKHNuYXBzaG90KSwgc2VsZWN0aW9uU3RhcnRCbG9jayA9IGdldFNlbGVjdGlvblN0YXJ0QmxvY2skMShzbmFwc2hvdCksIHNlbGVjdGlvbkVuZEJsb2NrID0gZ2V0U2VsZWN0aW9uRW5kQmxvY2skMShzbmFwc2hvdCk7XG4gICAgaWYgKCFzZWxlY3Rpb25TdGFydEJsb2NrIHx8ICFzZWxlY3Rpb25FbmRCbG9jaylcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBzdGFydEJsb2NrU3RhcnRQb2ludCA9IGdldEJsb2NrU3RhcnRQb2ludCh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IHNlbGVjdGlvblN0YXJ0QmxvY2tcbiAgICB9KSwgc2VsZWN0aW9uU3RhcnRQb2ludCA9IGdldFNlbGVjdGlvblN0YXJ0UG9pbnQoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pLCBlbmRCbG9ja0VuZFBvaW50ID0gZ2V0QmxvY2tFbmRQb2ludCh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IHNlbGVjdGlvbkVuZEJsb2NrXG4gICAgfSksIHNlbGVjdGlvbkVuZFBvaW50ID0gZ2V0U2VsZWN0aW9uRW5kUG9pbnQoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pO1xuICAgIHJldHVybiBpc0VxdWFsU2VsZWN0aW9uUG9pbnRzKHNlbGVjdGlvblN0YXJ0UG9pbnQsIHN0YXJ0QmxvY2tTdGFydFBvaW50KSAmJiBpc0VxdWFsU2VsZWN0aW9uUG9pbnRzKHNlbGVjdGlvbkVuZFBvaW50LCBlbmRCbG9ja0VuZFBvaW50KSA/IHtcbiAgICAgIHNlbGVjdGVkQmxvY2tzXG4gICAgfSA6ICExO1xuICB9LFxuICBhY3Rpb25zOiBbKHtcbiAgICBzbmFwc2hvdFxuICB9LCB7XG4gICAgc2VsZWN0ZWRCbG9ja3NcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC5ibG9ja1wiLFxuICAgIGJsb2NrOiB7XG4gICAgICBfdHlwZTogc25hcHNob3QuY29udGV4dC5zY2hlbWEuYmxvY2submFtZSxcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICBfdHlwZTogc25hcHNob3QuY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lLFxuICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICBtYXJrczogW11cbiAgICAgIH1dXG4gICAgfSxcbiAgICBwbGFjZW1lbnQ6IFwiYmVmb3JlXCIsXG4gICAgc2VsZWN0OiBcInN0YXJ0XCJcbiAgfSksIC4uLnNlbGVjdGVkQmxvY2tzLm1hcCgoYmxvY2spID0+IHJhaXNlKHtcbiAgICB0eXBlOiBcImRlbGV0ZS5ibG9ja1wiLFxuICAgIGF0OiBibG9jay5wYXRoXG4gIH0pKV1dXG59KSwgYnJlYWtpbmdJbmxpbmVPYmplY3QgPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImluc2VydC5icmVha1wiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdFxuICB9KSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0aW9uQ29sbGFwc2VkID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQkMShzbmFwc2hvdCksIGZvY3VzSW5saW5lT2JqZWN0ID0gZ2V0Rm9jdXNJbmxpbmVPYmplY3Qoc25hcHNob3QpO1xuICAgIHJldHVybiBzZWxlY3Rpb25Db2xsYXBzZWQgJiYgZm9jdXNJbmxpbmVPYmplY3Q7XG4gIH0sXG4gIGFjdGlvbnM6IFsoKSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwibW92ZS5mb3J3YXJkXCIsXG4gICAgZGlzdGFuY2U6IDFcbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcInNwbGl0XCJcbiAgfSldXVxufSksIGNvcmVJbnNlcnRCcmVha0JlaGF2aW9ycyA9IHtcbiAgYnJlYWtpbmdBdFRoZUVuZE9mVGV4dEJsb2NrLFxuICBicmVha2luZ0F0VGhlU3RhcnRPZlRleHRCbG9jayxcbiAgYnJlYWtpbmdFbnRpcmVEb2N1bWVudCxcbiAgYnJlYWtpbmdFbnRpcmVCbG9ja3MsXG4gIGJyZWFraW5nSW5saW5lT2JqZWN0XG59O1xuZnVuY3Rpb24gaXNBdFRoZUJlZ2lubmluZ09mQmxvY2soe1xuICBjb250ZXh0LFxuICBibG9ja1xufSkge1xuICByZXR1cm4gIWlzVGV4dEJsb2NrKGNvbnRleHQsIGJsb2NrKSB8fCAhY29udGV4dC5zZWxlY3Rpb24gfHwgIWlzU2VsZWN0aW9uQ29sbGFwc2VkKGNvbnRleHQuc2VsZWN0aW9uKSA/ICExIDogZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoY29udGV4dC5zZWxlY3Rpb24uZm9jdXMpID09PSBibG9jay5jaGlsZHJlblswXS5fa2V5ICYmIGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLm9mZnNldCA9PT0gMDtcbn1cbmNvbnN0IE1BWF9MSVNUX0xFVkVMID0gMTAsIGNsZWFyTGlzdE9uQmFja3NwYWNlID0gZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJkZWxldGUuYmFja3dhcmRcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3RcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGZvY3VzVGV4dEJsb2NrID0gZ2V0Rm9jdXNUZXh0QmxvY2soc25hcHNob3QpO1xuICAgIHJldHVybiAhZm9jdXNUZXh0QmxvY2sgfHwgZm9jdXNUZXh0QmxvY2subm9kZS5sZXZlbCAhPT0gMSB8fCAhaXNBdFRoZUJlZ2lubmluZ09mQmxvY2soe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIGJsb2NrOiBmb2N1c1RleHRCbG9jay5ub2RlXG4gICAgfSkgPyAhMSA6IHtcbiAgICAgIGZvY3VzVGV4dEJsb2NrXG4gICAgfTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgZm9jdXNUZXh0QmxvY2tcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImJsb2NrLnVuc2V0XCIsXG4gICAgcHJvcHM6IFtcImxpc3RJdGVtXCIsIFwibGV2ZWxcIl0sXG4gICAgYXQ6IGZvY3VzVGV4dEJsb2NrLnBhdGhcbiAgfSldXVxufSksIHVuaW5kZW50TGlzdE9uQmFja3NwYWNlID0gZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJkZWxldGUuYmFja3dhcmRcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3RcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbkNvbGxhcHNlZCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkJDEoc25hcHNob3QpLCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KSwgZm9jdXNTcGFuID0gZ2V0Rm9jdXNTcGFuJDEoc25hcHNob3QpO1xuICAgIHJldHVybiAhc2VsZWN0aW9uQ29sbGFwc2VkIHx8ICFmb2N1c1RleHRCbG9jayB8fCAhZm9jdXNTcGFuID8gITEgOiBmb2N1c1RleHRCbG9jay5ub2RlLmNoaWxkcmVuWzBdLl9rZXkgPT09IGZvY3VzU3Bhbi5ub2RlLl9rZXkgJiYgc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24/LmZvY3VzLm9mZnNldCA9PT0gMCAmJiBmb2N1c1RleHRCbG9jay5ub2RlLmxldmVsICE9PSB2b2lkIDAgJiYgZm9jdXNUZXh0QmxvY2subm9kZS5sZXZlbCA+IDEgPyB7XG4gICAgICBmb2N1c1RleHRCbG9jayxcbiAgICAgIGxldmVsOiBmb2N1c1RleHRCbG9jay5ub2RlLmxldmVsIC0gMVxuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgZm9jdXNUZXh0QmxvY2ssXG4gICAgbGV2ZWxcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImJsb2NrLnNldFwiLFxuICAgIHByb3BzOiB7XG4gICAgICBsZXZlbFxuICAgIH0sXG4gICAgYXQ6IGZvY3VzVGV4dEJsb2NrLnBhdGhcbiAgfSldXVxufSksIG1lcmdlVGV4dEludG9MaXN0T25EZWxldGUgPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImRlbGV0ZS5mb3J3YXJkXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IHtcbiAgICBjb25zdCBmb2N1c0xpc3RCbG9jayA9IGdldEZvY3VzTGlzdEJsb2NrKHNuYXBzaG90KSwgbmV4dEJsb2NrID0gZ2V0TmV4dEJsb2NrKHNuYXBzaG90KTtcbiAgICByZXR1cm4gIWZvY3VzTGlzdEJsb2NrIHx8ICFuZXh0QmxvY2sgfHwgIWlzVGV4dEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIG5leHRCbG9jay5ub2RlKSB8fCAhaXNFbXB0eVRleHRCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBmb2N1c0xpc3RCbG9jay5ub2RlKSA/ICExIDoge1xuICAgICAgZm9jdXNMaXN0QmxvY2ssXG4gICAgICBuZXh0QmxvY2tcbiAgICB9O1xuICB9LFxuICBhY3Rpb25zOiBbKF8sIHtcbiAgICBuZXh0QmxvY2tcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC5ibG9ja1wiLFxuICAgIGJsb2NrOiBuZXh0QmxvY2subm9kZSxcbiAgICBwbGFjZW1lbnQ6IFwiYXV0b1wiLFxuICAgIHNlbGVjdDogXCJzdGFydFwiXG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJkZWxldGUuYmxvY2tcIixcbiAgICBhdDogbmV4dEJsb2NrLnBhdGhcbiAgfSldXVxufSksIG1lcmdlVGV4dEludG9MaXN0T25CYWNrc3BhY2UgPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImRlbGV0ZS5iYWNrd2FyZFwiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdFxuICB9KSA9PiB7XG4gICAgY29uc3QgZm9jdXNUZXh0QmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayhzbmFwc2hvdCksIHByZXZpb3VzQmxvY2sgPSBnZXRQcmV2aW91c0Jsb2NrKHNuYXBzaG90KTtcbiAgICBpZiAoIWZvY3VzVGV4dEJsb2NrIHx8ICFwcmV2aW91c0Jsb2NrIHx8ICFpc0F0VGhlQmVnaW5uaW5nT2ZCbG9jayh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IGZvY3VzVGV4dEJsb2NrLm5vZGVcbiAgICB9KSB8fCAhaXNMaXN0QmxvY2soc25hcHNob3QuY29udGV4dCwgcHJldmlvdXNCbG9jay5ub2RlKSB8fCAhaXNFbXB0eVRleHRCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBwcmV2aW91c0Jsb2NrLm5vZGUpKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHByZXZpb3VzQmxvY2tFbmRQb2ludCA9IGdldEJsb2NrRW5kUG9pbnQoe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIGJsb2NrOiBwcmV2aW91c0Jsb2NrXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzVGV4dEJsb2NrLFxuICAgICAgcHJldmlvdXNCbG9ja0VuZFBvaW50XG4gICAgfTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgZm9jdXNUZXh0QmxvY2ssXG4gICAgcHJldmlvdXNCbG9ja0VuZFBvaW50XG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICBhdDoge1xuICAgICAgYW5jaG9yOiBwcmV2aW91c0Jsb2NrRW5kUG9pbnQsXG4gICAgICBmb2N1czogcHJldmlvdXNCbG9ja0VuZFBvaW50XG4gICAgfVxuICB9KSwgcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2s6IGZvY3VzVGV4dEJsb2NrLm5vZGUsXG4gICAgcGxhY2VtZW50OiBcImF1dG9cIixcbiAgICBzZWxlY3Q6IFwic3RhcnRcIlxuICB9KSwgcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVsZXRlLmJsb2NrXCIsXG4gICAgYXQ6IGZvY3VzVGV4dEJsb2NrLnBhdGhcbiAgfSldXVxufSksIGRlbGV0aW5nTGlzdEZyb21TdGFydCA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiZGVsZXRlXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBjb25zdCBibG9ja3NUb0RlbGV0ZSA9IGdldFNlbGVjdGVkQmxvY2tzKHtcbiAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICBzZWxlY3Rpb246IGV2ZW50LmF0XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGJsb2Nrc1RvRGVsZXRlLmxlbmd0aCA8IDIpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3Qgc3RhcnRCbG9jayA9IGJsb2Nrc1RvRGVsZXRlLmF0KDApPy5ub2RlLCBtaWRkbGVCbG9ja3MgPSBibG9ja3NUb0RlbGV0ZS5zbGljZSgxLCAtMSksIGVuZEJsb2NrID0gYmxvY2tzVG9EZWxldGUuYXQoLTEpPy5ub2RlO1xuICAgIGlmICghaXNMaXN0QmxvY2soc25hcHNob3QuY29udGV4dCwgc3RhcnRCbG9jaykgfHwgIWlzTGlzdEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIGVuZEJsb2NrKSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBkZWxldGVTdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludCQxKHtcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgc2VsZWN0aW9uOiBldmVudC5hdFxuICAgICAgfVxuICAgIH0pLCBkZWxldGVFbmRQb2ludCA9IGdldFNlbGVjdGlvbkVuZFBvaW50JDEoe1xuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICBzZWxlY3Rpb246IGV2ZW50LmF0XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFkZWxldGVTdGFydFBvaW50IHx8ICFkZWxldGVFbmRQb2ludClcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBzdGFydEJsb2NrU3RhcnRQb2ludCA9IGdldEJsb2NrU3RhcnRQb2ludCh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IHtcbiAgICAgICAgbm9kZTogc3RhcnRCbG9jayxcbiAgICAgICAgcGF0aDogW3tcbiAgICAgICAgICBfa2V5OiBzdGFydEJsb2NrLl9rZXlcbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWlzRXF1YWxTZWxlY3Rpb25Qb2ludHMoZGVsZXRlU3RhcnRQb2ludCwgc3RhcnRCbG9ja1N0YXJ0UG9pbnQpKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHN0YXJ0QmxvY2tFbmRQb2ludCA9IGdldEJsb2NrRW5kUG9pbnQoe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIGJsb2NrOiB7XG4gICAgICAgIG5vZGU6IHN0YXJ0QmxvY2ssXG4gICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgX2tleTogc3RhcnRCbG9jay5fa2V5XG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfSksIGVuZEJsb2NrRW5kUG9pbnQgPSBnZXRCbG9ja0VuZFBvaW50KHtcbiAgICAgIGNvbnRleHQ6IHNuYXBzaG90LmNvbnRleHQsXG4gICAgICBibG9jazoge1xuICAgICAgICBub2RlOiBlbmRCbG9jayxcbiAgICAgICAgcGF0aDogW3tcbiAgICAgICAgICBfa2V5OiBlbmRCbG9jay5fa2V5XG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfSksIHNsaWNlZEVuZEJsb2NrID0gc2xpY2VUZXh0QmxvY2soe1xuICAgICAgY29udGV4dDoge1xuICAgICAgICBzY2hlbWE6IHNuYXBzaG90LmNvbnRleHQuc2NoZW1hLFxuICAgICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgICBhbmNob3I6IGRlbGV0ZUVuZFBvaW50LFxuICAgICAgICAgIGZvY3VzOiBlbmRCbG9ja0VuZFBvaW50XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBibG9jazogZW5kQmxvY2tcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnRCbG9ja1N0YXJ0UG9pbnQsXG4gICAgICBzdGFydEJsb2NrRW5kUG9pbnQsXG4gICAgICBtaWRkbGVCbG9ja3MsXG4gICAgICBlbmRCbG9jayxcbiAgICAgIHNsaWNlZEVuZEJsb2NrXG4gICAgfTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgc3RhcnRCbG9ja1N0YXJ0UG9pbnQsXG4gICAgc3RhcnRCbG9ja0VuZFBvaW50LFxuICAgIG1pZGRsZUJsb2NrcyxcbiAgICBlbmRCbG9jayxcbiAgICBzbGljZWRFbmRCbG9ja1xuICB9KSA9PiBbXG4gICAgLy8gQWxsIGJsb2NrIGluIGJldHdlZW4gY2FuIHNhZmVseSBiZSBkZWxldGVkLlxuICAgIC4uLm1pZGRsZUJsb2Nrcy5tYXAoKGJsb2NrKSA9PiByYWlzZSh7XG4gICAgICB0eXBlOiBcImRlbGV0ZS5ibG9ja1wiLFxuICAgICAgYXQ6IGJsb2NrLnBhdGhcbiAgICB9KSksXG4gICAgLy8gVGhlIGxhc3QgYmxvY2sgaXMgZGVsZXRlZCBhcyB3ZWxsLlxuICAgIHJhaXNlKHtcbiAgICAgIHR5cGU6IFwiZGVsZXRlLmJsb2NrXCIsXG4gICAgICBhdDogW3tcbiAgICAgICAgX2tleTogZW5kQmxvY2suX2tleVxuICAgICAgfV1cbiAgICB9KSxcbiAgICAvLyBCdXQgaW4gY2FzZSB0aGUgZGVsZXRlIG9wZXJhdGlvbiBkaWRuJ3QgcmVhY2ggYWxsIHRoZSB3YXkgdG8gdGhlIGVuZFxuICAgIC8vIG9mIGl0LCB3ZSBmaXJzdCBwbGFjZSB0aGUgY2FyZXQgYXQgdGhlIGVuZCBvZiB0aGUgc3RhcnQgYmxvY2suLi5cbiAgICByYWlzZSh7XG4gICAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgICAgYXQ6IHtcbiAgICAgICAgYW5jaG9yOiBzdGFydEJsb2NrRW5kUG9pbnQsXG4gICAgICAgIGZvY3VzOiBzdGFydEJsb2NrRW5kUG9pbnRcbiAgICAgIH1cbiAgICB9KSxcbiAgICAvLyAuLi5hbmQgaW5zZXJ0IHRoZSByZXN0IG9mIHRoZSBlbmQgYmxvY2sgYXQgdGhlIGVuZCBvZiBpdC5cbiAgICByYWlzZSh7XG4gICAgICB0eXBlOiBcImluc2VydC5ibG9ja1wiLFxuICAgICAgYmxvY2s6IHNsaWNlZEVuZEJsb2NrLFxuICAgICAgcGxhY2VtZW50OiBcImF1dG9cIixcbiAgICAgIHNlbGVjdDogXCJub25lXCJcbiAgICB9KSxcbiAgICAvLyBBbmQgZmluYWxseSwgd2UgZGVsZXRlIHRoZSBvcmlnaW5hbCB0ZXh0IG9mIHRoZSBzdGFydCBibG9jay5cbiAgICByYWlzZSh7XG4gICAgICB0eXBlOiBcImRlbGV0ZVwiLFxuICAgICAgYXQ6IHtcbiAgICAgICAgYW5jaG9yOiBzdGFydEJsb2NrU3RhcnRQb2ludCxcbiAgICAgICAgZm9jdXM6IHN0YXJ0QmxvY2tFbmRQb2ludFxuICAgICAgfVxuICAgIH0pXG4gIF1dXG59KSwgY2xlYXJMaXN0T25FbnRlciA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LmJyZWFrXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IHtcbiAgICBjb25zdCBzZWxlY3Rpb25Db2xsYXBzZWQgPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCQxKHNuYXBzaG90KSwgZm9jdXNMaXN0QmxvY2sgPSBnZXRGb2N1c0xpc3RCbG9jayhzbmFwc2hvdCk7XG4gICAgcmV0dXJuICFzZWxlY3Rpb25Db2xsYXBzZWQgfHwgIWZvY3VzTGlzdEJsb2NrIHx8ICFpc0VtcHR5VGV4dEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIGZvY3VzTGlzdEJsb2NrLm5vZGUpID8gITEgOiB7XG4gICAgICBmb2N1c0xpc3RCbG9ja1xuICAgIH07XG4gIH0sXG4gIGFjdGlvbnM6IFsoXywge1xuICAgIGZvY3VzTGlzdEJsb2NrXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJibG9jay51bnNldFwiLFxuICAgIHByb3BzOiBbXCJsaXN0SXRlbVwiLCBcImxldmVsXCJdLFxuICAgIGF0OiBmb2N1c0xpc3RCbG9jay5wYXRoXG4gIH0pXV1cbn0pLCBpbmRlbnRMaXN0T25UYWIgPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImtleWJvYXJkLmtleWRvd25cIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGlmICghZGVmYXVsdEtleWJvYXJkU2hvcnRjdXRzLnRhYi5ndWFyZChldmVudC5vcmlnaW5FdmVudCkpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3Qgc2VsZWN0ZWRCbG9ja3MgPSBnZXRTZWxlY3RlZEJsb2NrcyhzbmFwc2hvdCksIHNlbGVjdGVkTGlzdEJsb2NrcyA9IHNlbGVjdGVkQmxvY2tzLmZsYXRNYXAoKGJsb2NrKSA9PiBpc0xpc3RCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBibG9jay5ub2RlKSA/IFt7XG4gICAgICBub2RlOiBibG9jay5ub2RlLFxuICAgICAgcGF0aDogYmxvY2sucGF0aFxuICAgIH1dIDogW10pO1xuICAgIHJldHVybiBzZWxlY3RlZExpc3RCbG9ja3MubGVuZ3RoID09PSBzZWxlY3RlZEJsb2Nrcy5sZW5ndGggPyB7XG4gICAgICBzZWxlY3RlZExpc3RCbG9ja3NcbiAgICB9IDogITE7XG4gIH0sXG4gIGFjdGlvbnM6IFsoXywge1xuICAgIHNlbGVjdGVkTGlzdEJsb2Nrc1xuICB9KSA9PiBzZWxlY3RlZExpc3RCbG9ja3MubWFwKChzZWxlY3RlZExpc3RCbG9jaykgPT4gcmFpc2Uoe1xuICAgIHR5cGU6IFwiYmxvY2suc2V0XCIsXG4gICAgcHJvcHM6IHtcbiAgICAgIGxldmVsOiBNYXRoLm1pbihNQVhfTElTVF9MRVZFTCwgTWF0aC5tYXgoMSwgc2VsZWN0ZWRMaXN0QmxvY2subm9kZS5sZXZlbCArIDEpKVxuICAgIH0sXG4gICAgYXQ6IHNlbGVjdGVkTGlzdEJsb2NrLnBhdGhcbiAgfSkpXVxufSksIHVuaW5kZW50TGlzdE9uU2hpZnRUYWIgPSBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImtleWJvYXJkLmtleWRvd25cIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGlmICghZGVmYXVsdEtleWJvYXJkU2hvcnRjdXRzLnNoaWZ0VGFiLmd1YXJkKGV2ZW50Lm9yaWdpbkV2ZW50KSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBzZWxlY3RlZEJsb2NrcyA9IGdldFNlbGVjdGVkQmxvY2tzKHNuYXBzaG90KSwgc2VsZWN0ZWRMaXN0QmxvY2tzID0gc2VsZWN0ZWRCbG9ja3MuZmxhdE1hcCgoYmxvY2spID0+IGlzTGlzdEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIGJsb2NrLm5vZGUpID8gW3tcbiAgICAgIG5vZGU6IGJsb2NrLm5vZGUsXG4gICAgICBwYXRoOiBibG9jay5wYXRoXG4gICAgfV0gOiBbXSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkTGlzdEJsb2Nrcy5sZW5ndGggPT09IHNlbGVjdGVkQmxvY2tzLmxlbmd0aCA/IHtcbiAgICAgIHNlbGVjdGVkTGlzdEJsb2Nrc1xuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgc2VsZWN0ZWRMaXN0QmxvY2tzXG4gIH0pID0+IHNlbGVjdGVkTGlzdEJsb2Nrcy5tYXAoKHNlbGVjdGVkTGlzdEJsb2NrKSA9PiByYWlzZSh7XG4gICAgdHlwZTogXCJibG9jay5zZXRcIixcbiAgICBwcm9wczoge1xuICAgICAgbGV2ZWw6IE1hdGgubWluKE1BWF9MSVNUX0xFVkVMLCBNYXRoLm1heCgxLCBzZWxlY3RlZExpc3RCbG9jay5ub2RlLmxldmVsIC0gMSkpXG4gICAgfSxcbiAgICBhdDogc2VsZWN0ZWRMaXN0QmxvY2sucGF0aFxuICB9KSldXG59KSwgaW5oZXJpdExpc3RMZXZlbCA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LmJsb2Nrc1wiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgY29uc3QgZm9jdXNMaXN0QmxvY2sgPSBnZXRGb2N1c0xpc3RCbG9jayhzbmFwc2hvdCk7XG4gICAgaWYgKCFmb2N1c0xpc3RCbG9jaylcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBmaXJzdEluc2VydGVkQmxvY2sgPSBldmVudC5ibG9ja3MuYXQoMCksIHNlY29uZEluc2VydGVkQmxvY2sgPSBldmVudC5ibG9ja3MuYXQoMSksIGluc2VydGVkTGlzdEJsb2NrID0gaXNMaXN0QmxvY2soc25hcHNob3QuY29udGV4dCwgZmlyc3RJbnNlcnRlZEJsb2NrKSA/IGZpcnN0SW5zZXJ0ZWRCbG9jayA6IGlzTGlzdEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIHNlY29uZEluc2VydGVkQmxvY2spID8gc2Vjb25kSW5zZXJ0ZWRCbG9jayA6IHZvaWQgMDtcbiAgICBpZiAoIWluc2VydGVkTGlzdEJsb2NrKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IGxldmVsRGlmZmVyZW5jZSA9IGZvY3VzTGlzdEJsb2NrLm5vZGUubGV2ZWwgLSBpbnNlcnRlZExpc3RCbG9jay5sZXZlbDtcbiAgICByZXR1cm4gbGV2ZWxEaWZmZXJlbmNlID09PSAwID8gITEgOiB7XG4gICAgICBsZXZlbERpZmZlcmVuY2UsXG4gICAgICBpbnNlcnRlZExpc3RCbG9ja1xuICAgIH07XG4gIH0sXG4gIGFjdGlvbnM6IFsoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0sIHtcbiAgICBsZXZlbERpZmZlcmVuY2UsXG4gICAgaW5zZXJ0ZWRMaXN0QmxvY2tcbiAgfSkgPT4ge1xuICAgIGxldCBhZGp1c3RMZXZlbCA9ICEwLCBsaXN0U3RhcnRCbG9ja0ZvdW5kID0gITE7XG4gICAgcmV0dXJuIFtyYWlzZSh7XG4gICAgICAuLi5ldmVudCxcbiAgICAgIGJsb2NrczogZXZlbnQuYmxvY2tzLm1hcCgoYmxvY2spID0+IChibG9jay5fa2V5ID09PSBpbnNlcnRlZExpc3RCbG9jay5fa2V5ICYmIChsaXN0U3RhcnRCbG9ja0ZvdW5kID0gITApLCBhZGp1c3RMZXZlbCA/IGxpc3RTdGFydEJsb2NrRm91bmQgJiYgYWRqdXN0TGV2ZWwgJiYgaXNMaXN0QmxvY2soc25hcHNob3QuY29udGV4dCwgYmxvY2spID8ge1xuICAgICAgICAuLi5ibG9jayxcbiAgICAgICAgbGV2ZWw6IE1hdGgubWluKE1BWF9MSVNUX0xFVkVMLCBNYXRoLm1heCgxLCBibG9jay5sZXZlbCArIGxldmVsRGlmZmVyZW5jZSkpXG4gICAgICB9IDogKGxpc3RTdGFydEJsb2NrRm91bmQgJiYgKGFkanVzdExldmVsID0gITEpLCBibG9jaykgOiBibG9jaykpXG4gICAgfSldO1xuICB9XVxufSksIGluaGVyaXRMaXN0SXRlbSA9IGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LmJsb2Nrc1wiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgY29uc3QgZm9jdXNMaXN0QmxvY2sgPSBnZXRGb2N1c0xpc3RCbG9jayhzbmFwc2hvdCk7XG4gICAgaWYgKCFmb2N1c0xpc3RCbG9jayB8fCBpc0VtcHR5VGV4dEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIGZvY3VzTGlzdEJsb2NrLm5vZGUpKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IGZpcnN0SW5zZXJ0ZWRCbG9jayA9IGV2ZW50LmJsb2Nrcy5hdCgwKSwgc2Vjb25kSW5zZXJ0ZWRCbG9jayA9IGV2ZW50LmJsb2Nrcy5hdCgxKSwgaW5zZXJ0ZWRMaXN0QmxvY2sgPSBpc0xpc3RCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBmaXJzdEluc2VydGVkQmxvY2spID8gZmlyc3RJbnNlcnRlZEJsb2NrIDogaXNMaXN0QmxvY2soc25hcHNob3QuY29udGV4dCwgc2Vjb25kSW5zZXJ0ZWRCbG9jaykgPyBzZWNvbmRJbnNlcnRlZEJsb2NrIDogdm9pZCAwO1xuICAgIHJldHVybiAhaW5zZXJ0ZWRMaXN0QmxvY2sgfHwgZm9jdXNMaXN0QmxvY2subm9kZS5sZXZlbCAhPT0gaW5zZXJ0ZWRMaXN0QmxvY2subGV2ZWwgfHwgZm9jdXNMaXN0QmxvY2subm9kZS5saXN0SXRlbSA9PT0gaW5zZXJ0ZWRMaXN0QmxvY2subGlzdEl0ZW0gPyAhMSA6IHtcbiAgICAgIGxpc3RJdGVtOiBmb2N1c0xpc3RCbG9jay5ub2RlLmxpc3RJdGVtLFxuICAgICAgaW5zZXJ0ZWRMaXN0QmxvY2tcbiAgICB9O1xuICB9LFxuICBhY3Rpb25zOiBbKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9LCB7XG4gICAgbGlzdEl0ZW0sXG4gICAgaW5zZXJ0ZWRMaXN0QmxvY2tcbiAgfSkgPT4ge1xuICAgIGxldCBhZGp1c3RMaXN0SXRlbSA9ICEwLCBsaXN0U3RhcnRCbG9ja0ZvdW5kID0gITE7XG4gICAgcmV0dXJuIFtyYWlzZSh7XG4gICAgICAuLi5ldmVudCxcbiAgICAgIGJsb2NrczogZXZlbnQuYmxvY2tzLm1hcCgoYmxvY2spID0+IChibG9jay5fa2V5ID09PSBpbnNlcnRlZExpc3RCbG9jay5fa2V5ICYmIChsaXN0U3RhcnRCbG9ja0ZvdW5kID0gITApLCBhZGp1c3RMaXN0SXRlbSA/IGxpc3RTdGFydEJsb2NrRm91bmQgJiYgYWRqdXN0TGlzdEl0ZW0gJiYgaXNMaXN0QmxvY2soc25hcHNob3QuY29udGV4dCwgYmxvY2spID8ge1xuICAgICAgICAuLi5ibG9jayxcbiAgICAgICAgbGlzdEl0ZW06IGJsb2NrLmxldmVsID09PSBpbnNlcnRlZExpc3RCbG9jay5sZXZlbCA/IGxpc3RJdGVtIDogYmxvY2subGlzdEl0ZW1cbiAgICAgIH0gOiAobGlzdFN0YXJ0QmxvY2tGb3VuZCAmJiAoYWRqdXN0TGlzdEl0ZW0gPSAhMSksIGJsb2NrKSA6IGJsb2NrKSlcbiAgICB9KV07XG4gIH1dXG59KSwgaW5oZXJpdExpc3RQcm9wZXJ0aWVzID0gZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJpbnNlcnQuYmxvY2tcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGlmIChldmVudC5wbGFjZW1lbnQgIT09IFwiYXV0b1wiIHx8IGV2ZW50LmJsb2NrLl90eXBlICE9PSBzbmFwc2hvdC5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lIHx8IGV2ZW50LmJsb2NrLmxpc3RJdGVtICE9PSB2b2lkIDApXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgZm9jdXNMaXN0QmxvY2sgPSBnZXRGb2N1c0xpc3RCbG9jayhzbmFwc2hvdCk7XG4gICAgcmV0dXJuICFmb2N1c0xpc3RCbG9jayB8fCAhaXNFbXB0eVRleHRCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBmb2N1c0xpc3RCbG9jay5ub2RlKSA/ICExIDoge1xuICAgICAgbGV2ZWw6IGZvY3VzTGlzdEJsb2NrLm5vZGUubGV2ZWwsXG4gICAgICBsaXN0SXRlbTogZm9jdXNMaXN0QmxvY2subm9kZS5saXN0SXRlbVxuICAgIH07XG4gIH0sXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0sIHtcbiAgICBsZXZlbCxcbiAgICBsaXN0SXRlbVxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIC4uLmV2ZW50LFxuICAgIGJsb2NrOiB7XG4gICAgICAuLi5ldmVudC5ibG9jayxcbiAgICAgIGxldmVsLFxuICAgICAgbGlzdEl0ZW1cbiAgICB9XG4gIH0pXV1cbn0pLCBjb3JlTGlzdEJlaGF2aW9ycyA9IHtcbiAgY2xlYXJMaXN0T25CYWNrc3BhY2UsXG4gIHVuaW5kZW50TGlzdE9uQmFja3NwYWNlLFxuICBtZXJnZVRleHRJbnRvTGlzdE9uRGVsZXRlLFxuICBtZXJnZVRleHRJbnRvTGlzdE9uQmFja3NwYWNlLFxuICBkZWxldGluZ0xpc3RGcm9tU3RhcnQsXG4gIGNsZWFyTGlzdE9uRW50ZXIsXG4gIGluZGVudExpc3RPblRhYixcbiAgdW5pbmRlbnRMaXN0T25TaGlmdFRhYixcbiAgaW5oZXJpdExpc3RMZXZlbCxcbiAgaW5oZXJpdExpc3RJdGVtLFxuICBpbmhlcml0TGlzdFByb3BlcnRpZXNcbn0sIGNvcmVCZWhhdmlvcnNDb25maWcgPSBbY29yZUFubm90YXRpb25CZWhhdmlvcnMuYWRkQW5ub3RhdGlvbk9uQ29sbGFwc2VkU2VsZWN0aW9uLCBjb3JlRGVjb3JhdG9yQmVoYXZpb3JzLnN0cm9uZ1Nob3J0Y3V0LCBjb3JlRGVjb3JhdG9yQmVoYXZpb3JzLmVtU2hvcnRjdXQsIGNvcmVEZWNvcmF0b3JCZWhhdmlvcnMudW5kZXJsaW5lU2hvcnRjdXQsIGNvcmVEZWNvcmF0b3JCZWhhdmlvcnMuY29kZVNob3J0Y3V0LCAuLi5jb3JlRG5kQmVoYXZpb3JzLCBjb3JlQmxvY2tPYmplY3RCZWhhdmlvcnMuY2xpY2tpbmdBYm92ZUxvbmVseUJsb2NrT2JqZWN0LCBjb3JlQmxvY2tPYmplY3RCZWhhdmlvcnMuY2xpY2tpbmdCZWxvd0xvbmVseUJsb2NrT2JqZWN0LCBjb3JlQmxvY2tPYmplY3RCZWhhdmlvcnMuYXJyb3dEb3duT25Mb25lbHlCbG9ja09iamVjdCwgY29yZUJsb2NrT2JqZWN0QmVoYXZpb3JzLmFycm93VXBPbkxvbmVseUJsb2NrT2JqZWN0LCBjb3JlQmxvY2tPYmplY3RCZWhhdmlvcnMuYnJlYWtpbmdCbG9ja09iamVjdCwgY29yZUJsb2NrT2JqZWN0QmVoYXZpb3JzLmRlbGV0aW5nRW1wdHlUZXh0QmxvY2tBZnRlckJsb2NrT2JqZWN0LCBjb3JlQmxvY2tPYmplY3RCZWhhdmlvcnMuZGVsZXRpbmdFbXB0eVRleHRCbG9ja0JlZm9yZUJsb2NrT2JqZWN0LCBjb3JlTGlzdEJlaGF2aW9ycy5jbGVhckxpc3RPbkJhY2tzcGFjZSwgY29yZUxpc3RCZWhhdmlvcnMudW5pbmRlbnRMaXN0T25CYWNrc3BhY2UsIGNvcmVMaXN0QmVoYXZpb3JzLm1lcmdlVGV4dEludG9MaXN0T25EZWxldGUsIGNvcmVMaXN0QmVoYXZpb3JzLm1lcmdlVGV4dEludG9MaXN0T25CYWNrc3BhY2UsIGNvcmVMaXN0QmVoYXZpb3JzLmRlbGV0aW5nTGlzdEZyb21TdGFydCwgY29yZUxpc3RCZWhhdmlvcnMuY2xlYXJMaXN0T25FbnRlciwgY29yZUxpc3RCZWhhdmlvcnMuaW5kZW50TGlzdE9uVGFiLCBjb3JlTGlzdEJlaGF2aW9ycy51bmluZGVudExpc3RPblNoaWZ0VGFiLCBjb3JlTGlzdEJlaGF2aW9ycy5pbmhlcml0TGlzdExldmVsLCBjb3JlTGlzdEJlaGF2aW9ycy5pbmhlcml0TGlzdEl0ZW0sIGNvcmVMaXN0QmVoYXZpb3JzLmluaGVyaXRMaXN0UHJvcGVydGllcywgY29yZUluc2VydEJyZWFrQmVoYXZpb3JzLmJyZWFraW5nQXRUaGVFbmRPZlRleHRCbG9jaywgY29yZUluc2VydEJyZWFrQmVoYXZpb3JzLmJyZWFraW5nQXRUaGVTdGFydE9mVGV4dEJsb2NrLCBjb3JlSW5zZXJ0QnJlYWtCZWhhdmlvcnMuYnJlYWtpbmdFbnRpcmVEb2N1bWVudCwgY29yZUluc2VydEJyZWFrQmVoYXZpb3JzLmJyZWFraW5nRW50aXJlQmxvY2tzLCBjb3JlSW5zZXJ0QnJlYWtCZWhhdmlvcnMuYnJlYWtpbmdJbmxpbmVPYmplY3RdLm1hcCgoYmVoYXZpb3IpID0+ICh7XG4gIGJlaGF2aW9yLFxuICBwcmlvcml0eTogY29yZVByaW9yaXR5XG59KSksIGFic3RyYWN0QW5ub3RhdGlvbkJlaGF2aW9ycyA9IFtkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImFubm90YXRpb24uc2V0XCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBjb25zdCBibG9ja0tleSA9IGV2ZW50LmF0WzBdLl9rZXksIG1hcmtEZWZLZXkgPSBldmVudC5hdFsyXS5fa2V5LCBibG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHtcbiAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghYmxvY2spXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgdXBkYXRlZE1hcmtEZWZzID0gYmxvY2subm9kZS5tYXJrRGVmcz8ubWFwKChtYXJrRGVmKSA9PiBtYXJrRGVmLl9rZXkgPT09IG1hcmtEZWZLZXkgPyB7XG4gICAgICAuLi5tYXJrRGVmLFxuICAgICAgLi4uZXZlbnQucHJvcHNcbiAgICB9IDogbWFya0RlZik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJsb2NrS2V5LFxuICAgICAgdXBkYXRlZE1hcmtEZWZzXG4gICAgfTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgYmxvY2tLZXksXG4gICAgdXBkYXRlZE1hcmtEZWZzXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJibG9jay5zZXRcIixcbiAgICBhdDogW3tcbiAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgfV0sXG4gICAgcHJvcHM6IHtcbiAgICAgIG1hcmtEZWZzOiB1cGRhdGVkTWFya0RlZnNcbiAgICB9XG4gIH0pXV1cbn0pLCBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImFubm90YXRpb24udG9nZ2xlXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IGlzQWN0aXZlQW5ub3RhdGlvbihldmVudC5hbm5vdGF0aW9uLm5hbWUpKHNuYXBzaG90KSxcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImFubm90YXRpb24ucmVtb3ZlXCIsXG4gICAgYW5ub3RhdGlvbjogZXZlbnQuYW5ub3RhdGlvblxuICB9KV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJhbm5vdGF0aW9uLnRvZ2dsZVwiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiAhaXNBY3RpdmVBbm5vdGF0aW9uKGV2ZW50LmFubm90YXRpb24ubmFtZSkoc25hcHNob3QpLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiYW5ub3RhdGlvbi5hZGRcIixcbiAgICBhbm5vdGF0aW9uOiBldmVudC5hbm5vdGF0aW9uXG4gIH0pXV1cbn0pXSwgYWJzdHJhY3REZWNvcmF0b3JCZWhhdmlvcnMgPSBbZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJkZWNvcmF0b3IudG9nZ2xlXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IGlzQWN0aXZlRGVjb3JhdG9yKGV2ZW50LmRlY29yYXRvcikoc25hcHNob3QpLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVjb3JhdG9yLnJlbW92ZVwiLFxuICAgIGRlY29yYXRvcjogZXZlbnQuZGVjb3JhdG9yXG4gIH0pXV1cbn0pLCBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImRlY29yYXRvci50b2dnbGVcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IG1hbnVhbFNlbGVjdGlvbiA9IGV2ZW50LmF0ID8gYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24oe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIG9mZnNldHM6IGV2ZW50LmF0XG4gICAgfSkgOiBudWxsO1xuICAgIHJldHVybiBtYW51YWxTZWxlY3Rpb24gPyAhaXNBY3RpdmVEZWNvcmF0b3IoZXZlbnQuZGVjb3JhdG9yKSh7XG4gICAgICAuLi5zbmFwc2hvdCxcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgc2VsZWN0aW9uOiBtYW51YWxTZWxlY3Rpb25cbiAgICAgIH1cbiAgICB9KSA6ICFpc0FjdGl2ZURlY29yYXRvcihldmVudC5kZWNvcmF0b3IpKHNuYXBzaG90KTtcbiAgfSxcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICAuLi5ldmVudCxcbiAgICB0eXBlOiBcImRlY29yYXRvci5hZGRcIlxuICB9KV1dXG59KV0sIGFic3RyYWN0RGVsZXRlQmVoYXZpb3JzID0gW2RlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiZGVsZXRlLmJhY2t3YXJkXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uID8ge1xuICAgIHNlbGVjdGlvbjogc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb25cbiAgfSA6ICExLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9LCB7XG4gICAgc2VsZWN0aW9uXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJkZWxldGVcIixcbiAgICBkaXJlY3Rpb246IFwiYmFja3dhcmRcIixcbiAgICB1bml0OiBldmVudC51bml0LFxuICAgIGF0OiBzZWxlY3Rpb25cbiAgfSldXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiZGVsZXRlXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBpZiAoZXZlbnQuZGlyZWN0aW9uICE9PSBcImJhY2t3YXJkXCIpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgcHJldmlvdXNCbG9jayA9IGdldFByZXZpb3VzQmxvY2soc25hcHNob3QpLCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KTtcbiAgICBpZiAoIXByZXZpb3VzQmxvY2sgfHwgIWZvY3VzVGV4dEJsb2NrIHx8ICFpc0F0VGhlU3RhcnRPZkJsb2NrKGZvY3VzVGV4dEJsb2NrKShzbmFwc2hvdCkpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgcHJldmlvdXNCbG9ja0VuZFBvaW50ID0gZ2V0QmxvY2tFbmRQb2ludCh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IHByZXZpb3VzQmxvY2tcbiAgICB9KTtcbiAgICByZXR1cm4gaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgcHJldmlvdXNCbG9jay5ub2RlKSA/IHtcbiAgICAgIHByZXZpb3VzQmxvY2tFbmRQb2ludCxcbiAgICAgIGZvY3VzVGV4dEJsb2NrXG4gICAgfSA6ICExO1xuICB9LFxuICBhY3Rpb25zOiBbKF8sIHtcbiAgICBwcmV2aW91c0Jsb2NrRW5kUG9pbnQsXG4gICAgZm9jdXNUZXh0QmxvY2tcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImRlbGV0ZS5ibG9ja1wiLFxuICAgIGF0OiBmb2N1c1RleHRCbG9jay5wYXRoXG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICBhdDoge1xuICAgICAgYW5jaG9yOiBwcmV2aW91c0Jsb2NrRW5kUG9pbnQsXG4gICAgICBmb2N1czogcHJldmlvdXNCbG9ja0VuZFBvaW50XG4gICAgfVxuICB9KSwgcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2s6IGZvY3VzVGV4dEJsb2NrLm5vZGUsXG4gICAgcGxhY2VtZW50OiBcImF1dG9cIixcbiAgICBzZWxlY3Q6IFwic3RhcnRcIlxuICB9KV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJkZWxldGUuZm9yd2FyZFwiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdFxuICB9KSA9PiBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbiA/IHtcbiAgICBzZWxlY3Rpb246IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uXG4gIH0gOiAhMSxcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSwge1xuICAgIHNlbGVjdGlvblxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgZGlyZWN0aW9uOiBcImZvcndhcmRcIixcbiAgICB1bml0OiBldmVudC51bml0LFxuICAgIGF0OiBzZWxlY3Rpb25cbiAgfSldXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiZGVsZXRlXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBpZiAoZXZlbnQuZGlyZWN0aW9uICE9PSBcImZvcndhcmRcIilcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBuZXh0QmxvY2sgPSBnZXROZXh0QmxvY2soc25hcHNob3QpLCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KTtcbiAgICByZXR1cm4gIW5leHRCbG9jayB8fCAhZm9jdXNUZXh0QmxvY2sgfHwgIWlzQXRUaGVFbmRPZkJsb2NrKGZvY3VzVGV4dEJsb2NrKShzbmFwc2hvdCkgfHwgIWlzVGV4dEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIG5leHRCbG9jay5ub2RlKSA/ICExIDoge1xuICAgICAgbmV4dEJsb2NrXG4gICAgfTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgbmV4dEJsb2NrXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJkZWxldGUuYmxvY2tcIixcbiAgICBhdDogbmV4dEJsb2NrLnBhdGhcbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC5ibG9ja1wiLFxuICAgIGJsb2NrOiBuZXh0QmxvY2subm9kZSxcbiAgICBwbGFjZW1lbnQ6IFwiYXV0b1wiLFxuICAgIHNlbGVjdDogXCJub25lXCJcbiAgfSldXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiZGVsZXRlLmJsb2NrXCIsXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJkZWxldGVcIixcbiAgICBhdDoge1xuICAgICAgYW5jaG9yOiB7XG4gICAgICAgIHBhdGg6IGV2ZW50LmF0LFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH0sXG4gICAgICBmb2N1czoge1xuICAgICAgICBwYXRoOiBldmVudC5hdCxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9XG4gICAgfVxuICB9KV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJkZWxldGUuY2hpbGRcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGZvY3VzQ2hpbGQgPSBnZXRGb2N1c0NoaWxkJDEoe1xuICAgICAgLi4uc25hcHNob3QsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgIHNlbGVjdGlvbjoge1xuICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgcGF0aDogZXZlbnQuYXQsXG4gICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgICBwYXRoOiBldmVudC5hdCxcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmb2N1c0NoaWxkID8gaXNTcGFuKHNuYXBzaG90LmNvbnRleHQsIGZvY3VzQ2hpbGQubm9kZSkgPyB7XG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogZXZlbnQuYXQsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgcGF0aDogZXZlbnQuYXQsXG4gICAgICAgICAgb2Zmc2V0OiBmb2N1c0NoaWxkLm5vZGUudGV4dC5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogZXZlbnQuYXQsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgcGF0aDogZXZlbnQuYXQsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDogITE7XG4gIH0sXG4gIGFjdGlvbnM6IFsoXywge1xuICAgIHNlbGVjdGlvblxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgYXQ6IHNlbGVjdGlvblxuICB9KV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJkZWxldGUudGV4dFwiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24oe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIG9mZnNldHM6IGV2ZW50LmF0XG4gICAgfSk7XG4gICAgaWYgKCFzZWxlY3Rpb24pXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgdHJpbW1lZFNlbGVjdGlvbiA9IGdldFRyaW1tZWRTZWxlY3Rpb24oe1xuICAgICAgLi4uc25hcHNob3QsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgIHZhbHVlOiBzbmFwc2hvdC5jb250ZXh0LnZhbHVlLFxuICAgICAgICBzZWxlY3Rpb25cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHJpbW1lZFNlbGVjdGlvbiA/IHtcbiAgICAgIHNlbGVjdGlvbjogdHJpbW1lZFNlbGVjdGlvblxuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgc2VsZWN0aW9uXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJkZWxldGVcIixcbiAgICBhdDogc2VsZWN0aW9uXG4gIH0pXV1cbn0pXSwgYWJzdHJhY3REZXNlcmlhbGl6ZUJlaGF2aW9ycyA9IFtcbiAgZGVmaW5lQmVoYXZpb3Ioe1xuICAgIG9uOiBcImRlc2VyaWFsaXplXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBldmVudFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHBvcnRhYmxlVGV4dCA9IGV2ZW50Lm9yaWdpbkV2ZW50Lm9yaWdpbkV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIpO1xuICAgICAgaWYgKHBvcnRhYmxlVGV4dClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcImRlc2VyaWFsaXplLmRhdGFcIixcbiAgICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi94LXBvcnRhYmxlLXRleHRcIixcbiAgICAgICAgICBkYXRhOiBwb3J0YWJsZVRleHQsXG4gICAgICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50XG4gICAgICAgIH07XG4gICAgICBjb25zdCBqc29uID0gZXZlbnQub3JpZ2luRXZlbnQub3JpZ2luRXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgaWYgKGpzb24pXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJkZXNlcmlhbGl6ZS5kYXRhXCIsXG4gICAgICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIGRhdGE6IGpzb24sXG4gICAgICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50XG4gICAgICAgIH07XG4gICAgICBjb25zdCBodG1sID0gZXZlbnQub3JpZ2luRXZlbnQub3JpZ2luRXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0L2h0bWxcIik7XG4gICAgICBpZiAoaHRtbClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcImRlc2VyaWFsaXplLmRhdGFcIixcbiAgICAgICAgICBtaW1lVHlwZTogXCJ0ZXh0L2h0bWxcIixcbiAgICAgICAgICBkYXRhOiBodG1sLFxuICAgICAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICAgICAgICB9O1xuICAgICAgY29uc3QgdGV4dCA9IGV2ZW50Lm9yaWdpbkV2ZW50Lm9yaWdpbkV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dC9wbGFpblwiKTtcbiAgICAgIHJldHVybiB0ZXh0ID8ge1xuICAgICAgICB0eXBlOiBcImRlc2VyaWFsaXplLmRhdGFcIixcbiAgICAgICAgbWltZVR5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgICAgICBkYXRhOiB0ZXh0LFxuICAgICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnRcbiAgICAgIH0gOiAhMTtcbiAgICB9LFxuICAgIGFjdGlvbnM6IFsoXywgZGVzZXJpYWxpemVFdmVudCkgPT4gW3JhaXNlKGRlc2VyaWFsaXplRXZlbnQpXV1cbiAgfSksXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJkZXNlcmlhbGl6ZVwiLFxuICAgIGFjdGlvbnM6IFsoe1xuICAgICAgZXZlbnRcbiAgICB9KSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJkZXNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgbWltZVR5cGU6IFwiKi8qXCIsXG4gICAgICByZWFzb246IFwiTm8gQmVoYXZpb3Igd2FzIGFibGUgdG8gaGFuZGxlIHRoZSBpbmNvbWluZyBkYXRhXCIsXG4gICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnRcbiAgICB9KV1dXG4gIH0pLFxuICBkZWZpbmVCZWhhdmlvcih7XG4gICAgb246IFwiZGVzZXJpYWxpemUuZGF0YVwiLFxuICAgIGd1YXJkOiAoe1xuICAgICAgc25hcHNob3QsXG4gICAgICBldmVudFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGNvbnZlcnRlciA9IHNuYXBzaG90LmNvbnRleHQuY29udmVydGVycy5maW5kKChjb252ZXJ0ZXIyKSA9PiBjb252ZXJ0ZXIyLm1pbWVUeXBlID09PSBldmVudC5taW1lVHlwZSk7XG4gICAgICByZXR1cm4gY29udmVydGVyID8gY29udmVydGVyLmRlc2VyaWFsaXplKHtcbiAgICAgICAgc25hcHNob3QsXG4gICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJkZXNlcmlhbGl6ZVwiLFxuICAgICAgICAgIGRhdGE6IGV2ZW50LmRhdGFcbiAgICAgICAgfVxuICAgICAgfSkgOiAhMTtcbiAgICB9LFxuICAgIGFjdGlvbnM6IFsoe1xuICAgICAgZXZlbnRcbiAgICB9LCBkZXNlcmlhbGl6ZUV2ZW50KSA9PiBbcmFpc2Uoe1xuICAgICAgLi4uZGVzZXJpYWxpemVFdmVudCxcbiAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICAgIH0pXV1cbiAgfSksXG4gIC8qKlxuICAgKiBJZiB3ZSBhcmUgcGFzdGluZyB0ZXh0L3BsYWluIGludG8gYSB0ZXh0IGJsb2NrIHRoZW4gd2UgY2FuIHByb2JhYmx5XG4gICAqIGFzc3VtZSB0aGF0IHRoZSBpbnRlbmRlZCBiZWhhdmlvciBpcyB0aGF0IHRoZSBwYXN0ZWQgdGV4dCBpbmhlcml0c1xuICAgKiBmb3JtYXR0aW5nIGZyb20gdGhlIHRleHQgaXQncyBwYXN0ZWQgaW50by5cbiAgICovXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJkZXNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiLFxuICAgIGd1YXJkOiAoe1xuICAgICAgc25hcHNob3QsXG4gICAgICBldmVudFxuICAgIH0pID0+IHtcbiAgICAgIGlmIChnZXRGb2N1c1RleHRCbG9jayhzbmFwc2hvdCkgJiYgZXZlbnQubWltZVR5cGUgPT09IFwidGV4dC9wbGFpblwiICYmIGV2ZW50Lm9yaWdpbkV2ZW50LnR5cGUgPT09IFwiY2xpcGJvYXJkLnBhc3RlXCIpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlRGVjb3JhdG9ycyA9IGdldEFjdGl2ZURlY29yYXRvcnMoc25hcHNob3QpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFjdGl2ZUFubm90YXRpb25zOiBnZXRBY3RpdmVBbm5vdGF0aW9ucyhzbmFwc2hvdCksXG4gICAgICAgICAgYWN0aXZlRGVjb3JhdG9ycyxcbiAgICAgICAgICB0ZXh0UnVuczogZXZlbnQuZGF0YS5mbGF0TWFwKChibG9jaykgPT4gaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgYmxvY2spID8gW2dldFRleHRCbG9ja1RleHQoYmxvY2spXSA6IFtdKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuICExO1xuICAgIH0sXG4gICAgYWN0aW9uczogWyhfLCB7XG4gICAgICBhY3RpdmVBbm5vdGF0aW9ucyxcbiAgICAgIGFjdGl2ZURlY29yYXRvcnMsXG4gICAgICB0ZXh0UnVuc1xuICAgIH0pID0+IHRleHRSdW5zLmZsYXRNYXAoKHRleHRSdW4sIGluZGV4KSA9PiBpbmRleCAhPT0gdGV4dFJ1bnMubGVuZ3RoIC0gMSA/IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImluc2VydC5zcGFuXCIsXG4gICAgICB0ZXh0OiB0ZXh0UnVuLFxuICAgICAgZGVjb3JhdG9yczogYWN0aXZlRGVjb3JhdG9ycyxcbiAgICAgIGFubm90YXRpb25zOiBhY3RpdmVBbm5vdGF0aW9ucy5tYXAoKHtcbiAgICAgICAgX2tleSxcbiAgICAgICAgX3R5cGUsXG4gICAgICAgIC4uLnZhbHVlXG4gICAgICB9KSA9PiAoe1xuICAgICAgICBuYW1lOiBfdHlwZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pKVxuICAgIH0pLCByYWlzZSh7XG4gICAgICB0eXBlOiBcImluc2VydC5icmVha1wiXG4gICAgfSldIDogW3JhaXNlKHtcbiAgICAgIHR5cGU6IFwiaW5zZXJ0LnNwYW5cIixcbiAgICAgIHRleHQ6IHRleHRSdW4sXG4gICAgICBkZWNvcmF0b3JzOiBhY3RpdmVEZWNvcmF0b3JzLFxuICAgICAgYW5ub3RhdGlvbnM6IGFjdGl2ZUFubm90YXRpb25zLm1hcCgoe1xuICAgICAgICBfa2V5LFxuICAgICAgICBfdHlwZSxcbiAgICAgICAgLi4udmFsdWVcbiAgICAgIH0pID0+ICh7XG4gICAgICAgIG5hbWU6IF90eXBlLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSkpXG4gICAgfSldKV1cbiAgfSksXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJkZXNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiLFxuICAgIGFjdGlvbnM6IFsoe1xuICAgICAgZXZlbnRcbiAgICB9KSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJpbnNlcnQuYmxvY2tzXCIsXG4gICAgICBibG9ja3M6IGV2ZW50LmRhdGEsXG4gICAgICBwbGFjZW1lbnQ6IFwiYXV0b1wiXG4gICAgfSldXVxuICB9KSxcbiAgZGVmaW5lQmVoYXZpb3Ioe1xuICAgIG9uOiBcImRlc2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBldmVudFxuICAgIH0pID0+IHtcbiAgICAgIGlmIChldmVudC5taW1lVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXBvcnRhYmxlLXRleHRcIikge1xuICAgICAgICBjb25zdCBqc29uID0gZXZlbnQub3JpZ2luRXZlbnQub3JpZ2luRXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICBpZiAoanNvbilcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJkZXNlcmlhbGl6ZS5kYXRhXCIsXG4gICAgICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICBkYXRhOiBqc29uLFxuICAgICAgICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50XG4gICAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChldmVudC5taW1lVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgICAgY29uc3QgaHRtbCA9IGV2ZW50Lm9yaWdpbkV2ZW50Lm9yaWdpbkV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dC9odG1sXCIpO1xuICAgICAgICBpZiAoaHRtbClcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJkZXNlcmlhbGl6ZS5kYXRhXCIsXG4gICAgICAgICAgICBtaW1lVHlwZTogXCJ0ZXh0L2h0bWxcIixcbiAgICAgICAgICAgIGRhdGE6IGh0bWwsXG4gICAgICAgICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnRcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKGV2ZW50Lm1pbWVUeXBlID09PSBcInRleHQvaHRtbFwiKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBldmVudC5vcmlnaW5FdmVudC5vcmlnaW5FdmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHQvcGxhaW5cIik7XG4gICAgICAgIGlmICh0ZXh0KVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcImRlc2VyaWFsaXplLmRhdGFcIixcbiAgICAgICAgICAgIG1pbWVUeXBlOiBcInRleHQvcGxhaW5cIixcbiAgICAgICAgICAgIGRhdGE6IHRleHQsXG4gICAgICAgICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnRcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuICExO1xuICAgIH0sXG4gICAgYWN0aW9uczogWyhfLCBkZXNlcmlhbGl6ZURhdGFFdmVudCkgPT4gW3JhaXNlKGRlc2VyaWFsaXplRGF0YUV2ZW50KV1dXG4gIH0pLFxuICBkZWZpbmVCZWhhdmlvcih7XG4gICAgb246IFwiZGVzZXJpYWxpemF0aW9uLmZhaWx1cmVcIixcbiAgICBhY3Rpb25zOiBbKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gW3tcbiAgICAgIHR5cGU6IFwiZWZmZWN0XCIsXG4gICAgICBlZmZlY3Q6ICgpID0+IHtcbiAgICAgICAgY29uc29sZS53YXJuKGBEZXNlcmlhbGl6YXRpb24gb2YgJHtldmVudC5taW1lVHlwZX0gZmFpbGVkIHdpdGggcmVhc29uIFwiJHtldmVudC5yZWFzb259XCJgKTtcbiAgICAgIH1cbiAgICB9XV1cbiAgfSlcbl0sIGFic3RyYWN0SW5zZXJ0QmVoYXZpb3JzID0gW2RlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LmJsb2Nrc1wiLFxuICBndWFyZDogKHtcbiAgICBldmVudFxuICB9KSA9PiBldmVudC5wbGFjZW1lbnQgPT09IFwiYmVmb3JlXCIsXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0pID0+IGV2ZW50LmJsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2ssXG4gICAgcGxhY2VtZW50OiBpbmRleCA9PT0gMCA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCIsXG4gICAgc2VsZWN0OiBldmVudC5zZWxlY3QgPz8gXCJlbmRcIlxuICB9KSldXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJpbnNlcnQuYmxvY2tzXCIsXG4gIGd1YXJkOiAoe1xuICAgIGV2ZW50XG4gIH0pID0+IGV2ZW50LnBsYWNlbWVudCA9PT0gXCJhZnRlclwiLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBldmVudC5ibG9ja3MubWFwKChibG9jaykgPT4gcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2ssXG4gICAgcGxhY2VtZW50OiBcImFmdGVyXCIsXG4gICAgc2VsZWN0OiBldmVudC5zZWxlY3QgPz8gXCJlbmRcIlxuICB9KSldXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJpbnNlcnQuYmxvY2tzXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBpZiAoZXZlbnQucGxhY2VtZW50ICE9PSBcImF1dG9cIilcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KTtcbiAgICByZXR1cm4gZm9jdXNUZXh0QmxvY2sgPyB7XG4gICAgICBmb2N1c1RleHRCbG9ja1xuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSwge1xuICAgIGZvY3VzVGV4dEJsb2NrXG4gIH0pID0+IGV2ZW50LmJsb2Nrcy5sZW5ndGggPT09IDEgPyBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2s6IGV2ZW50LmJsb2Nrc1swXSxcbiAgICBwbGFjZW1lbnQ6IFwiYXV0b1wiLFxuICAgIHNlbGVjdDogZXZlbnQuc2VsZWN0ID8/IFwiZW5kXCJcbiAgfSldIDogaXNFbXB0eVRleHRCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBmb2N1c1RleHRCbG9jay5ub2RlKSA/IGV2ZW50LmJsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2ssXG4gICAgcGxhY2VtZW50OiBpbmRleCA9PT0gMCA/IFwiYXV0b1wiIDogXCJhZnRlclwiLFxuICAgIHNlbGVjdDogZXZlbnQuc2VsZWN0ID8/IFwiZW5kXCJcbiAgfSkpIDogZXZlbnQuYmxvY2tzLmZsYXRNYXAoKGJsb2NrLCBpbmRleCkgPT4gaW5kZXggPT09IDAgPyBbcmFpc2Uoe1xuICAgIHR5cGU6IFwic3BsaXRcIlxuICB9KSwgcmFpc2Uoe1xuICAgIHR5cGU6IFwic2VsZWN0LnByZXZpb3VzIGJsb2NrXCIsXG4gICAgc2VsZWN0OiBcImVuZFwiXG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJpbnNlcnQuYmxvY2tcIixcbiAgICBibG9jayxcbiAgICBwbGFjZW1lbnQ6IFwiYXV0b1wiLFxuICAgIHNlbGVjdDogZXZlbnQuc2VsZWN0ID8/IFwiZW5kXCJcbiAgfSldIDogaW5kZXggPT09IGV2ZW50LmJsb2Nrcy5sZW5ndGggLSAxID8gW3JhaXNlKHtcbiAgICB0eXBlOiBcInNlbGVjdC5uZXh0IGJsb2NrXCIsXG4gICAgc2VsZWN0OiBcInN0YXJ0XCJcbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC5ibG9ja1wiLFxuICAgIGJsb2NrLFxuICAgIHBsYWNlbWVudDogXCJhdXRvXCIsXG4gICAgc2VsZWN0OiBldmVudC5zZWxlY3QgPz8gXCJlbmRcIlxuICB9KV0gOiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2ssXG4gICAgcGxhY2VtZW50OiBcImFmdGVyXCIsXG4gICAgc2VsZWN0OiBldmVudC5zZWxlY3QgPz8gXCJlbmRcIlxuICB9KV0pXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LmJsb2Nrc1wiLFxuICBndWFyZDogKHtcbiAgICBldmVudFxuICB9KSA9PiBldmVudC5wbGFjZW1lbnQgPT09IFwiYXV0b1wiLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBldmVudC5ibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IHJhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC5ibG9ja1wiLFxuICAgIGJsb2NrLFxuICAgIHBsYWNlbWVudDogaW5kZXggPT09IDAgPyBcImF1dG9cIiA6IFwiYWZ0ZXJcIixcbiAgICBzZWxlY3Q6IGV2ZW50LnNlbGVjdCA/PyBcImVuZFwiXG4gIH0pKV1cbn0pLCBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImluc2VydC5icmVha1wiLFxuICBhY3Rpb25zOiBbKCkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInNwbGl0XCJcbiAgfSldXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5zZXJ0LnNvZnQgYnJlYWtcIixcbiAgYWN0aW9uczogWygpID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJpbnNlcnQudGV4dFwiLFxuICAgIHRleHQ6IGBcbmBcbiAgfSldXVxufSldLCBhYnN0cmFjdEtleWJvYXJkQmVoYXZpb3JzID0gW1xuICAvKipcbiAgICogQWxsb3cgcmFpc2luZyBhbiBgaW5zZXJ0LmJyZWFrYCBldmVudCB3aGVuIHByZXNzaW5nIEVudGVyIG9uIGFuIGlubGluZVxuICAgKiBvYmplY3QuXG4gICAqL1xuICBkZWZpbmVCZWhhdmlvcih7XG4gICAgb246IFwia2V5Ym9hcmQua2V5ZG93blwiLFxuICAgIGd1YXJkOiAoe1xuICAgICAgc25hcHNob3QsXG4gICAgICBldmVudFxuICAgIH0pID0+IGRlZmF1bHRLZXlib2FyZFNob3J0Y3V0cy5icmVhay5ndWFyZChldmVudC5vcmlnaW5FdmVudCkgJiYgaXNTZWxlY3Rpb25Db2xsYXBzZWQkMShzbmFwc2hvdCkgJiYgZ2V0Rm9jdXNJbmxpbmVPYmplY3Qoc25hcHNob3QpLFxuICAgIGFjdGlvbnM6IFsoKSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJpbnNlcnQuYnJlYWtcIlxuICAgIH0pXV1cbiAgfSksXG4gIC8qKlxuICAgKiBPbiBXZWJLaXQsIFNoaWZ0K0VudGVyIHJlc3VsdHMgaW4gYW4gYGluc2VydFBhcmFncmFwaGAgaW5wdXQgZXZlbnQgcmF0aGVyXG4gICAqIHRoYW4gYW4gYGluc2VydExpbmVCcmVha2AgaW5wdXQgZXZlbnQuIFRoaXMgQmVoYXZpb3IgbWFrZXMgc3VyZSB3ZSBjYXRjaFxuICAgKiB0aGF0IGBrZXlib2FyZC5rZXlkb3duYCBldmVudCBiZWZvcmVoYW5kIGFuZCByYWlzZSBhbiBgaW5zZXJ0LnNvZnQgYnJlYWtgIG1hbnVhbGx5LlxuICAgKi9cbiAgZGVmaW5lQmVoYXZpb3Ioe1xuICAgIG9uOiBcImtleWJvYXJkLmtleWRvd25cIixcbiAgICBndWFyZDogKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gZGVmYXVsdEtleWJvYXJkU2hvcnRjdXRzLmxpbmVCcmVhay5ndWFyZChldmVudC5vcmlnaW5FdmVudCksXG4gICAgYWN0aW9uczogWygpID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImluc2VydC5zb2Z0IGJyZWFrXCJcbiAgICB9KV1dXG4gIH0pLFxuICAvKipcbiAgICogTWFudWFsIGhhbmRsaW5nIG9mIHVuZG8gc2hvcnRjdXRzLlxuICAgKi9cbiAgZGVmaW5lQmVoYXZpb3Ioe1xuICAgIG9uOiBcImtleWJvYXJkLmtleWRvd25cIixcbiAgICBndWFyZDogKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gZGVmYXVsdEtleWJvYXJkU2hvcnRjdXRzLmhpc3RvcnkudW5kby5ndWFyZChldmVudC5vcmlnaW5FdmVudCksXG4gICAgYWN0aW9uczogWygpID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImhpc3RvcnkudW5kb1wiXG4gICAgfSldXVxuICB9KSxcbiAgLyoqXG4gICAqIE1hbnVhbCBoYW5kbGluZyBvZiByZWRvIHNob3J0Y3V0cy5cbiAgICovXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJrZXlib2FyZC5rZXlkb3duXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBldmVudFxuICAgIH0pID0+IGRlZmF1bHRLZXlib2FyZFNob3J0Y3V0cy5oaXN0b3J5LnJlZG8uZ3VhcmQoZXZlbnQub3JpZ2luRXZlbnQpLFxuICAgIGFjdGlvbnM6IFsoKSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJoaXN0b3J5LnJlZG9cIlxuICAgIH0pXV1cbiAgfSlcbl0sIGFic3RyYWN0TGlzdEl0ZW1CZWhhdmlvcnMgPSBbZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJsaXN0IGl0ZW0uYWRkXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHNuYXBzaG90LmNvbnRleHQuc2NoZW1hLmxpc3RzLnNvbWUoKGxpc3QpID0+IGxpc3QubmFtZSA9PT0gZXZlbnQubGlzdEl0ZW0pID8ge1xuICAgIHNlbGVjdGVkVGV4dEJsb2NrczogZ2V0U2VsZWN0ZWRUZXh0QmxvY2tzKHNuYXBzaG90KVxuICB9IDogITEsXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0sIHtcbiAgICBzZWxlY3RlZFRleHRCbG9ja3NcbiAgfSkgPT4gc2VsZWN0ZWRUZXh0QmxvY2tzLm1hcCgoYmxvY2spID0+IHJhaXNlKHtcbiAgICB0eXBlOiBcImJsb2NrLnNldFwiLFxuICAgIGF0OiBibG9jay5wYXRoLFxuICAgIHByb3BzOiB7XG4gICAgICBsZXZlbDogYmxvY2subm9kZS5sZXZlbCA/PyAxLFxuICAgICAgbGlzdEl0ZW06IGV2ZW50Lmxpc3RJdGVtXG4gICAgfVxuICB9KSldXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJsaXN0IGl0ZW0ucmVtb3ZlXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+ICh7XG4gICAgc2VsZWN0ZWRUZXh0QmxvY2tzOiBnZXRTZWxlY3RlZFRleHRCbG9ja3Moc25hcHNob3QpXG4gIH0pLFxuICBhY3Rpb25zOiBbKF8sIHtcbiAgICBzZWxlY3RlZFRleHRCbG9ja3NcbiAgfSkgPT4gc2VsZWN0ZWRUZXh0QmxvY2tzLm1hcCgoYmxvY2spID0+IHJhaXNlKHtcbiAgICB0eXBlOiBcImJsb2NrLnVuc2V0XCIsXG4gICAgYXQ6IGJsb2NrLnBhdGgsXG4gICAgcHJvcHM6IFtcImxldmVsXCIsIFwibGlzdEl0ZW1cIl1cbiAgfSkpXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwibGlzdCBpdGVtLnRvZ2dsZVwiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiBpc0FjdGl2ZUxpc3RJdGVtKGV2ZW50Lmxpc3RJdGVtKShzbmFwc2hvdCksXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJsaXN0IGl0ZW0ucmVtb3ZlXCIsXG4gICAgbGlzdEl0ZW06IGV2ZW50Lmxpc3RJdGVtXG4gIH0pXV1cbn0pLCBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImxpc3QgaXRlbS50b2dnbGVcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4gIWlzQWN0aXZlTGlzdEl0ZW0oZXZlbnQubGlzdEl0ZW0pKHNuYXBzaG90KSxcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImxpc3QgaXRlbS5hZGRcIixcbiAgICBsaXN0SXRlbTogZXZlbnQubGlzdEl0ZW1cbiAgfSldXVxufSldLCBhYnN0cmFjdE1vdmVCZWhhdmlvcnMgPSBbZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJtb3ZlLmJsb2NrIHVwXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBjb25zdCBwcmV2aW91c0Jsb2NrID0gZ2V0UHJldmlvdXNCbG9jayh7XG4gICAgICAuLi5zbmFwc2hvdCxcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgICBwYXRoOiBldmVudC5hdCxcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICAgIHBhdGg6IGV2ZW50LmF0LFxuICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByZXZpb3VzQmxvY2sgPyB7XG4gICAgICBwcmV2aW91c0Jsb2NrXG4gICAgfSA6ICExO1xuICB9LFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9LCB7XG4gICAgcHJldmlvdXNCbG9ja1xuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwibW92ZS5ibG9ja1wiLFxuICAgIGF0OiBldmVudC5hdCxcbiAgICB0bzogcHJldmlvdXNCbG9jay5wYXRoXG4gIH0pXV1cbn0pLCBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcIm1vdmUuYmxvY2sgZG93blwiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgY29uc3QgbmV4dEJsb2NrID0gZ2V0TmV4dEJsb2NrKHtcbiAgICAgIC4uLnNuYXBzaG90LFxuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5zbmFwc2hvdC5jb250ZXh0LFxuICAgICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgIHBhdGg6IGV2ZW50LmF0LFxuICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmb2N1czoge1xuICAgICAgICAgICAgcGF0aDogZXZlbnQuYXQsXG4gICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dEJsb2NrID8ge1xuICAgICAgbmV4dEJsb2NrXG4gICAgfSA6ICExO1xuICB9LFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9LCB7XG4gICAgbmV4dEJsb2NrXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJtb3ZlLmJsb2NrXCIsXG4gICAgYXQ6IGV2ZW50LmF0LFxuICAgIHRvOiBuZXh0QmxvY2sucGF0aFxuICB9KV1dXG59KV0sIGFic3RyYWN0U2VsZWN0QmVoYXZpb3JzID0gW2RlZmluZUJlaGF2aW9yKHtcbiAgb246IFwic2VsZWN0LnByZXZpb3VzIGJsb2NrXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBjb25zdCBwcmV2aW91c0Jsb2NrID0gZ2V0UHJldmlvdXNCbG9jayhzbmFwc2hvdCk7XG4gICAgaWYgKCFwcmV2aW91c0Jsb2NrKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHBvaW50ID0gZXZlbnQuc2VsZWN0ID09PSBcImVuZFwiID8gZ2V0QmxvY2tFbmRQb2ludCh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IHByZXZpb3VzQmxvY2tcbiAgICB9KSA6IGdldEJsb2NrU3RhcnRQb2ludCh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IHByZXZpb3VzQmxvY2tcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgIGFuY2hvcjogcG9pbnQsXG4gICAgICAgIGZvY3VzOiBwb2ludFxuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGFjdGlvbnM6IFsoXywge1xuICAgIHNlbGVjdGlvblxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwic2VsZWN0XCIsXG4gICAgYXQ6IHNlbGVjdGlvblxuICB9KV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJzZWxlY3QubmV4dCBibG9ja1wiLFxuICBndWFyZDogKHtcbiAgICBzbmFwc2hvdCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgY29uc3QgbmV4dEJsb2NrID0gZ2V0TmV4dEJsb2NrKHNuYXBzaG90KTtcbiAgICBpZiAoIW5leHRCbG9jaylcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBwb2ludCA9IGV2ZW50LnNlbGVjdCA9PT0gXCJlbmRcIiA/IGdldEJsb2NrRW5kUG9pbnQoe1xuICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgIGJsb2NrOiBuZXh0QmxvY2tcbiAgICB9KSA6IGdldEJsb2NrU3RhcnRQb2ludCh7XG4gICAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgICAgYmxvY2s6IG5leHRCbG9ja1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiBwb2ludCxcbiAgICAgICAgZm9jdXM6IHBvaW50XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgc2VsZWN0aW9uXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICBhdDogc2VsZWN0aW9uXG4gIH0pXV1cbn0pXSwgYWJzdHJhY3RTZXJpYWxpemVCZWhhdmlvcnMgPSBbZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJzZXJpYWxpemVcIixcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInNlcmlhbGl6ZS5kYXRhXCIsXG4gICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIsXG4gICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50XG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJzZXJpYWxpemUuZGF0YVwiLFxuICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnRcbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcInNlcmlhbGl6ZS5kYXRhXCIsXG4gICAgbWltZVR5cGU6IFwidGV4dC9odG1sXCIsXG4gICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50XG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJzZXJpYWxpemUuZGF0YVwiLFxuICAgIG1pbWVUeXBlOiBcInRleHQvcGxhaW5cIixcbiAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnRcbiAgfSldXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwic2VyaWFsaXplLmRhdGFcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGNvbnZlcnRlciA9IHNuYXBzaG90LmNvbnRleHQuY29udmVydGVycy5maW5kKChjb252ZXJ0ZXIyKSA9PiBjb252ZXJ0ZXIyLm1pbWVUeXBlID09PSBldmVudC5taW1lVHlwZSk7XG4gICAgcmV0dXJuIGNvbnZlcnRlciA/IGNvbnZlcnRlci5zZXJpYWxpemUoe1xuICAgICAgc25hcHNob3QsXG4gICAgICBldmVudDoge1xuICAgICAgICB0eXBlOiBcInNlcmlhbGl6ZVwiLFxuICAgICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnQudHlwZVxuICAgICAgfVxuICAgIH0pIDogITE7XG4gIH0sXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0sIHNlcmlhbGl6ZUV2ZW50KSA9PiBbcmFpc2Uoe1xuICAgIC4uLnNlcmlhbGl6ZUV2ZW50LFxuICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICB9KV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIixcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3tcbiAgICB0eXBlOiBcImVmZmVjdFwiLFxuICAgIGVmZmVjdDogKCkgPT4ge1xuICAgICAgZXZlbnQub3JpZ2luRXZlbnQub3JpZ2luRXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoZXZlbnQubWltZVR5cGUsIGV2ZW50LmRhdGEpO1xuICAgIH1cbiAgfV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJzZXJpYWxpemF0aW9uLmZhaWx1cmVcIixcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3tcbiAgICB0eXBlOiBcImVmZmVjdFwiLFxuICAgIGVmZmVjdDogKCkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKGBTZXJpYWxpemF0aW9uIG9mICR7ZXZlbnQubWltZVR5cGV9IGZhaWxlZCB3aXRoIHJlYXNvbiBcIiR7ZXZlbnQucmVhc29ufVwiYCk7XG4gICAgfVxuICB9XV1cbn0pXSwgYWJzdHJhY3RTcGxpdEJlaGF2aW9ycyA9IFtcbiAgLyoqXG4gICAqIFlvdSBjYW4ndCBzcGxpdCBhbiBpbmxpbmUgb2JqZWN0LlxuICAgKi9cbiAgZGVmaW5lQmVoYXZpb3Ioe1xuICAgIG9uOiBcInNwbGl0XCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBzbmFwc2hvdFxuICAgIH0pID0+IGlzU2VsZWN0aW9uQ29sbGFwc2VkJDEoc25hcHNob3QpICYmIGdldEZvY3VzSW5saW5lT2JqZWN0KHNuYXBzaG90KSxcbiAgICBhY3Rpb25zOiBbXVxuICB9KSxcbiAgLyoqXG4gICAqIFlvdSBjYW4ndCBzcGxpdCBhIGJsb2NrIG9iamVjdC5cbiAgICovXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJzcGxpdFwiLFxuICAgIGd1YXJkOiAoe1xuICAgICAgc25hcHNob3RcbiAgICB9KSA9PiBpc1NlbGVjdGlvbkNvbGxhcHNlZCQxKHNuYXBzaG90KSAmJiBnZXRGb2N1c0Jsb2NrT2JqZWN0KHNuYXBzaG90KSxcbiAgICBhY3Rpb25zOiBbXVxuICB9KSxcbiAgZGVmaW5lQmVoYXZpb3Ioe1xuICAgIG9uOiBcInNwbGl0XCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBzbmFwc2hvdFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uO1xuICAgICAgaWYgKCFzZWxlY3Rpb24gfHwgaXNTZWxlY3Rpb25Db2xsYXBzZWQoc2VsZWN0aW9uKSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnRCbG9jayA9IGdldFNlbGVjdGlvblN0YXJ0QmxvY2skMShzbmFwc2hvdCksIHNlbGVjdGlvbkVuZEJsb2NrID0gZ2V0U2VsZWN0aW9uRW5kQmxvY2skMShzbmFwc2hvdCk7XG4gICAgICByZXR1cm4gIXNlbGVjdGlvblN0YXJ0QmxvY2sgfHwgIXNlbGVjdGlvbkVuZEJsb2NrID8gITEgOiAhaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgc2VsZWN0aW9uU3RhcnRCbG9jay5ub2RlKSAmJiBpc1RleHRCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBzZWxlY3Rpb25FbmRCbG9jay5ub2RlKSA/IHtcbiAgICAgICAgc2VsZWN0aW9uXG4gICAgICB9IDogITE7XG4gICAgfSxcbiAgICBhY3Rpb25zOiBbKF8sIHtcbiAgICAgIHNlbGVjdGlvblxuICAgIH0pID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlbGV0ZVwiLFxuICAgICAgYXQ6IHNlbGVjdGlvblxuICAgIH0pXV1cbiAgfSksXG4gIGRlZmluZUJlaGF2aW9yKHtcbiAgICBvbjogXCJzcGxpdFwiLFxuICAgIGd1YXJkOiAoe1xuICAgICAgc25hcHNob3RcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbjtcbiAgICAgIGlmICghc2VsZWN0aW9uIHx8IGlzU2VsZWN0aW9uQ29sbGFwc2VkKHNlbGVjdGlvbikpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0QmxvY2sgPSBnZXRTZWxlY3Rpb25TdGFydEJsb2NrJDEoc25hcHNob3QpLCBzZWxlY3Rpb25FbmRCbG9jayA9IGdldFNlbGVjdGlvbkVuZEJsb2NrJDEoc25hcHNob3QpO1xuICAgICAgaWYgKCFzZWxlY3Rpb25TdGFydEJsb2NrIHx8ICFzZWxlY3Rpb25FbmRCbG9jayB8fCBzZWxlY3Rpb25TdGFydEJsb2NrLm5vZGUuX2tleSA9PT0gc2VsZWN0aW9uRW5kQmxvY2subm9kZS5fa2V5KVxuICAgICAgICByZXR1cm4gITE7XG4gICAgICBjb25zdCBzdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludChzZWxlY3Rpb24pLCBzdGFydEJsb2NrRW5kUG9pbnQgPSBnZXRCbG9ja0VuZFBvaW50KHtcbiAgICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgYmxvY2s6IHNlbGVjdGlvblN0YXJ0QmxvY2tcbiAgICAgIH0pLCBlbmRQb2ludCA9IGdldFNlbGVjdGlvbkVuZFBvaW50KHNlbGVjdGlvbiksIGVuZEJsb2NrU3RhcnRQb2ludCA9IGdldEJsb2NrU3RhcnRQb2ludCh7XG4gICAgICAgIGNvbnRleHQ6IHNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgIGJsb2NrOiBzZWxlY3Rpb25FbmRCbG9ja1xuICAgICAgfSksIGJsb2Nrc0luQmV0d2VlbiA9IGdldFNlbGVjdGVkVmFsdWUoc25hcHNob3QpLmZpbHRlcigoYmxvY2spID0+IGJsb2NrLl9rZXkgIT09IHNlbGVjdGlvblN0YXJ0QmxvY2subm9kZS5fa2V5ICYmIGJsb2NrLl9rZXkgIT09IHNlbGVjdGlvbkVuZEJsb2NrLm5vZGUuX2tleSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydFBvaW50LFxuICAgICAgICBzdGFydEJsb2NrRW5kUG9pbnQsXG4gICAgICAgIGVuZFBvaW50LFxuICAgICAgICBlbmRCbG9ja1N0YXJ0UG9pbnQsXG4gICAgICAgIGJsb2Nrc0luQmV0d2VlblxuICAgICAgfTtcbiAgICB9LFxuICAgIGFjdGlvbnM6IFsoXywge1xuICAgICAgc3RhcnRQb2ludCxcbiAgICAgIHN0YXJ0QmxvY2tFbmRQb2ludCxcbiAgICAgIGVuZFBvaW50LFxuICAgICAgZW5kQmxvY2tTdGFydFBvaW50LFxuICAgICAgYmxvY2tzSW5CZXR3ZWVuXG4gICAgfSkgPT4gW3JhaXNlKHtcbiAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgICBhdDoge1xuICAgICAgICBhbmNob3I6IHN0YXJ0UG9pbnQsXG4gICAgICAgIGZvY3VzOiBzdGFydEJsb2NrRW5kUG9pbnRcbiAgICAgIH1cbiAgICB9KSwgLi4uYmxvY2tzSW5CZXR3ZWVuLm1hcCgoYmxvY2spID0+IHJhaXNlKHtcbiAgICAgIHR5cGU6IFwiZGVsZXRlLmJsb2NrXCIsXG4gICAgICBhdDogW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV1cbiAgICB9KSksIHJhaXNlKHtcbiAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgICBhdDoge1xuICAgICAgICBhbmNob3I6IGVuZEJsb2NrU3RhcnRQb2ludCxcbiAgICAgICAgZm9jdXM6IGVuZFBvaW50XG4gICAgICB9XG4gICAgfSldXVxuICB9KSxcbiAgZGVmaW5lQmVoYXZpb3Ioe1xuICAgIG9uOiBcInNwbGl0XCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBzbmFwc2hvdFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uO1xuICAgICAgcmV0dXJuICFzZWxlY3Rpb24gfHwgaXNTZWxlY3Rpb25Db2xsYXBzZWQoc2VsZWN0aW9uKSA/ICExIDoge1xuICAgICAgICBzZWxlY3Rpb25cbiAgICAgIH07XG4gICAgfSxcbiAgICBhY3Rpb25zOiBbKF8sIHtcbiAgICAgIHNlbGVjdGlvblxuICAgIH0pID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlbGV0ZVwiLFxuICAgICAgYXQ6IHNlbGVjdGlvblxuICAgIH0pLCByYWlzZSh7XG4gICAgICB0eXBlOiBcInNwbGl0XCJcbiAgICB9KV1dXG4gIH0pLFxuICBkZWZpbmVCZWhhdmlvcih7XG4gICAgb246IFwic3BsaXRcIixcbiAgICBndWFyZDogKHtcbiAgICAgIHNuYXBzaG90XG4gICAgfSkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uID0gc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb247XG4gICAgICBpZiAoIXNlbGVjdGlvbiB8fCAhaXNTZWxlY3Rpb25Db2xsYXBzZWQoc2VsZWN0aW9uKSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnRQb2ludCA9IGdldFNlbGVjdGlvblN0YXJ0UG9pbnQoc2VsZWN0aW9uKSwgZm9jdXNUZXh0QmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayhzbmFwc2hvdCk7XG4gICAgICBpZiAoIWZvY3VzVGV4dEJsb2NrKVxuICAgICAgICByZXR1cm4gITE7XG4gICAgICBjb25zdCBibG9ja0VuZFBvaW50ID0gZ2V0QmxvY2tFbmRQb2ludCh7XG4gICAgICAgIGNvbnRleHQ6IHNuYXBzaG90LmNvbnRleHQsXG4gICAgICAgIGJsb2NrOiBmb2N1c1RleHRCbG9ja1xuICAgICAgfSksIG5ld1RleHRCbG9ja1NlbGVjdGlvbiA9IHtcbiAgICAgICAgYW5jaG9yOiBzZWxlY3Rpb25TdGFydFBvaW50LFxuICAgICAgICBmb2N1czogYmxvY2tFbmRQb2ludFxuICAgICAgfSwgbmV3VGV4dEJsb2NrID0gcGFyc2VCbG9jayh7XG4gICAgICAgIGJsb2NrOiBzbGljZVRleHRCbG9jayh7XG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogbmV3VGV4dEJsb2NrU2VsZWN0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBibG9jazogZm9jdXNUZXh0QmxvY2subm9kZVxuICAgICAgICB9KSxcbiAgICAgICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHJlZnJlc2hLZXlzOiAhMSxcbiAgICAgICAgICB2YWxpZGF0ZUZpZWxkczogITFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3VGV4dEJsb2NrID8ge1xuICAgICAgICBuZXdUZXh0QmxvY2ssXG4gICAgICAgIG5ld1RleHRCbG9ja1NlbGVjdGlvblxuICAgICAgfSA6ICExO1xuICAgIH0sXG4gICAgYWN0aW9uczogWyhfLCB7XG4gICAgICBuZXdUZXh0QmxvY2ssXG4gICAgICBuZXdUZXh0QmxvY2tTZWxlY3Rpb25cbiAgICB9KSA9PiBpc1NlbGVjdGlvbkNvbGxhcHNlZChuZXdUZXh0QmxvY2tTZWxlY3Rpb24pID8gW3JhaXNlKHtcbiAgICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgICBibG9jazogbmV3VGV4dEJsb2NrLFxuICAgICAgcGxhY2VtZW50OiBcImFmdGVyXCIsXG4gICAgICBzZWxlY3Q6IFwic3RhcnRcIlxuICAgIH0pXSA6IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlbGV0ZVwiLFxuICAgICAgYXQ6IG5ld1RleHRCbG9ja1NlbGVjdGlvblxuICAgIH0pLCByYWlzZSh7XG4gICAgICB0eXBlOiBcImluc2VydC5ibG9ja1wiLFxuICAgICAgYmxvY2s6IG5ld1RleHRCbG9jayxcbiAgICAgIHBsYWNlbWVudDogXCJhZnRlclwiLFxuICAgICAgc2VsZWN0OiBcInN0YXJ0XCJcbiAgICB9KV1dXG4gIH0pXG5dLCBhYnN0cmFjdFN0eWxlQmVoYXZpb3JzID0gW2RlZmluZUJlaGF2aW9yKHtcbiAgb246IFwic3R5bGUuYWRkXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+ICh7XG4gICAgc2VsZWN0ZWRUZXh0QmxvY2tzOiBnZXRTZWxlY3RlZFRleHRCbG9ja3Moc25hcHNob3QpXG4gIH0pLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9LCB7XG4gICAgc2VsZWN0ZWRUZXh0QmxvY2tzXG4gIH0pID0+IHNlbGVjdGVkVGV4dEJsb2Nrcy5tYXAoKGJsb2NrKSA9PiByYWlzZSh7XG4gICAgdHlwZTogXCJibG9jay5zZXRcIixcbiAgICBhdDogYmxvY2sucGF0aCxcbiAgICBwcm9wczoge1xuICAgICAgc3R5bGU6IGV2ZW50LnN0eWxlXG4gICAgfVxuICB9KSldXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJzdHlsZS5yZW1vdmVcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3RcbiAgfSkgPT4gKHtcbiAgICBzZWxlY3RlZFRleHRCbG9ja3M6IGdldFNlbGVjdGVkVGV4dEJsb2NrcyhzbmFwc2hvdClcbiAgfSksXG4gIGFjdGlvbnM6IFsoXywge1xuICAgIHNlbGVjdGVkVGV4dEJsb2Nrc1xuICB9KSA9PiBzZWxlY3RlZFRleHRCbG9ja3MubWFwKChibG9jaykgPT4gcmFpc2Uoe1xuICAgIHR5cGU6IFwiYmxvY2sudW5zZXRcIixcbiAgICBhdDogYmxvY2sucGF0aCxcbiAgICBwcm9wczogW1wic3R5bGVcIl1cbiAgfSkpXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwic3R5bGUudG9nZ2xlXCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90LFxuICAgIGV2ZW50XG4gIH0pID0+IGlzQWN0aXZlU3R5bGUoZXZlbnQuc3R5bGUpKHNuYXBzaG90KSxcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInN0eWxlLnJlbW92ZVwiLFxuICAgIHN0eWxlOiBldmVudC5zdHlsZVxuICB9KV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJzdHlsZS50b2dnbGVcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3QsXG4gICAgZXZlbnRcbiAgfSkgPT4gIWlzQWN0aXZlU3R5bGUoZXZlbnQuc3R5bGUpKHNuYXBzaG90KSxcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInN0eWxlLmFkZFwiLFxuICAgIHN0eWxlOiBldmVudC5zdHlsZVxuICB9KV1dXG59KV0sIGFic3RyYWN0QmVoYXZpb3JzID0gW2RlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiY2xpcGJvYXJkLmNvcHlcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3RcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGZvY3VzU3BhbiA9IGdldEZvY3VzU3BhbiQxKHNuYXBzaG90KSwgc2VsZWN0aW9uQ29sbGFwc2VkID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQkMShzbmFwc2hvdCk7XG4gICAgcmV0dXJuIGZvY3VzU3BhbiAmJiBzZWxlY3Rpb25Db2xsYXBzZWQ7XG4gIH0sXG4gIGFjdGlvbnM6IFtdXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJjbGlwYm9hcmQuY29weVwiLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwic2VyaWFsaXplXCIsXG4gICAgb3JpZ2luRXZlbnQ6IGV2ZW50XG4gIH0pXV1cbn0pLCBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImNsaXBib2FyZC5jdXRcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3RcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGZvY3VzU3BhbiA9IGdldEZvY3VzU3BhbiQxKHNuYXBzaG90KSwgc2VsZWN0aW9uQ29sbGFwc2VkID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQkMShzbmFwc2hvdCk7XG4gICAgcmV0dXJuIGZvY3VzU3BhbiAmJiBzZWxlY3Rpb25Db2xsYXBzZWQ7XG4gIH0sXG4gIGFjdGlvbnM6IFtdXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJjbGlwYm9hcmQuY3V0XCIsXG4gIGd1YXJkOiAoe1xuICAgIHNuYXBzaG90XG4gIH0pID0+IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uID8ge1xuICAgIHNlbGVjdGlvbjogc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb25cbiAgfSA6ICExLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9LCB7XG4gICAgc2VsZWN0aW9uXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJzZXJpYWxpemVcIixcbiAgICBvcmlnaW5FdmVudDogZXZlbnRcbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcImRlbGV0ZVwiLFxuICAgIGF0OiBzZWxlY3Rpb25cbiAgfSldXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiZHJhZy5kcmFnc3RhcnRcIixcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInNlcmlhbGl6ZVwiLFxuICAgIG9yaWdpbkV2ZW50OiBldmVudFxuICB9KV1dXG59KSwgZGVmaW5lQmVoYXZpb3Ioe1xuICBvbjogXCJjbGlwYm9hcmQucGFzdGVcIixcbiAgZ3VhcmQ6ICh7XG4gICAgc25hcHNob3RcbiAgfSkgPT4gc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24gJiYgaXNTZWxlY3Rpb25FeHBhbmRlZChzbmFwc2hvdCkgPyB7XG4gICAgc2VsZWN0aW9uOiBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvblxuICB9IDogITEsXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0sIHtcbiAgICBzZWxlY3Rpb25cbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImRlbGV0ZVwiLFxuICAgIGF0OiBzZWxlY3Rpb25cbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcImRlc2VyaWFsaXplXCIsXG4gICAgb3JpZ2luRXZlbnQ6IGV2ZW50XG4gIH0pXV1cbn0pLCBkZWZpbmVCZWhhdmlvcih7XG4gIG9uOiBcImNsaXBib2FyZC5wYXN0ZVwiLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVzZXJpYWxpemVcIixcbiAgICBvcmlnaW5FdmVudDogZXZlbnRcbiAgfSldXVxufSksIGRlZmluZUJlaGF2aW9yKHtcbiAgb246IFwiaW5wdXQuKlwiLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVzZXJpYWxpemVcIixcbiAgICBvcmlnaW5FdmVudDogZXZlbnRcbiAgfSldXVxufSksIC4uLmFic3RyYWN0QW5ub3RhdGlvbkJlaGF2aW9ycywgLi4uYWJzdHJhY3REZWNvcmF0b3JCZWhhdmlvcnMsIC4uLmFic3RyYWN0RGVsZXRlQmVoYXZpb3JzLCAuLi5hYnN0cmFjdERlc2VyaWFsaXplQmVoYXZpb3JzLCAuLi5hYnN0cmFjdEluc2VydEJlaGF2aW9ycywgLi4uYWJzdHJhY3RLZXlib2FyZEJlaGF2aW9ycywgLi4uYWJzdHJhY3RMaXN0SXRlbUJlaGF2aW9ycywgLi4uYWJzdHJhY3RNb3ZlQmVoYXZpb3JzLCAuLi5hYnN0cmFjdFN0eWxlQmVoYXZpb3JzLCAuLi5hYnN0cmFjdFNlbGVjdEJlaGF2aW9ycywgLi4uYWJzdHJhY3RTZXJpYWxpemVCZWhhdmlvcnMsIC4uLmFic3RyYWN0U3BsaXRCZWhhdmlvcnNdO1xuZnVuY3Rpb24gaXNTeW50aGV0aWNCZWhhdmlvckV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhaXNDdXN0b21CZWhhdmlvckV2ZW50KGV2ZW50KSAmJiAhaXNOYXRpdmVCZWhhdmlvckV2ZW50KGV2ZW50KSAmJiAhaXNBYnN0cmFjdEJlaGF2aW9yRXZlbnQoZXZlbnQpO1xufVxuY29uc3QgYWJzdHJhY3RCZWhhdmlvckV2ZW50VHlwZXMgPSBbXCJhbm5vdGF0aW9uLnNldFwiLCBcImFubm90YXRpb24udG9nZ2xlXCIsIFwiZGVjb3JhdG9yLnRvZ2dsZVwiLCBcImRlbGV0ZS5iYWNrd2FyZFwiLCBcImRlbGV0ZS5ibG9ja1wiLCBcImRlbGV0ZS5jaGlsZFwiLCBcImRlbGV0ZS5mb3J3YXJkXCIsIFwiZGVsZXRlLnRleHRcIiwgXCJkZXNlcmlhbGl6ZVwiLCBcImRlc2VyaWFsaXplLmRhdGFcIiwgXCJkZXNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiLCBcImRlc2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsIFwiaW5zZXJ0LmJsb2Nrc1wiLCBcImluc2VydC5icmVha1wiLCBcImluc2VydC5zb2Z0IGJyZWFrXCIsIFwibGlzdCBpdGVtLmFkZFwiLCBcImxpc3QgaXRlbS5yZW1vdmVcIiwgXCJsaXN0IGl0ZW0udG9nZ2xlXCIsIFwibW92ZS5ibG9jayBkb3duXCIsIFwibW92ZS5ibG9jayB1cFwiLCBcInNlbGVjdC5wcmV2aW91cyBibG9ja1wiLCBcInNlbGVjdC5uZXh0IGJsb2NrXCIsIFwic2VyaWFsaXplXCIsIFwic2VyaWFsaXplLmRhdGFcIiwgXCJzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIiwgXCJzZXJpYWxpemF0aW9uLmZhaWx1cmVcIiwgXCJzcGxpdFwiLCBcInN0eWxlLmFkZFwiLCBcInN0eWxlLnJlbW92ZVwiLCBcInN0eWxlLnRvZ2dsZVwiXTtcbmZ1bmN0aW9uIGlzQWJzdHJhY3RCZWhhdmlvckV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBhYnN0cmFjdEJlaGF2aW9yRXZlbnRUeXBlcy5pbmNsdWRlcyhldmVudC50eXBlKTtcbn1cbmNvbnN0IG5hdGl2ZUJlaGF2aW9yRXZlbnRUeXBlcyA9IFtcImNsaXBib2FyZC5jb3B5XCIsIFwiY2xpcGJvYXJkLmN1dFwiLCBcImNsaXBib2FyZC5wYXN0ZVwiLCBcImRyYWcuZHJhZ3N0YXJ0XCIsIFwiZHJhZy5kcmFnXCIsIFwiZHJhZy5kcmFnZW5kXCIsIFwiZHJhZy5kcmFnZW50ZXJcIiwgXCJkcmFnLmRyYWdvdmVyXCIsIFwiZHJhZy5kcmFnbGVhdmVcIiwgXCJkcmFnLmRyb3BcIiwgXCJpbnB1dC4qXCIsIFwia2V5Ym9hcmQua2V5ZG93blwiLCBcImtleWJvYXJkLmtleXVwXCIsIFwibW91c2UuY2xpY2tcIl07XG5mdW5jdGlvbiBpc05hdGl2ZUJlaGF2aW9yRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIG5hdGl2ZUJlaGF2aW9yRXZlbnRUeXBlcy5pbmNsdWRlcyhldmVudC50eXBlKTtcbn1cbmZ1bmN0aW9uIGlzQ3VzdG9tQmVoYXZpb3JFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQudHlwZS5zdGFydHNXaXRoKFwiY3VzdG9tLlwiKTtcbn1cbmNvbnN0IGRlYnVnJDggPSBkZWJ1Z1dpdGhOYW1lKFwiYmVoYXZpb3JzOmV2ZW50XCIpO1xuZnVuY3Rpb24gZXZlbnRDYXRlZ29yeShldmVudCkge1xuICByZXR1cm4gaXNOYXRpdmVCZWhhdmlvckV2ZW50KGV2ZW50KSA/IFwibmF0aXZlXCIgOiBpc0Fic3RyYWN0QmVoYXZpb3JFdmVudChldmVudCkgPyBcInN5bnRoZXRpY1wiIDogaXNDdXN0b21CZWhhdmlvckV2ZW50KGV2ZW50KSA/IFwiY3VzdG9tXCIgOiBcInN5bnRoZXRpY1wiO1xufVxuZnVuY3Rpb24gcGVyZm9ybUV2ZW50KHtcbiAgbW9kZSxcbiAgYmVoYXZpb3JzLFxuICByZW1haW5pbmdFdmVudEJlaGF2aW9ycyxcbiAgZXZlbnQsXG4gIGVkaXRvcixcbiAga2V5R2VuZXJhdG9yLFxuICBzY2hlbWEsXG4gIGdldFNuYXBzaG90LFxuICBuYXRpdmVFdmVudCxcbiAgc2VuZEJhY2tcbn0pIHtcbiAgZGVidWckOChgKCR7bW9kZX06JHtldmVudENhdGVnb3J5KGV2ZW50KX0pYCwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTtcbiAgY29uc3QgZXZlbnRCZWhhdmlvcnMgPSBbLi4ucmVtYWluaW5nRXZlbnRCZWhhdmlvcnMsIC4uLmFic3RyYWN0QmVoYXZpb3JzXS5maWx0ZXIoKGJlaGF2aW9yKSA9PiB7XG4gICAgaWYgKGJlaGF2aW9yLm9uID09PSBcIipcIilcbiAgICAgIHJldHVybiAhMDtcbiAgICBjb25zdCBbbGlzdGVuZWROYW1lc3BhY2VdID0gYmVoYXZpb3Iub24uaW5jbHVkZXMoXCIqXCIpICYmIGJlaGF2aW9yLm9uLmluY2x1ZGVzKFwiLlwiKSA/IGJlaGF2aW9yLm9uLnNwbGl0KFwiLlwiKSA6IFt2b2lkIDBdLCBbZXZlbnROYW1lc3BhY2VdID0gZXZlbnQudHlwZS5pbmNsdWRlcyhcIi5cIikgPyBldmVudC50eXBlLnNwbGl0KFwiLlwiKSA6IFt2b2lkIDBdO1xuICAgIHJldHVybiBsaXN0ZW5lZE5hbWVzcGFjZSAhPT0gdm9pZCAwICYmIGV2ZW50TmFtZXNwYWNlICE9PSB2b2lkIDAgJiYgbGlzdGVuZWROYW1lc3BhY2UgPT09IGV2ZW50TmFtZXNwYWNlIHx8IGxpc3RlbmVkTmFtZXNwYWNlICE9PSB2b2lkIDAgJiYgZXZlbnROYW1lc3BhY2UgPT09IHZvaWQgMCAmJiBsaXN0ZW5lZE5hbWVzcGFjZSA9PT0gZXZlbnQudHlwZSA/ICEwIDogYmVoYXZpb3Iub24gPT09IGV2ZW50LnR5cGU7XG4gIH0pO1xuICBpZiAoZXZlbnRCZWhhdmlvcnMubGVuZ3RoID09PSAwICYmIGlzU3ludGhldGljQmVoYXZpb3JFdmVudChldmVudCkpIHtcbiAgICBuYXRpdmVFdmVudD8ucHJldmVudERlZmF1bHQoKSwgd2l0aEFwcGx5aW5nQmVoYXZpb3JPcGVyYXRpb25zKGVkaXRvciwgKCkgPT4ge1xuICAgICAgZGVidWckOChgKGV4ZWN1dGU6JHtldmVudENhdGVnb3J5KGV2ZW50KX0pYCwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKSwgcGVyZm9ybU9wZXJhdGlvbih7XG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBrZXlHZW5lcmF0b3IsXG4gICAgICAgICAgc2NoZW1hXG4gICAgICAgIH0sXG4gICAgICAgIG9wZXJhdGlvbjoge1xuICAgICAgICAgIC4uLmV2ZW50LFxuICAgICAgICAgIGVkaXRvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGd1YXJkU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICBsZXQgbmF0aXZlRXZlbnRQcmV2ZW50ZWQgPSAhMSwgZGVmYXVsdEJlaGF2aW9yT3ZlcndyaXR0ZW4gPSAhMSwgZXZlbnRCZWhhdmlvckluZGV4ID0gLTE7XG4gIGZvciAoY29uc3QgZXZlbnRCZWhhdmlvciBvZiBldmVudEJlaGF2aW9ycykge1xuICAgIGV2ZW50QmVoYXZpb3JJbmRleCsrO1xuICAgIGxldCBzaG91bGRSdW4gPSAhMTtcbiAgICB0cnkge1xuICAgICAgc2hvdWxkUnVuID0gZXZlbnRCZWhhdmlvci5ndWFyZCA9PT0gdm9pZCAwIHx8IGV2ZW50QmVoYXZpb3IuZ3VhcmQoe1xuICAgICAgICBzbmFwc2hvdDogZ3VhcmRTbmFwc2hvdCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGRvbTogY3JlYXRlRWRpdG9yRG9tKHNlbmRCYWNrLCBlZGl0b3IpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoYEV2YWx1YXRpbmcgZ3VhcmQgZm9yIFwiJHtldmVudC50eXBlfVwiIGZhaWxlZCBkdWUgdG86ICR7ZXJyb3IubWVzc2FnZX1gKSk7XG4gICAgfVxuICAgIGlmIChzaG91bGRSdW4pIHtcbiAgICAgIGRlZmF1bHRCZWhhdmlvck92ZXJ3cml0dGVuID0gITA7XG4gICAgICBmb3IgKGNvbnN0IGFjdGlvblNldCBvZiBldmVudEJlaGF2aW9yLmFjdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWN0aW9uc1NuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgICAgICAgbGV0IGFjdGlvbnMgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uU2V0KHtcbiAgICAgICAgICAgIHNuYXBzaG90OiBhY3Rpb25zU25hcHNob3QsXG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGRvbTogY3JlYXRlRWRpdG9yRG9tKHNlbmRCYWNrLCBlZGl0b3IpXG4gICAgICAgICAgfSwgc2hvdWxkUnVuKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcihgRXZhbHVhdGluZyBhY3Rpb25zIGZvciBcIiR7ZXZlbnQudHlwZX1cIiBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb25zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIGlmIChuYXRpdmVFdmVudFByZXZlbnRlZCA9IGFjdGlvbnMuc29tZSgoYWN0aW9uKSA9PiBhY3Rpb24udHlwZSA9PT0gXCJyYWlzZVwiIHx8IGFjdGlvbi50eXBlID09PSBcImV4ZWN1dGVcIikgfHwgIWFjdGlvbnMuc29tZSgoYWN0aW9uKSA9PiBhY3Rpb24udHlwZSA9PT0gXCJmb3J3YXJkXCIpLCBhY3Rpb25zLnNvbWUoKGFjdGlvbikgPT4gYWN0aW9uLnR5cGUgPT09IFwiZXhlY3V0ZVwiKSkge1xuICAgICAgICAgICAgd2l0aFVuZG9TdGVwKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBhY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSBcImVmZmVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uZWZmZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICBzZW5kOiBzZW5kQmFja1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBFeGVjdXRpbmcgZWZmZWN0IGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC50eXBlfVwiIGZhaWxlZCBkdWUgdG86ICR7ZXJyb3IubWVzc2FnZX1gKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSBcImZvcndhcmRcIikge1xuICAgICAgICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nRXZlbnRCZWhhdmlvcnMyID0gZXZlbnRCZWhhdmlvcnMuc2xpY2UoZXZlbnRCZWhhdmlvckluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgICBwZXJmb3JtRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBtb2RlOiBcImZvcndhcmRcIixcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JzLFxuICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdFdmVudEJlaGF2aW9yczogcmVtYWluaW5nRXZlbnRCZWhhdmlvcnMyLFxuICAgICAgICAgICAgICAgICAgICBldmVudDogYWN0aW9uLmV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICAgICAgICAgIGtleUdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICBnZXRTbmFwc2hvdCxcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHNlbmRCYWNrXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFwicmFpc2VcIikge1xuICAgICAgICAgICAgICAgICAgcGVyZm9ybUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJyYWlzZVwiLFxuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvcnMsXG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0V2ZW50QmVoYXZpb3JzOiBiZWhhdmlvcnMsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBhY3Rpb24uZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgICAgICAgICAga2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgICAgICAgICAgIGdldFNuYXBzaG90LFxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgc2VuZEJhY2tcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBlcmZvcm1FdmVudCh7XG4gICAgICAgICAgICAgICAgICBtb2RlOiBcImV4ZWN1dGVcIixcbiAgICAgICAgICAgICAgICAgIGJlaGF2aW9ycyxcbiAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0V2ZW50QmVoYXZpb3JzOiBbXSxcbiAgICAgICAgICAgICAgICAgIGV2ZW50OiBhY3Rpb24uZXZlbnQsXG4gICAgICAgICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICAgICAgICBrZXlHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgICAgICAgICBnZXRTbmFwc2hvdCxcbiAgICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICBzZW5kQmFja1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBhY3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFwiZWZmZWN0XCIpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhY3Rpb24uZWZmZWN0KHtcbiAgICAgICAgICAgICAgICAgIHNlbmQ6IHNlbmRCYWNrXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoYEV4ZWN1dGluZyBlZmZlY3QgYXMgYSByZXN1bHQgb2YgXCIke2V2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJmb3J3YXJkXCIpIHtcbiAgICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nRXZlbnRCZWhhdmlvcnMyID0gZXZlbnRCZWhhdmlvcnMuc2xpY2UoZXZlbnRCZWhhdmlvckluZGV4ICsgMSk7XG4gICAgICAgICAgICAgIHBlcmZvcm1FdmVudCh7XG4gICAgICAgICAgICAgICAgbW9kZTogXCJmb3J3YXJkXCIsXG4gICAgICAgICAgICAgICAgYmVoYXZpb3JzLFxuICAgICAgICAgICAgICAgIHJlbWFpbmluZ0V2ZW50QmVoYXZpb3JzOiByZW1haW5pbmdFdmVudEJlaGF2aW9yczIsXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGFjdGlvbi5ldmVudCxcbiAgICAgICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICAgICAga2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgIHNjaGVtYSxcbiAgICAgICAgICAgICAgICBnZXRTbmFwc2hvdCxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICBzZW5kQmFja1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFwicmFpc2VcIikge1xuICAgICAgICAgICAgICBwZXJmb3JtRXZlbnQoe1xuICAgICAgICAgICAgICAgIG1vZGU6IFwicmFpc2VcIixcbiAgICAgICAgICAgICAgICBiZWhhdmlvcnMsXG4gICAgICAgICAgICAgICAgcmVtYWluaW5nRXZlbnRCZWhhdmlvcnM6IG1vZGUgPT09IFwiZXhlY3V0ZVwiID8gcmVtYWluaW5nRXZlbnRCZWhhdmlvcnMgOiBiZWhhdmlvcnMsXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGFjdGlvbi5ldmVudCxcbiAgICAgICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICAgICAga2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgIHNjaGVtYSxcbiAgICAgICAgICAgICAgICBnZXRTbmFwc2hvdCxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICBzZW5kQmFja1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24udHlwZSA9PT0gXCJleGVjdXRlXCIgJiYgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgYWN0aW9uIHR5cGU6IGBleGVjdXRlYFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAhZGVmYXVsdEJlaGF2aW9yT3ZlcndyaXR0ZW4gJiYgaXNTeW50aGV0aWNCZWhhdmlvckV2ZW50KGV2ZW50KSA/IChuYXRpdmVFdmVudD8ucHJldmVudERlZmF1bHQoKSwgd2l0aEFwcGx5aW5nQmVoYXZpb3JPcGVyYXRpb25zKGVkaXRvciwgKCkgPT4ge1xuICAgIGRlYnVnJDgoYChleGVjdXRlOiR7ZXZlbnRDYXRlZ29yeShldmVudCl9KWAsIEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCAyKSksIHBlcmZvcm1PcGVyYXRpb24oe1xuICAgICAgY29udGV4dDoge1xuICAgICAgICBrZXlHZW5lcmF0b3IsXG4gICAgICAgIHNjaGVtYVxuICAgICAgfSxcbiAgICAgIG9wZXJhdGlvbjoge1xuICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9XG4gICAgfSk7XG4gIH0pLCBlZGl0b3Iub25DaGFuZ2UoKSkgOiBuYXRpdmVFdmVudFByZXZlbnRlZCAmJiBuYXRpdmVFdmVudD8ucHJldmVudERlZmF1bHQoKTtcbn1cbmZ1bmN0aW9uIHNvcnRCeVByaW9yaXR5KGl0ZW1zKSB7XG4gIGlmIChpdGVtcy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCBpdGVtc1dpdGhQcmlvcml0eSA9IGl0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5wcmlvcml0eSAhPT0gdm9pZCAwKSwgaXRlbXNXaXRob3V0UHJpb3JpdHkgPSBpdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ucHJpb3JpdHkgPT09IHZvaWQgMCk7XG4gIGlmIChpdGVtc1dpdGhQcmlvcml0eS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIGl0ZW1zO1xuICBjb25zdCBpdGVtc0J5UHJpb3JpdHlJZCA9IG5ldyBNYXAoaXRlbXNXaXRoUHJpb3JpdHkubWFwKChpdGVtKSA9PiBbaXRlbS5wcmlvcml0eS5pZCwgaXRlbV0pKSwgZ3JhcGggPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCBpbkRlZ3JlZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGZ1bmN0aW9uIGVuc3VyZU5vZGUoaWQpIHtcbiAgICBncmFwaC5oYXMoaWQpIHx8IChncmFwaC5zZXQoaWQsIC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpLCBpbkRlZ3JlZS5zZXQoaWQsIDApKTtcbiAgfVxuICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXNXaXRoUHJpb3JpdHkpIHtcbiAgICBjb25zdCBpZCA9IGl0ZW0ucHJpb3JpdHkuaWQ7XG4gICAgZW5zdXJlTm9kZShpZCk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWRnZShmcm9tSWQsIHRvSWQpIHtcbiAgICAhZ3JhcGguaGFzKGZyb21JZCkgfHwgIWdyYXBoLmhhcyh0b0lkKSB8fCAoZ3JhcGguZ2V0KGZyb21JZCk/LmFkZCh0b0lkKSwgaW5EZWdyZWUuc2V0KHRvSWQsIChpbkRlZ3JlZS5nZXQodG9JZCkgPz8gMCkgKyAxKSk7XG4gIH1cbiAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zV2l0aFByaW9yaXR5KSB7XG4gICAgY29uc3QgaWQgPSBpdGVtLnByaW9yaXR5LmlkLCB2aXNpdGVkID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICBsZXQgcmVmID0gaXRlbS5wcmlvcml0eS5yZWZlcmVuY2U7XG4gICAgZm9yICg7IHJlZjsgKSB7XG4gICAgICBjb25zdCByZWZJZCA9IHJlZi5wcmlvcml0eS5pZDtcbiAgICAgIGlmIChlbnN1cmVOb2RlKHJlZklkKSwgdmlzaXRlZC5oYXMocmVmSWQpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaXJjdWxhciBkZXBlbmRlbmN5IGRldGVjdGVkIGluIHByaW9yaXRpZXNcIik7XG4gICAgICB2aXNpdGVkLmFkZChyZWZJZCksIHJlZi5pbXBvcnRhbmNlID09PSBcImhpZ2hlclwiID8gYWRkRWRnZShpZCwgcmVmSWQpIDogYWRkRWRnZShyZWZJZCwgaWQpLCByZWYgPSByZWYucHJpb3JpdHkucmVmZXJlbmNlO1xuICAgIH1cbiAgfVxuICBjb25zdCBxdWV1ZSA9IFtdO1xuICBmb3IgKGNvbnN0IFtpZCwgZGVncmVlXSBvZiBpbkRlZ3JlZSlcbiAgICBkZWdyZWUgPT09IDAgJiYgcXVldWUucHVzaChpZCk7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKDsgcXVldWUubGVuZ3RoID4gMDsgKSB7XG4gICAgY29uc3QgY3VycmVudElkID0gcXVldWUuc2hpZnQoKSwgY3VycmVudEl0ZW0gPSBpdGVtc0J5UHJpb3JpdHlJZC5nZXQoY3VycmVudElkKTtcbiAgICBjdXJyZW50SXRlbSAmJiByZXN1bHQucHVzaChjdXJyZW50SXRlbSk7XG4gICAgZm9yIChjb25zdCBuZWlnaGJvcklkIG9mIGdyYXBoLmdldChjdXJyZW50SWQpID8/IFtdKSB7XG4gICAgICBjb25zdCBuZXdEZWdyZWUgPSAoaW5EZWdyZWUuZ2V0KG5laWdoYm9ySWQpID8/IDApIC0gMTtcbiAgICAgIGluRGVncmVlLnNldChuZWlnaGJvcklkLCBuZXdEZWdyZWUpLCBuZXdEZWdyZWUgPT09IDAgJiYgcXVldWUucHVzaChuZWlnaGJvcklkKTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zV2l0aFByaW9yaXR5KVxuICAgIHJlc3VsdC5pbmNsdWRlcyhpdGVtKSB8fCByZXN1bHQucHVzaChpdGVtKTtcbiAgcmV0dXJuIFsuLi5yZXN1bHQsIC4uLml0ZW1zV2l0aG91dFByaW9yaXR5XTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVkaXRvclNuYXBzaG90KHtcbiAgY29udmVydGVycyxcbiAgZWRpdG9yLFxuICBrZXlHZW5lcmF0b3IsXG4gIHJlYWRPbmx5LFxuICBzY2hlbWFcbn0pIHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLnNlbGVjdGlvbiA/IHNsYXRlUmFuZ2VUb1NlbGVjdGlvbih7XG4gICAgc2NoZW1hLFxuICAgIGVkaXRvcixcbiAgICByYW5nZTogZWRpdG9yLnNlbGVjdGlvblxuICB9KSA6IG51bGwsIGNvbnRleHQgPSB7XG4gICAgY29udmVydGVycyxcbiAgICBrZXlHZW5lcmF0b3IsXG4gICAgcmVhZE9ubHksXG4gICAgc2NoZW1hLFxuICAgIHNlbGVjdGlvbixcbiAgICB2YWx1ZTogZWRpdG9yLnZhbHVlXG4gIH07XG4gIHJldHVybiB7XG4gICAgYmxvY2tJbmRleE1hcDogZWRpdG9yLmJsb2NrSW5kZXhNYXAsXG4gICAgY29udGV4dCxcbiAgICBkZWNvcmF0b3JTdGF0ZTogZWRpdG9yLmRlY29yYXRvclN0YXRlXG4gIH07XG59XG5jb25zdCBkZWJ1ZyQ3ID0gZGVidWdXaXRoTmFtZShcImVkaXRvciBtYWNoaW5lXCIpLCBlZGl0b3JNYWNoaW5lID0gc2V0dXAoe1xuICB0eXBlczoge1xuICAgIGNvbnRleHQ6IHt9LFxuICAgIGV2ZW50czoge30sXG4gICAgZW1pdHRlZDoge30sXG4gICAgaW5wdXQ6IHt9LFxuICAgIHRhZ3M6IHt9XG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBcImFkZCBiZWhhdmlvciB0byBjb250ZXh0XCI6IGFzc2lnbih7XG4gICAgICBiZWhhdmlvcnM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwiYWRkIGJlaGF2aW9yXCIpLCAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4uY29udGV4dC5iZWhhdmlvcnMsIGV2ZW50LmJlaGF2aW9yQ29uZmlnXSkpLFxuICAgICAgYmVoYXZpb3JzU29ydGVkOiAhMVxuICAgIH0pLFxuICAgIFwicmVtb3ZlIGJlaGF2aW9yIGZyb20gY29udGV4dFwiOiBhc3NpZ24oe1xuICAgICAgYmVoYXZpb3JzOiAoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcInJlbW92ZSBiZWhhdmlvclwiKSwgY29udGV4dC5iZWhhdmlvcnMuZGVsZXRlKGV2ZW50LmJlaGF2aW9yQ29uZmlnKSwgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoWy4uLmNvbnRleHQuYmVoYXZpb3JzXSkpXG4gICAgfSksXG4gICAgXCJlbWl0IHBhdGNoIGV2ZW50XCI6IGVtaXQoKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcImludGVybmFsLnBhdGNoXCIpLCBldmVudCkpLFxuICAgIFwiZW1pdCBtdXRhdGlvbiBldmVudFwiOiBlbWl0KCh7XG4gICAgICBldmVudFxuICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJtdXRhdGlvblwiKSwgZXZlbnQpKSxcbiAgICBcImVtaXQgcmVhZCBvbmx5XCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJyZWFkIG9ubHlcIlxuICAgIH0pLFxuICAgIFwiZW1pdCBlZGl0YWJsZVwiOiBlbWl0KHtcbiAgICAgIHR5cGU6IFwiZWRpdGFibGVcIlxuICAgIH0pLFxuICAgIFwiZGVmZXIgZXZlbnRcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdFdmVudHM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFtcImludGVybmFsLnBhdGNoXCIsIFwibXV0YXRpb25cIl0pLCBbLi4uY29udGV4dC5wZW5kaW5nRXZlbnRzLCBldmVudF0pXG4gICAgfSksXG4gICAgXCJlbWl0IHBlbmRpbmcgZXZlbnRzXCI6IGVucXVldWVBY3Rpb25zKCh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZW5xdWV1ZVxuICAgIH0pID0+IHtcbiAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgY29udGV4dC5wZW5kaW5nRXZlbnRzKVxuICAgICAgICBlbnF1ZXVlLmVtaXQoZXZlbnQpO1xuICAgIH0pLFxuICAgIFwiZW1pdCByZWFkeVwiOiBlbWl0KHtcbiAgICAgIHR5cGU6IFwicmVhZHlcIlxuICAgIH0pLFxuICAgIFwiY2xlYXIgcGVuZGluZyBldmVudHNcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdFdmVudHM6IFtdXG4gICAgfSksXG4gICAgXCJkZWZlciBpbmNvbWluZyBwYXRjaGVzXCI6IGFzc2lnbih7XG4gICAgICBwZW5kaW5nSW5jb21pbmdQYXRjaGVzRXZlbnRzOiAoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gZXZlbnQudHlwZSA9PT0gXCJwYXRjaGVzXCIgPyBbLi4uY29udGV4dC5wZW5kaW5nSW5jb21pbmdQYXRjaGVzRXZlbnRzLCBldmVudF0gOiBjb250ZXh0LnBlbmRpbmdJbmNvbWluZ1BhdGNoZXNFdmVudHNcbiAgICB9KSxcbiAgICBcImVtaXQgcGVuZGluZyBpbmNvbWluZyBwYXRjaGVzXCI6IGVucXVldWVBY3Rpb25zKCh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZW5xdWV1ZVxuICAgIH0pID0+IHtcbiAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgY29udGV4dC5wZW5kaW5nSW5jb21pbmdQYXRjaGVzRXZlbnRzKVxuICAgICAgICBlbnF1ZXVlLmVtaXQoZXZlbnQpO1xuICAgIH0pLFxuICAgIFwiY2xlYXIgcGVuZGluZyBpbmNvbWluZyBwYXRjaGVzXCI6IGFzc2lnbih7XG4gICAgICBwZW5kaW5nSW5jb21pbmdQYXRjaGVzRXZlbnRzOiBbXVxuICAgIH0pLFxuICAgIFwiaGFuZGxlIGJsdXJcIjogKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4ge1xuICAgICAgYXNzZXJ0RXZlbnQoZXZlbnQsIFwiYmx1clwiKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIFJlYWN0RWRpdG9yLmJsdXIoZXZlbnQuZWRpdG9yKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBGYWlsZWQgdG8gYmx1ciBlZGl0b3I6ICR7ZXJyb3IubWVzc2FnZX1gKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImhhbmRsZSBmb2N1c1wiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+IHtcbiAgICAgIGlmICghY29udGV4dC5zbGF0ZUVkaXRvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gU2xhdGUgZWRpdG9yIGZvdW5kIHRvIGZvY3VzXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjdXJyZW50U2VsZWN0aW9uID0gY29udGV4dC5zbGF0ZUVkaXRvci5zZWxlY3Rpb247XG4gICAgICAgIFJlYWN0RWRpdG9yLmZvY3VzKGNvbnRleHQuc2xhdGVFZGl0b3IpLCBjdXJyZW50U2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuc2VsZWN0KGNvbnRleHQuc2xhdGVFZGl0b3IsIGN1cnJlbnRTZWxlY3Rpb24pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoYEZhaWxlZCB0byBmb2N1cyBlZGl0b3I6ICR7ZXJyb3IubWVzc2FnZX1gKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImhhbmRsZSBiZWhhdmlvciBldmVudFwiOiAoe1xuICAgICAgY29udGV4dCxcbiAgICAgIGV2ZW50LFxuICAgICAgc2VsZlxuICAgIH0pID0+IHtcbiAgICAgIGFzc2VydEV2ZW50KGV2ZW50LCBbXCJiZWhhdmlvciBldmVudFwiXSk7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBiZWhhdmlvcnMgPSBbLi4uY29udGV4dC5iZWhhdmlvcnMudmFsdWVzKCldLm1hcCgoY29uZmlnKSA9PiBjb25maWcuYmVoYXZpb3IpO1xuICAgICAgICBwZXJmb3JtRXZlbnQoe1xuICAgICAgICAgIG1vZGU6IFwicmFpc2VcIixcbiAgICAgICAgICBiZWhhdmlvcnMsXG4gICAgICAgICAgcmVtYWluaW5nRXZlbnRCZWhhdmlvcnM6IGJlaGF2aW9ycyxcbiAgICAgICAgICBldmVudDogZXZlbnQuYmVoYXZpb3JFdmVudCxcbiAgICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvcixcbiAgICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWEsXG4gICAgICAgICAgZ2V0U25hcHNob3Q6ICgpID0+IGNyZWF0ZUVkaXRvclNuYXBzaG90KHtcbiAgICAgICAgICAgIGNvbnZlcnRlcnM6IFsuLi5jb250ZXh0LmNvbnZlcnRlcnNdLFxuICAgICAgICAgICAgZWRpdG9yOiBldmVudC5lZGl0b3IsXG4gICAgICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHNlbGYuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50Lm5hdGl2ZUV2ZW50LFxuICAgICAgICAgIHNlbmRCYWNrOiAoZXZlbnRTZW50QmFjaykgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50U2VudEJhY2sudHlwZSA9PT0gXCJzZXQgZHJhZyBnaG9zdFwiKSB7XG4gICAgICAgICAgICAgIHNlbGYuc2VuZChldmVudFNlbnRCYWNrKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiBldmVudFNlbnRCYWNrLFxuICAgICAgICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBSYWlzaW5nIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwic29ydCBiZWhhdmlvcnNcIjogYXNzaWduKHtcbiAgICAgIGJlaGF2aW9yczogKHtcbiAgICAgICAgY29udGV4dFxuICAgICAgfSkgPT4gY29udGV4dC5iZWhhdmlvcnNTb3J0ZWQgPyBjb250ZXh0LmJlaGF2aW9ycyA6IG5ldyBTZXQoc29ydEJ5UHJpb3JpdHkoWy4uLmNvbnRleHQuYmVoYXZpb3JzLnZhbHVlcygpXSkpLFxuICAgICAgYmVoYXZpb3JzU29ydGVkOiAhMFxuICAgIH0pXG4gIH0sXG4gIGd1YXJkczoge1xuICAgIFwic2xhdGUgaXMgYnVzeVwiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+IGNvbnRleHQuc2xhdGVFZGl0b3IgPyBjb250ZXh0LnNsYXRlRWRpdG9yLm9wZXJhdGlvbnMubGVuZ3RoID4gMCA6ICExXG4gIH1cbn0pLmNyZWF0ZU1hY2hpbmUoe1xuICBpZDogXCJlZGl0b3JcIixcbiAgY29udGV4dDogKHtcbiAgICBpbnB1dFxuICB9KSA9PiAoe1xuICAgIGJlaGF2aW9yczogbmV3IFNldChjb3JlQmVoYXZpb3JzQ29uZmlnKSxcbiAgICBiZWhhdmlvcnNTb3J0ZWQ6ICExLFxuICAgIGNvbnZlcnRlcnM6IG5ldyBTZXQoaW5wdXQuY29udmVydGVycyA/PyBbXSksXG4gICAgZ2V0TGVnYWN5U2NoZW1hOiBpbnB1dC5nZXRMZWdhY3lTY2hlbWEsXG4gICAga2V5R2VuZXJhdG9yOiBpbnB1dC5rZXlHZW5lcmF0b3IsXG4gICAgcGVuZGluZ0V2ZW50czogW10sXG4gICAgcGVuZGluZ0luY29taW5nUGF0Y2hlc0V2ZW50czogW10sXG4gICAgc2NoZW1hOiBpbnB1dC5zY2hlbWEsXG4gICAgc2VsZWN0aW9uOiBudWxsLFxuICAgIGluaXRpYWxSZWFkT25seTogaW5wdXQucmVhZE9ubHkgPz8gITEsXG4gICAgbWF4QmxvY2tzOiBpbnB1dC5tYXhCbG9ja3MsXG4gICAgaW5pdGlhbFZhbHVlOiBpbnB1dC5pbml0aWFsVmFsdWVcbiAgfSksXG4gIG9uOiB7XG4gICAgXCJhZGQgYmVoYXZpb3JcIjoge1xuICAgICAgYWN0aW9uczogXCJhZGQgYmVoYXZpb3IgdG8gY29udGV4dFwiXG4gICAgfSxcbiAgICBcInJlbW92ZSBiZWhhdmlvclwiOiB7XG4gICAgICBhY3Rpb25zOiBcInJlbW92ZSBiZWhhdmlvciBmcm9tIGNvbnRleHRcIlxuICAgIH0sXG4gICAgXCJ1cGRhdGUgbWF4QmxvY2tzXCI6IHtcbiAgICAgIGFjdGlvbnM6IGFzc2lnbih7XG4gICAgICAgIG1heEJsb2NrczogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC5tYXhCbG9ja3NcbiAgICAgIH0pXG4gICAgfSxcbiAgICBcInVwZGF0ZSBzZWxlY3Rpb25cIjoge1xuICAgICAgYWN0aW9uczogW2Fzc2lnbih7XG4gICAgICAgIHNlbGVjdGlvbjogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC5zZWxlY3Rpb25cbiAgICAgIH0pLCBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoe1xuICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgdHlwZTogXCJzZWxlY3Rpb25cIlxuICAgICAgfSkpXVxuICAgIH0sXG4gICAgXCJzZXQgZHJhZyBnaG9zdFwiOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICBkcmFnR2hvc3Q6ICh7XG4gICAgICAgICAgZXZlbnRcbiAgICAgICAgfSkgPT4gZXZlbnQuZ2hvc3RcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICB0eXBlOiBcInBhcmFsbGVsXCIsXG4gIHN0YXRlczoge1xuICAgIFwiZWRpdCBtb2RlXCI6IHtcbiAgICAgIGluaXRpYWw6IFwicmVhZCBvbmx5XCIsXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgXCJyZWFkIG9ubHlcIjoge1xuICAgICAgICAgIGluaXRpYWw6IFwiZGV0ZXJtaW5lIGluaXRpYWwgZWRpdCBtb2RlXCIsXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIFwiYmVoYXZpb3IgZXZlbnRcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJzb3J0IGJlaGF2aW9yc1wiLCBcImhhbmRsZSBiZWhhdmlvciBldmVudFwiXSxcbiAgICAgICAgICAgICAgZ3VhcmQ6ICh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlID09PSBcImNsaXBib2FyZC5jb3B5XCIgfHwgZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlID09PSBcIm1vdXNlLmNsaWNrXCIgfHwgZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlID09PSBcInNlcmlhbGl6ZVwiIHx8IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSA9PT0gXCJzZXJpYWxpemF0aW9uLmZhaWx1cmVcIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwic2VyaWFsaXphdGlvbi5zdWNjZXNzXCIgfHwgZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlID09PSBcInNlbGVjdFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgIFwiZGV0ZXJtaW5lIGluaXRpYWwgZWRpdCBtb2RlXCI6IHtcbiAgICAgICAgICAgICAgZW50cnk6IFsoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVidWckNyhcImVudHJ5OiBlZGl0IG1vZGUtPnJlYWQgb25seS0+ZGV0ZXJtaW5lIGluaXRpYWwgZWRpdCBtb2RlXCIpO1xuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgZXhpdDogWygpID0+IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyQ3KFwiZXhpdDogZWRpdCBtb2RlLT5yZWFkIG9ubHktPmRldGVybWluZSBpbml0aWFsIGVkaXQgbW9kZVwiKTtcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgXCJkb25lIHN5bmNpbmcgdmFsdWVcIjogW3tcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLmVkaXQgbW9kZS5yZWFkIG9ubHkucmVhZCBvbmx5XCIsXG4gICAgICAgICAgICAgICAgICBndWFyZDogKHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICAgICAgfSkgPT4gY29udGV4dC5pbml0aWFsUmVhZE9ubHlcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5lZGl0IG1vZGUuZWRpdGFibGVcIlxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlYWQgb25seVwiOiB7XG4gICAgICAgICAgICAgIGVudHJ5OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJlbnRyeTogZWRpdCBtb2RlLT5yZWFkIG9ubHktPnJlYWQgb25seVwiKTtcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVidWckNyhcImV4aXQ6IGVkaXQgbW9kZS0+cmVhZCBvbmx5LT5yZWFkIG9ubHlcIik7XG4gICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIFwidXBkYXRlIHJlYWRPbmx5XCI6IHtcbiAgICAgICAgICAgICAgICAgIGd1YXJkOiAoe1xuICAgICAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICAgICAgfSkgPT4gIWV2ZW50LnJlYWRPbmx5LFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiNlZGl0b3IuZWRpdCBtb2RlLmVkaXRhYmxlXCIsXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJlbWl0IGVkaXRhYmxlXCJdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlZGl0YWJsZToge1xuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBcInVwZGF0ZSByZWFkT25seVwiOiB7XG4gICAgICAgICAgICAgIGd1YXJkOiAoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50LnJlYWRPbmx5LFxuICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5lZGl0IG1vZGUucmVhZCBvbmx5LnJlYWQgb25seVwiLFxuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJlbWl0IHJlYWQgb25seVwiXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiYmVoYXZpb3IgZXZlbnRcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJzb3J0IGJlaGF2aW9yc1wiLCBcImhhbmRsZSBiZWhhdmlvciBldmVudFwiXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsdXI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogXCJoYW5kbGUgYmx1clwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcIi5mb2N1c2luZ1wiLFxuICAgICAgICAgICAgICBhY3Rpb25zOiBbYXNzaWduKHtcbiAgICAgICAgICAgICAgICBzbGF0ZUVkaXRvcjogKHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgICAgfSkgPT4gZXZlbnQuZWRpdG9yXG4gICAgICAgICAgICAgIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaW5pdGlhbDogXCJpZGxlXCIsXG4gICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICBpZGxlOiB7XG4gICAgICAgICAgICAgIGVudHJ5OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJlbnRyeTogZWRpdCBtb2RlLT5lZGl0YWJsZS0+aWRsZVwiKTtcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVidWckNyhcImV4aXQ6IGVkaXQgbW9kZS0+ZWRpdGFibGUtaWRsZVwiKTtcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgZHJhZ3N0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICBhY3Rpb25zOiBbYXNzaWduKHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxEcmFnOiAoe1xuICAgICAgICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiBldmVudC5vcmlnaW5cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pXSxcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJkcmFnZ2luZyBpbnRlcm5hbGx5XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb2N1c2luZzoge1xuICAgICAgICAgICAgICBpbml0aWFsOiBcImNoZWNraW5nIGlmIGJ1c3lcIixcbiAgICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgXCJjaGVja2luZyBpZiBidXN5XCI6IHtcbiAgICAgICAgICAgICAgICAgIGVudHJ5OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyQ3KFwiZW50cnk6IGVkaXQgbW9kZS0+ZWRpdGFibGUtPmZvY3VzaW5nLT5jaGVja2luZyBpZiBidXN5XCIpO1xuICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICBleGl0OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyQ3KFwiZXhpdDogZWRpdCBtb2RlLT5lZGl0YWJsZS0+Zm9jdXNpbmctPmNoZWNraW5nIGlmIGJ1c3lcIik7XG4gICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAgIGFsd2F5czogW3tcbiAgICAgICAgICAgICAgICAgICAgZ3VhcmQ6IFwic2xhdGUgaXMgYnVzeVwiLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiYnVzeVwiXG4gICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLmVkaXQgbW9kZS5lZGl0YWJsZS5pZGxlXCIsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IFtcImhhbmRsZSBmb2N1c1wiXVxuICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ1c3k6IHtcbiAgICAgICAgICAgICAgICAgIGVudHJ5OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyQ3KFwiZW50cnk6IGVkaXQgbW9kZS0+ZWRpdGFibGUtPmZvY3VzaW5nLWJ1c3lcIik7XG4gICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJleGl0OiBlZGl0IG1vZGUtPmVkaXRhYmxlLT5mb2N1c2luZy0+YnVzeVwiKTtcbiAgICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgICAgYWZ0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgMTA6IHtcbiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiY2hlY2tpbmcgaWYgYnVzeVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRyYWdnaW5nIGludGVybmFsbHlcIjoge1xuICAgICAgICAgICAgICBlbnRyeTogWygpID0+IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyQ3KFwiZW50cnk6IGVkaXQgbW9kZS0+ZWRpdGFibGUtPmRyYWdnaW5nIGludGVybmFsbHlcIik7XG4gICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICBleGl0OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJleGl0OiBlZGl0IG1vZGUtPmVkaXRhYmxlLT5kcmFnZ2luZyBpbnRlcm5hbGx5XCIpO1xuICAgICAgICAgICAgICB9LCAoe1xuICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LmRyYWdHaG9zdClcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhZ0dob3N0LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKGNvbnRleHQuZHJhZ0dob3N0KTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBSZW1vdmluZyB0aGUgZHJhZyBnaG9zdCBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgIGRyYWdHaG9zdDogdm9pZCAwXG4gICAgICAgICAgICAgIH0pLCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgIGludGVybmFsRHJhZzogdm9pZCAwXG4gICAgICAgICAgICAgIH0pXSxcbiAgICAgICAgICAgICAgdGFnczogW1wiZHJhZ2dpbmcgaW50ZXJuYWxseVwiXSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBkcmFnZW5kOiB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcm9wOiB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXR1cDoge1xuICAgICAgaW5pdGlhbDogXCJzZXR0aW5nIHVwXCIsXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgXCJzZXR0aW5nIHVwXCI6IHtcbiAgICAgICAgICBlbnRyeTogWygpID0+IHtcbiAgICAgICAgICAgIGRlYnVnJDcoXCJlbnRyeTogc2V0dXAtPnNldHRpbmcgdXBcIik7XG4gICAgICAgICAgfV0sXG4gICAgICAgICAgZXhpdDogWygpID0+IHtcbiAgICAgICAgICAgIGRlYnVnJDcoXCJleGl0OiBzZXR1cC0+c2V0dGluZyB1cFwiKTtcbiAgICAgICAgICB9LCBcImVtaXQgcmVhZHlcIiwgXCJlbWl0IHBlbmRpbmcgaW5jb21pbmcgcGF0Y2hlc1wiLCBcImNsZWFyIHBlbmRpbmcgaW5jb21pbmcgcGF0Y2hlc1wiXSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgXCJpbnRlcm5hbC5wYXRjaFwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiZGVmZXIgZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG11dGF0aW9uOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiZGVmZXIgZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZG9uZSBzeW5jaW5nIHZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcInNldCB1cFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0Y2hlczoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJkZWZlciBpbmNvbWluZyBwYXRjaGVzXCJdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInNldCB1cFwiOiB7XG4gICAgICAgICAgdHlwZTogXCJwYXJhbGxlbFwiLFxuICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgXCJ2YWx1ZSBzeW5jXCI6IHtcbiAgICAgICAgICAgICAgaW5pdGlhbDogXCJpZGxlXCIsXG4gICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIGlkbGU6IHtcbiAgICAgICAgICAgICAgICAgIGVudHJ5OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyQ3KFwiZW50cnk6IHNldHVwLT5zZXQgdXAtPnZhbHVlIHN5bmMtPmlkbGVcIik7XG4gICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJleGl0OiBzZXR1cC0+c2V0IHVwLT52YWx1ZSBzeW5jLT5pZGxlXCIpO1xuICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICBwYXRjaGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogW2VtaXQoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInN5bmNpbmcgdmFsdWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJzeW5jaW5nIHZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJzeW5jaW5nIHZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgICAgIGVudHJ5OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyQ3KFwiZW50cnk6IHNldHVwLT5zZXQgdXAtPnZhbHVlIHN5bmMtPnN5bmNpbmcgdmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJleGl0OiBzZXR1cC0+c2V0IHVwLT52YWx1ZSBzeW5jLT5zeW5jaW5nIHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgfSwgXCJlbWl0IHBlbmRpbmcgaW5jb21pbmcgcGF0Y2hlc1wiLCBcImNsZWFyIHBlbmRpbmcgaW5jb21pbmcgcGF0Y2hlc1wiXSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJkZWZlciBpbmNvbWluZyBwYXRjaGVzXCJdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZG9uZSBzeW5jaW5nIHZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3cml0aW5nOiB7XG4gICAgICAgICAgICAgIGluaXRpYWw6IFwicHJpc3RpbmVcIixcbiAgICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgcHJpc3RpbmU6IHtcbiAgICAgICAgICAgICAgICAgIGluaXRpYWw6IFwiaWRsZVwiLFxuICAgICAgICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGlkbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICBlbnRyeTogWygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJlbnRyeTogc2V0dXAtPnNldCB1cC0+d3JpdGluZy0+cHJpc3RpbmUtPmlkbGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgZXhpdDogWygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJleGl0OiBzZXR1cC0+c2V0IHVwLT53cml0aW5nLT5wcmlzdGluZS0+aWRsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXppbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImludGVybmFsLnBhdGNoXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5zZXR1cC5zZXQgdXAud3JpdGluZy5kaXJ0eVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5zZXR1cC5zZXQgdXAud3JpdGluZy5kaXJ0eVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemluZzoge1xuICAgICAgICAgICAgICAgICAgICAgIGVudHJ5OiBbKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWckNyhcImVudHJ5OiBzZXR1cC0+c2V0IHVwLT53cml0aW5nLT5wcmlzdGluZS0+bm9ybWFsaXppbmdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgZXhpdDogWygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJleGl0OiBzZXR1cC0+c2V0IHVwLT53cml0aW5nLT5wcmlzdGluZS0+bm9ybWFsaXppbmdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZG9uZSBub3JtYWxpemluZ1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJpZGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImludGVybmFsLnBhdGNoXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkaXJ0eToge1xuICAgICAgICAgICAgICAgICAgZW50cnk6IFsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJlbnRyeTogc2V0dXAtPnNldCB1cC0+d3JpdGluZy0+ZGlydHlcIik7XG4gICAgICAgICAgICAgICAgICB9LCBcImVtaXQgcGVuZGluZyBldmVudHNcIiwgXCJjbGVhciBwZW5kaW5nIGV2ZW50c1wiXSxcbiAgICAgICAgICAgICAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnJDcoXCJleGl0OiBzZXR1cC0+c2V0IHVwLT53cml0aW5nLT5kaXJ0eVwiKTtcbiAgICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbnRlcm5hbC5wYXRjaFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJlbWl0IHBhdGNoIGV2ZW50XCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiBcImVtaXQgbXV0YXRpb24gZXZlbnRcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KSwgZGVidWckNiA9IGRlYnVnV2l0aE5hbWUoXCJtdXRhdGlvbi1tYWNoaW5lXCIpLCBtdXRhdGlvbk1hY2hpbmUgPSBzZXR1cCh7XG4gIHR5cGVzOiB7XG4gICAgY29udGV4dDoge30sXG4gICAgZXZlbnRzOiB7fSxcbiAgICBpbnB1dDoge30sXG4gICAgZW1pdHRlZDoge31cbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIFwiYXNzaWduIHJlYWRPbmx5XCI6IGFzc2lnbih7XG4gICAgICByZWFkT25seTogKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IGV2ZW50LnR5cGUgPT09IFwidXBkYXRlIHJlYWRPbmx5XCIgPyBldmVudC5yZWFkT25seSA6IGNvbnRleHQucmVhZE9ubHlcbiAgICB9KSxcbiAgICBcImVtaXQgcGF0Y2hcIjogZW1pdCgoe1xuICAgICAgZXZlbnRcbiAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwicGF0Y2hcIiksIHtcbiAgICAgIHR5cGU6IFwicGF0Y2hcIixcbiAgICAgIHBhdGNoOiBldmVudC5wYXRjaFxuICAgIH0pKSxcbiAgICBcImVtaXQgaGFzIHBlbmRpbmcgbXV0YXRpb25zXCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJoYXMgcGVuZGluZyBtdXRhdGlvbnNcIlxuICAgIH0pLFxuICAgIFwiZW1pdCBtdXRhdGlvbnNcIjogZW5xdWV1ZUFjdGlvbnMoKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBlbnF1ZXVlXG4gICAgfSkgPT4ge1xuICAgICAgZm9yIChjb25zdCBidWxrIG9mIGNvbnRleHQucGVuZGluZ011dGF0aW9ucylcbiAgICAgICAgZW5xdWV1ZS5lbWl0KHtcbiAgICAgICAgICB0eXBlOiBcIm11dGF0aW9uXCIsXG4gICAgICAgICAgcGF0Y2hlczogYnVsay5wYXRjaGVzLFxuICAgICAgICAgIHNuYXBzaG90OiBidWxrLnZhbHVlXG4gICAgICAgIH0pO1xuICAgIH0pLFxuICAgIFwiY2xlYXIgcGVuZGluZyBtdXRhdGlvbnNcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdNdXRhdGlvbnM6IFtdXG4gICAgfSksXG4gICAgXCJkZWZlciBtdXRhdGlvblwiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ011dGF0aW9uczogKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IHtcbiAgICAgICAgaWYgKGFzc2VydEV2ZW50KGV2ZW50LCBcInBhdGNoXCIpLCBjb250ZXh0LnBlbmRpbmdNdXRhdGlvbnMubGVuZ3RoID09PSAwKVxuICAgICAgICAgIHJldHVybiBbe1xuICAgICAgICAgICAgb3BlcmF0aW9uSWQ6IGV2ZW50Lm9wZXJhdGlvbklkLFxuICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnZhbHVlLFxuICAgICAgICAgICAgcGF0Y2hlczogW2V2ZW50LnBhdGNoXVxuICAgICAgICAgIH1dO1xuICAgICAgICBjb25zdCBsYXN0QnVsayA9IGNvbnRleHQucGVuZGluZ011dGF0aW9ucy5hdCgtMSk7XG4gICAgICAgIHJldHVybiBsYXN0QnVsayAmJiBsYXN0QnVsay5vcGVyYXRpb25JZCA9PT0gZXZlbnQub3BlcmF0aW9uSWQgPyBjb250ZXh0LnBlbmRpbmdNdXRhdGlvbnMuc2xpY2UoMCwgLTEpLmNvbmNhdCh7XG4gICAgICAgICAgdmFsdWU6IGV2ZW50LnZhbHVlLFxuICAgICAgICAgIG9wZXJhdGlvbklkOiBsYXN0QnVsay5vcGVyYXRpb25JZCxcbiAgICAgICAgICBwYXRjaGVzOiBbLi4ubGFzdEJ1bGsucGF0Y2hlcywgZXZlbnQucGF0Y2hdXG4gICAgICAgIH0pIDogY29udGV4dC5wZW5kaW5nTXV0YXRpb25zLmNvbmNhdCh7XG4gICAgICAgICAgdmFsdWU6IGV2ZW50LnZhbHVlLFxuICAgICAgICAgIG9wZXJhdGlvbklkOiBldmVudC5vcGVyYXRpb25JZCxcbiAgICAgICAgICBwYXRjaGVzOiBbZXZlbnQucGF0Y2hdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pLFxuICAgIFwiY2xlYXIgcGVuZGluZyBwYXRjaCBldmVudHNcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdQYXRjaEV2ZW50czogW11cbiAgICB9KSxcbiAgICBcImRlZmVyIHBhdGNoXCI6IGFzc2lnbih7XG4gICAgICBwZW5kaW5nUGF0Y2hFdmVudHM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudC50eXBlID09PSBcInBhdGNoXCIgPyBbLi4uY29udGV4dC5wZW5kaW5nUGF0Y2hFdmVudHMsIGV2ZW50XSA6IGNvbnRleHQucGVuZGluZ1BhdGNoRXZlbnRzXG4gICAgfSksXG4gICAgXCJlbWl0IHBlbmRpbmcgcGF0Y2ggZXZlbnRzXCI6IGVucXVldWVBY3Rpb25zKCh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZW5xdWV1ZVxuICAgIH0pID0+IHtcbiAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgY29udGV4dC5wZW5kaW5nUGF0Y2hFdmVudHMpXG4gICAgICAgIGVucXVldWUuZW1pdChldmVudCk7XG4gICAgfSlcbiAgfSxcbiAgYWN0b3JzOiB7XG4gICAgXCJ0eXBlIGxpc3RlbmVyXCI6IGZyb21DYWxsYmFjaygoe1xuICAgICAgaW5wdXQsXG4gICAgICBzZW5kQmFja1xuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsQXBwbHkgPSBpbnB1dC5zbGF0ZUVkaXRvci5hcHBseTtcbiAgICAgIHJldHVybiBpbnB1dC5zbGF0ZUVkaXRvci5hcHBseSA9IChvcCkgPT4ge1xuICAgICAgICBvcC50eXBlID09PSBcImluc2VydF90ZXh0XCIgfHwgb3AudHlwZSA9PT0gXCJyZW1vdmVfdGV4dFwiID8gc2VuZEJhY2soe1xuICAgICAgICAgIHR5cGU6IFwidHlwaW5nXCJcbiAgICAgICAgfSkgOiBzZW5kQmFjayh7XG4gICAgICAgICAgdHlwZTogXCJub3QgdHlwaW5nXCJcbiAgICAgICAgfSksIG9yaWdpbmFsQXBwbHkob3ApO1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBpbnB1dC5zbGF0ZUVkaXRvci5hcHBseSA9IG9yaWdpbmFsQXBwbHk7XG4gICAgICB9O1xuICAgIH0pLFxuICAgIFwibXV0YXRpb24gZGVib3VuY2VyXCI6IGZyb21DYWxsYmFjaygoe1xuICAgICAgc2VuZEJhY2tcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgc2VuZEJhY2soe1xuICAgICAgICAgIHR5cGU6IFwibXV0YXRpb24gZGVsYXkgcGFzc2VkXCJcbiAgICAgICAgfSk7XG4gICAgICB9LCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJ0ZXN0XCIgPyAyNTAgOiAwKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgfTtcbiAgICB9KVxuICB9LFxuICBndWFyZHM6IHtcbiAgICBcImlzIHJlYWQtb25seVwiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+IGNvbnRleHQucmVhZE9ubHksXG4gICAgXCJpcyB0eXBpbmdcIjogc3RhdGVJbih7XG4gICAgICB0eXBpbmc6IFwidHlwaW5nXCJcbiAgICB9KSxcbiAgICBcInNsYXRlIGlzIG5vcm1hbGl6aW5nXCI6ICh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gRWRpdG9yLmlzTm9ybWFsaXppbmcoY29udGV4dC5zbGF0ZUVkaXRvcilcbiAgfSxcbiAgZGVsYXlzOiB7XG4gICAgXCJ0eXBlIGRlYm91bmNlXCI6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInRlc3RcIiA/IDAgOiAyNTBcbiAgfVxufSkuY3JlYXRlTWFjaGluZSh7XG4gIGlkOiBcIm11dGF0aW9uXCIsXG4gIGNvbnRleHQ6ICh7XG4gICAgaW5wdXRcbiAgfSkgPT4gKHtcbiAgICBwZW5kaW5nTXV0YXRpb25zOiBbXSxcbiAgICBwZW5kaW5nUGF0Y2hFdmVudHM6IFtdLFxuICAgIHJlYWRPbmx5OiBpbnB1dC5yZWFkT25seSxcbiAgICBzY2hlbWE6IGlucHV0LnNjaGVtYSxcbiAgICBzbGF0ZUVkaXRvcjogaW5wdXQuc2xhdGVFZGl0b3JcbiAgfSksXG4gIG9uOiB7XG4gICAgXCJ1cGRhdGUgcmVhZE9ubHlcIjoge1xuICAgICAgYWN0aW9uczogW1wiYXNzaWduIHJlYWRPbmx5XCJdXG4gICAgfVxuICB9LFxuICB0eXBlOiBcInBhcmFsbGVsXCIsXG4gIHN0YXRlczoge1xuICAgIHR5cGluZzoge1xuICAgICAgaW5pdGlhbDogXCJpZGxlXCIsXG4gICAgICBpbnZva2U6IHtcbiAgICAgICAgc3JjOiBcInR5cGUgbGlzdGVuZXJcIixcbiAgICAgICAgaW5wdXQ6ICh7XG4gICAgICAgICAgY29udGV4dFxuICAgICAgICB9KSA9PiAoe1xuICAgICAgICAgIHNsYXRlRWRpdG9yOiBjb250ZXh0LnNsYXRlRWRpdG9yXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgc3RhdGVzOiB7XG4gICAgICAgIGlkbGU6IHtcbiAgICAgICAgICBlbnRyeTogWygpID0+IHtcbiAgICAgICAgICAgIGRlYnVnJDYoXCJlbnRyeTogdHlwaW5nLT5pZGxlXCIpO1xuICAgICAgICAgIH1dLFxuICAgICAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyQ2KFwiZXhpdDogdHlwaW5nLT5pZGxlXCIpLCBkZWJ1ZyQ2KFwiZW50cnk6IHR5cGluZy0+dHlwaW5nXCIpO1xuICAgICAgICAgIH1dLFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICB0eXBpbmc6IHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcInR5cGluZ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0eXBpbmc6IHtcbiAgICAgICAgICBhZnRlcjoge1xuICAgICAgICAgICAgXCJ0eXBlIGRlYm91bmNlXCI6IHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcImlkbGVcIixcbiAgICAgICAgICAgICAgYWN0aW9uczogWygpID0+IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyQ2KFwiZXhpdDogdHlwaW5nLT50eXBpbmdcIik7XG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgXCJub3QgdHlwaW5nXCI6IHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcImlkbGVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGluZzoge1xuICAgICAgICAgICAgICB0YXJnZXQ6IFwidHlwaW5nXCIsXG4gICAgICAgICAgICAgIHJlZW50ZXI6ICEwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtdXRhdGlvbnM6IHtcbiAgICAgIGluaXRpYWw6IFwiaWRsZVwiLFxuICAgICAgc3RhdGVzOiB7XG4gICAgICAgIGlkbGU6IHtcbiAgICAgICAgICBlbnRyeTogWygpID0+IHtcbiAgICAgICAgICAgIGRlYnVnJDYoXCJlbnRyeTogbXV0YXRpb25zLT5pZGxlXCIpO1xuICAgICAgICAgIH1dLFxuICAgICAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyQ2KFwiZXhpdDogbXV0YXRpb25zLT5pZGxlXCIpO1xuICAgICAgICAgIH1dLFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBwYXRjaDogW3tcbiAgICAgICAgICAgICAgZ3VhcmQ6IFwiaXMgcmVhZC1vbmx5XCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImRlZmVyIHBhdGNoXCIsIFwiZGVmZXIgbXV0YXRpb25cIl0sXG4gICAgICAgICAgICAgIHRhcmdldDogXCJoYXMgcGVuZGluZyBtdXRhdGlvbnNcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJlbWl0IHBhdGNoXCIsIFwiZGVmZXIgbXV0YXRpb25cIl0sXG4gICAgICAgICAgICAgIHRhcmdldDogXCJoYXMgcGVuZGluZyBtdXRhdGlvbnNcIlxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaGFzIHBlbmRpbmcgbXV0YXRpb25zXCI6IHtcbiAgICAgICAgICBlbnRyeTogWygpID0+IHtcbiAgICAgICAgICAgIGRlYnVnJDYoXCJlbnRyeTogbXV0YXRpb25zLT5oYXMgcGVuZGluZyBtdXRhdGlvbnNcIik7XG4gICAgICAgICAgfSwgXCJlbWl0IGhhcyBwZW5kaW5nIG11dGF0aW9uc1wiXSxcbiAgICAgICAgICBleGl0OiBbKCkgPT4ge1xuICAgICAgICAgICAgZGVidWckNihcImV4aXQ6IG11dGF0aW9ucy0+aGFzIHBlbmRpbmcgbXV0YXRpb25zXCIpO1xuICAgICAgICAgIH1dLFxuICAgICAgICAgIGludm9rZToge1xuICAgICAgICAgICAgc3JjOiBcIm11dGF0aW9uIGRlYm91bmNlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgXCJtdXRhdGlvbiBkZWxheSBwYXNzZWRcIjoge1xuICAgICAgICAgICAgICBndWFyZDogYW5kKFtub3QoXCJpcyByZWFkLW9ubHlcIiksIG5vdChcImlzIHR5cGluZ1wiKSwgXCJzbGF0ZSBpcyBub3JtYWxpemluZ1wiXSksXG4gICAgICAgICAgICAgIHRhcmdldDogXCJpZGxlXCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImVtaXQgcGVuZGluZyBwYXRjaCBldmVudHNcIiwgXCJjbGVhciBwZW5kaW5nIHBhdGNoIGV2ZW50c1wiLCBcImVtaXQgbXV0YXRpb25zXCIsIFwiY2xlYXIgcGVuZGluZyBtdXRhdGlvbnNcIl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRjaDogW3tcbiAgICAgICAgICAgICAgZ3VhcmQ6IFwiaXMgcmVhZC1vbmx5XCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImRlZmVyIHBhdGNoXCIsIFwiZGVmZXIgbXV0YXRpb25cIl1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYWN0aW9uczogW1wiZW1pdCBwYXRjaFwiLCBcImRlZmVyIG11dGF0aW9uXCJdXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSksIGRlYnVnJDUgPSBkZWJ1Z1dpdGhOYW1lKFwiQVBJOmVkaXRhYmxlXCIpO1xuZnVuY3Rpb24gY3JlYXRlRWRpdGFibGVBUEkoZWRpdG9yLCBlZGl0b3JBY3Rvcikge1xuICBjb25zdCB0eXBlcyA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWE7XG4gIHJldHVybiB7XG4gICAgZm9jdXM6ICgpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImZvY3VzXCIsXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICBibHVyOiAoKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJibHVyXCIsXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b2dnbGVNYXJrOiAobWFyaykgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZGVjb3JhdG9yLnRvZ2dsZVwiLFxuICAgICAgICAgIGRlY29yYXRvcjogbWFya1xuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdG9nZ2xlTGlzdDogKGxpc3RJdGVtKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJsaXN0IGl0ZW0udG9nZ2xlXCIsXG4gICAgICAgICAgbGlzdEl0ZW1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRvZ2dsZUJsb2NrU3R5bGU6IChzdHlsZSkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwic3R5bGUudG9nZ2xlXCIsXG4gICAgICAgICAgc3R5bGVcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGlzTWFya0FjdGl2ZTogKG1hcmspID0+IHtcbiAgICAgIGNvbnN0IHNuYXBzaG90ID0gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICAgICAgICBlZGl0b3JBY3RvclNuYXBzaG90OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLFxuICAgICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBlZGl0b3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGdldEFjdGl2ZURlY29yYXRvcnMoc25hcHNob3QpLmluY2x1ZGVzKG1hcmspO1xuICAgIH0sXG4gICAgbWFya3M6ICgpID0+IHtcbiAgICAgIGNvbnN0IHNuYXBzaG90ID0gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICAgICAgICBlZGl0b3JBY3RvclNuYXBzaG90OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLFxuICAgICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBlZGl0b3JcbiAgICAgIH0pLCBhY3RpdmVBbm5vdGF0aW9ucyA9IGdldEFjdGl2ZUFubm90YXRpb25zTWFya3Moc25hcHNob3QpLCBhY3RpdmVEZWNvcmF0b3JzID0gZ2V0QWN0aXZlRGVjb3JhdG9ycyhzbmFwc2hvdCk7XG4gICAgICByZXR1cm4gWy4uLmFjdGl2ZUFubm90YXRpb25zLCAuLi5hY3RpdmVEZWNvcmF0b3JzXTtcbiAgICB9LFxuICAgIHVuZG86ICgpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImhpc3RvcnkudW5kb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZWRvOiAoKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJoaXN0b3J5LnJlZG9cIlxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2VsZWN0OiAoc2VsZWN0aW9uKSA9PiB7XG4gICAgICBjb25zdCBzbGF0ZVNlbGVjdGlvbiA9IHRvU2xhdGVSYW5nZSh7XG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICAgICAgdmFsdWU6IGVkaXRvci52YWx1ZSxcbiAgICAgICAgICBzZWxlY3Rpb25cbiAgICAgICAgfSxcbiAgICAgICAgYmxvY2tJbmRleE1hcDogZWRpdG9yLmJsb2NrSW5kZXhNYXBcbiAgICAgIH0pO1xuICAgICAgc2xhdGVTZWxlY3Rpb24gPyBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHNsYXRlU2VsZWN0aW9uKSA6IFRyYW5zZm9ybXMuZGVzZWxlY3QoZWRpdG9yKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgfSxcbiAgICBmb2N1c0Jsb2NrOiAoKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgICBjb25zdCBibG9jayA9IE5vZGUuZGVzY2VuZGFudChlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKSk7XG4gICAgICAgIGlmIChibG9jaylcbiAgICAgICAgICByZXR1cm4gZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpWzBdO1xuICAgICAgfVxuICAgIH0sXG4gICAgZm9jdXNDaGlsZDogKCkgPT4ge1xuICAgICAgaWYgKGVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBOb2RlLmRlc2NlbmRhbnQoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSkpO1xuICAgICAgICBpZiAoYmxvY2sgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSlcbiAgICAgICAgICByZXR1cm4gZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpWzBdLmNoaWxkcmVuW2VkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aFsxXV07XG4gICAgICB9XG4gICAgfSxcbiAgICBpbnNlcnRDaGlsZDogKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICBpZiAodHlwZS5uYW1lICE9PSB0eXBlcy5zcGFuLm5hbWUpXG4gICAgICAgIHJldHVybiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgdHlwZTogXCJpbnNlcnQuaW5saW5lIG9iamVjdFwiLFxuICAgICAgICAgICAgaW5saW5lT2JqZWN0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHR5cGUubmFtZSxcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGVkaXRvclxuICAgICAgICB9KSwgZWRpdG9yLnNlbGVjdGlvbiA/IHNsYXRlUmFuZ2VUb1NlbGVjdGlvbih7XG4gICAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICByYW5nZTogZWRpdG9yLnNlbGVjdGlvblxuICAgICAgICB9KT8uZm9jdXMucGF0aCA/PyBbXSA6IFtdO1xuICAgICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZWRpdG9yIGhhcyBubyBzZWxlY3Rpb25cIik7XG4gICAgICBjb25zdCBbZm9jdXNCbG9ja10gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKSxcbiAgICAgICAgbWF0Y2g6IChuKSA9PiBuLl90eXBlID09PSB0eXBlcy5ibG9jay5uYW1lXG4gICAgICB9KSlbMF0gfHwgW3ZvaWQgMF07XG4gICAgICBpZiAoIWZvY3VzQmxvY2spXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGZvY3VzZWQgdGV4dCBibG9ja1wiKTtcbiAgICAgIGlmICh0eXBlLm5hbWUgIT09IHR5cGVzLnNwYW4ubmFtZSAmJiAhdHlwZXMuaW5saW5lT2JqZWN0cy5zb21lKCh0KSA9PiB0Lm5hbWUgPT09IHR5cGUubmFtZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgdHlwZSBjYW5ub3QgYmUgaW5zZXJ0ZWQgYXMgYSBjaGlsZCB0byBhIHRleHQgYmxvY2tcIik7XG4gICAgICBjb25zdCBjaGlsZCA9IHRvU2xhdGVWYWx1ZShbe1xuICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgIF90eXBlOiB0eXBlcy5ibG9jay5uYW1lLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgX3R5cGU6IHR5cGUubmFtZSxcbiAgICAgICAgICAuLi52YWx1ZSB8fCB7fVxuICAgICAgICB9XVxuICAgICAgfV0sIHtcbiAgICAgICAgc2NoZW1hVHlwZXM6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWFcbiAgICAgIH0pWzBdLmNoaWxkcmVuWzBdLCBmb2N1c0NoaWxkUGF0aCA9IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAyKSwgaXNTcGFuTm9kZTIgPSBjaGlsZC5fdHlwZSA9PT0gdHlwZXMuc3Bhbi5uYW1lLCBmb2N1c05vZGUgPSBOb2RlLmdldChlZGl0b3IsIGZvY3VzQ2hpbGRQYXRoKTtcbiAgICAgIHJldHVybiBpc1NwYW5Ob2RlMiAmJiBmb2N1c05vZGUuX3R5cGUgIT09IHR5cGVzLnNwYW4ubmFtZSAmJiAoZGVidWckNShcIkluc2VydGluZyBzcGFuIGNoaWxkIG5leHQgdG8gaW5saW5lIG9iamVjdCBjaGlsZCwgbW92aW5nIHNlbGVjdGlvbiArIDFcIiksIGVkaXRvci5tb3ZlKHtcbiAgICAgICAgZGlzdGFuY2U6IDEsXG4gICAgICAgIHVuaXQ6IFwiY2hhcmFjdGVyXCJcbiAgICAgIH0pKSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGNoaWxkLCB7XG4gICAgICAgIHNlbGVjdDogITAsXG4gICAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uXG4gICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCksIGVkaXRvci5zZWxlY3Rpb24gPyBzbGF0ZVJhbmdlVG9TZWxlY3Rpb24oe1xuICAgICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICAgIGVkaXRvcixcbiAgICAgICAgcmFuZ2U6IGVkaXRvci5zZWxlY3Rpb25cbiAgICAgIH0pPy5mb2N1cy5wYXRoID8/IFtdIDogW107XG4gICAgfSxcbiAgICBpbnNlcnRCbG9jazogKHR5cGUsIHZhbHVlKSA9PiAoZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgX3R5cGU6IHR5cGUubmFtZSxcbiAgICAgICAgICAuLi52YWx1ZSB8fCB7fVxuICAgICAgICB9LFxuICAgICAgICBwbGFjZW1lbnQ6IFwiYXV0b1wiXG4gICAgICB9LFxuICAgICAgZWRpdG9yXG4gICAgfSksIGVkaXRvci5zZWxlY3Rpb24gPyBzbGF0ZVJhbmdlVG9TZWxlY3Rpb24oe1xuICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgICAgZWRpdG9yLFxuICAgICAgcmFuZ2U6IGVkaXRvci5zZWxlY3Rpb25cbiAgICB9KT8uZm9jdXMucGF0aCA/PyBbXSA6IFtdKSxcbiAgICBoYXNCbG9ja1N0eWxlOiAoc3R5bGUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBpc1N0eWxlQWN0aXZlKHtcbiAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgc3R5bGVcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFzTGlzdFN0eWxlOiAobGlzdEl0ZW0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBpc0xpc3RJdGVtQWN0aXZlKHtcbiAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgbGlzdEl0ZW1cbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNWb2lkOiAoZWxlbWVudCkgPT4gIVt0eXBlcy5ibG9jay5uYW1lLCB0eXBlcy5zcGFuLm5hbWVdLmluY2x1ZGVzKGVsZW1lbnQuX3R5cGUpLFxuICAgIGZpbmRCeVBhdGg6IChwYXRoKSA9PiB7XG4gICAgICBjb25zdCBzbGF0ZVBhdGggPSB0b1NsYXRlUmFuZ2Uoe1xuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgICAgICAgIHZhbHVlOiBlZGl0b3IudmFsdWUsXG4gICAgICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgICAgICBmb2N1czoge1xuICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBibG9ja0luZGV4TWFwOiBlZGl0b3IuYmxvY2tJbmRleE1hcFxuICAgICAgfSk7XG4gICAgICBpZiAoc2xhdGVQYXRoKSB7XG4gICAgICAgIGNvbnN0IFtibG9jaywgYmxvY2tQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgc2xhdGVQYXRoLmZvY3VzLnBhdGguc2xpY2UoMCwgMSkpO1xuICAgICAgICBpZiAoYmxvY2sgJiYgYmxvY2tQYXRoICYmIHR5cGVvZiBibG9jay5fa2V5ID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDEgJiYgc2xhdGVQYXRoLmZvY3VzLnBhdGgubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIFtmcm9tU2xhdGVWYWx1ZShbYmxvY2tdLCB0eXBlcy5ibG9jay5uYW1lKVswXSwgW3tcbiAgICAgICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICAgICAgfV1dO1xuICAgICAgICAgIGNvbnN0IHB0QmxvY2sgPSBmcm9tU2xhdGVWYWx1ZShbYmxvY2tdLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSlbMF07XG4gICAgICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhwdEJsb2NrKSkge1xuICAgICAgICAgICAgY29uc3QgcHRDaGlsZCA9IHB0QmxvY2suY2hpbGRyZW5bc2xhdGVQYXRoLmZvY3VzLnBhdGhbMV1dO1xuICAgICAgICAgICAgaWYgKHB0Q2hpbGQpXG4gICAgICAgICAgICAgIHJldHVybiBbcHRDaGlsZCwgW3tcbiAgICAgICAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgICAgIF9rZXk6IHB0Q2hpbGQuX2tleVxuICAgICAgICAgICAgICB9XV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgICB9LFxuICAgIGZpbmRET01Ob2RlOiAoZWxlbWVudCkgPT4ge1xuICAgICAgbGV0IG5vZGU7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBbaXRlbV0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBhdDogW10sXG4gICAgICAgICAgbWF0Y2g6IChuKSA9PiBuLl9rZXkgPT09IGVsZW1lbnQuX2tleVxuICAgICAgICB9KSB8fCBbXSlbMF0gfHwgW3ZvaWQgMF07XG4gICAgICAgIG5vZGUgPSBSZWFjdEVkaXRvci50b0RPTU5vZGUoZWRpdG9yLCBpdGVtKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICBhY3RpdmVBbm5vdGF0aW9uczogKCkgPT4ge1xuICAgICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5sZW5ndGggPCAyKVxuICAgICAgICByZXR1cm4gW107XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBhY3RpdmVBbm5vdGF0aW9ucyA9IFtdLCBzcGFucyA9IEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgICAgICBtYXRjaDogKG5vZGUpID0+IFRleHQuaXNUZXh0KG5vZGUpICYmIG5vZGUubWFya3MgIT09IHZvaWQgMCAmJiBBcnJheS5pc0FycmF5KG5vZGUubWFya3MpICYmIG5vZGUubWFya3MubGVuZ3RoID4gMFxuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChjb25zdCBbc3BhbiwgcGF0aF0gb2Ygc3BhbnMpIHtcbiAgICAgICAgICBjb25zdCBbYmxvY2tdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBwYXRoLCB7XG4gICAgICAgICAgICBkZXB0aDogMVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2subWFya0RlZnM/LmZvckVhY2goKGRlZikgPT4ge1xuICAgICAgICAgICAgVGV4dC5pc1RleHQoc3BhbikgJiYgc3Bhbi5tYXJrcyAmJiBBcnJheS5pc0FycmF5KHNwYW4ubWFya3MpICYmIHNwYW4ubWFya3MuaW5jbHVkZXMoZGVmLl9rZXkpICYmIGFjdGl2ZUFubm90YXRpb25zLnB1c2goZGVmKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlQW5ub3RhdGlvbnM7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNBbm5vdGF0aW9uQWN0aXZlOiAoYW5ub3RhdGlvblR5cGUpID0+IHtcbiAgICAgIGNvbnN0IHNuYXBzaG90ID0gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICAgICAgICBlZGl0b3JBY3RvclNuYXBzaG90OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLFxuICAgICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBlZGl0b3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGlzQWN0aXZlQW5ub3RhdGlvbihhbm5vdGF0aW9uVHlwZSkoc25hcHNob3QpO1xuICAgIH0sXG4gICAgYWRkQW5ub3RhdGlvbjogKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICBsZXQgcGF0aHM7XG4gICAgICByZXR1cm4gRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgcGF0aHMgPSBhZGRBbm5vdGF0aW9uT3BlcmF0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIGtleUdlbmVyYXRvcjogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcixcbiAgICAgICAgICAgIHNjaGVtYTogdHlwZXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wZXJhdGlvbjoge1xuICAgICAgICAgICAgYW5ub3RhdGlvbjoge1xuICAgICAgICAgICAgICBuYW1lOiB0eXBlLm5hbWUsXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSA/PyB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCksIHBhdGhzO1xuICAgIH0sXG4gICAgZGVsZXRlOiAoc2VsZWN0aW9uLCBvcHRpb25zKSA9PiB7XG4gICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdG9TbGF0ZVJhbmdlKHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICAgICAgICB2YWx1ZTogZWRpdG9yLnZhbHVlLFxuICAgICAgICAgICAgc2VsZWN0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBibG9ja0luZGV4TWFwOiBlZGl0b3IuYmxvY2tJbmRleE1hcFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCEocmFuZ2UgJiYgcmFuZ2UuYW5jaG9yLnBhdGgubGVuZ3RoID4gMCAmJiByYW5nZS5mb2N1cy5wYXRoLmxlbmd0aCA+IDApKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcmFuZ2VcIik7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgIGlmICghb3B0aW9ucz8ubW9kZSB8fCBvcHRpb25zPy5tb2RlID09PSBcInNlbGVjdGVkXCIpIHtcbiAgICAgICAgICAgIGRlYnVnJDUoXCJEZWxldGluZyBjb250ZW50IGluIHNlbGVjdGlvblwiKSwgVHJhbnNmb3Jtcy5kZWxldGUoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIGF0OiByYW5nZSxcbiAgICAgICAgICAgICAgaGFuZ2luZzogITAsXG4gICAgICAgICAgICAgIHZvaWRzOiAhMFxuICAgICAgICAgICAgfSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9ucz8ubW9kZSA9PT0gXCJibG9ja3NcIiAmJiAoZGVidWckNShcIkRlbGV0aW5nIGJsb2NrcyB0b3VjaGVkIGJ5IHNlbGVjdGlvblwiKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIGF0OiByYW5nZSxcbiAgICAgICAgICAgIHZvaWRzOiAhMCxcbiAgICAgICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpIHx8ICFlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkgJiYgRWxlbWVudCQxLmlzRWxlbWVudChub2RlKVxuICAgICAgICAgIH0pKSwgb3B0aW9ucz8ubW9kZSA9PT0gXCJjaGlsZHJlblwiICYmIChkZWJ1ZyQ1KFwiRGVsZXRpbmcgY2hpbGRyZW4gdG91Y2hlZCBieSBzZWxlY3Rpb25cIiksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBhdDogcmFuZ2UsXG4gICAgICAgICAgICB2b2lkczogITAsXG4gICAgICAgICAgICBtYXRjaDogKG5vZGUpID0+IG5vZGUuX3R5cGUgPT09IHR5cGVzLnNwYW4ubmFtZSB8fCAvLyBUZXh0IGNoaWxkcmVuXG4gICAgICAgICAgICAhZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpICYmIEVsZW1lbnQkMS5pc0VsZW1lbnQobm9kZSlcbiAgICAgICAgICB9KSksIGVkaXRvci5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyQmxvY2sgPSBjcmVhdGVQbGFjZWhvbGRlckJsb2NrKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dCk7XG4gICAgICAgICAgICBlZGl0b3IuY2hpbGRyZW4gPSBbcGxhY2Vob2xkZXJCbG9ja10sIGVkaXRvci52YWx1ZSA9IFtwbGFjZWhvbGRlckJsb2NrXSwgYnVpbGRJbmRleE1hcHMoe1xuICAgICAgICAgICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICAgICAgICAgIHZhbHVlOiBlZGl0b3IudmFsdWVcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYmxvY2tJbmRleE1hcDogZWRpdG9yLmJsb2NrSW5kZXhNYXAsXG4gICAgICAgICAgICAgIGxpc3RJbmRleE1hcDogZWRpdG9yLmxpc3RJbmRleE1hcFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVBbm5vdGF0aW9uOiAodHlwZSkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiYW5ub3RhdGlvbi5yZW1vdmVcIixcbiAgICAgICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiB0eXBlLm5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRTZWxlY3Rpb246ICgpID0+IHtcbiAgICAgIGxldCBwdFJhbmdlID0gbnVsbDtcbiAgICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRS5nZXQoZWRpdG9yLnNlbGVjdGlvbik7XG4gICAgICAgIGlmIChleGlzdGluZylcbiAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIHB0UmFuZ2UgPSBzbGF0ZVJhbmdlVG9TZWxlY3Rpb24oe1xuICAgICAgICAgIHNjaGVtYTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSxcbiAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgcmFuZ2U6IGVkaXRvci5zZWxlY3Rpb25cbiAgICAgICAgfSksIFNMQVRFX1RPX1BPUlRBQkxFX1RFWFRfUkFOR0Uuc2V0KGVkaXRvci5zZWxlY3Rpb24sIHB0UmFuZ2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHB0UmFuZ2U7XG4gICAgfSxcbiAgICBnZXRWYWx1ZTogKCkgPT4gZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksXG4gICAgaXNDb2xsYXBzZWRTZWxlY3Rpb246ICgpID0+ICEhZWRpdG9yLnNlbGVjdGlvbiAmJiBSYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSxcbiAgICBpc0V4cGFuZGVkU2VsZWN0aW9uOiAoKSA9PiAhIWVkaXRvci5zZWxlY3Rpb24gJiYgUmFuZ2UuaXNFeHBhbmRlZChlZGl0b3Iuc2VsZWN0aW9uKSxcbiAgICBpbnNlcnRCcmVhazogKCkgPT4ge1xuICAgICAgZWRpdG9yLmluc2VydEJyZWFrKCksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgIH0sXG4gICAgZ2V0RnJhZ21lbnQ6ICgpID0+IGZyb21TbGF0ZVZhbHVlKGVkaXRvci5nZXRGcmFnbWVudCgpLCB0eXBlcy5ibG9jay5uYW1lKSxcbiAgICBpc1NlbGVjdGlvbnNPdmVybGFwcGluZzogKHNlbGVjdGlvbkEsIHNlbGVjdGlvbkIpID0+IHtcbiAgICAgIGNvbnN0IHJhbmdlQSA9IHRvU2xhdGVSYW5nZSh7XG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICAgICAgdmFsdWU6IGVkaXRvci52YWx1ZSxcbiAgICAgICAgICBzZWxlY3Rpb246IHNlbGVjdGlvbkFcbiAgICAgICAgfSxcbiAgICAgICAgYmxvY2tJbmRleE1hcDogZWRpdG9yLmJsb2NrSW5kZXhNYXBcbiAgICAgIH0pLCByYW5nZUIgPSB0b1NsYXRlUmFuZ2Uoe1xuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgICAgICAgIHZhbHVlOiBlZGl0b3IudmFsdWUsXG4gICAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb25CXG4gICAgICAgIH0sXG4gICAgICAgIGJsb2NrSW5kZXhNYXA6IGVkaXRvci5ibG9ja0luZGV4TWFwXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSYW5nZS5pc1JhbmdlKHJhbmdlQSkgJiYgUmFuZ2UuaXNSYW5nZShyYW5nZUIpICYmIFJhbmdlLmluY2x1ZGVzKHJhbmdlQSwgcmFuZ2VCKTtcbiAgICB9XG4gIH07XG59XG5jb25zdCByZWxheU1hY2hpbmUgPSBzZXR1cCh7XG4gIHR5cGVzOiB7XG4gICAgY29udGV4dDoge30sXG4gICAgZXZlbnRzOiB7fSxcbiAgICBlbWl0dGVkOiB7fVxuICB9XG59KS5jcmVhdGVNYWNoaW5lKHtcbiAgaWQ6IFwicmVsYXlcIixcbiAgY29udGV4dDoge1xuICAgIHByZXZTZWxlY3Rpb246IG51bGwsXG4gICAgbGFzdEV2ZW50V2FzRm9jdXNlZDogITFcbiAgfSxcbiAgb246IHtcbiAgICBmb2N1c2VkOiB7XG4gICAgICBhY3Rpb25zOiBbYXNzaWduKHtcbiAgICAgICAgbGFzdEV2ZW50V2FzRm9jdXNlZDogITBcbiAgICAgIH0pLCBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudCldXG4gICAgfSxcbiAgICBzZWxlY3Rpb246IFt7XG4gICAgICBndWFyZDogKHtcbiAgICAgICAgY29udGV4dFxuICAgICAgfSkgPT4gY29udGV4dC5sYXN0RXZlbnRXYXNGb2N1c2VkLFxuICAgICAgYWN0aW9uczogW2Fzc2lnbih7XG4gICAgICAgIHByZXZTZWxlY3Rpb246ICh7XG4gICAgICAgICAgZXZlbnRcbiAgICAgICAgfSkgPT4gZXZlbnQuc2VsZWN0aW9uXG4gICAgICB9KSwgZW1pdCgoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gZXZlbnQpLCBhc3NpZ24oe1xuICAgICAgICBsYXN0RXZlbnRXYXNGb2N1c2VkOiAhMVxuICAgICAgfSldXG4gICAgfSwge1xuICAgICAgZ3VhcmQ6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBjb250ZXh0LnByZXZTZWxlY3Rpb24gIT09IGV2ZW50LnNlbGVjdGlvbixcbiAgICAgIGFjdGlvbnM6IFthc3NpZ24oe1xuICAgICAgICBwcmV2U2VsZWN0aW9uOiAoe1xuICAgICAgICAgIGV2ZW50XG4gICAgICAgIH0pID0+IGV2ZW50LnNlbGVjdGlvblxuICAgICAgfSksIGVtaXQoKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IGV2ZW50KSwgYXNzaWduKHtcbiAgICAgICAgbGFzdEV2ZW50V2FzRm9jdXNlZDogITFcbiAgICAgIH0pXVxuICAgIH1dLFxuICAgIFwiKlwiOiB7XG4gICAgICBhY3Rpb25zOiBbZW1pdCgoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gZXZlbnQpLCBhc3NpZ24oe1xuICAgICAgICBsYXN0RXZlbnRXYXNGb2N1c2VkOiAhMVxuICAgICAgfSldXG4gICAgfVxuICB9XG59KTtcbmZ1bmN0aW9uIHZhbGlkYXRlVmFsdWUodmFsdWUsIHR5cGVzLCBrZXlHZW5lcmF0b3IpIHtcbiAgbGV0IHJlc29sdXRpb24gPSBudWxsLCB2YWxpZCA9ICEwO1xuICBjb25zdCB2YWxpZENoaWxkVHlwZXMgPSBbdHlwZXMuc3Bhbi5uYW1lLCAuLi50eXBlcy5pbmxpbmVPYmplY3RzLm1hcCgodCkgPT4gdC5uYW1lKV0sIHZhbGlkQmxvY2tUeXBlcyA9IFt0eXBlcy5ibG9jay5uYW1lLCAuLi50eXBlcy5ibG9ja09iamVjdHMubWFwKCh0KSA9PiB0Lm5hbWUpXTtcbiAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyB7XG4gICAgdmFsaWQ6ICEwLFxuICAgIHJlc29sdXRpb246IG51bGwsXG4gICAgdmFsdWVcbiAgfSA6ICFBcnJheS5pc0FycmF5KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPT09IDAgPyB7XG4gICAgdmFsaWQ6ICExLFxuICAgIHJlc29sdXRpb246IHtcbiAgICAgIHBhdGNoZXM6IFt1bnNldChbXSldLFxuICAgICAgZGVzY3JpcHRpb246IFwiRWRpdG9yIHZhbHVlIG11c3QgYmUgYW4gYXJyYXkgb2YgUG9ydGFibGUgVGV4dCBibG9ja3MsIG9yIHVuZGVmaW5lZC5cIixcbiAgICAgIGFjdGlvbjogXCJVbnNldCB0aGUgdmFsdWVcIixcbiAgICAgIGl0ZW06IHZhbHVlLFxuICAgICAgaTE4bjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vdC1hbi1hcnJheS5kZXNjcmlwdGlvblwiLFxuICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5ub3QtYW4tYXJyYXkuYWN0aW9uXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbHVlXG4gIH0gOiAodmFsdWUuc29tZSgoYmxrLCBpbmRleCkgPT4ge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChibGspKVxuICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgIHBhdGNoZXM6IFt1bnNldChbaW5kZXhdKV0sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmxvY2sgbXVzdCBiZSBhbiBvYmplY3QsIGdvdCAke1N0cmluZyhibGspfWAsXG4gICAgICAgIGFjdGlvbjogXCJVbnNldCBpbnZhbGlkIGl0ZW1cIixcbiAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICBpMThuOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5ub3QtYW4tb2JqZWN0LmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubm90LWFuLW9iamVjdC5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMDtcbiAgICBpZiAoIWJsay5fa2V5IHx8IHR5cGVvZiBibGsuX2tleSAhPSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgIHBhdGNoZXM6IFtzZXQoe1xuICAgICAgICAgIC4uLmJsayxcbiAgICAgICAgICBfa2V5OiBrZXlHZW5lcmF0b3IoKVxuICAgICAgICB9LCBbaW5kZXhdKV0sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmxvY2sgYXQgaW5kZXggJHtpbmRleH0gaXMgbWlzc2luZyByZXF1aXJlZCBfa2V5LmAsXG4gICAgICAgIGFjdGlvbjogXCJTZXQgdGhlIGJsb2NrIHdpdGggYSByYW5kb20gX2tleSB2YWx1ZVwiLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3Npbmcta2V5LmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1rZXkuYWN0aW9uXCIsXG4gICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgITA7XG4gICAgaWYgKCFibGsuX3R5cGUgfHwgIXZhbGlkQmxvY2tUeXBlcy5pbmNsdWRlcyhibGsuX3R5cGUpKSB7XG4gICAgICBpZiAoYmxrLl90eXBlID09PSBcImJsb2NrXCIpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEJsb2NrVHlwZU5hbWUgPSB0eXBlcy5ibG9jay5uYW1lO1xuICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbc2V0KHtcbiAgICAgICAgICAgIC4uLmJsayxcbiAgICAgICAgICAgIF90eXBlOiBjdXJyZW50QmxvY2tUeXBlTmFtZVxuICAgICAgICAgIH0sIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH1dKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBoYXMgaW52YWxpZCB0eXBlIG5hbWUgJyR7YmxrLl90eXBlfScuIEFjY29yZGluZyB0byB0aGUgc2NoZW1hLCB0aGUgYmxvY2sgdHlwZSBuYW1lIGlzICcke2N1cnJlbnRCbG9ja1R5cGVOYW1lfSdgLFxuICAgICAgICAgIGFjdGlvbjogYFVzZSB0eXBlICcke2N1cnJlbnRCbG9ja1R5cGVOYW1lfSdgLFxuICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmluY29ycmVjdC1ibG9jay10eXBlLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5pbmNvcnJlY3QtYmxvY2stdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICBleHBlY3RlZFR5cGVOYW1lOiBjdXJyZW50QmxvY2tUeXBlTmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgITA7XG4gICAgICB9XG4gICAgICByZXR1cm4gIWJsay5fdHlwZSAmJiBpc1RleHRCbG9jayh7XG4gICAgICAgIHNjaGVtYTogdHlwZXNcbiAgICAgIH0sIHtcbiAgICAgICAgLi4uYmxrLFxuICAgICAgICBfdHlwZTogdHlwZXMuYmxvY2submFtZVxuICAgICAgfSkgPyAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3NldCh7XG4gICAgICAgICAgLi4uYmxrLFxuICAgICAgICAgIF90eXBlOiB0eXBlcy5ibG9jay5uYW1lXG4gICAgICAgIH0sIFt7XG4gICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgfV0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBpcyBtaXNzaW5nIGEgdHlwZSBuYW1lLiBBY2NvcmRpbmcgdG8gdGhlIHNjaGVtYSwgdGhlIGJsb2NrIHR5cGUgbmFtZSBpcyAnJHt0eXBlcy5ibG9jay5uYW1lfSdgLFxuICAgICAgICBhY3Rpb246IGBVc2UgdHlwZSAnJHt0eXBlcy5ibG9jay5uYW1lfSdgLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctYmxvY2stdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctYmxvY2stdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICBleHBlY3RlZFR5cGVOYW1lOiB0eXBlcy5ibG9jay5uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMCkgOiBibGsuX3R5cGUgPyAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFt7XG4gICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgfV0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBoYXMgaW52YWxpZCBfdHlwZSAnJHtibGsuX3R5cGV9J2AsXG4gICAgICAgIGFjdGlvbjogXCJSZW1vdmUgdGhlIGJsb2NrXCIsXG4gICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC10eXBlLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC10eXBlLmFjdGlvblwiLFxuICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBibGsuX3R5cGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICEwKSA6IChyZXNvbHV0aW9uID0ge1xuICAgICAgICBwYXRjaGVzOiBbdW5zZXQoW3tcbiAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICB9XSldLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGlzIG1pc3NpbmcgYW4gX3R5cGUgcHJvcGVydHlgLFxuICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHRoZSBibG9ja1wiLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGtleTogYmxrLl9rZXlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICEwKTtcbiAgICB9XG4gICAgaWYgKGJsay5fdHlwZSA9PT0gdHlwZXMuYmxvY2submFtZSkge1xuICAgICAgY29uc3QgdGV4dEJsb2NrID0gYmxrO1xuICAgICAgaWYgKHRleHRCbG9jay5jaGlsZHJlbiAmJiAhQXJyYXkuaXNBcnJheSh0ZXh0QmxvY2suY2hpbGRyZW4pKVxuICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbc2V0KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICAgIH0sIFt7XG4gICAgICAgICAgICBfa2V5OiB0ZXh0QmxvY2suX2tleVxuICAgICAgICAgIH1dKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBUZXh0IGJsb2NrIHdpdGggX2tleSAnJHt0ZXh0QmxvY2suX2tleX0nIGhhcyBhIGludmFsaWQgcmVxdWlyZWQgcHJvcGVydHkgJ2NoaWxkcmVuJy5gLFxuICAgICAgICAgIGFjdGlvbjogXCJSZXNldCB0aGUgY2hpbGRyZW4gcHJvcGVydHlcIixcbiAgICAgICAgICBpdGVtOiB0ZXh0QmxvY2ssXG4gICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLW9yLWludmFsaWQtY2hpbGRyZW4uZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3Npbmctb3ItaW52YWxpZC1jaGlsZHJlbi5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IHRleHRCbG9jay5fa2V5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMDtcbiAgICAgIGlmICh0ZXh0QmxvY2suY2hpbGRyZW4gPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KHRleHRCbG9jay5jaGlsZHJlbikgJiYgdGV4dEJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBuZXdTcGFuID0ge1xuICAgICAgICAgIF90eXBlOiB0eXBlcy5zcGFuLm5hbWUsXG4gICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICBtYXJrczogW11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgIHBhdGNoZXM6IFtzZXRJZk1pc3NpbmcoW10sIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIl0pLCBpbnNlcnQoW25ld1NwYW5dLCBcImFmdGVyXCIsIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwgMF0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkcmVuIGZvciB0ZXh0IGJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGlzIGVtcHR5LmAsXG4gICAgICAgICAgYWN0aW9uOiBcIkluc2VydCBhbiBlbXB0eSB0ZXh0XCIsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZW1wdHktY2hpbGRyZW4uZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmVtcHR5LWNoaWxkcmVuLmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sICEwO1xuICAgICAgfVxuICAgICAgY29uc3QgYWxsVXNlZE1hcmtzID0gdW5pcShmbGF0dGVuKHRleHRCbG9jay5jaGlsZHJlbi5maWx0ZXIoKGNsZCkgPT4gY2xkLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUpLm1hcCgoY2xkKSA9PiBjbGQubWFya3MgfHwgW10pKSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShibGsubWFya0RlZnMpICYmIGJsay5tYXJrRGVmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHVudXNlZE1hcmtEZWZzID0gdW5pcShibGsubWFya0RlZnMubWFwKChkZWYpID0+IGRlZi5fa2V5KS5maWx0ZXIoKGtleSkgPT4gIWFsbFVzZWRNYXJrcy5pbmNsdWRlcyhrZXkpKSk7XG4gICAgICAgIGlmICh1bnVzZWRNYXJrRGVmcy5sZW5ndGggPiAwKVxuICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgICAgcGF0Y2hlczogdW51c2VkTWFya0RlZnMubWFwKChtYXJrRGVmS2V5KSA9PiB1bnNldChbe1xuICAgICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgICAgfSwgXCJtYXJrRGVmc1wiLCB7XG4gICAgICAgICAgICAgIF9rZXk6IG1hcmtEZWZLZXlcbiAgICAgICAgICAgIH1dKSksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIGNvbnRhaW5zIG9ycGhhbmVkIGRhdGEgKHVudXNlZCBtYXJrIGRlZmluaXRpb25zKTogJHt1bnVzZWRNYXJrRGVmcy5qb2luKFwiLCBcIil9LmAsXG4gICAgICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHVudXNlZCBtYXJrIGRlZmluaXRpb24gaXRlbVwiLFxuICAgICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm9ycGhhbmVkLW1hcmstZGVmcy5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5vcnBoYW5lZC1tYXJrLWRlZnMuYWN0aW9uXCIsXG4gICAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgICAgdW51c2VkTWFya0RlZnM6IHVudXNlZE1hcmtEZWZzLm1hcCgobSkgPT4gbS50b1N0cmluZygpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgITA7XG4gICAgICB9XG4gICAgICBjb25zdCBvcnBoYW5lZE1hcmtzID0gYWxsVXNlZE1hcmtzLmZpbHRlcigobWFyaykgPT4gIXR5cGVzLmRlY29yYXRvcnMubWFwKChkZWMpID0+IGRlYy5uYW1lKS5pbmNsdWRlcyhtYXJrKSkuZmlsdGVyKChtYXJrKSA9PiB0ZXh0QmxvY2subWFya0RlZnMgPT09IHZvaWQgMCB8fCAhdGV4dEJsb2NrLm1hcmtEZWZzLmZpbmQoKGRlZikgPT4gZGVmLl9rZXkgPT09IG1hcmspKTtcbiAgICAgIGlmIChvcnBoYW5lZE1hcmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgc3BhbkNoaWxkcmVuID0gdGV4dEJsb2NrLmNoaWxkcmVuLmZpbHRlcigoY2xkKSA9PiBjbGQuX3R5cGUgPT09IHR5cGVzLnNwYW4ubmFtZSAmJiBBcnJheS5pc0FycmF5KGNsZC5tYXJrcykgJiYgY2xkLm1hcmtzLnNvbWUoKG1hcmspID0+IG9ycGhhbmVkTWFya3MuaW5jbHVkZXMobWFyaykpKTtcbiAgICAgICAgaWYgKHNwYW5DaGlsZHJlbikge1xuICAgICAgICAgIGNvbnN0IG9ycGhhbmVkID0gb3JwaGFuZWRNYXJrcy5qb2luKFwiLCBcIik7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgICBhdXRvUmVzb2x2ZTogITAsXG4gICAgICAgICAgICBwYXRjaGVzOiBzcGFuQ2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gc2V0KChjaGlsZC5tYXJrcyB8fCBbXSkuZmlsdGVyKChjTXJrKSA9PiAhb3JwaGFuZWRNYXJrcy5pbmNsdWRlcyhjTXJrKSksIFt7XG4gICAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgICAgICAgfSwgXCJtYXJrc1wiXSkpLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBjb250YWlucyBtYXJrcyAoJHtvcnBoYW5lZH0pIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgY29udGVudCBtb2RlbC5gLFxuICAgICAgICAgICAgYWN0aW9uOiBcIlJlbW92ZSBpbnZhbGlkIG1hcmtzXCIsXG4gICAgICAgICAgICBpdGVtOiBibGssXG4gICAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUub3JwaGFuZWQtbWFya3MuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUub3JwaGFuZWQtbWFya3MuYWN0aW9uXCIsXG4gICAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgICAgb3JwaGFuZWRNYXJrczogb3JwaGFuZWRNYXJrcy5tYXAoKG0pID0+IG0udG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sICEwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0ZXh0QmxvY2suY2hpbGRyZW4uc29tZSgoY2hpbGQsIGNJbmRleCkgPT4ge1xuICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QoY2hpbGQpKVxuICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFt7XG4gICAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIGNJbmRleF0pXSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQ2hpbGQgYXQgaW5kZXggJyR7Y0luZGV4fScgaW4gYmxvY2sgd2l0aCBrZXkgJyR7YmxrLl9rZXl9JyBpcyBub3QgYW4gb2JqZWN0LmAsXG4gICAgICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHRoZSBpdGVtXCIsXG4gICAgICAgICAgICBpdGVtOiBibGssXG4gICAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubm9uLW9iamVjdC1jaGlsZC5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5ub24tb2JqZWN0LWNoaWxkLmFjdGlvblwiLFxuICAgICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICAgIGluZGV4OiBjSW5kZXhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sICEwO1xuICAgICAgICBpZiAoIWNoaWxkLl9rZXkgfHwgdHlwZW9mIGNoaWxkLl9rZXkgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGNvbnN0IG5ld0NoaWxkID0ge1xuICAgICAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgICAgICBfa2V5OiBrZXlHZW5lcmF0b3IoKVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgICBhdXRvUmVzb2x2ZTogITAsXG4gICAgICAgICAgICBwYXRjaGVzOiBbc2V0KG5ld0NoaWxkLCBbe1xuICAgICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCBjSW5kZXhdKV0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkIGF0IGluZGV4ICR7Y0luZGV4fSBpcyBtaXNzaW5nIHJlcXVpcmVkIF9rZXkgaW4gYmxvY2sgd2l0aCBfa2V5ICR7YmxrLl9rZXl9LmAsXG4gICAgICAgICAgICBhY3Rpb246IFwiU2V0IGEgbmV3IHJhbmRvbSBfa2V5IG9uIHRoZSBvYmplY3RcIixcbiAgICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWNoaWxkLWtleS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWNoaWxkLWtleS5hY3Rpb25cIixcbiAgICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgICAgICBpbmRleDogY0luZGV4XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAhMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQuX3R5cGUgPyB2YWxpZENoaWxkVHlwZXMuaW5jbHVkZXMoY2hpbGQuX3R5cGUpID8gY2hpbGQuX3R5cGUgPT09IHR5cGVzLnNwYW4ubmFtZSAmJiB0eXBlb2YgY2hpbGQudGV4dCAhPSBcInN0cmluZ1wiID8gKHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgcGF0Y2hlczogW3NldCh7XG4gICAgICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgICAgIHRleHQ6IFwiXCJcbiAgICAgICAgICB9LCBbe1xuICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICB9XSldLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQ2hpbGQgd2l0aCBfa2V5ICcke2NoaWxkLl9rZXl9JyBpbiBibG9jayB3aXRoIGtleSAnJHtibGsuX2tleX0nIGhhcyBtaXNzaW5nIG9yIGludmFsaWQgdGV4dCBwcm9wZXJ0eSFgLFxuICAgICAgICAgIGFjdGlvbjogXCJXcml0ZSBhbiBlbXB0eSB0ZXh0IHByb3BlcnR5IHRvIHRoZSBvYmplY3RcIixcbiAgICAgICAgICBpdGVtOiBibGssXG4gICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5pbnZhbGlkLXNwYW4tdGV4dC5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuaW52YWxpZC1zcGFuLXRleHQuYWN0aW9uXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgICAgY2hpbGRLZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sICEwKSA6ICExIDogKHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgICAgIH1dKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBDaGlsZCB3aXRoIF9rZXkgJyR7Y2hpbGQuX2tleX0nIGluIGJsb2NrIHdpdGgga2V5ICcke2Jsay5fa2V5fScgaGFzIGludmFsaWQgJ190eXBlJyBwcm9wZXJ0eSAoJHtjaGlsZC5fdHlwZX0pLmAsXG4gICAgICAgICAgYWN0aW9uOiBcIlJlbW92ZSB0aGUgb2JqZWN0XCIsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC1jaGlsZC10eXBlLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5kaXNhbGxvd2VkLWNoaWxkLXR5cGUuYWN0aW9uXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgICAgY2hpbGRLZXk6IGNoaWxkLl9rZXksXG4gICAgICAgICAgICAgIGNoaWxkVHlwZTogY2hpbGQuX3R5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sICEwKSA6IChyZXNvbHV0aW9uID0ge1xuICAgICAgICAgIHBhdGNoZXM6IFt1bnNldChbe1xuICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICB9XSldLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQ2hpbGQgd2l0aCBfa2V5ICcke2NoaWxkLl9rZXl9JyBpbiBibG9jayB3aXRoIGtleSAnJHtibGsuX2tleX0nIGlzIG1pc3NpbmcgJ190eXBlJyBwcm9wZXJ0eS5gLFxuICAgICAgICAgIGFjdGlvbjogXCJSZW1vdmUgdGhlIG9iamVjdFwiLFxuICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctY2hpbGQtdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1jaGlsZC10eXBlLmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgIGNoaWxkS2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMCk7XG4gICAgICB9KSAmJiAodmFsaWQgPSAhMSk7XG4gICAgfVxuICAgIHJldHVybiAhMTtcbiAgfSkgJiYgKHZhbGlkID0gITEpLCB7XG4gICAgdmFsaWQsXG4gICAgcmVzb2x1dGlvbixcbiAgICB2YWx1ZVxuICB9KTtcbn1cbmNvbnN0IGRlYnVnJDQgPSBkZWJ1Z1dpdGhOYW1lKFwic3luYyBtYWNoaW5lXCIpLCBzeW5jVmFsdWVDYWxsYmFjayA9ICh7XG4gIHNlbmRCYWNrLFxuICBpbnB1dFxufSkgPT4ge1xuICB1cGRhdGVWYWx1ZSh7XG4gICAgY29udGV4dDogaW5wdXQuY29udGV4dCxcbiAgICBzZW5kQmFjayxcbiAgICBzbGF0ZUVkaXRvcjogaW5wdXQuc2xhdGVFZGl0b3IsXG4gICAgdmFsdWU6IGlucHV0LnZhbHVlLFxuICAgIHN0cmVhbUJsb2NrczogaW5wdXQuc3RyZWFtQmxvY2tzXG4gIH0pO1xufSwgc3luY1ZhbHVlTG9naWMgPSBmcm9tQ2FsbGJhY2soc3luY1ZhbHVlQ2FsbGJhY2spLCBzeW5jTWFjaGluZSA9IHNldHVwKHtcbiAgdHlwZXM6IHtcbiAgICBjb250ZXh0OiB7fSxcbiAgICBpbnB1dDoge30sXG4gICAgZXZlbnRzOiB7fSxcbiAgICBlbWl0dGVkOiB7fVxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgXCJhc3NpZ24gaW5pdGlhbCB2YWx1ZSBzeW5jZWRcIjogYXNzaWduKHtcbiAgICAgIGluaXRpYWxWYWx1ZVN5bmNlZDogITBcbiAgICB9KSxcbiAgICBcImFzc2lnbiByZWFkT25seVwiOiBhc3NpZ24oe1xuICAgICAgcmVhZE9ubHk6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwidXBkYXRlIHJlYWRPbmx5XCIpLCBldmVudC5yZWFkT25seSlcbiAgICB9KSxcbiAgICBcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCI6IGFzc2lnbih7XG4gICAgICBwZW5kaW5nVmFsdWU6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwidXBkYXRlIHZhbHVlXCIpLCBldmVudC52YWx1ZSlcbiAgICB9KSxcbiAgICBcImNsZWFyIHBlbmRpbmcgdmFsdWVcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdWYWx1ZTogdm9pZCAwXG4gICAgfSksXG4gICAgXCJhc3NpZ24gcHJldmlvdXMgdmFsdWVcIjogYXNzaWduKHtcbiAgICAgIHByZXZpb3VzVmFsdWU6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwiZG9uZSBzeW5jaW5nXCIpLCBldmVudC52YWx1ZSlcbiAgICB9KSxcbiAgICBcImVtaXQgZG9uZSBzeW5jaW5nIHZhbHVlXCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJkb25lIHN5bmNpbmcgdmFsdWVcIlxuICAgIH0pLFxuICAgIFwiZW1pdCBzeW5jaW5nIHZhbHVlXCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJzeW5jaW5nIHZhbHVlXCJcbiAgICB9KVxuICB9LFxuICBndWFyZHM6IHtcbiAgICBcImluaXRpYWwgdmFsdWUgc3luY2VkXCI6ICh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gY29udGV4dC5pbml0aWFsVmFsdWVTeW5jZWQsXG4gICAgXCJpcyBidXN5XCI6ICh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4ge1xuICAgICAgY29uc3QgaXNQcm9jZXNzaW5nTG9jYWxDaGFuZ2VzID0gY29udGV4dC5pc1Byb2Nlc3NpbmdMb2NhbENoYW5nZXMsIGlzQ2hhbmdpbmcgPSBpc0NoYW5naW5nUmVtb3RlbHkoY29udGV4dC5zbGF0ZUVkaXRvcikgPz8gITEsIGlzQnVzeSA9IGlzUHJvY2Vzc2luZ0xvY2FsQ2hhbmdlcyB8fCBpc0NoYW5naW5nO1xuICAgICAgcmV0dXJuIGRlYnVnJDQoXCJpc0J1c3lcIiwge1xuICAgICAgICBpc0J1c3ksXG4gICAgICAgIGlzUHJvY2Vzc2luZ0xvY2FsQ2hhbmdlcyxcbiAgICAgICAgaXNDaGFuZ2luZ1xuICAgICAgfSksIGlzQnVzeTtcbiAgICB9LFxuICAgIFwiaXMgZW1wdHkgdmFsdWVcIjogKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gZXZlbnQudHlwZSA9PT0gXCJ1cGRhdGUgdmFsdWVcIiAmJiBldmVudC52YWx1ZSA9PT0gdm9pZCAwLFxuICAgIFwiaXMgZW1wdHkgYXJyYXlcIjogKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gZXZlbnQudHlwZSA9PT0gXCJ1cGRhdGUgdmFsdWVcIiAmJiBBcnJheS5pc0FycmF5KGV2ZW50LnZhbHVlKSAmJiBldmVudC52YWx1ZS5sZW5ndGggPT09IDAsXG4gICAgXCJpcyBuZXcgdmFsdWVcIjogKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBldmVudFxuICAgIH0pID0+IGV2ZW50LnR5cGUgPT09IFwidXBkYXRlIHZhbHVlXCIgJiYgY29udGV4dC5wcmV2aW91c1ZhbHVlICE9PSBldmVudC52YWx1ZSxcbiAgICBcInZhbHVlIGNoYW5nZWQgd2hpbGUgc3luY2luZ1wiOiAoe1xuICAgICAgY29udGV4dCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcImRvbmUgc3luY2luZ1wiKSwgY29udGV4dC5wZW5kaW5nVmFsdWUgIT09IGV2ZW50LnZhbHVlKSxcbiAgICBcInBlbmRpbmcgdmFsdWUgZXF1YWxzIHByZXZpb3VzIHZhbHVlXCI6ICh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gaXNFcXVhbChjb250ZXh0LnBlbmRpbmdWYWx1ZSwgY29udGV4dC5wcmV2aW91c1ZhbHVlKVxuICB9LFxuICBhY3RvcnM6IHtcbiAgICBcInN5bmMgdmFsdWVcIjogc3luY1ZhbHVlTG9naWNcbiAgfVxufSkuY3JlYXRlTWFjaGluZSh7XG4gIGlkOiBcInN5bmNcIixcbiAgY29udGV4dDogKHtcbiAgICBpbnB1dFxuICB9KSA9PiAoe1xuICAgIGluaXRpYWxWYWx1ZTogaW5wdXQuaW5pdGlhbFZhbHVlLFxuICAgIGluaXRpYWxWYWx1ZVN5bmNlZDogITEsXG4gICAgaXNQcm9jZXNzaW5nTG9jYWxDaGFuZ2VzOiAhMSxcbiAgICBrZXlHZW5lcmF0b3I6IGlucHV0LmtleUdlbmVyYXRvcixcbiAgICBzY2hlbWE6IGlucHV0LnNjaGVtYSxcbiAgICByZWFkT25seTogaW5wdXQucmVhZE9ubHksXG4gICAgc2xhdGVFZGl0b3I6IGlucHV0LnNsYXRlRWRpdG9yLFxuICAgIHBlbmRpbmdWYWx1ZTogdm9pZCAwLFxuICAgIHByZXZpb3VzVmFsdWU6IHZvaWQgMFxuICB9KSxcbiAgZW50cnk6IFtyYWlzZSQxKCh7XG4gICAgY29udGV4dFxuICB9KSA9PiAoe1xuICAgIHR5cGU6IFwidXBkYXRlIHZhbHVlXCIsXG4gICAgdmFsdWU6IGNvbnRleHQuaW5pdGlhbFZhbHVlXG4gIH0pKV0sXG4gIG9uOiB7XG4gICAgXCJoYXMgcGVuZGluZyBtdXRhdGlvbnNcIjoge1xuICAgICAgYWN0aW9uczogYXNzaWduKHtcbiAgICAgICAgaXNQcm9jZXNzaW5nTG9jYWxDaGFuZ2VzOiAhMFxuICAgICAgfSlcbiAgICB9LFxuICAgIG11dGF0aW9uOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICBpc1Byb2Nlc3NpbmdMb2NhbENoYW5nZXM6ICExXG4gICAgICB9KVxuICAgIH0sXG4gICAgXCJ1cGRhdGUgcmVhZE9ubHlcIjoge1xuICAgICAgYWN0aW9uczogW1wiYXNzaWduIHJlYWRPbmx5XCJdXG4gICAgfVxuICB9LFxuICBpbml0aWFsOiBcImlkbGVcIixcbiAgc3RhdGVzOiB7XG4gICAgaWRsZToge1xuICAgICAgZW50cnk6IFsoKSA9PiB7XG4gICAgICAgIGRlYnVnJDQoXCJlbnRyeTogc3luY2luZy0+aWRsZVwiKTtcbiAgICAgIH1dLFxuICAgICAgZXhpdDogWygpID0+IHtcbiAgICAgICAgZGVidWckNChcImV4aXQ6IHN5bmNpbmctPmlkbGVcIik7XG4gICAgICB9XSxcbiAgICAgIG9uOiB7XG4gICAgICAgIFwidXBkYXRlIHZhbHVlXCI6IFt7XG4gICAgICAgICAgZ3VhcmQ6IGFuZChbXCJpcyBlbXB0eSB2YWx1ZVwiLCBub3QoXCJpbml0aWFsIHZhbHVlIHN5bmNlZFwiKV0pLFxuICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBpbml0aWFsIHZhbHVlIHN5bmNlZFwiLCBcImVtaXQgZG9uZSBzeW5jaW5nIHZhbHVlXCJdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBndWFyZDogYW5kKFtcImlzIGVtcHR5IGFycmF5XCIsIG5vdChcImluaXRpYWwgdmFsdWUgc3luY2VkXCIpXSksXG4gICAgICAgICAgYWN0aW9uczogW1wiYXNzaWduIGluaXRpYWwgdmFsdWUgc3luY2VkXCIsIGVtaXQoe1xuICAgICAgICAgICAgdHlwZTogXCJ2YWx1ZSBjaGFuZ2VkXCIsXG4gICAgICAgICAgICB2YWx1ZTogW11cbiAgICAgICAgICB9KSwgXCJlbWl0IGRvbmUgc3luY2luZyB2YWx1ZVwiXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZ3VhcmQ6IGFuZChbXCJpcyBidXN5XCIsIFwiaXMgbmV3IHZhbHVlXCJdKSxcbiAgICAgICAgICB0YXJnZXQ6IFwiYnVzeVwiLFxuICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCJdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBndWFyZDogXCJpcyBuZXcgdmFsdWVcIixcbiAgICAgICAgICB0YXJnZXQ6IFwic3luY2luZ1wiLFxuICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCJdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBndWFyZDogbm90KFwiaW5pdGlhbCB2YWx1ZSBzeW5jZWRcIiksXG4gICAgICAgICAgYWN0aW9uczogWygpID0+IHtcbiAgICAgICAgICAgIGRlYnVnJDQoXCJubyBuZXcgdmFsdWUgXFx1MjAxMyBzZXR0aW5nIGluaXRpYWwgdmFsdWUgYXMgc3luY2VkXCIpO1xuICAgICAgICAgIH0sIFwiYXNzaWduIGluaXRpYWwgdmFsdWUgc3luY2VkXCIsIFwiZW1pdCBkb25lIHN5bmNpbmcgdmFsdWVcIl1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGFjdGlvbnM6IFsoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyQ0KFwibm8gbmV3IHZhbHVlIGFuZCBpbml0aWFsIHZhbHVlIGFscmVhZHkgc3luY2VkXCIpO1xuICAgICAgICAgIH1dXG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfSxcbiAgICBidXN5OiB7XG4gICAgICBlbnRyeTogWygpID0+IHtcbiAgICAgICAgZGVidWckNChcImVudHJ5OiBzeW5jaW5nLT5idXN5XCIpO1xuICAgICAgfV0sXG4gICAgICBleGl0OiBbKCkgPT4ge1xuICAgICAgICBkZWJ1ZyQ0KFwiZXhpdDogc3luY2luZy0+YnVzeVwiKTtcbiAgICAgIH1dLFxuICAgICAgYWZ0ZXI6IHtcbiAgICAgICAgMWUzOiBbe1xuICAgICAgICAgIGd1YXJkOiBcImlzIGJ1c3lcIixcbiAgICAgICAgICB0YXJnZXQ6IFwiLlwiLFxuICAgICAgICAgIHJlZW50ZXI6ICEwLFxuICAgICAgICAgIGFjdGlvbnM6IFsoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyQ0KFwicmVlbnRlcjogc3luY2luZy0+YnVzeVwiKTtcbiAgICAgICAgICB9XVxuICAgICAgICB9LCB7XG4gICAgICAgICAgdGFyZ2V0OiBcInN5bmNpbmdcIlxuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIFwidXBkYXRlIHZhbHVlXCI6IFt7XG4gICAgICAgICAgZ3VhcmQ6IFwiaXMgbmV3IHZhbHVlXCIsXG4gICAgICAgICAgYWN0aW9uczogW1wiYXNzaWduIHBlbmRpbmcgdmFsdWVcIl1cbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9LFxuICAgIHN5bmNpbmc6IHtcbiAgICAgIGVudHJ5OiBbKCkgPT4ge1xuICAgICAgICBkZWJ1ZyQ0KFwiZW50cnk6IHN5bmNpbmctPnN5bmNpbmdcIik7XG4gICAgICB9LCBcImVtaXQgc3luY2luZyB2YWx1ZVwiXSxcbiAgICAgIGV4aXQ6IFsoKSA9PiB7XG4gICAgICAgIGRlYnVnJDQoXCJleGl0OiBzeW5jaW5nLT5zeW5jaW5nXCIpO1xuICAgICAgfSwgXCJlbWl0IGRvbmUgc3luY2luZyB2YWx1ZVwiXSxcbiAgICAgIGludm9rZToge1xuICAgICAgICBzcmM6IFwic3luYyB2YWx1ZVwiLFxuICAgICAgICBpZDogXCJzeW5jIHZhbHVlXCIsXG4gICAgICAgIGlucHV0OiAoe1xuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgfSkgPT4gKHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZTogY29udGV4dC5wcmV2aW91c1ZhbHVlLFxuICAgICAgICAgICAgcmVhZE9ubHk6IGNvbnRleHQucmVhZE9ubHksXG4gICAgICAgICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzbGF0ZUVkaXRvcjogY29udGV4dC5zbGF0ZUVkaXRvcixcbiAgICAgICAgICBzdHJlYW1CbG9ja3M6ICFjb250ZXh0LmluaXRpYWxWYWx1ZVN5bmNlZCxcbiAgICAgICAgICB2YWx1ZTogY29udGV4dC5wZW5kaW5nVmFsdWVcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBcInVwZGF0ZSB2YWx1ZVwiOiB7XG4gICAgICAgICAgZ3VhcmQ6IFwiaXMgbmV3IHZhbHVlXCIsXG4gICAgICAgICAgYWN0aW9uczogW1wiYXNzaWduIHBlbmRpbmcgdmFsdWVcIl1cbiAgICAgICAgfSxcbiAgICAgICAgcGF0Y2g6IHtcbiAgICAgICAgICBhY3Rpb25zOiBbZW1pdCgoe1xuICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICB9KSA9PiBldmVudCldXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW52YWxpZCB2YWx1ZVwiOiB7XG4gICAgICAgICAgYWN0aW9uczogW2VtaXQoKHtcbiAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgfSkgPT4gZXZlbnQpXVxuICAgICAgICB9LFxuICAgICAgICBcInZhbHVlIGNoYW5nZWRcIjoge1xuICAgICAgICAgIGFjdGlvbnM6IFtlbWl0KCh7XG4gICAgICAgICAgICBldmVudFxuICAgICAgICAgIH0pID0+IGV2ZW50KV1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb25lIHN5bmNpbmdcIjogW3tcbiAgICAgICAgICBndWFyZDogXCJ2YWx1ZSBjaGFuZ2VkIHdoaWxlIHN5bmNpbmdcIixcbiAgICAgICAgICBhY3Rpb25zOiBbXCJhc3NpZ24gcHJldmlvdXMgdmFsdWVcIiwgXCJhc3NpZ24gaW5pdGlhbCB2YWx1ZSBzeW5jZWRcIl0sXG4gICAgICAgICAgdGFyZ2V0OiBcInN5bmNpbmdcIixcbiAgICAgICAgICByZWVudGVyOiAhMFxuICAgICAgICB9LCB7XG4gICAgICAgICAgdGFyZ2V0OiBcImlkbGVcIixcbiAgICAgICAgICBhY3Rpb25zOiBbXCJjbGVhciBwZW5kaW5nIHZhbHVlXCIsIFwiYXNzaWduIHByZXZpb3VzIHZhbHVlXCIsIFwiYXNzaWduIGluaXRpYWwgdmFsdWUgc3luY2VkXCJdXG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKHtcbiAgY29udGV4dCxcbiAgc2VuZEJhY2ssXG4gIHNsYXRlRWRpdG9yLFxuICBzdHJlYW1CbG9ja3MsXG4gIHZhbHVlXG59KSB7XG4gIGxldCBkb25lU3luY2luZyA9ICExLCBpc0NoYW5nZWQgPSAhMSwgaXNWYWxpZCA9ICEwO1xuICBjb25zdCBoYWRTZWxlY3Rpb24gPSAhIXNsYXRlRWRpdG9yLnNlbGVjdGlvbjtcbiAgaWYgKCghdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwKSAmJiAoZGVidWckNChcIlZhbHVlIGlzIGVtcHR5XCIpLCBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgd2l0aG91dFNhdmluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgd2l0aFJlbW90ZUNoYW5nZXMoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgICAgd2l0aG91dFBhdGNoaW5nKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKGRvbmVTeW5jaW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGhhZFNlbGVjdGlvbiAmJiBUcmFuc2Zvcm1zLmRlc2VsZWN0KHNsYXRlRWRpdG9yKTtcbiAgICAgICAgICBjb25zdCBjaGlsZHJlbkxlbmd0aCA9IHNsYXRlRWRpdG9yLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICBzbGF0ZUVkaXRvci5jaGlsZHJlbi5mb3JFYWNoKChfLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICAgICAgICBhdDogW2NoaWxkcmVuTGVuZ3RoIC0gMSAtIGluZGV4XVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoc2xhdGVFZGl0b3IsIHNsYXRlRWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgICAgICAgICBkZWNvcmF0b3JzOiBbXVxuICAgICAgICAgIH0pLCB7XG4gICAgICAgICAgICBhdDogWzBdXG4gICAgICAgICAgfSksIGhhZFNlbGVjdGlvbiAmJiBUcmFuc2Zvcm1zLnNlbGVjdChzbGF0ZUVkaXRvciwgWzAsIDBdKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSksIGlzQ2hhbmdlZCA9ICEwKSwgdmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHNsYXRlVmFsdWVGcm9tUHJvcHMgPSB0b1NsYXRlVmFsdWUodmFsdWUsIHtcbiAgICAgIHNjaGVtYVR5cGVzOiBjb250ZXh0LnNjaGVtYVxuICAgIH0pO1xuICAgIHN0cmVhbUJsb2NrcyA/IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgICAgIHdpdGhSZW1vdGVDaGFuZ2VzKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgd2l0aG91dFBhdGNoaW5nKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZG9uZVN5bmNpbmcpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc0NoYW5nZWQgPSByZW1vdmVFeHRyYUJsb2Nrcyh7XG4gICAgICAgICAgICAgIHNsYXRlRWRpdG9yLFxuICAgICAgICAgICAgICBzbGF0ZVZhbHVlRnJvbVByb3BzXG4gICAgICAgICAgICB9KSwgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBbY3VycmVudEJsb2NrLCBjdXJyZW50QmxvY2tJbmRleF0gb2YgZ2V0U3RyZWFtZWRCbG9ja3Moe1xuICAgICAgICAgICAgICAgIHNsYXRlVmFsdWU6IHNsYXRlVmFsdWVGcm9tUHJvcHNcbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICBibG9ja0NoYW5nZWQsXG4gICAgICAgICAgICAgICAgICBibG9ja1ZhbGlkXG4gICAgICAgICAgICAgICAgfSA9IHN5bmNCbG9jayh7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgc2VuZEJhY2ssXG4gICAgICAgICAgICAgICAgICBibG9jazogY3VycmVudEJsb2NrLFxuICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRCbG9ja0luZGV4LFxuICAgICAgICAgICAgICAgICAgc2xhdGVFZGl0b3IsXG4gICAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlzQ2hhbmdlZCA9IGJsb2NrQ2hhbmdlZCB8fCBpc0NoYW5nZWQsIGlzVmFsaWQgPSBpc1ZhbGlkICYmIGJsb2NrVmFsaWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KSA6IEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgIHdpdGhSZW1vdGVDaGFuZ2VzKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgICAgIHdpdGhvdXRQYXRjaGluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIGlmIChkb25lU3luY2luZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICBpc0NoYW5nZWQgPSByZW1vdmVFeHRyYUJsb2Nrcyh7XG4gICAgICAgICAgICBzbGF0ZUVkaXRvcixcbiAgICAgICAgICAgIHNsYXRlVmFsdWVGcm9tUHJvcHNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICAgIGZvciAoY29uc3QgY3VycmVudEJsb2NrIG9mIHNsYXRlVmFsdWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgYmxvY2tDaGFuZ2VkLFxuICAgICAgICAgICAgICBibG9ja1ZhbGlkXG4gICAgICAgICAgICB9ID0gc3luY0Jsb2NrKHtcbiAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgc2VuZEJhY2ssXG4gICAgICAgICAgICAgIGJsb2NrOiBjdXJyZW50QmxvY2ssXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBzbGF0ZUVkaXRvcixcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaXNDaGFuZ2VkID0gYmxvY2tDaGFuZ2VkIHx8IGlzQ2hhbmdlZCwgaXNWYWxpZCA9IGlzVmFsaWQgJiYgYmxvY2tWYWxpZCwgaW5kZXgrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgZGVidWckNChcIkludmFsaWQgdmFsdWUsIHJldHVybmluZ1wiKSwgZG9uZVN5bmNpbmcgPSAhMCwgc2VuZEJhY2soe1xuICAgICAgdHlwZTogXCJkb25lIHN5bmNpbmdcIixcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpc0NoYW5nZWQpIHtcbiAgICBkZWJ1ZyQ0KFwiU2VydmVyIHZhbHVlIGNoYW5nZWQsIHN5bmNpbmcgZWRpdG9yXCIpO1xuICAgIHRyeSB7XG4gICAgICBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpLCBzZW5kQmFjayh7XG4gICAgICAgIHR5cGU6IFwiaW52YWxpZCB2YWx1ZVwiLFxuICAgICAgICByZXNvbHV0aW9uOiBudWxsLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSksIGRvbmVTeW5jaW5nID0gITAsIHNlbmRCYWNrKHtcbiAgICAgICAgdHlwZTogXCJkb25lIHN5bmNpbmdcIixcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoYWRTZWxlY3Rpb24gJiYgIXNsYXRlRWRpdG9yLnNlbGVjdGlvbiAmJiAoVHJhbnNmb3Jtcy5zZWxlY3Qoc2xhdGVFZGl0b3IsIHtcbiAgICAgIGFuY2hvcjoge1xuICAgICAgICBwYXRoOiBbMCwgMF0sXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfSxcbiAgICAgIGZvY3VzOiB7XG4gICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9XG4gICAgfSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCkpLCBzZW5kQmFjayh7XG4gICAgICB0eXBlOiBcInZhbHVlIGNoYW5nZWRcIixcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gIH0gZWxzZVxuICAgIGRlYnVnJDQoXCJTZXJ2ZXIgdmFsdWUgYW5kIGVkaXRvciB2YWx1ZSBpcyBlcXVhbCwgbm8gbmVlZCB0byBzeW5jLlwiKTtcbiAgZG9uZVN5bmNpbmcgPSAhMCwgc2VuZEJhY2soe1xuICAgIHR5cGU6IFwiZG9uZSBzeW5jaW5nXCIsXG4gICAgdmFsdWVcbiAgfSk7XG59XG5mdW5jdGlvbiByZW1vdmVFeHRyYUJsb2Nrcyh7XG4gIHNsYXRlRWRpdG9yLFxuICBzbGF0ZVZhbHVlRnJvbVByb3BzXG59KSB7XG4gIGxldCBpc0NoYW5nZWQgPSAhMTtcbiAgY29uc3QgY2hpbGRyZW5MZW5ndGggPSBzbGF0ZUVkaXRvci5jaGlsZHJlbi5sZW5ndGg7XG4gIGlmIChzbGF0ZVZhbHVlRnJvbVByb3BzLmxlbmd0aCA8IGNoaWxkcmVuTGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaSA9IGNoaWxkcmVuTGVuZ3RoIC0gMTsgaSA+IHNsYXRlVmFsdWVGcm9tUHJvcHMubGVuZ3RoIC0gMTsgaS0tKVxuICAgICAgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICBhdDogW2ldXG4gICAgICB9KTtcbiAgICBpc0NoYW5nZWQgPSAhMDtcbiAgfVxuICByZXR1cm4gaXNDaGFuZ2VkO1xufVxuYXN5bmMgZnVuY3Rpb24qIGdldFN0cmVhbWVkQmxvY2tzKHtcbiAgc2xhdGVWYWx1ZVxufSkge1xuICBsZXQgaW5kZXggPSAwO1xuICBmb3IgYXdhaXQgKGNvbnN0IGJsb2NrIG9mIHNsYXRlVmFsdWUpXG4gICAgaW5kZXggJSAxMCA9PT0gMCAmJiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSksIHlpZWxkIFtibG9jaywgaW5kZXhdLCBpbmRleCsrO1xufVxuZnVuY3Rpb24gc3luY0Jsb2NrKHtcbiAgY29udGV4dCxcbiAgc2VuZEJhY2ssXG4gIGJsb2NrLFxuICBpbmRleCxcbiAgc2xhdGVFZGl0b3IsXG4gIHZhbHVlXG59KSB7XG4gIGxldCBibG9ja0NoYW5nZWQgPSAhMSwgYmxvY2tWYWxpZCA9ICEwO1xuICBjb25zdCBjdXJyZW50QmxvY2sgPSBibG9jaywgY3VycmVudEJsb2NrSW5kZXggPSBpbmRleCwgb2xkQmxvY2sgPSBzbGF0ZUVkaXRvci5jaGlsZHJlbltjdXJyZW50QmxvY2tJbmRleF0sIGhhc0NoYW5nZXMgPSBvbGRCbG9jayAmJiAhaXNFcXVhbChjdXJyZW50QmxvY2ssIG9sZEJsb2NrKTtcbiAgcmV0dXJuIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICB3aXRoUmVtb3RlQ2hhbmdlcyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgd2l0aG91dFBhdGNoaW5nKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgICAgIGlmIChoYXNDaGFuZ2VzICYmIGJsb2NrVmFsaWQpIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uVmFsdWUgPSBbdmFsdWVbY3VycmVudEJsb2NrSW5kZXhdXSwgdmFsaWRhdGlvbiA9IHZhbGlkYXRlVmFsdWUodmFsaWRhdGlvblZhbHVlLCBjb250ZXh0LnNjaGVtYSwgY29udGV4dC5rZXlHZW5lcmF0b3IpO1xuICAgICAgICAgICF2YWxpZGF0aW9uLnZhbGlkICYmIHZhbGlkYXRpb24ucmVzb2x1dGlvbj8uYXV0b1Jlc29sdmUgJiYgdmFsaWRhdGlvbi5yZXNvbHV0aW9uPy5wYXRjaGVzLmxlbmd0aCA+IDAgJiYgIWNvbnRleHQucmVhZE9ubHkgJiYgY29udGV4dC5wcmV2aW91c1ZhbHVlICYmIGNvbnRleHQucHJldmlvdXNWYWx1ZSAhPT0gdmFsdWUgJiYgKGNvbnNvbGUud2FybihgJHt2YWxpZGF0aW9uLnJlc29sdXRpb24uYWN0aW9ufSBmb3IgYmxvY2sgd2l0aCBfa2V5ICcke3ZhbGlkYXRpb25WYWx1ZVswXS5fa2V5fScuICR7dmFsaWRhdGlvbi5yZXNvbHV0aW9uPy5kZXNjcmlwdGlvbn1gKSwgdmFsaWRhdGlvbi5yZXNvbHV0aW9uLnBhdGNoZXMuZm9yRWFjaCgocGF0Y2gpID0+IHtcbiAgICAgICAgICAgIHNlbmRCYWNrKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJwYXRjaFwiLFxuICAgICAgICAgICAgICBwYXRjaFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkpLCB2YWxpZGF0aW9uLnZhbGlkIHx8IHZhbGlkYXRpb24ucmVzb2x1dGlvbj8uYXV0b1Jlc29sdmUgPyAob2xkQmxvY2suX2tleSA9PT0gY3VycmVudEJsb2NrLl9rZXkgPyAoZGVidWckNC5lbmFibGVkICYmIGRlYnVnJDQoXCJVcGRhdGluZyBibG9ja1wiLCBvbGRCbG9jaywgY3VycmVudEJsb2NrKSwgX3VwZGF0ZUJsb2NrKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2ssIG9sZEJsb2NrLCBjdXJyZW50QmxvY2tJbmRleCkpIDogKGRlYnVnJDQuZW5hYmxlZCAmJiBkZWJ1ZyQ0KFwiUmVwbGFjaW5nIGJsb2NrXCIsIG9sZEJsb2NrLCBjdXJyZW50QmxvY2spLCBfcmVwbGFjZUJsb2NrKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2ssIGN1cnJlbnRCbG9ja0luZGV4KSksIGJsb2NrQ2hhbmdlZCA9ICEwKSA6IChzZW5kQmFjayh7XG4gICAgICAgICAgICB0eXBlOiBcImludmFsaWQgdmFsdWVcIixcbiAgICAgICAgICAgIHJlc29sdXRpb246IHZhbGlkYXRpb24ucmVzb2x1dGlvbixcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgfSksIGJsb2NrVmFsaWQgPSAhMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvbGRCbG9jayAmJiBibG9ja1ZhbGlkKSB7XG4gICAgICAgICAgY29uc3QgdmFsaWRhdGlvblZhbHVlID0gW3ZhbHVlW2N1cnJlbnRCbG9ja0luZGV4XV0sIHZhbGlkYXRpb24gPSB2YWxpZGF0ZVZhbHVlKHZhbGlkYXRpb25WYWx1ZSwgY29udGV4dC5zY2hlbWEsIGNvbnRleHQua2V5R2VuZXJhdG9yKTtcbiAgICAgICAgICBkZWJ1ZyQ0LmVuYWJsZWQgJiYgZGVidWckNChcIlZhbGlkYXRpbmcgYW5kIGluc2VydGluZyBuZXcgYmxvY2sgaW4gdGhlIGVuZCBvZiB0aGUgdmFsdWVcIiwgY3VycmVudEJsb2NrKSwgdmFsaWRhdGlvbi52YWxpZCB8fCB2YWxpZGF0aW9uLnJlc29sdXRpb24/LmF1dG9SZXNvbHZlID8gVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCB7XG4gICAgICAgICAgICBhdDogW2N1cnJlbnRCbG9ja0luZGV4XVxuICAgICAgICAgIH0pIDogKGRlYnVnJDQoXCJJbnZhbGlkXCIsIHZhbGlkYXRpb24pLCBzZW5kQmFjayh7XG4gICAgICAgICAgICB0eXBlOiBcImludmFsaWQgdmFsdWVcIixcbiAgICAgICAgICAgIHJlc29sdXRpb246IHZhbGlkYXRpb24ucmVzb2x1dGlvbixcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgfSksIGJsb2NrVmFsaWQgPSAhMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KSwge1xuICAgIGJsb2NrQ2hhbmdlZCxcbiAgICBibG9ja1ZhbGlkXG4gIH07XG59XG5mdW5jdGlvbiBfcmVwbGFjZUJsb2NrKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2ssIGN1cnJlbnRCbG9ja0luZGV4KSB7XG4gIGNvbnN0IGN1cnJlbnRTZWxlY3Rpb24gPSBzbGF0ZUVkaXRvci5zZWxlY3Rpb24sIHNlbGVjdGlvbkZvY3VzT25CbG9jayA9IGN1cnJlbnRTZWxlY3Rpb24gJiYgY3VycmVudFNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdID09PSBjdXJyZW50QmxvY2tJbmRleDtcbiAgc2VsZWN0aW9uRm9jdXNPbkJsb2NrICYmIFRyYW5zZm9ybXMuZGVzZWxlY3Qoc2xhdGVFZGl0b3IpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKHNsYXRlRWRpdG9yLCB7XG4gICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleF1cbiAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywge1xuICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXhdXG4gIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpLCBzZWxlY3Rpb25Gb2N1c09uQmxvY2sgJiYgVHJhbnNmb3Jtcy5zZWxlY3Qoc2xhdGVFZGl0b3IsIGN1cnJlbnRTZWxlY3Rpb24pO1xufVxuZnVuY3Rpb24gX3VwZGF0ZUJsb2NrKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2ssIG9sZEJsb2NrLCBjdXJyZW50QmxvY2tJbmRleCkge1xuICBpZiAoVHJhbnNmb3Jtcy5zZXROb2RlcyhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCB7XG4gICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleF1cbiAgfSksIHNsYXRlRWRpdG9yLmlzVGV4dEJsb2NrKGN1cnJlbnRCbG9jaykgJiYgc2xhdGVFZGl0b3IuaXNUZXh0QmxvY2sob2xkQmxvY2spKSB7XG4gICAgY29uc3Qgb2xkQmxvY2tDaGlsZHJlbkxlbmd0aCA9IG9sZEJsb2NrLmNoaWxkcmVuLmxlbmd0aDtcbiAgICBjdXJyZW50QmxvY2suY2hpbGRyZW4ubGVuZ3RoIDwgb2xkQmxvY2tDaGlsZHJlbkxlbmd0aCAmJiBBcnJheS5mcm9tKEFycmF5KG9sZEJsb2NrQ2hpbGRyZW5MZW5ndGggLSBjdXJyZW50QmxvY2suY2hpbGRyZW4ubGVuZ3RoKSkuZm9yRWFjaCgoXywgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkSW5kZXggPSBvbGRCbG9ja0NoaWxkcmVuTGVuZ3RoIC0gMSAtIGluZGV4O1xuICAgICAgY2hpbGRJbmRleCA+IDAgJiYgKGRlYnVnJDQoXCJSZW1vdmluZyBjaGlsZFwiKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICBhdDogW2N1cnJlbnRCbG9ja0luZGV4LCBjaGlsZEluZGV4XVxuICAgICAgfSkpO1xuICAgIH0pLCBjdXJyZW50QmxvY2suY2hpbGRyZW4uZm9yRWFjaCgoY3VycmVudEJsb2NrQ2hpbGQsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IG9sZEJsb2NrQ2hpbGQgPSBvbGRCbG9jay5jaGlsZHJlbltjdXJyZW50QmxvY2tDaGlsZEluZGV4XSwgaXNDaGlsZENoYW5nZWQgPSAhaXNFcXVhbChjdXJyZW50QmxvY2tDaGlsZCwgb2xkQmxvY2tDaGlsZCksIGlzVGV4dENoYW5nZWQgPSAhaXNFcXVhbChjdXJyZW50QmxvY2tDaGlsZC50ZXh0LCBvbGRCbG9ja0NoaWxkPy50ZXh0KSwgcGF0aCA9IFtjdXJyZW50QmxvY2tJbmRleCwgY3VycmVudEJsb2NrQ2hpbGRJbmRleF07XG4gICAgICBpZiAoaXNDaGlsZENoYW5nZWQpXG4gICAgICAgIGlmIChjdXJyZW50QmxvY2tDaGlsZC5fa2V5ID09PSBvbGRCbG9ja0NoaWxkPy5fa2V5KSB7XG4gICAgICAgICAgZGVidWckNChcIlVwZGF0aW5nIGNoYW5nZWQgY2hpbGRcIiwgY3VycmVudEJsb2NrQ2hpbGQsIG9sZEJsb2NrQ2hpbGQpLCBUcmFuc2Zvcm1zLnNldE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2tDaGlsZCwge1xuICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBpc1NwYW5Ob2RlMiA9IFRleHQuaXNUZXh0KGN1cnJlbnRCbG9ja0NoaWxkKSAmJiBjdXJyZW50QmxvY2tDaGlsZC5fdHlwZSA9PT0gXCJzcGFuXCIgJiYgVGV4dC5pc1RleHQob2xkQmxvY2tDaGlsZCkgJiYgb2xkQmxvY2tDaGlsZC5fdHlwZSA9PT0gXCJzcGFuXCI7XG4gICAgICAgICAgaXNTcGFuTm9kZTIgJiYgaXNUZXh0Q2hhbmdlZCA/IChvbGRCbG9ja0NoaWxkLnRleHQubGVuZ3RoID4gMCAmJiBkZWxldGVUZXh0KHNsYXRlRWRpdG9yLCB7XG4gICAgICAgICAgICBhdDoge1xuICAgICAgICAgICAgICBmb2N1czoge1xuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBvbGRCbG9ja0NoaWxkLnRleHQubGVuZ3RoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnRUZXh0KHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2tDaGlsZC50ZXh0LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKSA6IGlzU3Bhbk5vZGUyIHx8IChkZWJ1ZyQ0KFwiVXBkYXRpbmcgY2hhbmdlZCBpbmxpbmUgb2JqZWN0IGNoaWxkXCIsIGN1cnJlbnRCbG9ja0NoaWxkKSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICAgICAgX2tleTogVk9JRF9DSElMRF9LRVlcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogWy4uLnBhdGgsIDBdLFxuICAgICAgICAgICAgdm9pZHM6ICEwXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Ugb2xkQmxvY2tDaGlsZCA/IChkZWJ1ZyQ0KFwiUmVwbGFjaW5nIGNoaWxkXCIsIGN1cnJlbnRCbG9ja0NoaWxkKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXgsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXhdXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2tDaGlsZCwge1xuICAgICAgICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXgsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXhdXG4gICAgICAgIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKSA6IG9sZEJsb2NrQ2hpbGQgfHwgKGRlYnVnJDQoXCJJbnNlcnRpbmcgbmV3IGNoaWxkXCIsIGN1cnJlbnRCbG9ja0NoaWxkKSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrQ2hpbGQsIHtcbiAgICAgICAgICBhdDogW2N1cnJlbnRCbG9ja0luZGV4LCBjdXJyZW50QmxvY2tDaGlsZEluZGV4XVxuICAgICAgICB9KSwgc2xhdGVFZGl0b3Iub25DaGFuZ2UoKSk7XG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IGRlYnVnJDMgPSBkZWJ1Z1dpdGhOYW1lKFwic2V0dXBcIik7XG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbEVkaXRvcihjb25maWcpIHtcbiAgZGVidWckMyhcIkNyZWF0aW5nIG5ldyBFZGl0b3IgaW5zdGFuY2VcIik7XG4gIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBbXSwgZWRpdG9yQWN0b3IgPSBjcmVhdGVBY3RvcihlZGl0b3JNYWNoaW5lLCB7XG4gICAgaW5wdXQ6IGVkaXRvckNvbmZpZ1RvTWFjaGluZUlucHV0KGNvbmZpZylcbiAgfSksIHJlbGF5QWN0b3IgPSBjcmVhdGVBY3RvcihyZWxheU1hY2hpbmUpLCBzbGF0ZUVkaXRvciA9IGNyZWF0ZVNsYXRlRWRpdG9yKHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICByZWxheUFjdG9yLFxuICAgIHN1YnNjcmlwdGlvbnNcbiAgfSksIGVkaXRhYmxlID0gY3JlYXRlRWRpdGFibGVBUEkoc2xhdGVFZGl0b3IuaW5zdGFuY2UsIGVkaXRvckFjdG9yKSwge1xuICAgIG11dGF0aW9uQWN0b3IsXG4gICAgc3luY0FjdG9yXG4gIH0gPSBjcmVhdGVBY3RvcnMoe1xuICAgIGVkaXRvckFjdG9yLFxuICAgIHJlbGF5QWN0b3IsXG4gICAgc2xhdGVFZGl0b3I6IHNsYXRlRWRpdG9yLmluc3RhbmNlLFxuICAgIHN1YnNjcmlwdGlvbnNcbiAgfSksIGVkaXRvciA9IHtcbiAgICBkb206IGNyZWF0ZUVkaXRvckRvbSgoZXZlbnQpID0+IGVkaXRvckFjdG9yLnNlbmQoZXZlbnQpLCBzbGF0ZUVkaXRvci5pbnN0YW5jZSksXG4gICAgZ2V0U25hcHNob3Q6ICgpID0+IGdldEVkaXRvclNuYXBzaG90KHtcbiAgICAgIGVkaXRvckFjdG9yU25hcHNob3Q6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCksXG4gICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBzbGF0ZUVkaXRvci5pbnN0YW5jZVxuICAgIH0pLFxuICAgIHJlZ2lzdGVyQmVoYXZpb3I6IChiZWhhdmlvckNvbmZpZykgPT4ge1xuICAgICAgY29uc3QgcHJpb3JpdHkgPSBjcmVhdGVFZGl0b3JQcmlvcml0eSh7XG4gICAgICAgIG5hbWU6IFwiY3VzdG9tXCIsXG4gICAgICAgIHJlZmVyZW5jZToge1xuICAgICAgICAgIHByaW9yaXR5OiBjb3JlUHJpb3JpdHksXG4gICAgICAgICAgaW1wb3J0YW5jZTogXCJoaWdoZXJcIlxuICAgICAgICB9XG4gICAgICB9KSwgYmVoYXZpb3JDb25maWdXaXRoUHJpb3JpdHkgPSB7XG4gICAgICAgIC4uLmJlaGF2aW9yQ29uZmlnLFxuICAgICAgICBwcmlvcml0eVxuICAgICAgfTtcbiAgICAgIHJldHVybiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJhZGQgYmVoYXZpb3JcIixcbiAgICAgICAgYmVoYXZpb3JDb25maWc6IGJlaGF2aW9yQ29uZmlnV2l0aFByaW9yaXR5XG4gICAgICB9KSwgKCkgPT4ge1xuICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcInJlbW92ZSBiZWhhdmlvclwiLFxuICAgICAgICAgIGJlaGF2aW9yQ29uZmlnOiBiZWhhdmlvckNvbmZpZ1dpdGhQcmlvcml0eVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZW5kOiAoZXZlbnQpID0+IHtcbiAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlIFwidXBkYXRlIHZhbHVlXCI6XG4gICAgICAgICAgc3luY0FjdG9yLnNlbmQoZXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidXBkYXRlIHJlYWRPbmx5XCI6XG4gICAgICAgIGNhc2UgXCJwYXRjaGVzXCI6XG4gICAgICAgIGNhc2UgXCJ1cGRhdGUgbWF4QmxvY2tzXCI6XG4gICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZChldmVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJibHVyXCI6XG4gICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImJsdXJcIixcbiAgICAgICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IuaW5zdGFuY2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImZvY3VzXCI6XG4gICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImZvY3VzXCIsXG4gICAgICAgICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLmluc3RhbmNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbnNlcnQuYmxvY2sgb2JqZWN0XCI6XG4gICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgICAgICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgICAgICAgX3R5cGU6IGV2ZW50LmJsb2NrT2JqZWN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgLi4uZXZlbnQuYmxvY2tPYmplY3QudmFsdWUgPz8ge31cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcGxhY2VtZW50OiBldmVudC5wbGFjZW1lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLmluc3RhbmNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICBiZWhhdmlvckV2ZW50OiBldmVudCxcbiAgICAgICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IuaW5zdGFuY2VcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uOiAoZXZlbnQsIGxpc3RlbmVyKSA9PiByZWxheUFjdG9yLm9uKGV2ZW50LCAoZXZlbnQyKSA9PiB7XG4gICAgICBzd2l0Y2ggKGV2ZW50Mi50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJibHVycmVkXCI6XG4gICAgICAgIGNhc2UgXCJkb25lIGxvYWRpbmdcIjpcbiAgICAgICAgY2FzZSBcImVkaXRhYmxlXCI6XG4gICAgICAgIGNhc2UgXCJmb2N1c2VkXCI6XG4gICAgICAgIGNhc2UgXCJpbnZhbGlkIHZhbHVlXCI6XG4gICAgICAgIGNhc2UgXCJsb2FkaW5nXCI6XG4gICAgICAgIGNhc2UgXCJtdXRhdGlvblwiOlxuICAgICAgICBjYXNlIFwicGF0Y2hcIjpcbiAgICAgICAgY2FzZSBcInJlYWQgb25seVwiOlxuICAgICAgICBjYXNlIFwicmVhZHlcIjpcbiAgICAgICAgY2FzZSBcInNlbGVjdGlvblwiOlxuICAgICAgICBjYXNlIFwidmFsdWUgY2hhbmdlZFwiOlxuICAgICAgICAgIGxpc3RlbmVyKGV2ZW50Mik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSksXG4gICAgX2ludGVybmFsOiB7XG4gICAgICBlZGl0YWJsZSxcbiAgICAgIGVkaXRvckFjdG9yLFxuICAgICAgc2xhdGVFZGl0b3JcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgYWN0b3JzOiB7XG4gICAgICBlZGl0b3JBY3RvcixcbiAgICAgIG11dGF0aW9uQWN0b3IsXG4gICAgICByZWxheUFjdG9yLFxuICAgICAgc3luY0FjdG9yXG4gICAgfSxcbiAgICBlZGl0b3IsXG4gICAgc3Vic2NyaXB0aW9uc1xuICB9O1xufVxuZnVuY3Rpb24gZWRpdG9yQ29uZmlnVG9NYWNoaW5lSW5wdXQoY29uZmlnKSB7XG4gIGNvbnN0IHtcbiAgICBsZWdhY3lTY2hlbWEsXG4gICAgc2NoZW1hXG4gIH0gPSBjb21waWxlU2NoZW1hc0Zyb21FZGl0b3JDb25maWcoY29uZmlnKTtcbiAgcmV0dXJuIHtcbiAgICBjb252ZXJ0ZXJzOiBjcmVhdGVDb3JlQ29udmVydGVycyhsZWdhY3lTY2hlbWEpLFxuICAgIGdldExlZ2FjeVNjaGVtYTogKCkgPT4gbGVnYWN5U2NoZW1hLFxuICAgIGtleUdlbmVyYXRvcjogY29uZmlnLmtleUdlbmVyYXRvciA/PyBkZWZhdWx0S2V5R2VuZXJhdG9yLFxuICAgIG1heEJsb2NrczogY29uZmlnLm1heEJsb2NrcyxcbiAgICByZWFkT25seTogY29uZmlnLnJlYWRPbmx5LFxuICAgIHNjaGVtYSxcbiAgICBpbml0aWFsVmFsdWU6IGNvbmZpZy5pbml0aWFsVmFsdWVcbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVTY2hlbWFzRnJvbUVkaXRvckNvbmZpZyhjb25maWcpIHtcbiAgY29uc3QgbGVnYWN5U2NoZW1hID0gY29uZmlnLnNjaGVtYURlZmluaXRpb24gPyBjb21waWxlU2NoZW1hRGVmaW5pdGlvblRvUG9ydGFibGVUZXh0TWVtYmVyU2NoZW1hVHlwZXMoY29uZmlnLnNjaGVtYURlZmluaXRpb24pIDogY3JlYXRlUG9ydGFibGVUZXh0TWVtYmVyU2NoZW1hVHlwZXMoY29uZmlnLnNjaGVtYS5oYXNPd25Qcm9wZXJ0eShcImpzb25UeXBlXCIpID8gY29uZmlnLnNjaGVtYSA6IGNvbXBpbGVUeXBlKGNvbmZpZy5zY2hlbWEpKSwgc2NoZW1hID0gY29uZmlnLnNjaGVtYURlZmluaXRpb24gPyBjb21waWxlU2NoZW1hKGNvbmZpZy5zY2hlbWFEZWZpbml0aW9uKSA6IHBvcnRhYmxlVGV4dE1lbWJlclNjaGVtYVR5cGVzVG9TY2hlbWEobGVnYWN5U2NoZW1hKTtcbiAgcmV0dXJuIHtcbiAgICBsZWdhY3lTY2hlbWEsXG4gICAgc2NoZW1hXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVBY3RvcnMoY29uZmlnKSB7XG4gIGRlYnVnJDMoXCJDcmVhdGluZyBuZXcgQWN0b3JzXCIpO1xuICBjb25zdCBtdXRhdGlvbkFjdG9yID0gY3JlYXRlQWN0b3IobXV0YXRpb25NYWNoaW5lLCB7XG4gICAgaW5wdXQ6IHtcbiAgICAgIHJlYWRPbmx5OiBjb25maWcuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSksXG4gICAgICBzY2hlbWE6IGNvbmZpZy5lZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgICAgc2xhdGVFZGl0b3I6IGNvbmZpZy5zbGF0ZUVkaXRvclxuICAgIH1cbiAgfSksIHN5bmNBY3RvciA9IGNyZWF0ZUFjdG9yKHN5bmNNYWNoaW5lLCB7XG4gICAgaW5wdXQ6IHtcbiAgICAgIGluaXRpYWxWYWx1ZTogY29uZmlnLmVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5pbml0aWFsVmFsdWUsXG4gICAgICBrZXlHZW5lcmF0b3I6IGNvbmZpZy5lZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgcmVhZE9ubHk6IGNvbmZpZy5lZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gICAgICB9KSxcbiAgICAgIHNjaGVtYTogY29uZmlnLmVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICBzbGF0ZUVkaXRvcjogY29uZmlnLnNsYXRlRWRpdG9yXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNvbmZpZy5zdWJzY3JpcHRpb25zLnB1c2goKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG11dGF0aW9uQWN0b3Iub24oXCIqXCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQudHlwZSA9PT0gXCJoYXMgcGVuZGluZyBtdXRhdGlvbnNcIiAmJiBzeW5jQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiaGFzIHBlbmRpbmcgbXV0YXRpb25zXCJcbiAgICAgIH0pLCBldmVudC50eXBlID09PSBcIm11dGF0aW9uXCIgJiYgKHN5bmNBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJtdXRhdGlvblwiXG4gICAgICB9KSwgY29uZmlnLmVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcIm11dGF0aW9uXCIsXG4gICAgICAgIHBhdGNoZXM6IGV2ZW50LnBhdGNoZXMsXG4gICAgICAgIHNuYXBzaG90OiBldmVudC5zbmFwc2hvdCxcbiAgICAgICAgdmFsdWU6IGV2ZW50LnNuYXBzaG90XG4gICAgICB9KSksIGV2ZW50LnR5cGUgPT09IFwicGF0Y2hcIiAmJiBjb25maWcucmVsYXlBY3Rvci5zZW5kKGV2ZW50KTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSksIGNvbmZpZy5zdWJzY3JpcHRpb25zLnB1c2goKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN5bmNBY3Rvci5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImludmFsaWQgdmFsdWVcIjpcbiAgICAgICAgICBjb25maWcucmVsYXlBY3Rvci5zZW5kKGV2ZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInZhbHVlIGNoYW5nZWRcIjpcbiAgICAgICAgICBjb25maWcucmVsYXlBY3Rvci5zZW5kKGV2ZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInBhdGNoXCI6XG4gICAgICAgICAgY29uZmlnLmVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgLi4uZXZlbnQsXG4gICAgICAgICAgICB0eXBlOiBcImludGVybmFsLnBhdGNoXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnJvbVNsYXRlVmFsdWUoY29uZmlnLnNsYXRlRWRpdG9yLmNoaWxkcmVuLCBjb25maWcuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoY29uZmlnLnNsYXRlRWRpdG9yKSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb25maWcuZWRpdG9yQWN0b3Iuc2VuZChldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0pLCBjb25maWcuc3Vic2NyaXB0aW9ucy5wdXNoKCgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBjb25maWcuZWRpdG9yQWN0b3Iuc3Vic2NyaWJlKChzbmFwc2hvdCkgPT4ge1xuICAgICAgc25hcHNob3QubWF0Y2hlcyh7XG4gICAgICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgICAgIH0pID8gKG11dGF0aW9uQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwidXBkYXRlIHJlYWRPbmx5XCIsXG4gICAgICAgIHJlYWRPbmx5OiAhMFxuICAgICAgfSksIHN5bmNBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJ1cGRhdGUgcmVhZE9ubHlcIixcbiAgICAgICAgcmVhZE9ubHk6ICEwXG4gICAgICB9KSkgOiAobXV0YXRpb25BY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJ1cGRhdGUgcmVhZE9ubHlcIixcbiAgICAgICAgcmVhZE9ubHk6ICExXG4gICAgICB9KSwgc3luY0FjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcInVwZGF0ZSByZWFkT25seVwiLFxuICAgICAgICByZWFkT25seTogITFcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSksIGNvbmZpZy5zdWJzY3JpcHRpb25zLnB1c2goKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNvbmZpZy5lZGl0b3JBY3Rvci5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImVkaXRhYmxlXCI6XG4gICAgICAgIGNhc2UgXCJtdXRhdGlvblwiOlxuICAgICAgICBjYXNlIFwicmVhZHlcIjpcbiAgICAgICAgY2FzZSBcInJlYWQgb25seVwiOlxuICAgICAgICBjYXNlIFwic2VsZWN0aW9uXCI6XG4gICAgICAgICAgY29uZmlnLnJlbGF5QWN0b3Iuc2VuZChldmVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbnRlcm5hbC5wYXRjaFwiOlxuICAgICAgICAgIG11dGF0aW9uQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgICAgIHR5cGU6IFwicGF0Y2hcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9KSwge1xuICAgIG11dGF0aW9uQWN0b3IsXG4gICAgc3luY0FjdG9yXG4gIH07XG59XG5mdW5jdGlvbiBldmVudFRvQ2hhbmdlKGV2ZW50KSB7XG4gIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgIGNhc2UgXCJibHVycmVkXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImJsdXJcIixcbiAgICAgICAgZXZlbnQ6IGV2ZW50LmV2ZW50XG4gICAgICB9O1xuICAgIGNhc2UgXCJwYXRjaFwiOlxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIGNhc2UgXCJsb2FkaW5nXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImxvYWRpbmdcIixcbiAgICAgICAgaXNMb2FkaW5nOiAhMFxuICAgICAgfTtcbiAgICBjYXNlIFwiZG9uZSBsb2FkaW5nXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImxvYWRpbmdcIixcbiAgICAgICAgaXNMb2FkaW5nOiAhMVxuICAgICAgfTtcbiAgICBjYXNlIFwiZm9jdXNlZFwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJmb2N1c1wiLFxuICAgICAgICBldmVudDogZXZlbnQuZXZlbnRcbiAgICAgIH07XG4gICAgY2FzZSBcInZhbHVlIGNoYW5nZWRcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidmFsdWVcIixcbiAgICAgICAgdmFsdWU6IGV2ZW50LnZhbHVlXG4gICAgICB9O1xuICAgIGNhc2UgXCJpbnZhbGlkIHZhbHVlXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImludmFsaWRWYWx1ZVwiLFxuICAgICAgICByZXNvbHV0aW9uOiBldmVudC5yZXNvbHV0aW9uLFxuICAgICAgICB2YWx1ZTogZXZlbnQudmFsdWVcbiAgICAgIH07XG4gICAgY2FzZSBcIm11dGF0aW9uXCI6XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgY2FzZSBcInJlYWR5XCI6XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgY2FzZSBcInNlbGVjdGlvblwiOlxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIGNhc2UgXCJ1bnNldFwiOlxuICAgICAgcmV0dXJuIGV2ZW50O1xuICB9XG59XG5jb25zdCBSZWxheUFjdG9yQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe30pLCBkZWJ1ZyQyID0gZGVidWdXaXRoTmFtZShcImNvbXBvbmVudDpQb3J0YWJsZVRleHRFZGl0b3JcIik7XG5jbGFzcyBQb3J0YWJsZVRleHRFZGl0b3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSBcIlBvcnRhYmxlVGV4dEVkaXRvclwiO1xuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBvZiBhbGwgdGhlIGVkaXRvciBjaGFuZ2VzLlxuICAgKi9cbiAgY2hhbmdlJCA9IG5ldyBTdWJqZWN0KCk7XG4gIC8qKlxuICAgKiBBIGxvb2t1cCB0YWJsZSBmb3IgYWxsIHRoZSByZWxldmFudCBzY2hlbWEgdHlwZXMgZm9yIHRoaXMgcG9ydGFibGUgdGV4dCB0eXBlLlxuICAgKi9cbiAgLyoqXG4gICAqIFRoZSBlZGl0b3IgaW5zdGFuY2VcbiAgICovXG4gIC8qXG4gICAqIFRoZSBlZGl0b3IgQVBJIChjdXJyZW50bHkgaW1wbGVtZW50ZWQgd2l0aCBTbGF0ZSkuXG4gICAqL1xuICBzdWJzY3JpcHRpb25zID0gW107XG4gIHVuc3Vic2NyaWJlcnMgPSBbXTtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBpZiAoc3VwZXIocHJvcHMpLCBwcm9wcy5lZGl0b3IpXG4gICAgICB0aGlzLmVkaXRvciA9IHByb3BzLmVkaXRvciwgdGhpcy5zY2hlbWFUeXBlcyA9IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuZ2V0TGVnYWN5U2NoZW1hKCk7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGFjdG9ycyxcbiAgICAgICAgZWRpdG9yLFxuICAgICAgICBzdWJzY3JpcHRpb25zXG4gICAgICB9ID0gY3JlYXRlSW50ZXJuYWxFZGl0b3Ioe1xuICAgICAgICBpbml0aWFsVmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgICBrZXlHZW5lcmF0b3I6IHByb3BzLmtleUdlbmVyYXRvcixcbiAgICAgICAgbWF4QmxvY2tzOiBwcm9wcy5tYXhCbG9ja3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IE51bWJlci5wYXJzZUludChwcm9wcy5tYXhCbG9ja3MudG9TdHJpbmcoKSwgMTApLFxuICAgICAgICByZWFkT25seTogcHJvcHMucmVhZE9ubHksXG4gICAgICAgIHNjaGVtYTogcHJvcHMuc2NoZW1hVHlwZVxuICAgICAgfSk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zLCB0aGlzLmFjdG9ycyA9IGFjdG9ycywgdGhpcy5lZGl0b3IgPSBlZGl0b3IsIHRoaXMuc2NoZW1hVHlwZXMgPSBhY3RvcnMuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmdldExlZ2FjeVNjaGVtYSgpO1xuICAgIH1cbiAgICB0aGlzLmVkaXRhYmxlID0gdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRhYmxlO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5hY3RvcnMpXG4gICAgICByZXR1cm47XG4gICAgZm9yIChjb25zdCBzdWJzY3JpcHRpb24gb2YgdGhpcy5zdWJzY3JpcHRpb25zKVxuICAgICAgdGhpcy51bnN1YnNjcmliZXJzLnB1c2goc3Vic2NyaXB0aW9uKCkpO1xuICAgIGNvbnN0IHJlbGF5QWN0b3JTdWJzY3JpcHRpb24gPSB0aGlzLmFjdG9ycy5yZWxheUFjdG9yLm9uKFwiKlwiLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGNoYW5nZSA9IGV2ZW50VG9DaGFuZ2UoZXZlbnQpO1xuICAgICAgY2hhbmdlICYmICh0aGlzLnByb3BzLmVkaXRvciB8fCB0aGlzLnByb3BzLm9uQ2hhbmdlKGNoYW5nZSksIHRoaXMuY2hhbmdlJC5uZXh0KGNoYW5nZSkpO1xuICAgIH0pO1xuICAgIHRoaXMudW5zdWJzY3JpYmVycy5wdXNoKHJlbGF5QWN0b3JTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUpLCB0aGlzLmFjdG9ycy5lZGl0b3JBY3Rvci5zdGFydCgpLCB0aGlzLmFjdG9ycy5tdXRhdGlvbkFjdG9yLnN0YXJ0KCksIHRoaXMuYWN0b3JzLnJlbGF5QWN0b3Iuc3RhcnQoKSwgdGhpcy5hY3RvcnMuc3luY0FjdG9yLnN0YXJ0KCk7XG4gIH1cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICF0aGlzLnByb3BzLmVkaXRvciAmJiAhcHJldlByb3BzLmVkaXRvciAmJiB0aGlzLnByb3BzLnNjaGVtYVR5cGUgIT09IHByZXZQcm9wcy5zY2hlbWFUeXBlICYmIGNvbnNvbGUud2FybihcIlVwZGF0aW5nIHNjaGVtYSB0eXBlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcIiksICF0aGlzLnByb3BzLmVkaXRvciAmJiAhcHJldlByb3BzLmVkaXRvciAmJiAodGhpcy5wcm9wcy5yZWFkT25seSAhPT0gcHJldlByb3BzLnJlYWRPbmx5ICYmIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwidXBkYXRlIHJlYWRPbmx5XCIsXG4gICAgICByZWFkT25seTogdGhpcy5wcm9wcy5yZWFkT25seSA/PyAhMVxuICAgIH0pLCB0aGlzLnByb3BzLm1heEJsb2NrcyAhPT0gcHJldlByb3BzLm1heEJsb2NrcyAmJiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcInVwZGF0ZSBtYXhCbG9ja3NcIixcbiAgICAgIG1heEJsb2NrczogdGhpcy5wcm9wcy5tYXhCbG9ja3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IE51bWJlci5wYXJzZUludCh0aGlzLnByb3BzLm1heEJsb2Nrcy50b1N0cmluZygpLCAxMClcbiAgICB9KSwgdGhpcy5wcm9wcy52YWx1ZSAhPT0gcHJldlByb3BzLnZhbHVlICYmIHRoaXMuZWRpdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJ1cGRhdGUgdmFsdWVcIixcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlXG4gICAgfSksIHRoaXMucHJvcHMuZWRpdG9yUmVmICE9PSBwcmV2UHJvcHMuZWRpdG9yUmVmICYmIHRoaXMucHJvcHMuZWRpdG9yUmVmICYmICh0aGlzLnByb3BzLmVkaXRvclJlZi5jdXJyZW50ID0gdGhpcykpO1xuICB9XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGZvciAoY29uc3QgdW5zdWJzY3JpYmUgb2YgdGhpcy51bnN1YnNjcmliZXJzKVxuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLmFjdG9ycyAmJiAoc3RvcEFjdG9yKHRoaXMuYWN0b3JzLmVkaXRvckFjdG9yKSwgc3RvcEFjdG9yKHRoaXMuYWN0b3JzLm11dGF0aW9uQWN0b3IpLCBzdG9wQWN0b3IodGhpcy5hY3RvcnMucmVsYXlBY3RvciksIHN0b3BBY3Rvcih0aGlzLmFjdG9ycy5zeW5jQWN0b3IpKTtcbiAgfVxuICBzZXRFZGl0YWJsZSA9IChlZGl0YWJsZSkgPT4ge1xuICAgIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0YWJsZSA9IHtcbiAgICAgIC4uLnRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0YWJsZSxcbiAgICAgIC4uLmVkaXRhYmxlXG4gICAgfTtcbiAgfTtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGxlZ2FjeVBhdGNoZXMgPSB0aGlzLnByb3BzLmVkaXRvciA/IHZvaWQgMCA6IHRoaXMucHJvcHMuaW5jb21pbmdQYXRjaGVzJCA/PyB0aGlzLnByb3BzLnBhdGNoZXMkO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4cyhGcmFnbWVudCwgeyBjaGlsZHJlbjogW1xuICAgICAgbGVnYWN5UGF0Y2hlcyA/IC8qIEBfX1BVUkVfXyAqLyBqc3goUm91dGVQYXRjaGVzT2JzZXJ2YWJsZVRvRWRpdG9yQWN0b3IsIHsgZWRpdG9yQWN0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3RvciwgcGF0Y2hlcyQ6IGxlZ2FjeVBhdGNoZXMgfSkgOiBudWxsLFxuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChFZGl0b3JBY3RvckNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3RvciwgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goUmVsYXlBY3RvckNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHRoaXMuYWN0b3JzLnJlbGF5QWN0b3IsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFNsYXRlLCB7IGVkaXRvcjogdGhpcy5lZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluc3RhbmNlLCBpbml0aWFsVmFsdWU6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbml0aWFsVmFsdWUsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFBvcnRhYmxlVGV4dEVkaXRvckNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHRoaXMsIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pIH0pIH0pIH0pXG4gICAgXSB9KTtcbiAgfVxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgaXNBY3RpdmUgPSB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9ycy5nZXRBY3RpdmVBbm5vdGF0aW9ucylcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgYWN0aXZlQW5ub3RhdGlvbnMgPSAoZWRpdG9yKSA9PiBlZGl0b3IgJiYgZWRpdG9yLmVkaXRhYmxlID8gZWRpdG9yLmVkaXRhYmxlLmFjdGl2ZUFubm90YXRpb25zKCkgOiBbXTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBidWlsdC1pbiBzZWxlY3RvcnMgb3Igd3JpdGUgeW91ciBvd246IGh0dHBzOi8vd3d3LnBvcnRhYmxldGV4dC5vcmcvcmVmZXJlbmNlL3NlbGVjdG9ycy9cbiAgICpcbiAgICogYGBgXG4gICAqIGltcG9ydCAqIGFzIHNlbGVjdG9ycyBmcm9tICdAcG9ydGFibGV0ZXh0L2VkaXRvci9zZWxlY3RvcnMnXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGNvbnN0IGlzQWN0aXZlID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuaXNBY3RpdmVBbm5vdGF0aW9uKC4uLikpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGlzQW5ub3RhdGlvbkFjdGl2ZSA9IChlZGl0b3IsIGFubm90YXRpb25UeXBlKSA9PiBlZGl0b3IgJiYgZWRpdG9yLmVkaXRhYmxlID8gZWRpdG9yLmVkaXRhYmxlLmlzQW5ub3RhdGlvbkFjdGl2ZShhbm5vdGF0aW9uVHlwZSkgOiAhMTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2Fubm90YXRpb24uYWRkJyxcbiAgICogIGFubm90YXRpb246IHtcbiAgICogICAgbmFtZTogJy4uLicsXG4gICAqICAgIHZhbHVlOiB7Li4ufSxcbiAgICogIH1cbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgYWRkQW5ub3RhdGlvbiA9IChlZGl0b3IsIHR5cGUsIHZhbHVlKSA9PiBlZGl0b3IuZWRpdGFibGU/LmFkZEFubm90YXRpb24odHlwZSwgdmFsdWUpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGBlZGl0b3Iuc2VuZCguLi4pYCBpbnN0ZWFkXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBlZGl0b3Iuc2VuZCh7XG4gICAqICB0eXBlOiAnYmx1cicsXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGJsdXIgPSAoZWRpdG9yKSA9PiB7XG4gICAgZGVidWckMihcIkhvc3QgYmx1cnJlZFwiKSwgZWRpdG9yLmVkaXRhYmxlPy5ibHVyKCk7XG4gIH07XG4gIHN0YXRpYyBkZWxldGUgPSAoZWRpdG9yLCBzZWxlY3Rpb24sIG9wdGlvbnMpID0+IGVkaXRvci5lZGl0YWJsZT8uZGVsZXRlKHNlbGVjdGlvbiwgb3B0aW9ucyk7XG4gIHN0YXRpYyBmaW5kRE9NTm9kZSA9IChlZGl0b3IsIGVsZW1lbnQpID0+IGVkaXRvci5lZGl0YWJsZT8uZmluZERPTU5vZGUoZWxlbWVudCk7XG4gIHN0YXRpYyBmaW5kQnlQYXRoID0gKGVkaXRvciwgcGF0aCkgPT4gZWRpdG9yLmVkaXRhYmxlPy5maW5kQnlQYXRoKHBhdGgpIHx8IFtdO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGBlZGl0b3Iuc2VuZCguLi4pYCBpbnN0ZWFkXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBlZGl0b3Iuc2VuZCh7XG4gICAqICB0eXBlOiAnZm9jdXMnLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyBmb2N1cyA9IChlZGl0b3IpID0+IHtcbiAgICBkZWJ1ZyQyKFwiSG9zdCByZXF1ZXN0aW5nIGZvY3VzXCIpLCBlZGl0b3IuZWRpdGFibGU/LmZvY3VzKCk7XG4gIH07XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYnVpbHQtaW4gc2VsZWN0b3JzIG9yIHdyaXRlIHlvdXIgb3duOiBodHRwczovL3d3dy5wb3J0YWJsZXRleHQub3JnL3JlZmVyZW5jZS9zZWxlY3RvcnMvXG4gICAqXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgKiBhcyBzZWxlY3RvcnMgZnJvbSAnQHBvcnRhYmxldGV4dC9lZGl0b3Ivc2VsZWN0b3JzJ1xuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBjb25zdCBmb2N1c0Jsb2NrID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuZ2V0Rm9jdXNCbG9jaylcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgZm9jdXNCbG9jayA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uZm9jdXNCbG9jaygpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgZm9jdXNDaGlsZCA9IHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3JzLmdldEZvY3VzQ2hpbGQpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGZvY3VzQ2hpbGQgPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmZvY3VzQ2hpbGQoKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBidWlsdC1pbiBzZWxlY3RvcnMgb3Igd3JpdGUgeW91ciBvd246IGh0dHBzOi8vd3d3LnBvcnRhYmxldGV4dC5vcmcvcmVmZXJlbmNlL3NlbGVjdG9ycy9cbiAgICpcbiAgICogYGBgXG4gICAqIGltcG9ydCAqIGFzIHNlbGVjdG9ycyBmcm9tICdAcG9ydGFibGV0ZXh0L2VkaXRvci9zZWxlY3RvcnMnXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGNvbnN0IHNlbGVjdGlvbiA9IHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3JzLmdldFNlbGVjdGlvbilcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgZ2V0U2VsZWN0aW9uID0gKGVkaXRvcikgPT4gZWRpdG9yLmVkaXRhYmxlID8gZWRpdG9yLmVkaXRhYmxlLmdldFNlbGVjdGlvbigpIDogbnVsbDtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBidWlsdC1pbiBzZWxlY3RvcnMgb3Igd3JpdGUgeW91ciBvd246IGh0dHBzOi8vd3d3LnBvcnRhYmxldGV4dC5vcmcvcmVmZXJlbmNlL3NlbGVjdG9ycy9cbiAgICpcbiAgICogYGBgXG4gICAqIGltcG9ydCAqIGFzIHNlbGVjdG9ycyBmcm9tICdAcG9ydGFibGV0ZXh0L2VkaXRvci9zZWxlY3RvcnMnXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGNvbnN0IHZhbHVlID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuZ2V0VmFsdWUpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGdldFZhbHVlID0gKGVkaXRvcikgPT4gZWRpdG9yLmVkaXRhYmxlPy5nZXRWYWx1ZSgpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgaXNBY3RpdmUgPSB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9ycy5pc0FjdGl2ZVN0eWxlKC4uLikpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGhhc0Jsb2NrU3R5bGUgPSAoZWRpdG9yLCBibG9ja1N0eWxlKSA9PiBlZGl0b3IuZWRpdGFibGU/Lmhhc0Jsb2NrU3R5bGUoYmxvY2tTdHlsZSk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYnVpbHQtaW4gc2VsZWN0b3JzIG9yIHdyaXRlIHlvdXIgb3duOiBodHRwczovL3d3dy5wb3J0YWJsZXRleHQub3JnL3JlZmVyZW5jZS9zZWxlY3RvcnMvXG4gICAqXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgKiBhcyBzZWxlY3RvcnMgZnJvbSAnQHBvcnRhYmxldGV4dC9lZGl0b3Ivc2VsZWN0b3JzJ1xuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBjb25zdCBpc0FjdGl2ZSA9IHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3JzLmlzQWN0aXZlTGlzdEl0ZW0oLi4uKSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaGFzTGlzdFN0eWxlID0gKGVkaXRvciwgbGlzdFN0eWxlKSA9PiBlZGl0b3IuZWRpdGFibGU/Lmhhc0xpc3RTdHlsZShsaXN0U3R5bGUpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgaXNTZWxlY3Rpb25Db2xsYXBzZWQgPSB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9ycy5pc1NlbGVjdGlvbkNvbGxhcHNlZClcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaXNDb2xsYXBzZWRTZWxlY3Rpb24gPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmlzQ29sbGFwc2VkU2VsZWN0aW9uKCk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYnVpbHQtaW4gc2VsZWN0b3JzIG9yIHdyaXRlIHlvdXIgb3duOiBodHRwczovL3d3dy5wb3J0YWJsZXRleHQub3JnL3JlZmVyZW5jZS9zZWxlY3RvcnMvXG4gICAqXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgKiBhcyBzZWxlY3RvcnMgZnJvbSAnQHBvcnRhYmxldGV4dC9lZGl0b3Ivc2VsZWN0b3JzJ1xuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBjb25zdCBpc1NlbGVjdGlvbkV4cGFuZGVkID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuaXNTZWxlY3Rpb25FeHBhbmRlZClcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaXNFeHBhbmRlZFNlbGVjdGlvbiA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uaXNFeHBhbmRlZFNlbGVjdGlvbigpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgaXNBY3RpdmUgPSB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9ycy5pc0FjdGl2ZURlY29yYXRvciguLi4pKVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyBpc01hcmtBY3RpdmUgPSAoZWRpdG9yLCBtYXJrKSA9PiBlZGl0b3IuZWRpdGFibGU/LmlzTWFya0FjdGl2ZShtYXJrKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2luc2VydC5zcGFuJyxcbiAgICogIHRleHQ6ICcuLi4nLFxuICAgKiAgYW5ub3RhdGlvbnM6IFt7bmFtZTogJy4uLicsIHZhbHVlOiB7Li4ufX1dLFxuICAgKiAgZGVjb3JhdG9yczogWycuLi4nXSxcbiAgICogfSlcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2luc2VydC5pbmxpbmUgb2JqZWN0JyxcbiAgICogIGlubGluZU9iamVjdDoge1xuICAgKiAgICBuYW1lOiAnLi4uJyxcbiAgICogICAgdmFsdWU6IHsuLi59LFxuICAgKiAgfSxcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaW5zZXJ0Q2hpbGQgPSAoZWRpdG9yLCB0eXBlLCB2YWx1ZSkgPT4gKGRlYnVnJDIoXCJIb3N0IGluc2VydGluZyBjaGlsZFwiKSwgZWRpdG9yLmVkaXRhYmxlPy5pbnNlcnRDaGlsZCh0eXBlLCB2YWx1ZSkpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGBlZGl0b3Iuc2VuZCguLi4pYCBpbnN0ZWFkXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBlZGl0b3Iuc2VuZCh7XG4gICAqICB0eXBlOiAnaW5zZXJ0LmJsb2NrIG9iamVjdCcsXG4gICAqICBibG9ja09iamVjdDoge1xuICAgKiAgICBuYW1lOiAnLi4uJyxcbiAgICogICAgdmFsdWU6IHsuLi59LFxuICAgKiAgfSxcbiAgICogIHBsYWNlbWVudDogJ2F1dG8nIHwgJ2FmdGVyJyB8ICdiZWZvcmUnLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyBpbnNlcnRCbG9jayA9IChlZGl0b3IsIHR5cGUsIHZhbHVlKSA9PiBlZGl0b3IuZWRpdGFibGU/Lmluc2VydEJsb2NrKHR5cGUsIHZhbHVlKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2luc2VydC5icmVhaycsXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGluc2VydEJyZWFrID0gKGVkaXRvcikgPT4gZWRpdG9yLmVkaXRhYmxlPy5pbnNlcnRCcmVhaygpO1xuICBzdGF0aWMgaXNWb2lkID0gKGVkaXRvciwgZWxlbWVudCkgPT4gZWRpdG9yLmVkaXRhYmxlPy5pc1ZvaWQoZWxlbWVudCk7XG4gIHN0YXRpYyBpc09iamVjdFBhdGggPSAoX2VkaXRvciwgcGF0aCkgPT4ge1xuICAgIGlmICghcGF0aCB8fCAhQXJyYXkuaXNBcnJheShwYXRoKSkgcmV0dXJuICExO1xuICAgIGNvbnN0IGlzQ2hpbGRPYmplY3RFZGl0UGF0aCA9IHBhdGgubGVuZ3RoID4gMyAmJiBwYXRoWzFdID09PSBcImNoaWxkcmVuXCI7XG4gICAgcmV0dXJuIHBhdGgubGVuZ3RoID4gMSAmJiBwYXRoWzFdICE9PSBcImNoaWxkcmVuXCIgfHwgaXNDaGlsZE9iamVjdEVkaXRQYXRoO1xuICB9O1xuICBzdGF0aWMgbWFya3MgPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/Lm1hcmtzKCk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYGVkaXRvci5zZW5kKC4uLilgIGluc3RlYWRcbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGVkaXRvci5zZW5kKHtcbiAgICogIHR5cGU6ICdzZWxlY3QnLFxuICAgKiAgc2VsZWN0aW9uOiB7Li4ufSxcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgc2VsZWN0ID0gKGVkaXRvciwgc2VsZWN0aW9uKSA9PiB7XG4gICAgZGVidWckMihcIkhvc3Qgc2V0dGluZyBzZWxlY3Rpb25cIiwgc2VsZWN0aW9uKSwgZWRpdG9yLmVkaXRhYmxlPy5zZWxlY3Qoc2VsZWN0aW9uKTtcbiAgfTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2Fubm90YXRpb24ucmVtb3ZlJyxcbiAgICogIGFubm90YXRpb246IHtcbiAgICogICAgbmFtZTogJy4uLicsXG4gICAqICB9LFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyByZW1vdmVBbm5vdGF0aW9uID0gKGVkaXRvciwgdHlwZSkgPT4gZWRpdG9yLmVkaXRhYmxlPy5yZW1vdmVBbm5vdGF0aW9uKHR5cGUpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGBlZGl0b3Iuc2VuZCguLi4pYCBpbnN0ZWFkXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBlZGl0b3Iuc2VuZCh7XG4gICAqICB0eXBlOiAnc3R5bGUudG9nZ2xlJyxcbiAgICogIHN0eWxlOiAnLi4uJyxcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgdG9nZ2xlQmxvY2tTdHlsZSA9IChlZGl0b3IsIGJsb2NrU3R5bGUpID0+IChkZWJ1ZyQyKFwiSG9zdCBpcyB0b2dnbGluZyBibG9jayBzdHlsZVwiKSwgZWRpdG9yLmVkaXRhYmxlPy50b2dnbGVCbG9ja1N0eWxlKGJsb2NrU3R5bGUpKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2xpc3QgaXRlbS50b2dnbGUnLFxuICAgKiAgbGlzdEl0ZW06ICcuLi4nLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyB0b2dnbGVMaXN0ID0gKGVkaXRvciwgbGlzdFN0eWxlKSA9PiBlZGl0b3IuZWRpdGFibGU/LnRvZ2dsZUxpc3QobGlzdFN0eWxlKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2RlY29yYXRvci50b2dnbGUnLFxuICAgKiAgZGVjb3JhdG9yOiAnLi4uJyxcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgdG9nZ2xlTWFyayA9IChlZGl0b3IsIG1hcmspID0+IHtcbiAgICBkZWJ1ZyQyKFwiSG9zdCB0b2dnbGluZyBtYXJrXCIsIG1hcmspLCBlZGl0b3IuZWRpdGFibGU/LnRvZ2dsZU1hcmsobWFyayk7XG4gIH07XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYnVpbHQtaW4gc2VsZWN0b3JzIG9yIHdyaXRlIHlvdXIgb3duOiBodHRwczovL3d3dy5wb3J0YWJsZXRleHQub3JnL3JlZmVyZW5jZS9zZWxlY3RvcnMvXG4gICAqXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgKiBhcyBzZWxlY3RvcnMgZnJvbSAnQHBvcnRhYmxldGV4dC9lZGl0b3Ivc2VsZWN0b3JzJ1xuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBjb25zdCBzZWxlY3RlZFNsaWNlID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuZ2V0U2VsZWN0ZWRTbGljZSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgZ2V0RnJhZ21lbnQgPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmdldEZyYWdtZW50KCk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYGVkaXRvci5zZW5kKC4uLilgIGluc3RlYWRcbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGVkaXRvci5zZW5kKHtcbiAgICogICB0eXBlOiAnaGlzdG9yeS51bmRvJyxcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgdW5kbyA9IChlZGl0b3IpID0+IHtcbiAgICBkZWJ1ZyQyKFwiSG9zdCB1bmRvaW5nXCIpLCBlZGl0b3IuZWRpdGFibGU/LnVuZG8oKTtcbiAgfTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgIHR5cGU6ICdoaXN0b3J5LnJlZG8nLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyByZWRvID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnJDIoXCJIb3N0IHJlZG9pbmdcIiksIGVkaXRvci5lZGl0YWJsZT8ucmVkbygpO1xuICB9O1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgaXNPdmVybGFwcGluZyA9IHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3JzLmlzT3ZlcmxhcHBpbmdTZWxlY3Rpb24oc2VsZWN0aW9uQikpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGlzU2VsZWN0aW9uc092ZXJsYXBwaW5nID0gKGVkaXRvciwgc2VsZWN0aW9uQSwgc2VsZWN0aW9uQikgPT4gZWRpdG9yLmVkaXRhYmxlPy5pc1NlbGVjdGlvbnNPdmVybGFwcGluZyhzZWxlY3Rpb25BLCBzZWxlY3Rpb25CKTtcbn1cbmZ1bmN0aW9uIFJvdXRlUGF0Y2hlc09ic2VydmFibGVUb0VkaXRvckFjdG9yKHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDQpO1xuICBsZXQgdDAsIHQxO1xuICByZXR1cm4gJFswXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgfHwgJFsxXSAhPT0gcHJvcHMucGF0Y2hlcyQgPyAodDAgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gcHJvcHMucGF0Y2hlcyQuc3Vic2NyaWJlKChwYXlsb2FkKSA9PiB7XG4gICAgICBwcm9wcy5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJwYXRjaGVzXCIsXG4gICAgICAgIC4uLnBheWxvYWRcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCB0MSA9IFtwcm9wcy5lZGl0b3JBY3RvciwgcHJvcHMucGF0Y2hlcyRdLCAkWzBdID0gcHJvcHMuZWRpdG9yQWN0b3IsICRbMV0gPSBwcm9wcy5wYXRjaGVzJCwgJFsyXSA9IHQwLCAkWzNdID0gdDEpIDogKHQwID0gJFsyXSwgdDEgPSAkWzNdKSwgdXNlRWZmZWN0KHQwLCB0MSksIG51bGw7XG59XG5mdW5jdGlvbiBSZW5kZXJTcGFuKHByb3BzKSB7XG4gIGNvbnN0IHNsYXRlRWRpdG9yID0gdXNlU2xhdGVTdGF0aWMoKSwgZWRpdG9yQWN0b3IgPSB1c2VDb250ZXh0KEVkaXRvckFjdG9yQ29udGV4dCksIGxlZ2FjeVNjaGVtYSA9IHVzZVNlbGVjdG9yKGVkaXRvckFjdG9yLCAocykgPT4gcy5jb250ZXh0LmdldExlZ2FjeVNjaGVtYSgpKSwgc3BhblJlZiA9IHVzZVJlZihudWxsKSwgcG9ydGFibGVUZXh0RWRpdG9yID0gdXNlUG9ydGFibGVUZXh0RWRpdG9yKCksIGJsb2NrU2VsZWN0ZWQgPSB1c2VTZWxlY3RlZCgpLCBbZm9jdXNlZCwgc2V0Rm9jdXNlZF0gPSB1c2VTdGF0ZSghMSksIFtzZWxlY3RlZCwgc2V0U2VsZWN0ZWRdID0gdXNlU3RhdGUoITEpLCBwYXJlbnQgPSBwcm9wcy5jaGlsZHJlbi5wcm9wcy5wYXJlbnQsIGJsb2NrID0gcGFyZW50ICYmIHNsYXRlRWRpdG9yLmlzVGV4dEJsb2NrKHBhcmVudCkgPyBwYXJlbnQgOiB2b2lkIDAsIHBhdGggPSB1c2VNZW1vKCgpID0+IGJsb2NrID8gW3tcbiAgICBfa2V5OiBibG9jay5fa2V5XG4gIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgIF9rZXk6IHByb3BzLmxlYWYuX2tleVxuICB9XSA6IHZvaWQgMCwgW2Jsb2NrLCBwcm9wcy5sZWFmLl9rZXldKSwgZGVjb3JhdG9yU2NoZW1hVHlwZXMgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLmRlY29yYXRvcnMubWFwKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci5uYW1lKSwgZGVjb3JhdG9ycyA9IHVuaXEoKHByb3BzLmxlYWYubWFya3MgPz8gW10pLmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9yU2NoZW1hVHlwZXMuaW5jbHVkZXMobWFyaykpKSwgYW5ub3RhdGlvbk1hcmtEZWZzID0gKHByb3BzLmxlYWYubWFya3MgPz8gW10pLmZsYXRNYXAoKG1hcmtfMCkgPT4ge1xuICAgIGlmIChkZWNvcmF0b3JTY2hlbWFUeXBlcy5pbmNsdWRlcyhtYXJrXzApKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IG1hcmtEZWZfMCA9IGJsb2NrPy5tYXJrRGVmcz8uZmluZCgobWFya0RlZikgPT4gbWFya0RlZi5fa2V5ID09PSBtYXJrXzApO1xuICAgIHJldHVybiBtYXJrRGVmXzAgPyBbbWFya0RlZl8wXSA6IFtdO1xuICB9KSwgc2hvdWxkVHJhY2tTZWxlY3Rpb25BbmRGb2N1cyA9IGFubm90YXRpb25NYXJrRGVmcy5sZW5ndGggPiAwICYmIGJsb2NrU2VsZWN0ZWQ7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzKSB7XG4gICAgICBzZXRGb2N1c2VkKCExKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VsID0gUG9ydGFibGVUZXh0RWRpdG9yLmdldFNlbGVjdGlvbihwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgIHNlbCAmJiBpc0VxdWFsKHNlbC5mb2N1cy5wYXRoLCBwYXRoKSAmJiBQb3J0YWJsZVRleHRFZGl0b3IuaXNDb2xsYXBzZWRTZWxlY3Rpb24ocG9ydGFibGVUZXh0RWRpdG9yKSAmJiBzdGFydFRyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNlZCghMCk7XG4gICAgfSk7XG4gIH0sIFtzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzLCBwYXRoLCBwb3J0YWJsZVRleHRFZGl0b3JdKTtcbiAgY29uc3Qgc2V0U2VsZWN0ZWRGcm9tUmFuZ2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHdpblNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICBpZiAoIXdpblNlbGVjdGlvbikge1xuICAgICAgc2V0U2VsZWN0ZWQoITEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAod2luU2VsZWN0aW9uICYmIHdpblNlbGVjdGlvbi5yYW5nZUNvdW50ID4gMCkge1xuICAgICAgY29uc3QgcmFuZ2UgPSB3aW5TZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICAgIHNwYW5SZWYuY3VycmVudCAmJiByYW5nZS5pbnRlcnNlY3RzTm9kZShzcGFuUmVmLmN1cnJlbnQpID8gc2V0U2VsZWN0ZWQoITApIDogc2V0U2VsZWN0ZWQoITEpO1xuICAgIH0gZWxzZVxuICAgICAgc2V0U2VsZWN0ZWQoITEpO1xuICB9LCBbc2hvdWxkVHJhY2tTZWxlY3Rpb25BbmRGb2N1c10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghc2hvdWxkVHJhY2tTZWxlY3Rpb25BbmRGb2N1cylcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBvbkJsdXIgPSBlZGl0b3JBY3Rvci5vbihcImJsdXJyZWRcIiwgKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNlZCghMSksIHNldFNlbGVjdGVkKCExKTtcbiAgICB9KSwgb25Gb2N1cyA9IGVkaXRvckFjdG9yLm9uKFwiZm9jdXNlZFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBzZWxfMCA9IFBvcnRhYmxlVGV4dEVkaXRvci5nZXRTZWxlY3Rpb24ocG9ydGFibGVUZXh0RWRpdG9yKTtcbiAgICAgIHNlbF8wICYmIGlzRXF1YWwoc2VsXzAuZm9jdXMucGF0aCwgcGF0aCkgJiYgUG9ydGFibGVUZXh0RWRpdG9yLmlzQ29sbGFwc2VkU2VsZWN0aW9uKHBvcnRhYmxlVGV4dEVkaXRvcikgJiYgc2V0Rm9jdXNlZCghMCksIHNldFNlbGVjdGVkRnJvbVJhbmdlKCk7XG4gICAgfSksIG9uU2VsZWN0aW9uID0gZWRpdG9yQWN0b3Iub24oXCJzZWxlY3Rpb25cIiwgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5zZWxlY3Rpb24gJiYgaXNFcXVhbChldmVudC5zZWxlY3Rpb24uZm9jdXMucGF0aCwgcGF0aCkgJiYgUG9ydGFibGVUZXh0RWRpdG9yLmlzQ29sbGFwc2VkU2VsZWN0aW9uKHBvcnRhYmxlVGV4dEVkaXRvcikgPyBzZXRGb2N1c2VkKCEwKSA6IHNldEZvY3VzZWQoITEpLCBzZXRTZWxlY3RlZEZyb21SYW5nZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBvbkJsdXIudW5zdWJzY3JpYmUoKSwgb25Gb2N1cy51bnN1YnNjcmliZSgpLCBvblNlbGVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtlZGl0b3JBY3RvciwgcGF0aCwgcG9ydGFibGVUZXh0RWRpdG9yLCBzZXRTZWxlY3RlZEZyb21SYW5nZSwgc2hvdWxkVHJhY2tTZWxlY3Rpb25BbmRGb2N1c10pLCB1c2VFZmZlY3QoKCkgPT4gc2V0U2VsZWN0ZWRGcm9tUmFuZ2UoKSwgW3NldFNlbGVjdGVkRnJvbVJhbmdlXSk7XG4gIGxldCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICBmb3IgKGNvbnN0IG1hcmtfMSBvZiBkZWNvcmF0b3JzKSB7XG4gICAgY29uc3QgbGVnYWN5RGVjb3JhdG9yU2NoZW1hVHlwZSA9IGxlZ2FjeVNjaGVtYS5kZWNvcmF0b3JzLmZpbmQoKGRlYykgPT4gZGVjLnZhbHVlID09PSBtYXJrXzEpO1xuICAgIHBhdGggJiYgbGVnYWN5RGVjb3JhdG9yU2NoZW1hVHlwZSAmJiBwcm9wcy5yZW5kZXJEZWNvcmF0b3IgJiYgKGNoaWxkcmVuID0gcHJvcHMucmVuZGVyRGVjb3JhdG9yKHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZWRpdG9yRWxlbWVudFJlZjogc3BhblJlZixcbiAgICAgIGZvY3VzZWQsXG4gICAgICBwYXRoLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICBzY2hlbWFUeXBlOiBsZWdhY3lEZWNvcmF0b3JTY2hlbWFUeXBlLFxuICAgICAgdmFsdWU6IG1hcmtfMSxcbiAgICAgIHR5cGU6IGxlZ2FjeURlY29yYXRvclNjaGVtYVR5cGVcbiAgICB9KSk7XG4gIH1cbiAgZm9yIChjb25zdCBhbm5vdGF0aW9uTWFya0RlZiBvZiBhbm5vdGF0aW9uTWFya0RlZnMpIHtcbiAgICBjb25zdCBsZWdhY3lBbm5vdGF0aW9uU2NoZW1hVHlwZSA9IGxlZ2FjeVNjaGVtYS5hbm5vdGF0aW9ucy5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGFubm90YXRpb25NYXJrRGVmLl90eXBlKTtcbiAgICBsZWdhY3lBbm5vdGF0aW9uU2NoZW1hVHlwZSAmJiAoYmxvY2sgJiYgcGF0aCAmJiBwcm9wcy5yZW5kZXJBbm5vdGF0aW9uID8gY2hpbGRyZW4gPSAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IHJlZjogc3BhblJlZiwgY2hpbGRyZW46IHByb3BzLnJlbmRlckFubm90YXRpb24oe1xuICAgICAgYmxvY2ssXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVkaXRvckVsZW1lbnRSZWY6IHNwYW5SZWYsXG4gICAgICBmb2N1c2VkLFxuICAgICAgcGF0aCxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgc2NoZW1hVHlwZTogbGVnYWN5QW5ub3RhdGlvblNjaGVtYVR5cGUsXG4gICAgICB2YWx1ZTogYW5ub3RhdGlvbk1hcmtEZWYsXG4gICAgICB0eXBlOiBsZWdhY3lBbm5vdGF0aW9uU2NoZW1hVHlwZVxuICAgIH0pIH0pIDogY2hpbGRyZW4gPSAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IHJlZjogc3BhblJlZiwgY2hpbGRyZW4gfSkpO1xuICB9XG4gIGlmIChibG9jayAmJiBwYXRoICYmIHByb3BzLnJlbmRlckNoaWxkKSB7XG4gICAgY29uc3QgY2hpbGQgPSBibG9jay5jaGlsZHJlbi5maW5kKChfY2hpbGQpID0+IF9jaGlsZC5fa2V5ID09PSBwcm9wcy5sZWFmLl9rZXkpO1xuICAgIGNoaWxkICYmIChjaGlsZHJlbiA9IHByb3BzLnJlbmRlckNoaWxkKHtcbiAgICAgIGFubm90YXRpb25zOiBhbm5vdGF0aW9uTWFya0RlZnMsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVkaXRvckVsZW1lbnRSZWY6IHNwYW5SZWYsXG4gICAgICBmb2N1c2VkLFxuICAgICAgcGF0aCxcbiAgICAgIHNjaGVtYVR5cGU6IGxlZ2FjeVNjaGVtYS5zcGFuLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogY2hpbGQsXG4gICAgICB0eXBlOiBsZWdhY3lTY2hlbWEuc3BhblxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChcInNwYW5cIiwgeyAuLi5wcm9wcy5hdHRyaWJ1dGVzLCByZWY6IHNwYW5SZWYsIGNoaWxkcmVuIH0pO1xufVxuY29uc3QgUExBQ0VIT0xERVJfU1RZTEUgPSB7XG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDBcbn07XG5mdW5jdGlvbiBSZW5kZXJMZWFmKHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDEyKSwgZWRpdG9yQWN0b3IgPSB1c2VDb250ZXh0KEVkaXRvckFjdG9yQ29udGV4dCksIHNjaGVtYSA9IHVzZVNlbGVjdG9yKGVkaXRvckFjdG9yLCBfdGVtcCk7XG4gIGlmIChwcm9wcy5sZWFmLl90eXBlICE9PSBzY2hlbWEuc3Bhbi5uYW1lKVxuICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBwcm9wcyA/ICh0MCA9IC8qIEBfX1BVUkVfXyAqLyBqc3goUmVuZGVyU3BhbiwgeyAuLi5wcm9wcyB9KSwgJFswXSA9IHByb3BzLCAkWzFdID0gdDApIDogdDAgPSAkWzFdO1xuICBsZXQgcmVuZGVyZWRTcGFuID0gdDA7XG4gIGlmIChwcm9wcy5yZW5kZXJQbGFjZWhvbGRlciAmJiBwcm9wcy5sZWFmLnBsYWNlaG9sZGVyICYmIHByb3BzLnRleHQudGV4dCA9PT0gXCJcIikge1xuICAgIGxldCB0MTtcbiAgICAkWzJdICE9PSBwcm9wcy5yZW5kZXJQbGFjZWhvbGRlciA/ICh0MSA9IHByb3BzLnJlbmRlclBsYWNlaG9sZGVyKCksICRbMl0gPSBwcm9wcy5yZW5kZXJQbGFjZWhvbGRlciwgJFszXSA9IHQxKSA6IHQxID0gJFszXTtcbiAgICBsZXQgdDI7XG4gICAgJFs0XSAhPT0gdDEgPyAodDIgPSAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IHN0eWxlOiBQTEFDRUhPTERFUl9TVFlMRSwgY29udGVudEVkaXRhYmxlOiAhMSwgY2hpbGRyZW46IHQxIH0pLCAkWzRdID0gdDEsICRbNV0gPSB0MikgOiB0MiA9ICRbNV07XG4gICAgbGV0IHQzO1xuICAgIHJldHVybiAkWzZdICE9PSByZW5kZXJlZFNwYW4gfHwgJFs3XSAhPT0gdDIgPyAodDMgPSAvKiBAX19QVVJFX18gKi8ganN4cyhGcmFnbWVudCwgeyBjaGlsZHJlbjogW1xuICAgICAgdDIsXG4gICAgICByZW5kZXJlZFNwYW5cbiAgICBdIH0pLCAkWzZdID0gcmVuZGVyZWRTcGFuLCAkWzddID0gdDIsICRbOF0gPSB0MykgOiB0MyA9ICRbOF0sIHQzO1xuICB9XG4gIGNvbnN0IHJhbmdlRGVjb3JhdGlvbiA9IHByb3BzLmxlYWYucmFuZ2VEZWNvcmF0aW9uO1xuICBpZiAocmFuZ2VEZWNvcmF0aW9uKSB7XG4gICAgbGV0IHQxO1xuICAgICRbOV0gIT09IHJhbmdlRGVjb3JhdGlvbiB8fCAkWzEwXSAhPT0gcmVuZGVyZWRTcGFuID8gKHQxID0gcmFuZ2VEZWNvcmF0aW9uLmNvbXBvbmVudCh7XG4gICAgICBjaGlsZHJlbjogcmVuZGVyZWRTcGFuXG4gICAgfSksICRbOV0gPSByYW5nZURlY29yYXRpb24sICRbMTBdID0gcmVuZGVyZWRTcGFuLCAkWzExXSA9IHQxKSA6IHQxID0gJFsxMV0sIHJlbmRlcmVkU3BhbiA9IHQxO1xuICB9XG4gIHJldHVybiByZW5kZXJlZFNwYW47XG59XG5mdW5jdGlvbiBfdGVtcChzKSB7XG4gIHJldHVybiBzLmNvbnRleHQuc2NoZW1hO1xufVxuZnVuY3Rpb24gUmVuZGVyVGV4dChwcm9wcykge1xuICBjb25zdCAkID0gYyg1KTtcbiAgbGV0IHQwO1xuICByZXR1cm4gJFswXSAhPT0gcHJvcHMuYXR0cmlidXRlcyB8fCAkWzFdICE9PSBwcm9wcy5jaGlsZHJlbiB8fCAkWzJdICE9PSBwcm9wcy50ZXh0Ll9rZXkgfHwgJFszXSAhPT0gcHJvcHMudGV4dC5fdHlwZSA/ICh0MCA9IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJzcGFuXCIsIHsgLi4ucHJvcHMuYXR0cmlidXRlcywgXCJkYXRhLWNoaWxkLWtleVwiOiBwcm9wcy50ZXh0Ll9rZXksIFwiZGF0YS1jaGlsZC1uYW1lXCI6IHByb3BzLnRleHQuX3R5cGUsIFwiZGF0YS1jaGlsZC10eXBlXCI6IFwic3BhblwiLCBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW4gfSksICRbMF0gPSBwcm9wcy5hdHRyaWJ1dGVzLCAkWzFdID0gcHJvcHMuY2hpbGRyZW4sICRbMl0gPSBwcm9wcy50ZXh0Ll9rZXksICRbM10gPSBwcm9wcy50ZXh0Ll90eXBlLCAkWzRdID0gdDApIDogdDAgPSAkWzRdLCB0MDtcbn1cbmNvbnN0IElTX01BQyA9IHR5cGVvZiB3aW5kb3cgPCBcInVcIiAmJiAvTWFjfGlQb2R8aVBob25lfGlQYWQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLCBtb2RpZmllcnMgPSB7XG4gIGFsdDogXCJhbHRLZXlcIixcbiAgY29udHJvbDogXCJjdHJsS2V5XCIsXG4gIG1ldGE6IFwibWV0YUtleVwiLFxuICBzaGlmdDogXCJzaGlmdEtleVwiXG59LCBhbGlhc2VzID0ge1xuICBhZGQ6IFwiK1wiLFxuICBicmVhazogXCJwYXVzZVwiLFxuICBjbWQ6IFwibWV0YVwiLFxuICBjb21tYW5kOiBcIm1ldGFcIixcbiAgY3RsOiBcImNvbnRyb2xcIixcbiAgY3RybDogXCJjb250cm9sXCIsXG4gIGRlbDogXCJkZWxldGVcIixcbiAgZG93bjogXCJhcnJvd2Rvd25cIixcbiAgZXNjOiBcImVzY2FwZVwiLFxuICBpbnM6IFwiaW5zZXJ0XCIsXG4gIGxlZnQ6IFwiYXJyb3dsZWZ0XCIsXG4gIG1vZDogSVNfTUFDID8gXCJtZXRhXCIgOiBcImNvbnRyb2xcIixcbiAgb3B0OiBcImFsdFwiLFxuICBvcHRpb246IFwiYWx0XCIsXG4gIHJldHVybjogXCJlbnRlclwiLFxuICByaWdodDogXCJhcnJvd3JpZ2h0XCIsXG4gIHNwYWNlOiBcIiBcIixcbiAgc3BhY2ViYXI6IFwiIFwiLFxuICB1cDogXCJhcnJvd3VwXCIsXG4gIHdpbjogXCJtZXRhXCIsXG4gIHdpbmRvd3M6IFwibWV0YVwiXG59LCBrZXlDb2RlcyA9IHtcbiAgYmFja3NwYWNlOiA4LFxuICB0YWI6IDksXG4gIGVudGVyOiAxMyxcbiAgc2hpZnQ6IDE2LFxuICBjb250cm9sOiAxNyxcbiAgYWx0OiAxOCxcbiAgcGF1c2U6IDE5LFxuICBjYXBzbG9jazogMjAsXG4gIGVzY2FwZTogMjcsXG4gIFwiIFwiOiAzMixcbiAgcGFnZXVwOiAzMyxcbiAgcGFnZWRvd246IDM0LFxuICBlbmQ6IDM1LFxuICBob21lOiAzNixcbiAgYXJyb3dsZWZ0OiAzNyxcbiAgYXJyb3d1cDogMzgsXG4gIGFycm93cmlnaHQ6IDM5LFxuICBhcnJvd2Rvd246IDQwLFxuICBpbnNlcnQ6IDQ1LFxuICBkZWxldGU6IDQ2LFxuICBtZXRhOiA5MSxcbiAgbnVtbG9jazogMTQ0LFxuICBzY3JvbGxsb2NrOiAxNDUsXG4gIFwiO1wiOiAxODYsXG4gIFwiPVwiOiAxODcsXG4gIFwiLFwiOiAxODgsXG4gIFwiLVwiOiAxODksXG4gIFwiLlwiOiAxOTAsXG4gIFwiL1wiOiAxOTEsXG4gIFwiYFwiOiAxOTIsXG4gIFwiW1wiOiAyMTksXG4gIFwiXFxcXFwiOiAyMjAsXG4gIFwiXVwiOiAyMjEsXG4gIFwiJ1wiOiAyMjIsXG4gIGYxOiAxMTIsXG4gIGYyOiAxMTMsXG4gIGYzOiAxMTQsXG4gIGY0OiAxMTUsXG4gIGY1OiAxMTYsXG4gIGY2OiAxMTcsXG4gIGY3OiAxMTgsXG4gIGY4OiAxMTksXG4gIGY5OiAxMjAsXG4gIGYxMDogMTIxLFxuICBmMTE6IDEyMixcbiAgZjEyOiAxMjMsXG4gIGYxMzogMTI0LFxuICBmMTQ6IDEyNSxcbiAgZjE1OiAxMjYsXG4gIGYxNjogMTI3LFxuICBmMTc6IDEyOCxcbiAgZjE4OiAxMjksXG4gIGYxOTogMTMwLFxuICBmMjA6IDEzMVxufTtcbmZ1bmN0aW9uIGlzSG90a2V5KGhvdGtleSwgZXZlbnQpIHtcbiAgcmV0dXJuIGNvbXBhcmVIb3RrZXkocGFyc2VIb3RrZXkoaG90a2V5KSwgZXZlbnQpO1xufVxuZnVuY3Rpb24gcGFyc2VIb3RrZXkoaG90a2V5KSB7XG4gIGNvbnN0IHBhcnNlZEhvdGtleSA9IHtcbiAgICBhbHRLZXk6ICExLFxuICAgIGN0cmxLZXk6ICExLFxuICAgIG1ldGFLZXk6ICExLFxuICAgIHNoaWZ0S2V5OiAhMVxuICB9LCBob3RrZXlTZWdtZW50cyA9IGhvdGtleS5yZXBsYWNlKFwiKytcIiwgXCIrYWRkXCIpLnNwbGl0KFwiK1wiKTtcbiAgZm9yIChjb25zdCByYXdIb3RrZXlTZWdtZW50IG9mIGhvdGtleVNlZ21lbnRzKSB7XG4gICAgY29uc3Qgb3B0aW9uYWwgPSByYXdIb3RrZXlTZWdtZW50LmVuZHNXaXRoKFwiP1wiKSAmJiByYXdIb3RrZXlTZWdtZW50Lmxlbmd0aCA+IDEsIGhvdGtleVNlZ21lbnQgPSBvcHRpb25hbCA/IHJhd0hvdGtleVNlZ21lbnQuc2xpY2UoMCwgLTEpIDogcmF3SG90a2V5U2VnbWVudCwga2V5TmFtZSA9IHRvS2V5TmFtZShob3RrZXlTZWdtZW50KSwgbW9kaWZpZXIgPSBtb2RpZmllcnNba2V5TmFtZV0sIGFsaWFzID0gYWxpYXNlc1tob3RrZXlTZWdtZW50XSwgY29kZTIgPSBrZXlDb2Rlc1trZXlOYW1lXTtcbiAgICBpZiAoaG90a2V5U2VnbWVudC5sZW5ndGggPiAxICYmIG1vZGlmaWVyID09PSB2b2lkIDAgJiYgYWxpYXMgPT09IHZvaWQgMCAmJiBjb2RlMiA9PT0gdm9pZCAwKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5rbm93biBtb2RpZmllcjogXCIke2hvdGtleVNlZ21lbnR9XCJgKTtcbiAgICAoaG90a2V5U2VnbWVudHMubGVuZ3RoID09PSAxIHx8IG1vZGlmaWVyID09PSB2b2lkIDApICYmIChwYXJzZWRIb3RrZXkua2V5ID0ga2V5TmFtZSwgcGFyc2VkSG90a2V5LmtleUNvZGUgPSB0b0tleUNvZGUoaG90a2V5U2VnbWVudCkpLCBtb2RpZmllciAhPT0gdm9pZCAwICYmIChwYXJzZWRIb3RrZXlbbW9kaWZpZXJdID0gb3B0aW9uYWwgPyBudWxsIDogITApO1xuICB9XG4gIHJldHVybiBwYXJzZWRIb3RrZXk7XG59XG5mdW5jdGlvbiBjb21wYXJlSG90a2V5KHBhcnNlZEhvdGtleSwgZXZlbnQpIHtcbiAgcmV0dXJuIChwYXJzZWRIb3RrZXkuYWx0S2V5ID09IG51bGwgfHwgcGFyc2VkSG90a2V5LmFsdEtleSA9PT0gZXZlbnQuYWx0S2V5KSAmJiAocGFyc2VkSG90a2V5LmN0cmxLZXkgPT0gbnVsbCB8fCBwYXJzZWRIb3RrZXkuY3RybEtleSA9PT0gZXZlbnQuY3RybEtleSkgJiYgKHBhcnNlZEhvdGtleS5tZXRhS2V5ID09IG51bGwgfHwgcGFyc2VkSG90a2V5Lm1ldGFLZXkgPT09IGV2ZW50Lm1ldGFLZXkpICYmIChwYXJzZWRIb3RrZXkuc2hpZnRLZXkgPT0gbnVsbCB8fCBwYXJzZWRIb3RrZXkuc2hpZnRLZXkgPT09IGV2ZW50LnNoaWZ0S2V5KSA/IHBhcnNlZEhvdGtleS5rZXlDb2RlICE9PSB2b2lkIDAgJiYgZXZlbnQua2V5Q29kZSAhPT0gdm9pZCAwID8gcGFyc2VkSG90a2V5LmtleUNvZGUgPT09IDkxICYmIGV2ZW50LmtleUNvZGUgPT09IDkzID8gITAgOiBwYXJzZWRIb3RrZXkua2V5Q29kZSA9PT0gZXZlbnQua2V5Q29kZSA6IHBhcnNlZEhvdGtleS5rZXlDb2RlID09PSBldmVudC5rZXlDb2RlIHx8IHBhcnNlZEhvdGtleS5rZXkgPT09IGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpIDogITE7XG59XG5mdW5jdGlvbiB0b0tleUNvZGUobmFtZSkge1xuICBjb25zdCBrZXlOYW1lID0gdG9LZXlOYW1lKG5hbWUpO1xuICByZXR1cm4ga2V5Q29kZXNba2V5TmFtZV0gPz8ga2V5TmFtZS50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCk7XG59XG5mdW5jdGlvbiB0b0tleU5hbWUobmFtZSkge1xuICBjb25zdCBrZXlOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gYWxpYXNlc1trZXlOYW1lXSA/PyBrZXlOYW1lO1xufVxuY29uc3QgZGVidWckMSA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aEhvdEtleXNcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoSG90a2V5cyhlZGl0b3JBY3RvciwgcG9ydGFibGVUZXh0RWRpdG9yLCBob3RrZXlzRnJvbU9wdGlvbnMpIHtcbiAgY29uc3QgcmVzZXJ2ZWRIb3RrZXlzID0gW1wiZW50ZXJcIiwgXCJ0YWJcIiwgXCJzaGlmdFwiLCBcImRlbGV0ZVwiLCBcImVuZFwiXSwgYWN0aXZlSG90a2V5cyA9IGhvdGtleXNGcm9tT3B0aW9ucyA/PyB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIHJldHVybiBlZGl0b3IucHRlV2l0aEhvdEtleXMgPSAoZXZlbnQpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGFjdGl2ZUhvdGtleXMpLmZvckVhY2goKGNhdCkgPT4ge1xuICAgICAgICBpZiAoY2F0ID09PSBcIm1hcmtzXCIpXG4gICAgICAgICAgZm9yIChjb25zdCBob3RrZXkgaW4gYWN0aXZlSG90a2V5c1tjYXRdKSB7XG4gICAgICAgICAgICBpZiAocmVzZXJ2ZWRIb3RrZXlzLmluY2x1ZGVzKGhvdGtleSkpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGhvdGtleSAke2hvdGtleX0gaXMgcmVzZXJ2ZWQhYCk7XG4gICAgICAgICAgICBpZiAoaXNIb3RrZXkoaG90a2V5LCBldmVudC5uYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgY29uc3QgcG9zc2libGVNYXJrID0gYWN0aXZlSG90a2V5c1tjYXRdO1xuICAgICAgICAgICAgICBpZiAocG9zc2libGVNYXJrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFyayA9IHBvc3NpYmxlTWFya1tob3RrZXldO1xuICAgICAgICAgICAgICAgIGRlYnVnJDEoYEhvdEtleSAke2hvdGtleX0gdG8gdG9nZ2xlICR7bWFya31gKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGVjb3JhdG9yLnRvZ2dsZVwiLFxuICAgICAgICAgICAgICAgICAgICBkZWNvcmF0b3I6IG1hcmtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgaWYgKGNhdCA9PT0gXCJjdXN0b21cIilcbiAgICAgICAgICBmb3IgKGNvbnN0IGhvdGtleSBpbiBhY3RpdmVIb3RrZXlzW2NhdF0pIHtcbiAgICAgICAgICAgIGlmIChyZXNlcnZlZEhvdGtleXMuaW5jbHVkZXMoaG90a2V5KSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgaG90a2V5ICR7aG90a2V5fSBpcyByZXNlcnZlZCFgKTtcbiAgICAgICAgICAgIGlmIChpc0hvdGtleShob3RrZXksIGV2ZW50Lm5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZUNvbW1hbmQgPSBhY3RpdmVIb3RrZXlzW2NhdF07XG4gICAgICAgICAgICAgIGlmIChwb3NzaWJsZUNvbW1hbmQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21tYW5kID0gcG9zc2libGVDb21tYW5kW2hvdGtleV07XG4gICAgICAgICAgICAgICAgY29tbWFuZChldmVudCwgcG9ydGFibGVUZXh0RWRpdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmZ1bmN0aW9uIG1vdmVSYW5nZUJ5T3BlcmF0aW9uKHJhbmdlLCBvcGVyYXRpb24pIHtcbiAgY29uc3QgYW5jaG9yID0gUG9pbnQudHJhbnNmb3JtKHJhbmdlLmFuY2hvciwgb3BlcmF0aW9uKSwgZm9jdXMgPSBQb2ludC50cmFuc2Zvcm0ocmFuZ2UuZm9jdXMsIG9wZXJhdGlvbik7XG4gIHJldHVybiBhbmNob3IgPT09IG51bGwgfHwgZm9jdXMgPT09IG51bGwgPyBudWxsIDogUG9pbnQuZXF1YWxzKGFuY2hvciwgcmFuZ2UuYW5jaG9yKSAmJiBQb2ludC5lcXVhbHMoZm9jdXMsIHJhbmdlLmZvY3VzKSA/IHJhbmdlIDoge1xuICAgIGFuY2hvcixcbiAgICBmb2N1c1xuICB9O1xufVxuY29uc3Qgc2xhdGVPcGVyYXRpb25DYWxsYmFjayA9ICh7XG4gIGlucHV0LFxuICBzZW5kQmFja1xufSkgPT4ge1xuICBjb25zdCBvcmlnaW5hbEFwcGx5ID0gaW5wdXQuc2xhdGVFZGl0b3IuYXBwbHk7XG4gIHJldHVybiBpbnB1dC5zbGF0ZUVkaXRvci5hcHBseSA9IChvcCkgPT4ge1xuICAgIG9wLnR5cGUgIT09IFwic2V0X3NlbGVjdGlvblwiICYmIHNlbmRCYWNrKHtcbiAgICAgIHR5cGU6IFwic2xhdGUgb3BlcmF0aW9uXCIsXG4gICAgICBvcGVyYXRpb246IG9wXG4gICAgfSksIG9yaWdpbmFsQXBwbHkob3ApO1xuICB9LCAoKSA9PiB7XG4gICAgaW5wdXQuc2xhdGVFZGl0b3IuYXBwbHkgPSBvcmlnaW5hbEFwcGx5O1xuICB9O1xufSwgcmFuZ2VEZWNvcmF0aW9uc01hY2hpbmUgPSBzZXR1cCh7XG4gIHR5cGVzOiB7XG4gICAgY29udGV4dDoge30sXG4gICAgaW5wdXQ6IHt9LFxuICAgIGV2ZW50czoge31cbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIFwidXBkYXRlIHBlbmRpbmcgcmFuZ2UgZGVjb3JhdGlvbnNcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdSYW5nZURlY29yYXRpb25zOiAoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gZXZlbnQudHlwZSAhPT0gXCJyYW5nZSBkZWNvcmF0aW9ucyB1cGRhdGVkXCIgPyBjb250ZXh0LnBlbmRpbmdSYW5nZURlY29yYXRpb25zIDogZXZlbnQucmFuZ2VEZWNvcmF0aW9uc1xuICAgIH0pLFxuICAgIFwic2V0IHVwIGluaXRpYWwgcmFuZ2UgZGVjb3JhdGlvbnNcIjogKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCByYW5nZURlY29yYXRpb25TdGF0ZSA9IFtdO1xuICAgICAgZm9yIChjb25zdCByYW5nZURlY29yYXRpb24gb2YgY29udGV4dC5wZW5kaW5nUmFuZ2VEZWNvcmF0aW9ucykge1xuICAgICAgICBjb25zdCBzbGF0ZVJhbmdlID0gdG9TbGF0ZVJhbmdlKHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hLFxuICAgICAgICAgICAgdmFsdWU6IGNvbnRleHQuc2xhdGVFZGl0b3IudmFsdWUsXG4gICAgICAgICAgICBzZWxlY3Rpb246IHJhbmdlRGVjb3JhdGlvbi5zZWxlY3Rpb25cbiAgICAgICAgICB9LFxuICAgICAgICAgIGJsb2NrSW5kZXhNYXA6IGNvbnRleHQuc2xhdGVFZGl0b3IuYmxvY2tJbmRleE1hcFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFSYW5nZS5pc1JhbmdlKHNsYXRlUmFuZ2UpKSB7XG4gICAgICAgICAgcmFuZ2VEZWNvcmF0aW9uLm9uTW92ZWQ/Lih7XG4gICAgICAgICAgICBuZXdTZWxlY3Rpb246IG51bGwsXG4gICAgICAgICAgICByYW5nZURlY29yYXRpb24sXG4gICAgICAgICAgICBvcmlnaW46IFwibG9jYWxcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJhbmdlRGVjb3JhdGlvblN0YXRlLnB1c2goe1xuICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbixcbiAgICAgICAgICAuLi5zbGF0ZVJhbmdlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY29udGV4dC5zbGF0ZUVkaXRvci5kZWNvcmF0ZWRSYW5nZXMgPSByYW5nZURlY29yYXRpb25TdGF0ZTtcbiAgICB9LFxuICAgIFwidXBkYXRlIHJhbmdlIGRlY29yYXRpb25zXCI6ICh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiB7XG4gICAgICBpZiAoZXZlbnQudHlwZSAhPT0gXCJyYW5nZSBkZWNvcmF0aW9ucyB1cGRhdGVkXCIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHJhbmdlRGVjb3JhdGlvblN0YXRlID0gW107XG4gICAgICBmb3IgKGNvbnN0IHJhbmdlRGVjb3JhdGlvbiBvZiBldmVudC5yYW5nZURlY29yYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNsYXRlUmFuZ2UgPSB0b1NsYXRlUmFuZ2Uoe1xuICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWEsXG4gICAgICAgICAgICB2YWx1ZTogY29udGV4dC5zbGF0ZUVkaXRvci52YWx1ZSxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogcmFuZ2VEZWNvcmF0aW9uLnNlbGVjdGlvblxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmxvY2tJbmRleE1hcDogY29udGV4dC5zbGF0ZUVkaXRvci5ibG9ja0luZGV4TWFwXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIVJhbmdlLmlzUmFuZ2Uoc2xhdGVSYW5nZSkpIHtcbiAgICAgICAgICByYW5nZURlY29yYXRpb24ub25Nb3ZlZD8uKHtcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbjogbnVsbCxcbiAgICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbixcbiAgICAgICAgICAgIG9yaWdpbjogXCJsb2NhbFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmFuZ2VEZWNvcmF0aW9uU3RhdGUucHVzaCh7XG4gICAgICAgICAgcmFuZ2VEZWNvcmF0aW9uLFxuICAgICAgICAgIC4uLnNsYXRlUmFuZ2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb250ZXh0LnNsYXRlRWRpdG9yLmRlY29yYXRlZFJhbmdlcyA9IHJhbmdlRGVjb3JhdGlvblN0YXRlO1xuICAgIH0sXG4gICAgXCJtb3ZlIHJhbmdlIGRlY29yYXRpb25zXCI6ICh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiB7XG4gICAgICBpZiAoZXZlbnQudHlwZSAhPT0gXCJzbGF0ZSBvcGVyYXRpb25cIilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcmFuZ2VEZWNvcmF0aW9uU3RhdGUgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgZGVjb3JhdGVkUmFuZ2Ugb2YgY29udGV4dC5zbGF0ZUVkaXRvci5kZWNvcmF0ZWRSYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xhdGVSYW5nZSA9IHRvU2xhdGVSYW5nZSh7XG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgICAgICAgIHZhbHVlOiBjb250ZXh0LnNsYXRlRWRpdG9yLnZhbHVlLFxuICAgICAgICAgICAgc2VsZWN0aW9uOiBkZWNvcmF0ZWRSYW5nZS5yYW5nZURlY29yYXRpb24uc2VsZWN0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBibG9ja0luZGV4TWFwOiBjb250ZXh0LnNsYXRlRWRpdG9yLmJsb2NrSW5kZXhNYXBcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghUmFuZ2UuaXNSYW5nZShzbGF0ZVJhbmdlKSkge1xuICAgICAgICAgIGRlY29yYXRlZFJhbmdlLnJhbmdlRGVjb3JhdGlvbi5vbk1vdmVkPy4oe1xuICAgICAgICAgICAgbmV3U2VsZWN0aW9uOiBudWxsLFxuICAgICAgICAgICAgcmFuZ2VEZWNvcmF0aW9uOiBkZWNvcmF0ZWRSYW5nZS5yYW5nZURlY29yYXRpb24sXG4gICAgICAgICAgICBvcmlnaW46IFwibG9jYWxcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdSYW5nZTtcbiAgICAgICAgaWYgKG5ld1JhbmdlID0gbW92ZVJhbmdlQnlPcGVyYXRpb24oc2xhdGVSYW5nZSwgZXZlbnQub3BlcmF0aW9uKSwgbmV3UmFuZ2UgJiYgbmV3UmFuZ2UgIT09IHNsYXRlUmFuZ2UgfHwgbmV3UmFuZ2UgPT09IG51bGwgJiYgc2xhdGVSYW5nZSkge1xuICAgICAgICAgIGNvbnN0IG5ld1JhbmdlU2VsZWN0aW9uID0gbmV3UmFuZ2UgPyBzbGF0ZVJhbmdlVG9TZWxlY3Rpb24oe1xuICAgICAgICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgICAgICAgIGVkaXRvcjogY29udGV4dC5zbGF0ZUVkaXRvcixcbiAgICAgICAgICAgIHJhbmdlOiBuZXdSYW5nZVxuICAgICAgICAgIH0pIDogbnVsbDtcbiAgICAgICAgICBkZWNvcmF0ZWRSYW5nZS5yYW5nZURlY29yYXRpb24ub25Nb3ZlZD8uKHtcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbjogbmV3UmFuZ2VTZWxlY3Rpb24sXG4gICAgICAgICAgICByYW5nZURlY29yYXRpb246IGRlY29yYXRlZFJhbmdlLnJhbmdlRGVjb3JhdGlvbixcbiAgICAgICAgICAgIG9yaWdpbjogXCJsb2NhbFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3UmFuZ2UgIT09IG51bGwgJiYgcmFuZ2VEZWNvcmF0aW9uU3RhdGUucHVzaCh7XG4gICAgICAgICAgLi4ubmV3UmFuZ2UgfHwgc2xhdGVSYW5nZSxcbiAgICAgICAgICByYW5nZURlY29yYXRpb246IHtcbiAgICAgICAgICAgIC4uLmRlY29yYXRlZFJhbmdlLnJhbmdlRGVjb3JhdGlvbixcbiAgICAgICAgICAgIHNlbGVjdGlvbjogc2xhdGVSYW5nZVRvU2VsZWN0aW9uKHtcbiAgICAgICAgICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgICAgICAgICAgZWRpdG9yOiBjb250ZXh0LnNsYXRlRWRpdG9yLFxuICAgICAgICAgICAgICByYW5nZTogbmV3UmFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQuc2xhdGVFZGl0b3IuZGVjb3JhdGVkUmFuZ2VzID0gcmFuZ2VEZWNvcmF0aW9uU3RhdGU7XG4gICAgfSxcbiAgICBcImFzc2lnbiByZWFkT25seVwiOiBhc3NpZ24oe1xuICAgICAgcmVhZE9ubHk6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudC50eXBlICE9PSBcInVwZGF0ZSByZWFkIG9ubHlcIiA/IGNvbnRleHQucmVhZE9ubHkgOiBldmVudC5yZWFkT25seVxuICAgIH0pLFxuICAgIFwidXBkYXRlIGRlY29yYXRlXCI6IGFzc2lnbih7XG4gICAgICBkZWNvcmF0ZTogKHtcbiAgICAgICAgY29udGV4dFxuICAgICAgfSkgPT4gKHtcbiAgICAgICAgZm46IGNyZWF0ZURlY29yYXRlKGNvbnRleHQuc2NoZW1hLCBjb250ZXh0LnNsYXRlRWRpdG9yKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuICBhY3RvcnM6IHtcbiAgICBcInNsYXRlIG9wZXJhdGlvbiBsaXN0ZW5lclwiOiBmcm9tQ2FsbGJhY2soc2xhdGVPcGVyYXRpb25DYWxsYmFjaylcbiAgfSxcbiAgZ3VhcmRzOiB7XG4gICAgXCJoYXMgcGVuZGluZyByYW5nZSBkZWNvcmF0aW9uc1wiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+IGNvbnRleHQucGVuZGluZ1JhbmdlRGVjb3JhdGlvbnMubGVuZ3RoID4gMCxcbiAgICBcImhhcyByYW5nZSBkZWNvcmF0aW9uc1wiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+IGNvbnRleHQuc2xhdGVFZGl0b3IuZGVjb3JhdGVkUmFuZ2VzLmxlbmd0aCA+IDAsXG4gICAgXCJoYXMgZGlmZmVyZW50IGRlY29yYXRpb25zXCI6ICh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiB7XG4gICAgICBpZiAoZXZlbnQudHlwZSAhPT0gXCJyYW5nZSBkZWNvcmF0aW9ucyB1cGRhdGVkXCIpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nUmFuZ2VEZWNvcmF0aW9ucyA9IGNvbnRleHQuc2xhdGVFZGl0b3IuZGVjb3JhdGVkUmFuZ2VzLm1hcCgoZGVjb3JhdGVkUmFuZ2UpID0+ICh7XG4gICAgICAgIGFuY2hvcjogZGVjb3JhdGVkUmFuZ2UucmFuZ2VEZWNvcmF0aW9uLnNlbGVjdGlvbj8uYW5jaG9yLFxuICAgICAgICBmb2N1czogZGVjb3JhdGVkUmFuZ2UucmFuZ2VEZWNvcmF0aW9uLnNlbGVjdGlvbj8uZm9jdXMsXG4gICAgICAgIHBheWxvYWQ6IGRlY29yYXRlZFJhbmdlLnJhbmdlRGVjb3JhdGlvbi5wYXlsb2FkXG4gICAgICB9KSksIG5ld1JhbmdlRGVjb3JhdGlvbnMgPSBldmVudC5yYW5nZURlY29yYXRpb25zLm1hcCgocmFuZ2VEZWNvcmF0aW9uKSA9PiAoe1xuICAgICAgICBhbmNob3I6IHJhbmdlRGVjb3JhdGlvbi5zZWxlY3Rpb24/LmFuY2hvcixcbiAgICAgICAgZm9jdXM6IHJhbmdlRGVjb3JhdGlvbi5zZWxlY3Rpb24/LmZvY3VzLFxuICAgICAgICBwYXlsb2FkOiByYW5nZURlY29yYXRpb24ucGF5bG9hZFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuICFpc0VxdWFsKGV4aXN0aW5nUmFuZ2VEZWNvcmF0aW9ucywgbmV3UmFuZ2VEZWNvcmF0aW9ucyk7XG4gICAgfSxcbiAgICBcIm5vdCByZWFkIG9ubHlcIjogKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSA9PiAhY29udGV4dC5yZWFkT25seSxcbiAgICBcInNob3VsZCBza2lwIHNldHVwXCI6ICh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gY29udGV4dC5za2lwU2V0dXBcbiAgfVxufSkuY3JlYXRlTWFjaGluZSh7XG4gIGlkOiBcInJhbmdlIGRlY29yYXRpb25zXCIsXG4gIGNvbnRleHQ6ICh7XG4gICAgaW5wdXRcbiAgfSkgPT4gKHtcbiAgICByZWFkT25seTogaW5wdXQucmVhZE9ubHksXG4gICAgcGVuZGluZ1JhbmdlRGVjb3JhdGlvbnM6IGlucHV0LnJhbmdlRGVjb3JhdGlvbnMsXG4gICAgZGVjb3JhdGVkUmFuZ2VzOiBbXSxcbiAgICBza2lwU2V0dXA6IGlucHV0LnNraXBTZXR1cCxcbiAgICBzY2hlbWE6IGlucHV0LnNjaGVtYSxcbiAgICBzbGF0ZUVkaXRvcjogaW5wdXQuc2xhdGVFZGl0b3IsXG4gICAgZGVjb3JhdGU6IHtcbiAgICAgIGZuOiBjcmVhdGVEZWNvcmF0ZShpbnB1dC5zY2hlbWEsIGlucHV0LnNsYXRlRWRpdG9yKVxuICAgIH1cbiAgfSksXG4gIGludm9rZToge1xuICAgIHNyYzogXCJzbGF0ZSBvcGVyYXRpb24gbGlzdGVuZXJcIixcbiAgICBpbnB1dDogKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSA9PiAoe1xuICAgICAgc2xhdGVFZGl0b3I6IGNvbnRleHQuc2xhdGVFZGl0b3JcbiAgICB9KVxuICB9LFxuICBvbjoge1xuICAgIFwidXBkYXRlIHJlYWQgb25seVwiOiB7XG4gICAgICBhY3Rpb25zOiBbXCJhc3NpZ24gcmVhZE9ubHlcIl1cbiAgICB9XG4gIH0sXG4gIGluaXRpYWw6IFwic2V0dGluZyB1cFwiLFxuICBzdGF0ZXM6IHtcbiAgICBcInNldHRpbmcgdXBcIjoge1xuICAgICAgYWx3YXlzOiBbe1xuICAgICAgICBndWFyZDogYW5kKFtcInNob3VsZCBza2lwIHNldHVwXCIsIFwiaGFzIHBlbmRpbmcgcmFuZ2UgZGVjb3JhdGlvbnNcIl0pLFxuICAgICAgICB0YXJnZXQ6IFwicmVhZHlcIixcbiAgICAgICAgYWN0aW9uczogW1wic2V0IHVwIGluaXRpYWwgcmFuZ2UgZGVjb3JhdGlvbnNcIiwgXCJ1cGRhdGUgZGVjb3JhdGVcIl1cbiAgICAgIH0sIHtcbiAgICAgICAgZ3VhcmQ6IFwic2hvdWxkIHNraXAgc2V0dXBcIixcbiAgICAgICAgdGFyZ2V0OiBcInJlYWR5XCJcbiAgICAgIH1dLFxuICAgICAgb246IHtcbiAgICAgICAgXCJyYW5nZSBkZWNvcmF0aW9ucyB1cGRhdGVkXCI6IHtcbiAgICAgICAgICBhY3Rpb25zOiBbXCJ1cGRhdGUgcGVuZGluZyByYW5nZSBkZWNvcmF0aW9uc1wiXVxuICAgICAgICB9LFxuICAgICAgICByZWFkeTogW3tcbiAgICAgICAgICB0YXJnZXQ6IFwicmVhZHlcIixcbiAgICAgICAgICBndWFyZDogXCJoYXMgcGVuZGluZyByYW5nZSBkZWNvcmF0aW9uc1wiLFxuICAgICAgICAgIGFjdGlvbnM6IFtcInNldCB1cCBpbml0aWFsIHJhbmdlIGRlY29yYXRpb25zXCIsIFwidXBkYXRlIGRlY29yYXRlXCJdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0YXJnZXQ6IFwicmVhZHlcIlxuICAgICAgICB9XVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVhZHk6IHtcbiAgICAgIGluaXRpYWw6IFwiaWRsZVwiLFxuICAgICAgb246IHtcbiAgICAgICAgXCJyYW5nZSBkZWNvcmF0aW9ucyB1cGRhdGVkXCI6IHtcbiAgICAgICAgICB0YXJnZXQ6IFwiLmlkbGVcIixcbiAgICAgICAgICBndWFyZDogXCJoYXMgZGlmZmVyZW50IGRlY29yYXRpb25zXCIsXG4gICAgICAgICAgYWN0aW9uczogW1widXBkYXRlIHJhbmdlIGRlY29yYXRpb25zXCIsIFwidXBkYXRlIGRlY29yYXRlXCJdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgaWRsZToge1xuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBcInNsYXRlIG9wZXJhdGlvblwiOiB7XG4gICAgICAgICAgICAgIHRhcmdldDogXCJtb3ZpbmcgcmFuZ2UgZGVjb3JhdGlvbnNcIixcbiAgICAgICAgICAgICAgZ3VhcmQ6IGFuZChbXCJoYXMgcmFuZ2UgZGVjb3JhdGlvbnNcIiwgXCJub3QgcmVhZCBvbmx5XCJdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtb3ZpbmcgcmFuZ2UgZGVjb3JhdGlvbnNcIjoge1xuICAgICAgICAgIGVudHJ5OiBbXCJtb3ZlIHJhbmdlIGRlY29yYXRpb25zXCJdLFxuICAgICAgICAgIGFsd2F5czoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImlkbGVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5mdW5jdGlvbiBjcmVhdGVEZWNvcmF0ZShzY2hlbWEsIHNsYXRlRWRpdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbihbbm9kZSwgcGF0aF0pIHtcbiAgICBpZiAoaXNFcXVhbFRvRW1wdHlFZGl0b3Ioc2xhdGVFZGl0b3IuY2hpbGRyZW4sIHNjaGVtYSkpXG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogWzAsIDBdLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuICAgICAgICBmb2N1czoge1xuICAgICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICEwXG4gICAgICB9XTtcbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gW107XG4gICAgaWYgKCFFbGVtZW50JDEuaXNFbGVtZW50KG5vZGUpIHx8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IGJsb2NrSW5kZXggPSBwYXRoLmF0KDApO1xuICAgIHJldHVybiBibG9ja0luZGV4ID09PSB2b2lkIDAgPyBbXSA6IHNsYXRlRWRpdG9yLmRlY29yYXRlZFJhbmdlcy5maWx0ZXIoKGRlY29yYXRlZFJhbmdlKSA9PiBSYW5nZS5pc0NvbGxhcHNlZChkZWNvcmF0ZWRSYW5nZSkgPyBub2RlLmNoaWxkcmVuLnNvbWUoKF8sIGNoaWxkSW5kZXgpID0+IFBhdGguZXF1YWxzKGRlY29yYXRlZFJhbmdlLmFuY2hvci5wYXRoLCBbYmxvY2tJbmRleCwgY2hpbGRJbmRleF0pICYmIFBhdGguZXF1YWxzKGRlY29yYXRlZFJhbmdlLmZvY3VzLnBhdGgsIFtibG9ja0luZGV4LCBjaGlsZEluZGV4XSkpIDogUmFuZ2UuaW50ZXJzZWN0aW9uKGRlY29yYXRlZFJhbmdlLCB7XG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9LFxuICAgICAgZm9jdXM6IHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9XG4gICAgfSkgfHwgUmFuZ2UuaW5jbHVkZXMoZGVjb3JhdGVkUmFuZ2UsIHBhdGgpKTtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnID0gZGVidWdXaXRoTmFtZShcImNvbXBvbmVudDpFZGl0YWJsZVwiKSwgUG9ydGFibGVUZXh0RWRpdGFibGUgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uKHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgY29uc3Qge1xuICAgIGhvdGtleXMsXG4gICAgb25CbHVyLFxuICAgIG9uRm9jdXMsXG4gICAgb25CZWZvcmVJbnB1dCxcbiAgICBvblBhc3RlLFxuICAgIG9uQ29weSxcbiAgICBvbkN1dCxcbiAgICBvbkNsaWNrLFxuICAgIG9uRHJhZ1N0YXJ0LFxuICAgIG9uRHJhZyxcbiAgICBvbkRyYWdFbmQsXG4gICAgb25EcmFnRW50ZXIsXG4gICAgb25EcmFnT3ZlcixcbiAgICBvbkRyb3AsXG4gICAgb25EcmFnTGVhdmUsXG4gICAgcmFuZ2VEZWNvcmF0aW9ucyxcbiAgICByZW5kZXJBbm5vdGF0aW9uLFxuICAgIHJlbmRlckJsb2NrLFxuICAgIHJlbmRlckNoaWxkLFxuICAgIHJlbmRlckRlY29yYXRvcixcbiAgICByZW5kZXJMaXN0SXRlbSxcbiAgICByZW5kZXJQbGFjZWhvbGRlcixcbiAgICByZW5kZXJTdHlsZSxcbiAgICBzZWxlY3Rpb246IHByb3BzU2VsZWN0aW9uLFxuICAgIHNjcm9sbFNlbGVjdGlvbkludG9WaWV3LFxuICAgIHNwZWxsQ2hlY2ssXG4gICAgLi4ucmVzdFByb3BzXG4gIH0gPSBwcm9wcywgcG9ydGFibGVUZXh0RWRpdG9yID0gdXNlUG9ydGFibGVUZXh0RWRpdG9yKCksIHJlZiA9IHVzZVJlZihudWxsKSwgW2VkaXRhYmxlRWxlbWVudCwgc2V0RWRpdGFibGVFbGVtZW50XSA9IHVzZVN0YXRlKG51bGwpLCBbaGFzSW52YWxpZFZhbHVlLCBzZXRIYXNJbnZhbGlkVmFsdWVdID0gdXNlU3RhdGUoITEpO1xuICB1c2VJbXBlcmF0aXZlSGFuZGxlKGZvcndhcmRlZFJlZiwgKCkgPT4gcmVmLmN1cnJlbnQpO1xuICBjb25zdCBlZGl0b3JBY3RvciA9IHVzZUNvbnRleHQoRWRpdG9yQWN0b3JDb250ZXh0KSwgcmVsYXlBY3RvciA9IHVzZUNvbnRleHQoUmVsYXlBY3RvckNvbnRleHQpLCByZWFkT25seSA9IHVzZVNlbGVjdG9yKGVkaXRvckFjdG9yLCAocykgPT4gcy5tYXRjaGVzKHtcbiAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gIH0pKSwgc2xhdGVFZGl0b3IgPSB1c2VTbGF0ZSgpLCByYW5nZURlY29yYXRpb25zQWN0b3IgPSB1c2VBY3RvclJlZihyYW5nZURlY29yYXRpb25zTWFjaGluZSwge1xuICAgIGlucHV0OiB7XG4gICAgICByYW5nZURlY29yYXRpb25zOiByYW5nZURlY29yYXRpb25zID8/IFtdLFxuICAgICAgcmVhZE9ubHksXG4gICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICBzbGF0ZUVkaXRvcixcbiAgICAgIHNraXBTZXR1cDogIWVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgICAgIHNldHVwOiBcInNldHRpbmcgdXBcIlxuICAgICAgfSlcbiAgICB9XG4gIH0pLCBkZWNvcmF0ZSA9IHVzZVNlbGVjdG9yKHJhbmdlRGVjb3JhdGlvbnNBY3RvciwgKHNfMCkgPT4gc18wLmNvbnRleHQuZGVjb3JhdGU/LmZuKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByYW5nZURlY29yYXRpb25zQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcInVwZGF0ZSByZWFkIG9ubHlcIixcbiAgICAgIHJlYWRPbmx5XG4gICAgfSk7XG4gIH0sIFtyYW5nZURlY29yYXRpb25zQWN0b3IsIHJlYWRPbmx5XSksIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmFuZ2VEZWNvcmF0aW9uc0FjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJyYW5nZSBkZWNvcmF0aW9ucyB1cGRhdGVkXCIsXG4gICAgICByYW5nZURlY29yYXRpb25zOiByYW5nZURlY29yYXRpb25zID8/IFtdXG4gICAgfSk7XG4gIH0sIFtyYW5nZURlY29yYXRpb25zQWN0b3IsIHJhbmdlRGVjb3JhdGlvbnNdKSwgdXNlTWVtbygoKSA9PiByZWFkT25seSA/IHNsYXRlRWRpdG9yIDogY3JlYXRlV2l0aEhvdGtleXMoZWRpdG9yQWN0b3IsIHBvcnRhYmxlVGV4dEVkaXRvciwgaG90a2V5cykoc2xhdGVFZGl0b3IpLCBbZWRpdG9yQWN0b3IsIGhvdGtleXMsIHBvcnRhYmxlVGV4dEVkaXRvciwgcmVhZE9ubHksIHNsYXRlRWRpdG9yXSk7XG4gIGNvbnN0IHJlbmRlckVsZW1lbnQgPSB1c2VDYWxsYmFjaygoZVByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFJlbmRlckVsZW1lbnQsIHsgLi4uZVByb3BzLCByZWFkT25seSwgcmVuZGVyQmxvY2ssIHJlbmRlckNoaWxkLCByZW5kZXJMaXN0SXRlbSwgcmVuZGVyU3R5bGUsIHNwZWxsQ2hlY2sgfSksIFtzcGVsbENoZWNrLCByZWFkT25seSwgcmVuZGVyQmxvY2ssIHJlbmRlckNoaWxkLCByZW5kZXJMaXN0SXRlbSwgcmVuZGVyU3R5bGVdKSwgcmVuZGVyTGVhZiA9IHVzZUNhbGxiYWNrKChsZWFmUHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goUmVuZGVyTGVhZiwgeyAuLi5sZWFmUHJvcHMsIHJlYWRPbmx5LCByZW5kZXJBbm5vdGF0aW9uLCByZW5kZXJDaGlsZCwgcmVuZGVyRGVjb3JhdG9yLCByZW5kZXJQbGFjZWhvbGRlciB9KSwgW3JlYWRPbmx5LCByZW5kZXJBbm5vdGF0aW9uLCByZW5kZXJDaGlsZCwgcmVuZGVyRGVjb3JhdG9yLCByZW5kZXJQbGFjZWhvbGRlcl0pLCByZW5kZXJUZXh0ID0gdXNlQ2FsbGJhY2soKHByb3BzXzApID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goUmVuZGVyVGV4dCwgeyAuLi5wcm9wc18wIH0pLCBbXSksIHJlc3RvcmVTZWxlY3Rpb25Gcm9tUHJvcHMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHByb3BzU2VsZWN0aW9uKSB7XG4gICAgICBkZWJ1ZyhgU2VsZWN0aW9uIGZyb20gcHJvcHMgJHtKU09OLnN0cmluZ2lmeShwcm9wc1NlbGVjdGlvbil9YCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkU2VsZWN0aW9uID0gbm9ybWFsaXplU2VsZWN0aW9uKHByb3BzU2VsZWN0aW9uLCBmcm9tU2xhdGVWYWx1ZShzbGF0ZUVkaXRvci5jaGlsZHJlbiwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lKSk7XG4gICAgICBpZiAobm9ybWFsaXplZFNlbGVjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICBkZWJ1ZyhgTm9ybWFsaXplZCBzZWxlY3Rpb24gZnJvbSBwcm9wcyAke0pTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZWRTZWxlY3Rpb24pfWApO1xuICAgICAgICBjb25zdCBzbGF0ZVJhbmdlID0gdG9TbGF0ZVJhbmdlKHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICAgICAgICB2YWx1ZTogc2xhdGVFZGl0b3IudmFsdWUsXG4gICAgICAgICAgICBzZWxlY3Rpb246IG5vcm1hbGl6ZWRTZWxlY3Rpb25cbiAgICAgICAgICB9LFxuICAgICAgICAgIGJsb2NrSW5kZXhNYXA6IHNsYXRlRWRpdG9yLmJsb2NrSW5kZXhNYXBcbiAgICAgICAgfSk7XG4gICAgICAgIHNsYXRlUmFuZ2UgJiYgKFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBzbGF0ZVJhbmdlKSwgc2xhdGVFZGl0b3Iub3BlcmF0aW9ucy5zb21lKChvKSA9PiBvLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiKSB8fCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcInVwZGF0ZSBzZWxlY3Rpb25cIixcbiAgICAgICAgICBzZWxlY3Rpb246IG5vcm1hbGl6ZWRTZWxlY3Rpb25cbiAgICAgICAgfSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2VkaXRvckFjdG9yLCBwcm9wc1NlbGVjdGlvbiwgc2xhdGVFZGl0b3JdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBvblJlYWR5ID0gZWRpdG9yQWN0b3Iub24oXCJyZWFkeVwiLCAoKSA9PiB7XG4gICAgICByYW5nZURlY29yYXRpb25zQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwicmVhZHlcIlxuICAgICAgfSksIHJlc3RvcmVTZWxlY3Rpb25Gcm9tUHJvcHMoKTtcbiAgICB9KSwgb25JbnZhbGlkVmFsdWUgPSBlZGl0b3JBY3Rvci5vbihcImludmFsaWQgdmFsdWVcIiwgKCkgPT4ge1xuICAgICAgc2V0SGFzSW52YWxpZFZhbHVlKCEwKTtcbiAgICB9KSwgb25WYWx1ZUNoYW5nZWQgPSBlZGl0b3JBY3Rvci5vbihcInZhbHVlIGNoYW5nZWRcIiwgKCkgPT4ge1xuICAgICAgc2V0SGFzSW52YWxpZFZhbHVlKCExKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgb25SZWFkeS51bnN1YnNjcmliZSgpLCBvbkludmFsaWRWYWx1ZS51bnN1YnNjcmliZSgpLCBvblZhbHVlQ2hhbmdlZC51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtyYW5nZURlY29yYXRpb25zQWN0b3IsIGVkaXRvckFjdG9yLCByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzXSksIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJvcHNTZWxlY3Rpb24gJiYgIWhhc0ludmFsaWRWYWx1ZSAmJiByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzKCk7XG4gIH0sIFtoYXNJbnZhbGlkVmFsdWUsIHByb3BzU2VsZWN0aW9uLCByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzXSk7XG4gIGNvbnN0IGhhbmRsZUNvcHkgPSB1c2VDYWxsYmFjaygoZXZlbnQpID0+IHtcbiAgICBpZiAob25Db3B5KVxuICAgICAgb25Db3B5KGV2ZW50KSAhPT0gdm9pZCAwICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZWxzZSBpZiAoZXZlbnQubmF0aXZlRXZlbnQuY2xpcGJvYXJkRGF0YSkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCksIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSBzbGF0ZUVkaXRvci5zZWxlY3Rpb24gPyBzbGF0ZVJhbmdlVG9TZWxlY3Rpb24oe1xuICAgICAgICBzY2hlbWE6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsXG4gICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICAgIHJhbmdlOiBzbGF0ZUVkaXRvci5zZWxlY3Rpb25cbiAgICAgIH0pIDogdm9pZCAwLCBwb3NpdGlvbiA9IHNlbGVjdGlvbiA/IHtcbiAgICAgICAgc2VsZWN0aW9uXG4gICAgICB9IDogdm9pZCAwO1xuICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJDb3VsZCBub3QgZmluZCBwb3NpdGlvbiBmb3IgY29weSBldmVudFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiY2xpcGJvYXJkLmNvcHlcIixcbiAgICAgICAgICBvcmlnaW5FdmVudDoge1xuICAgICAgICAgICAgZGF0YVRyYW5zZmVyOiBldmVudC5uYXRpdmVFdmVudC5jbGlwYm9hcmREYXRhXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb3NpdGlvblxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLFxuICAgICAgICBuYXRpdmVFdmVudDogZXZlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW29uQ29weSwgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yXSksIGhhbmRsZUN1dCA9IHVzZUNhbGxiYWNrKChldmVudF8wKSA9PiB7XG4gICAgaWYgKG9uQ3V0KVxuICAgICAgb25DdXQoZXZlbnRfMCkgIT09IHZvaWQgMCAmJiBldmVudF8wLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZWxzZSBpZiAoZXZlbnRfMC5uYXRpdmVFdmVudC5jbGlwYm9hcmREYXRhKSB7XG4gICAgICBldmVudF8wLnN0b3BQcm9wYWdhdGlvbigpLCBldmVudF8wLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBzZWxlY3Rpb25fMCA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zZWxlY3Rpb24sIHBvc2l0aW9uXzAgPSBzZWxlY3Rpb25fMCA/IHtcbiAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb25fMFxuICAgICAgfSA6IHZvaWQgMDtcbiAgICAgIGlmICghcG9zaXRpb25fMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJDb3VsZCBub3QgZmluZCBwb3NpdGlvbiBmb3IgY3V0IGV2ZW50XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJjbGlwYm9hcmQuY3V0XCIsXG4gICAgICAgICAgb3JpZ2luRXZlbnQ6IHtcbiAgICAgICAgICAgIGRhdGFUcmFuc2ZlcjogZXZlbnRfMC5uYXRpdmVFdmVudC5jbGlwYm9hcmREYXRhXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb25fMFxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLFxuICAgICAgICBuYXRpdmVFdmVudDogZXZlbnRfMFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbb25DdXQsIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVQYXN0ZSA9IHVzZUNhbGxiYWNrKChldmVudF8xKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBmcm9tU2xhdGVWYWx1ZShzbGF0ZUVkaXRvci5jaGlsZHJlbiwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoc2xhdGVFZGl0b3IpKSwgcGF0aCA9IChzbGF0ZUVkaXRvci5zZWxlY3Rpb24gPyBzbGF0ZVJhbmdlVG9TZWxlY3Rpb24oe1xuICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLFxuICAgICAgZWRpdG9yOiBzbGF0ZUVkaXRvcixcbiAgICAgIHJhbmdlOiBzbGF0ZUVkaXRvci5zZWxlY3Rpb25cbiAgICB9KSA6IG51bGwpPy5mb2N1cy5wYXRoIHx8IFtdLCBvblBhc3RlUmVzdWx0ID0gb25QYXN0ZT8uKHtcbiAgICAgIGV2ZW50OiBldmVudF8xLFxuICAgICAgdmFsdWUsXG4gICAgICBwYXRoLFxuICAgICAgc2NoZW1hVHlwZXM6IHBvcnRhYmxlVGV4dEVkaXRvci5zY2hlbWFUeXBlc1xuICAgIH0pO1xuICAgIGlmIChvblBhc3RlUmVzdWx0IHx8ICFzbGF0ZUVkaXRvci5zZWxlY3Rpb24pXG4gICAgICBldmVudF8xLnByZXZlbnREZWZhdWx0KCksIHJlbGF5QWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwibG9hZGluZ1wiXG4gICAgICB9KSwgUHJvbWlzZS5yZXNvbHZlKG9uUGFzdGVSZXN1bHQpLnRoZW4oKHJlc3VsdF8xKSA9PiB7XG4gICAgICAgIGlmIChkZWJ1ZyhcIkN1c3RvbSBwYXN0ZSBmdW5jdGlvbiBmcm9tIGNsaWVudCByZXNvbHZlZFwiLCByZXN1bHRfMSksICFyZXN1bHRfMSB8fCAhcmVzdWx0XzEuaW5zZXJ0KSB7XG4gICAgICAgICAgZGVidWcoXCJObyByZXN1bHQgZnJvbSBjdXN0b20gcGFzdGUgaGFuZGxlciwgcGFzdGluZyBub3JtYWxseVwiKTtcbiAgICAgICAgICBjb25zdCBzZWxlY3Rpb25fMSA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zZWxlY3Rpb24sIHBvc2l0aW9uXzEgPSBzZWxlY3Rpb25fMSA/IHtcbiAgICAgICAgICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uXzFcbiAgICAgICAgICB9IDogdm9pZCAwO1xuICAgICAgICAgIGlmICghcG9zaXRpb25fMSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ291bGQgbm90IGZpbmQgcG9zaXRpb24gZm9yIHBhc3RlIGV2ZW50XCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJjbGlwYm9hcmQucGFzdGVcIixcbiAgICAgICAgICAgICAgb3JpZ2luRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICBkYXRhVHJhbnNmZXI6IGV2ZW50XzEuY2xpcGJvYXJkRGF0YVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb25fMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICAgICAgICBuYXRpdmVFdmVudDogZXZlbnRfMVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgcmVzdWx0XzEuaW5zZXJ0ID8gZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2Nrc1wiLFxuICAgICAgICAgICAgYmxvY2tzOiBwYXJzZUJsb2Nrcyh7XG4gICAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICBrZXlHZW5lcmF0b3I6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJsb2NrczogcmVzdWx0XzEuaW5zZXJ0LFxuICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgcmVmcmVzaEtleXM6ICExLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlRmllbGRzOiAhMVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBsYWNlbWVudDogXCJhdXRvXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3JcbiAgICAgICAgfSkgOiBjb25zb2xlLndhcm4oXCJZb3VyIG9uUGFzdGUgZnVuY3Rpb24gcmV0dXJuZWQgc29tZXRoaW5nIHVuZXhwZWN0ZWQ6XCIsIHJlc3VsdF8xKTtcbiAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4gKGNvbnNvbGUud2FybihlcnJvciksIGVycm9yKSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHJlbGF5QWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJkb25lIGxvYWRpbmdcIlxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIGVsc2UgaWYgKGV2ZW50XzEubmF0aXZlRXZlbnQuY2xpcGJvYXJkRGF0YSkge1xuICAgICAgZXZlbnRfMS5wcmV2ZW50RGVmYXVsdCgpLCBldmVudF8xLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgY29uc3Qgc2VsZWN0aW9uXzIgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2VsZWN0aW9uLCBwb3NpdGlvbl8yID0gc2VsZWN0aW9uXzIgPyB7XG4gICAgICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uXzJcbiAgICAgIH0gOiB2b2lkIDA7XG4gICAgICBpZiAoIXBvc2l0aW9uXzIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiQ291bGQgbm90IGZpbmQgcG9zaXRpb24gZm9yIHBhc3RlIGV2ZW50XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJjbGlwYm9hcmQucGFzdGVcIixcbiAgICAgICAgICBvcmlnaW5FdmVudDoge1xuICAgICAgICAgICAgZGF0YVRyYW5zZmVyOiBldmVudF8xLm5hdGl2ZUV2ZW50LmNsaXBib2FyZERhdGFcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbl8yXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICAgIG5hdGl2ZUV2ZW50OiBldmVudF8xXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGVidWcoXCJObyByZXN1bHQgZnJvbSBjdXN0b20gcGFzdGUgaGFuZGxlciwgcGFzdGluZyBub3JtYWxseVwiKTtcbiAgfSwgW2VkaXRvckFjdG9yLCBvblBhc3RlLCBwb3J0YWJsZVRleHRFZGl0b3IsIHJlbGF5QWN0b3IsIHNsYXRlRWRpdG9yXSksIGhhbmRsZU9uRm9jdXMgPSB1c2VDYWxsYmFjaygoZXZlbnRfMikgPT4ge1xuICAgIG9uRm9jdXMgJiYgb25Gb2N1cyhldmVudF8yKSwgZXZlbnRfMi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAocmVsYXlBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiZm9jdXNlZFwiLFxuICAgICAgZXZlbnQ6IGV2ZW50XzJcbiAgICB9KSwgIXNsYXRlRWRpdG9yLnNlbGVjdGlvbiAmJiBpc0VxdWFsVG9FbXB0eUVkaXRvcihzbGF0ZUVkaXRvci5jaGlsZHJlbiwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSkgJiYgKFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBFZGl0b3Iuc3RhcnQoc2xhdGVFZGl0b3IsIFtdKSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCkpKTtcbiAgfSwgW2VkaXRvckFjdG9yLCBvbkZvY3VzLCByZWxheUFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChldmVudF8zKSA9PiB7XG4gICAgaWYgKG9uQ2xpY2sgJiYgb25DbGljayhldmVudF8zKSwgZXZlbnRfMy5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBldmVudF8zLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgcG9zaXRpb25fMyA9IGdldEV2ZW50UG9zaXRpb24oe1xuICAgICAgZWRpdG9yQWN0b3IsXG4gICAgICBzbGF0ZUVkaXRvcixcbiAgICAgIGV2ZW50OiBldmVudF8zLm5hdGl2ZUV2ZW50XG4gICAgfSk7XG4gICAgcG9zaXRpb25fMyAmJiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgdHlwZTogXCJtb3VzZS5jbGlja1wiLFxuICAgICAgICBwb3NpdGlvbjogcG9zaXRpb25fM1xuICAgICAgfSxcbiAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICBuYXRpdmVFdmVudDogZXZlbnRfM1xuICAgIH0pO1xuICB9LCBbb25DbGljaywgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yXSksIGhhbmRsZU9uQmx1ciA9IHVzZUNhbGxiYWNrKChldmVudF80KSA9PiB7XG4gICAgb25CbHVyICYmIG9uQmx1cihldmVudF80KSwgZXZlbnRfNC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpIHx8IHJlbGF5QWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJsdXJyZWRcIixcbiAgICAgIGV2ZW50OiBldmVudF80XG4gICAgfSk7XG4gIH0sIFtyZWxheUFjdG9yLCBvbkJsdXJdKSwgaGFuZGxlT25CZWZvcmVJbnB1dCA9IHVzZUNhbGxiYWNrKChldmVudF81KSA9PiB7XG4gICAgb25CZWZvcmVJbnB1dCAmJiBvbkJlZm9yZUlucHV0KGV2ZW50XzUpO1xuICB9LCBbb25CZWZvcmVJbnB1dF0pLCB2YWxpZGF0ZVNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIXNsYXRlRWRpdG9yLnNlbGVjdGlvbilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCByb290ID0gUmVhY3RFZGl0b3IuZmluZERvY3VtZW50T3JTaGFkb3dSb290KHNsYXRlRWRpdG9yKSwge1xuICAgICAgYWN0aXZlRWxlbWVudFxuICAgIH0gPSByb290O1xuICAgIGlmIChyZWYuY3VycmVudCAhPT0gYWN0aXZlRWxlbWVudClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb21TZWxlY3Rpb24gPSBSZWFjdEVkaXRvci5nZXRXaW5kb3coc2xhdGVFZGl0b3IpLmdldFNlbGVjdGlvbigpO1xuICAgIGlmICghZG9tU2VsZWN0aW9uIHx8IGRvbVNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGV4aXN0aW5nRE9NUmFuZ2UgPSBkb21TZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV3RE9NUmFuZ2UgPSBSZWFjdEVkaXRvci50b0RPTVJhbmdlKHNsYXRlRWRpdG9yLCBzbGF0ZUVkaXRvci5zZWxlY3Rpb24pO1xuICAgICAgKG5ld0RPTVJhbmdlLnN0YXJ0T2Zmc2V0ICE9PSBleGlzdGluZ0RPTVJhbmdlLnN0YXJ0T2Zmc2V0IHx8IG5ld0RPTVJhbmdlLmVuZE9mZnNldCAhPT0gZXhpc3RpbmdET01SYW5nZS5lbmRPZmZzZXQpICYmIChkZWJ1ZyhcIkRPTSByYW5nZSBvdXQgb2Ygc3luYywgdmFsaWRhdGluZyBzZWxlY3Rpb25cIiksIGRvbVNlbGVjdGlvbj8ucmVtb3ZlQWxsUmFuZ2VzKCksIGRvbVNlbGVjdGlvbi5hZGRSYW5nZShuZXdET01SYW5nZSkpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgZGVidWcoXCJDb3VsZCBub3QgcmVzb2x2ZSBzZWxlY3Rpb24sIHNlbGVjdGluZyB0b3AgZG9jdW1lbnRcIiksIFRyYW5zZm9ybXMuZGVzZWxlY3Qoc2xhdGVFZGl0b3IpLCBzbGF0ZUVkaXRvci5jaGlsZHJlbi5sZW5ndGggPiAwICYmIFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBbMCwgMF0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpO1xuICAgIH1cbiAgfSwgW3JlZiwgc2xhdGVFZGl0b3JdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZWRpdGFibGVFbGVtZW50KSB7XG4gICAgICBjb25zdCBtdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodmFsaWRhdGVTZWxlY3Rpb24pO1xuICAgICAgcmV0dXJuIG11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShlZGl0YWJsZUVsZW1lbnQsIHtcbiAgICAgICAgYXR0cmlidXRlT2xkVmFsdWU6ICExLFxuICAgICAgICBhdHRyaWJ1dGVzOiAhMSxcbiAgICAgICAgY2hhcmFjdGVyRGF0YTogITEsXG4gICAgICAgIGNoaWxkTGlzdDogITAsXG4gICAgICAgIHN1YnRyZWU6ICEwXG4gICAgICB9KSwgKCkgPT4ge1xuICAgICAgICBtdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH07XG4gICAgfVxuICB9LCBbdmFsaWRhdGVTZWxlY3Rpb24sIGVkaXRhYmxlRWxlbWVudF0pO1xuICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlQ2FsbGJhY2soKGV2ZW50XzYpID0+IHtcbiAgICBwcm9wcy5vbktleURvd24gJiYgcHJvcHMub25LZXlEb3duKGV2ZW50XzYpLCBldmVudF82LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IHNsYXRlRWRpdG9yLnB0ZVdpdGhIb3RLZXlzKGV2ZW50XzYpLCBldmVudF82LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICB0eXBlOiBcImtleWJvYXJkLmtleWRvd25cIixcbiAgICAgICAgb3JpZ2luRXZlbnQ6IHtcbiAgICAgICAgICBrZXk6IGV2ZW50XzYua2V5LFxuICAgICAgICAgIGNvZGU6IGV2ZW50XzYuY29kZSxcbiAgICAgICAgICBhbHRLZXk6IGV2ZW50XzYuYWx0S2V5LFxuICAgICAgICAgIGN0cmxLZXk6IGV2ZW50XzYuY3RybEtleSxcbiAgICAgICAgICBtZXRhS2V5OiBldmVudF82Lm1ldGFLZXksXG4gICAgICAgICAgc2hpZnRLZXk6IGV2ZW50XzYuc2hpZnRLZXlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICBuYXRpdmVFdmVudDogZXZlbnRfNlxuICAgIH0pO1xuICB9LCBbcHJvcHMsIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVLZXlVcCA9IHVzZUNhbGxiYWNrKChldmVudF83KSA9PiB7XG4gICAgcHJvcHMub25LZXlVcCAmJiBwcm9wcy5vbktleVVwKGV2ZW50XzcpLCBldmVudF83LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICB0eXBlOiBcImtleWJvYXJkLmtleXVwXCIsXG4gICAgICAgIG9yaWdpbkV2ZW50OiB7XG4gICAgICAgICAga2V5OiBldmVudF83LmtleSxcbiAgICAgICAgICBjb2RlOiBldmVudF83LmNvZGUsXG4gICAgICAgICAgYWx0S2V5OiBldmVudF83LmFsdEtleSxcbiAgICAgICAgICBjdHJsS2V5OiBldmVudF83LmN0cmxLZXksXG4gICAgICAgICAgbWV0YUtleTogZXZlbnRfNy5tZXRhS2V5LFxuICAgICAgICAgIHNoaWZ0S2V5OiBldmVudF83LnNoaWZ0S2V5XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLFxuICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50XzdcbiAgICB9KTtcbiAgfSwgW3Byb3BzLCBlZGl0b3JBY3Rvciwgc2xhdGVFZGl0b3JdKSwgc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXdUb1NsYXRlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHNjcm9sbFNlbGVjdGlvbkludG9WaWV3ICE9PSB2b2lkIDApXG4gICAgICByZXR1cm4gc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXcgPT09IG51bGwgPyBub29wIDogKF9lZGl0b3IsIGRvbVJhbmdlKSA9PiB7XG4gICAgICAgIHNjcm9sbFNlbGVjdGlvbkludG9WaWV3KHBvcnRhYmxlVGV4dEVkaXRvciwgZG9tUmFuZ2UpO1xuICAgICAgfTtcbiAgfSwgW3BvcnRhYmxlVGV4dEVkaXRvciwgc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXddKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IFJlYWN0RWRpdG9yLnRvRE9NTm9kZShzbGF0ZUVkaXRvciwgc2xhdGVFZGl0b3IpLCBzZXRFZGl0YWJsZUVsZW1lbnQocmVmLmN1cnJlbnQpO1xuICB9LCBbc2xhdGVFZGl0b3IsIHJlZl0pLCB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHdpbmRvd18wID0gUmVhY3RFZGl0b3IuZ2V0V2luZG93KHNsYXRlRWRpdG9yKSwgb25EcmFnRW5kXzAgPSAoKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJkcmFnZW5kXCJcbiAgICAgIH0pO1xuICAgIH0sIG9uRHJvcF8wID0gKCkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiZHJvcFwiXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB3aW5kb3dfMC5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VuZFwiLCBvbkRyYWdFbmRfMCksIHdpbmRvd18wLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIG9uRHJvcF8wKSwgKCkgPT4ge1xuICAgICAgd2luZG93XzAuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRyYWdlbmRcIiwgb25EcmFnRW5kXzApLCB3aW5kb3dfMC5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZHJvcFwiLCBvbkRyb3BfMCk7XG4gICAgfTtcbiAgfSwgW3NsYXRlRWRpdG9yLCBlZGl0b3JBY3Rvcl0pO1xuICBjb25zdCBoYW5kbGVEcmFnU3RhcnQgPSB1c2VDYWxsYmFjaygoZXZlbnRfOCkgPT4ge1xuICAgIGlmIChvbkRyYWdTdGFydD8uKGV2ZW50XzgpLCBldmVudF84LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGV2ZW50XzguaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBwb3NpdGlvbl80ID0gZ2V0RXZlbnRQb3NpdGlvbih7XG4gICAgICBlZGl0b3JBY3RvcixcbiAgICAgIHNsYXRlRWRpdG9yLFxuICAgICAgZXZlbnQ6IGV2ZW50XzgubmF0aXZlRXZlbnRcbiAgICB9KTtcbiAgICBpZiAoIXBvc2l0aW9uXzQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCBmaW5kIHBvc2l0aW9uIGZvciBkcmFnc3RhcnQgZXZlbnRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiZHJhZ3N0YXJ0XCIsXG4gICAgICBvcmlnaW46IHBvc2l0aW9uXzRcbiAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgIHR5cGU6IFwiZHJhZy5kcmFnc3RhcnRcIixcbiAgICAgICAgb3JpZ2luRXZlbnQ6IHtcbiAgICAgICAgICBjbGllbnRYOiBldmVudF84LmNsaWVudFgsXG4gICAgICAgICAgY2xpZW50WTogZXZlbnRfOC5jbGllbnRZLFxuICAgICAgICAgIGRhdGFUcmFuc2ZlcjogZXZlbnRfOC5kYXRhVHJhbnNmZXJcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uXzRcbiAgICAgIH0sXG4gICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yXG4gICAgfSksICEwO1xuICB9LCBbb25EcmFnU3RhcnQsIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVEcmFnID0gdXNlQ2FsbGJhY2soKGV2ZW50XzkpID0+IHtcbiAgICBpZiAob25EcmFnPy4oZXZlbnRfOSksICEoZXZlbnRfOS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBldmVudF85LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgfHwgIWdldEV2ZW50UG9zaXRpb24oe1xuICAgICAgZWRpdG9yQWN0b3IsXG4gICAgICBzbGF0ZUVkaXRvcixcbiAgICAgIGV2ZW50OiBldmVudF85Lm5hdGl2ZUV2ZW50XG4gICAgfSkpKVxuICAgICAgcmV0dXJuIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImRyYWcuZHJhZ1wiLFxuICAgICAgICAgIG9yaWdpbkV2ZW50OiB7XG4gICAgICAgICAgICBkYXRhVHJhbnNmZXI6IGV2ZW50XzkuZGF0YVRyYW5zZmVyXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yXG4gICAgICB9KSwgITA7XG4gIH0sIFtvbkRyYWcsIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVEcmFnRW5kID0gdXNlQ2FsbGJhY2soKGV2ZW50XzEwKSA9PiB7XG4gICAgaWYgKG9uRHJhZ0VuZD8uKGV2ZW50XzEwKSwgIShldmVudF8xMC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBldmVudF8xMC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSlcbiAgICAgIHJldHVybiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJkcmFnLmRyYWdlbmRcIixcbiAgICAgICAgICBvcmlnaW5FdmVudDoge1xuICAgICAgICAgICAgZGF0YVRyYW5zZmVyOiBldmVudF8xMC5kYXRhVHJhbnNmZXJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3JcbiAgICAgIH0pLCAhMDtcbiAgfSwgW29uRHJhZ0VuZCwgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yXSksIGhhbmRsZURyYWdFbnRlciA9IHVzZUNhbGxiYWNrKChldmVudF8xMSkgPT4ge1xuICAgIGlmIChvbkRyYWdFbnRlcj8uKGV2ZW50XzExKSwgZXZlbnRfMTEuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgZXZlbnRfMTEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBwb3NpdGlvbl82ID0gZ2V0RXZlbnRQb3NpdGlvbih7XG4gICAgICBlZGl0b3JBY3RvcixcbiAgICAgIHNsYXRlRWRpdG9yLFxuICAgICAgZXZlbnQ6IGV2ZW50XzExLm5hdGl2ZUV2ZW50XG4gICAgfSk7XG4gICAgaWYgKHBvc2l0aW9uXzYpXG4gICAgICByZXR1cm4gZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZHJhZy5kcmFnZW50ZXJcIixcbiAgICAgICAgICBvcmlnaW5FdmVudDoge1xuICAgICAgICAgICAgZGF0YVRyYW5zZmVyOiBldmVudF8xMS5kYXRhVHJhbnNmZXJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbl82XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3JcbiAgICAgIH0pLCAhMDtcbiAgfSwgW29uRHJhZ0VudGVyLCBlZGl0b3JBY3Rvciwgc2xhdGVFZGl0b3JdKSwgaGFuZGxlRHJhZ092ZXIgPSB1c2VDYWxsYmFjaygoZXZlbnRfMTIpID0+IHtcbiAgICBpZiAob25EcmFnT3Zlcj8uKGV2ZW50XzEyKSwgZXZlbnRfMTIuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgZXZlbnRfMTIuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBwb3NpdGlvbl83ID0gZ2V0RXZlbnRQb3NpdGlvbih7XG4gICAgICBlZGl0b3JBY3RvcixcbiAgICAgIHNsYXRlRWRpdG9yLFxuICAgICAgZXZlbnQ6IGV2ZW50XzEyLm5hdGl2ZUV2ZW50XG4gICAgfSk7XG4gICAgaWYgKHBvc2l0aW9uXzcpXG4gICAgICByZXR1cm4gZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZHJhZy5kcmFnb3ZlclwiLFxuICAgICAgICAgIG9yaWdpbkV2ZW50OiB7XG4gICAgICAgICAgICBkYXRhVHJhbnNmZXI6IGV2ZW50XzEyLmRhdGFUcmFuc2ZlclxuICAgICAgICAgIH0sXG4gICAgICAgICAgZHJhZ09yaWdpbjogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmludGVybmFsRHJhZz8ub3JpZ2luLFxuICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbl83XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICAgIG5hdGl2ZUV2ZW50OiBldmVudF8xMlxuICAgICAgfSksICEwO1xuICB9LCBbb25EcmFnT3ZlciwgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yXSksIGhhbmRsZURyb3AgPSB1c2VDYWxsYmFjaygoZXZlbnRfMTMpID0+IHtcbiAgICBpZiAob25Ecm9wPy4oZXZlbnRfMTMpLCBldmVudF8xMy5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBldmVudF8xMy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHBvc2l0aW9uXzggPSBnZXRFdmVudFBvc2l0aW9uKHtcbiAgICAgIGVkaXRvckFjdG9yLFxuICAgICAgc2xhdGVFZGl0b3IsXG4gICAgICBldmVudDogZXZlbnRfMTMubmF0aXZlRXZlbnRcbiAgICB9KTtcbiAgICBpZiAoIXBvc2l0aW9uXzgpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCBmaW5kIHBvc2l0aW9uIGZvciBkcm9wIGV2ZW50XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgIHR5cGU6IFwiZHJhZy5kcm9wXCIsXG4gICAgICAgIG9yaWdpbkV2ZW50OiB7XG4gICAgICAgICAgZGF0YVRyYW5zZmVyOiBldmVudF8xMy5kYXRhVHJhbnNmZXJcbiAgICAgICAgfSxcbiAgICAgICAgZHJhZ09yaWdpbjogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmludGVybmFsRHJhZz8ub3JpZ2luLFxuICAgICAgICBwb3NpdGlvbjogcG9zaXRpb25fOFxuICAgICAgfSxcbiAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICBuYXRpdmVFdmVudDogZXZlbnRfMTNcbiAgICB9KSwgITA7XG4gIH0sIFtvbkRyb3AsIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVEcmFnTGVhdmUgPSB1c2VDYWxsYmFjaygoZXZlbnRfMTQpID0+IHtcbiAgICBpZiAob25EcmFnTGVhdmU/LihldmVudF8xNCksICEoZXZlbnRfMTQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgZXZlbnRfMTQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSB8fCAhZ2V0RXZlbnRQb3NpdGlvbih7XG4gICAgICBlZGl0b3JBY3RvcixcbiAgICAgIHNsYXRlRWRpdG9yLFxuICAgICAgZXZlbnQ6IGV2ZW50XzE0Lm5hdGl2ZUV2ZW50XG4gICAgfSkpKVxuICAgICAgcmV0dXJuIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImRyYWcuZHJhZ2xlYXZlXCIsXG4gICAgICAgICAgb3JpZ2luRXZlbnQ6IHtcbiAgICAgICAgICAgIGRhdGFUcmFuc2ZlcjogZXZlbnRfMTQuZGF0YVRyYW5zZmVyXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yXG4gICAgICB9KSwgITA7XG4gIH0sIFtvbkRyYWdMZWF2ZSwgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yXSk7XG4gIHJldHVybiBwb3J0YWJsZVRleHRFZGl0b3IgPyBoYXNJbnZhbGlkVmFsdWUgPyBudWxsIDogLyogQF9fUFVSRV9fICovIGpzeChcbiAgICBFZGl0YWJsZSxcbiAgICB7XG4gICAgICAuLi5yZXN0UHJvcHMsXG4gICAgICBcImRhdGEtcmVhZC1vbmx5XCI6IHJlYWRPbmx5LFxuICAgICAgYXV0b0ZvY3VzOiAhMSxcbiAgICAgIGNsYXNzTmFtZTogcmVzdFByb3BzLmNsYXNzTmFtZSB8fCBcInB0LWVkaXRhYmxlXCIsXG4gICAgICBkZWNvcmF0ZSxcbiAgICAgIG9uQmx1cjogaGFuZGxlT25CbHVyLFxuICAgICAgb25Db3B5OiBoYW5kbGVDb3B5LFxuICAgICAgb25DdXQ6IGhhbmRsZUN1dCxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgb25ET01CZWZvcmVJbnB1dDogaGFuZGxlT25CZWZvcmVJbnB1dCxcbiAgICAgIG9uRHJhZ1N0YXJ0OiBoYW5kbGVEcmFnU3RhcnQsXG4gICAgICBvbkRyYWc6IGhhbmRsZURyYWcsXG4gICAgICBvbkRyYWdFbmQ6IGhhbmRsZURyYWdFbmQsXG4gICAgICBvbkRyYWdFbnRlcjogaGFuZGxlRHJhZ0VudGVyLFxuICAgICAgb25EcmFnT3ZlcjogaGFuZGxlRHJhZ092ZXIsXG4gICAgICBvbkRyb3A6IGhhbmRsZURyb3AsXG4gICAgICBvbkRyYWdMZWF2ZTogaGFuZGxlRHJhZ0xlYXZlLFxuICAgICAgb25Gb2N1czogaGFuZGxlT25Gb2N1cyxcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgICAgb25QYXN0ZTogaGFuZGxlUGFzdGUsXG4gICAgICByZWFkT25seSxcbiAgICAgIHJlbmRlclBsYWNlaG9sZGVyOiB2b2lkIDAsXG4gICAgICByZW5kZXJFbGVtZW50LFxuICAgICAgcmVuZGVyTGVhZixcbiAgICAgIHJlbmRlclRleHQsXG4gICAgICBzY3JvbGxTZWxlY3Rpb25JbnRvVmlldzogc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXdUb1NsYXRlXG4gICAgfVxuICApIDogbnVsbDtcbn0pO1xuUG9ydGFibGVUZXh0RWRpdGFibGUuZGlzcGxheU5hbWUgPSBcIkZvcndhcmRSZWYoUG9ydGFibGVUZXh0RWRpdGFibGUpXCI7XG5mdW5jdGlvbiB1c2VDb25zdGFudChmYWN0b3J5KSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgcmV0dXJuIHJlZi5jdXJyZW50IHx8IChyZWYuY3VycmVudCA9IHtcbiAgICBjb25zdGFudDogZmFjdG9yeSgpXG4gIH0pLCByZWYuY3VycmVudC5jb25zdGFudDtcbn1cbmZ1bmN0aW9uIEVkaXRvclByb3ZpZGVyKHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDI4KTtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBwcm9wcy5pbml0aWFsQ29uZmlnID8gKHQwID0gKCkgPT4ge1xuICAgIGNvbnN0IGludGVybmFsRWRpdG9yID0gY3JlYXRlSW50ZXJuYWxFZGl0b3IocHJvcHMuaW5pdGlhbENvbmZpZyksIHBvcnRhYmxlVGV4dEVkaXRvciA9IG5ldyBQb3J0YWJsZVRleHRFZGl0b3Ioe1xuICAgICAgZWRpdG9yOiBpbnRlcm5hbEVkaXRvci5lZGl0b3JcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgaW50ZXJuYWxFZGl0b3IsXG4gICAgICBwb3J0YWJsZVRleHRFZGl0b3JcbiAgICB9O1xuICB9LCAkWzBdID0gcHJvcHMuaW5pdGlhbENvbmZpZywgJFsxXSA9IHQwKSA6IHQwID0gJFsxXTtcbiAgY29uc3Qge1xuICAgIGludGVybmFsRWRpdG9yOiBpbnRlcm5hbEVkaXRvcl8wLFxuICAgIHBvcnRhYmxlVGV4dEVkaXRvcjogcG9ydGFibGVUZXh0RWRpdG9yXzBcbiAgfSA9IHVzZUNvbnN0YW50KHQwKTtcbiAgbGV0IHQxO1xuICAkWzJdICE9PSBpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5lZGl0b3JBY3RvciB8fCAkWzNdICE9PSBpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5tdXRhdGlvbkFjdG9yIHx8ICRbNF0gIT09IGludGVybmFsRWRpdG9yXzAuYWN0b3JzLnJlbGF5QWN0b3IgfHwgJFs1XSAhPT0gaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMuc3luY0FjdG9yIHx8ICRbNl0gIT09IGludGVybmFsRWRpdG9yXzAuc3Vic2NyaXB0aW9ucyB8fCAkWzddICE9PSBwb3J0YWJsZVRleHRFZGl0b3JfMCA/ICh0MSA9ICgpID0+IHtcbiAgICBjb25zdCB1bnN1YnNjcmliZXJzID0gW107XG4gICAgZm9yIChjb25zdCBzdWJzY3JpcHRpb24gb2YgaW50ZXJuYWxFZGl0b3JfMC5zdWJzY3JpcHRpb25zKVxuICAgICAgdW5zdWJzY3JpYmVycy5wdXNoKHN1YnNjcmlwdGlvbigpKTtcbiAgICBjb25zdCByZWxheUFjdG9yU3Vic2NyaXB0aW9uID0gaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMucmVsYXlBY3Rvci5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBjaGFuZ2UgPSBldmVudFRvQ2hhbmdlKGV2ZW50KTtcbiAgICAgIGNoYW5nZSAmJiBwb3J0YWJsZVRleHRFZGl0b3JfMC5jaGFuZ2UkLm5leHQoY2hhbmdlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmVycy5wdXNoKHJlbGF5QWN0b3JTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUpLCBpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5lZGl0b3JBY3Rvci5zdGFydCgpLCBpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5tdXRhdGlvbkFjdG9yLnN0YXJ0KCksIGludGVybmFsRWRpdG9yXzAuYWN0b3JzLnJlbGF5QWN0b3Iuc3RhcnQoKSwgaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMuc3luY0FjdG9yLnN0YXJ0KCksICgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgdW5zdWJzY3JpYmUgb2YgdW5zdWJzY3JpYmVycylcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIHN0b3BBY3RvcihpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5lZGl0b3JBY3RvciksIHN0b3BBY3RvcihpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5tdXRhdGlvbkFjdG9yKSwgc3RvcEFjdG9yKGludGVybmFsRWRpdG9yXzAuYWN0b3JzLnJlbGF5QWN0b3IpLCBzdG9wQWN0b3IoaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMuc3luY0FjdG9yKTtcbiAgICB9O1xuICB9LCAkWzJdID0gaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMuZWRpdG9yQWN0b3IsICRbM10gPSBpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5tdXRhdGlvbkFjdG9yLCAkWzRdID0gaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMucmVsYXlBY3RvciwgJFs1XSA9IGludGVybmFsRWRpdG9yXzAuYWN0b3JzLnN5bmNBY3RvciwgJFs2XSA9IGludGVybmFsRWRpdG9yXzAuc3Vic2NyaXB0aW9ucywgJFs3XSA9IHBvcnRhYmxlVGV4dEVkaXRvcl8wLCAkWzhdID0gdDEpIDogdDEgPSAkWzhdO1xuICBsZXQgdDI7XG4gICRbOV0gIT09IGludGVybmFsRWRpdG9yXzAgfHwgJFsxMF0gIT09IHBvcnRhYmxlVGV4dEVkaXRvcl8wID8gKHQyID0gW2ludGVybmFsRWRpdG9yXzAsIHBvcnRhYmxlVGV4dEVkaXRvcl8wXSwgJFs5XSA9IGludGVybmFsRWRpdG9yXzAsICRbMTBdID0gcG9ydGFibGVUZXh0RWRpdG9yXzAsICRbMTFdID0gdDIpIDogdDIgPSAkWzExXSwgdXNlRWZmZWN0KHQxLCB0Mik7XG4gIGxldCB0MztcbiAgJFsxMl0gIT09IHBvcnRhYmxlVGV4dEVkaXRvcl8wIHx8ICRbMTNdICE9PSBwcm9wcy5jaGlsZHJlbiA/ICh0MyA9IC8qIEBfX1BVUkVfXyAqLyBqc3goUG9ydGFibGVUZXh0RWRpdG9yQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogcG9ydGFibGVUZXh0RWRpdG9yXzAsIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbiB9KSwgJFsxMl0gPSBwb3J0YWJsZVRleHRFZGl0b3JfMCwgJFsxM10gPSBwcm9wcy5jaGlsZHJlbiwgJFsxNF0gPSB0MykgOiB0MyA9ICRbMTRdO1xuICBsZXQgdDQ7XG4gICRbMTVdICE9PSBpbnRlcm5hbEVkaXRvcl8wLmVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlIHx8ICRbMTZdICE9PSBpbnRlcm5hbEVkaXRvcl8wLmVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3IuaW5zdGFuY2UgfHwgJFsxN10gIT09IHQzID8gKHQ0ID0gLyogQF9fUFVSRV9fICovIGpzeChTbGF0ZSwgeyBlZGl0b3I6IGludGVybmFsRWRpdG9yXzAuZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbnN0YW5jZSwgaW5pdGlhbFZhbHVlOiBpbnRlcm5hbEVkaXRvcl8wLmVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlLCBjaGlsZHJlbjogdDMgfSksICRbMTVdID0gaW50ZXJuYWxFZGl0b3JfMC5lZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluaXRpYWxWYWx1ZSwgJFsxNl0gPSBpbnRlcm5hbEVkaXRvcl8wLmVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3IuaW5zdGFuY2UsICRbMTddID0gdDMsICRbMThdID0gdDQpIDogdDQgPSAkWzE4XTtcbiAgbGV0IHQ1O1xuICAkWzE5XSAhPT0gaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMucmVsYXlBY3RvciB8fCAkWzIwXSAhPT0gdDQgPyAodDUgPSAvKiBAX19QVVJFX18gKi8ganN4KFJlbGF5QWN0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5yZWxheUFjdG9yLCBjaGlsZHJlbjogdDQgfSksICRbMTldID0gaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMucmVsYXlBY3RvciwgJFsyMF0gPSB0NCwgJFsyMV0gPSB0NSkgOiB0NSA9ICRbMjFdO1xuICBsZXQgdDY7XG4gICRbMjJdICE9PSBpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5lZGl0b3JBY3RvciB8fCAkWzIzXSAhPT0gdDUgPyAodDYgPSAvKiBAX19QVVJFX18gKi8ganN4KEVkaXRvckFjdG9yQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogaW50ZXJuYWxFZGl0b3JfMC5hY3RvcnMuZWRpdG9yQWN0b3IsIGNoaWxkcmVuOiB0NSB9KSwgJFsyMl0gPSBpbnRlcm5hbEVkaXRvcl8wLmFjdG9ycy5lZGl0b3JBY3RvciwgJFsyM10gPSB0NSwgJFsyNF0gPSB0NikgOiB0NiA9ICRbMjRdO1xuICBsZXQgdDc7XG4gIHJldHVybiAkWzI1XSAhPT0gaW50ZXJuYWxFZGl0b3JfMC5lZGl0b3IgfHwgJFsyNl0gIT09IHQ2ID8gKHQ3ID0gLyogQF9fUFVSRV9fICovIGpzeChFZGl0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBpbnRlcm5hbEVkaXRvcl8wLmVkaXRvciwgY2hpbGRyZW46IHQ2IH0pLCAkWzI1XSA9IGludGVybmFsRWRpdG9yXzAuZWRpdG9yLCAkWzI2XSA9IHQ2LCAkWzI3XSA9IHQ3KSA6IHQ3ID0gJFsyN10sIHQ3O1xufVxuY29uc3QgdXNlUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uID0gKCkgPT4ge1xuICBjb25zdCAkID0gYygzKSwgZWRpdG9yQWN0b3IgPSB1c2VDb250ZXh0KEVkaXRvckFjdG9yQ29udGV4dCksIFtzZWxlY3Rpb24sIHNldFNlbGVjdGlvbjJdID0gdXNlU3RhdGUobnVsbCk7XG4gIGxldCB0MCwgdDE7XG4gIHJldHVybiAkWzBdICE9PSBlZGl0b3JBY3RvciA/ICh0MCA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBlZGl0b3JBY3Rvci5vbihcInNlbGVjdGlvblwiLCAoZXZlbnQpID0+IHtcbiAgICAgIHN0YXJ0VHJhbnNpdGlvbigoKSA9PiB7XG4gICAgICAgIHNldFNlbGVjdGlvbjIoZXZlbnQuc2VsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCB0MSA9IFtlZGl0b3JBY3Rvcl0sICRbMF0gPSBlZGl0b3JBY3RvciwgJFsxXSA9IHQwLCAkWzJdID0gdDEpIDogKHQwID0gJFsxXSwgdDEgPSAkWzJdKSwgdXNlRWZmZWN0KHQwLCB0MSksIHNlbGVjdGlvbjtcbn07XG5leHBvcnQge1xuICBFZGl0b3JFdmVudExpc3RlbmVyLFxuICBFZGl0b3JQcm92aWRlcixcbiAgUG9ydGFibGVUZXh0RWRpdGFibGUsXG4gIFBvcnRhYmxlVGV4dEVkaXRvcixcbiAgZGVmaW5lU2NoZW1hLFxuICBkZWZhdWx0S2V5R2VuZXJhdG9yIGFzIGtleUdlbmVyYXRvcixcbiAgdXNlRWRpdG9yLFxuICB1c2VFZGl0b3JTZWxlY3RvcixcbiAgdXNlUG9ydGFibGVUZXh0RWRpdG9yLFxuICB1c2VQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/plugins/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/plugins/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BehaviorPlugin: () => (/* binding */ BehaviorPlugin),\n/* harmony export */   DecoratorShortcutPlugin: () => (/* binding */ DecoratorShortcutPlugin),\n/* harmony export */   EditorRefPlugin: () => (/* binding */ EditorRefPlugin),\n/* harmony export */   EventListenerPlugin: () => (/* binding */ EventListenerPlugin),\n/* harmony export */   MarkdownPlugin: () => (/* binding */ MarkdownPlugin),\n/* harmony export */   OneLinePlugin: () => (/* binding */ OneLinePlugin)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_chunks-es/use-editor.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/assign-55675fdf.development.esm.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_chunks-es/selector.is-selection-expanded.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\");\n/* harmony import */ var _chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../_chunks-es/util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../_chunks-es/util.child-selection-point-to-block-offset.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n/* harmony import */ var _chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../_chunks-es/selector.get-text-before.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\");\n/* harmony import */ var _behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../behaviors/index.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/behaviors/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../_chunks-es/util.merge-text-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction BehaviorPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  return $[0] !== editor || $[1] !== props.behaviors ? (t0 = () => {\n    const unregisterBehaviors = props.behaviors.map((behavior) => editor.registerBehavior({\n      behavior\n    }));\n    return () => {\n      unregisterBehaviors.forEach(_temp);\n    };\n  }, t1 = [editor, props.behaviors], $[0] = editor, $[1] = props.behaviors, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction _temp(unregister) {\n  return unregister();\n}\nfunction createPairRegex(char, amount) {\n  const prePrefix = `(?<!\\\\${char})`, prefix = `\\\\${char}`.repeat(Math.max(amount, 1)), postPrefix = \"(?!\\\\s)\", content = `([^${char}\\\\n]+?)`, preSuffix = \"(?<!\\\\s)\", suffix = `\\\\${char}`.repeat(Math.max(amount, 1)), postSuffix = `(?!\\\\${char})`;\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`;\n}\nfunction createDecoratorPairBehavior(config) {\n  config.pair.amount < 1 && console.warn(\"The amount of characters in the pair should be greater than 0\");\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount), regEx = new RegExp(`(${pairRegex})$`);\n  return (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (config.pair.amount < 1)\n        return !1;\n      const decorator = config.decorator({\n        schema: snapshot.context.schema\n      });\n      if (decorator === void 0)\n        return !1;\n      const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), selectionStartPoint = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getSelectionStartPoint)(snapshot), selectionStartOffset = selectionStartPoint ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: {\n          schema: snapshot.context.schema,\n          value: snapshot.context.value\n        },\n        selectionPoint: selectionStartPoint\n      }) : void 0;\n      if (!focusTextBlock || !selectionStartOffset)\n        return !1;\n      const newText = `${(0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__.getBlockTextBefore)(snapshot)}${event.text}`, textToDecorate = newText.match(regEx)?.at(0);\n      if (textToDecorate === void 0)\n        return !1;\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset: newText.length - textToDecorate.length + config.pair.char.length * config.pair.amount\n        }\n      }, suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset: selectionStartOffset.offset + event.text.length - config.pair.char.length * config.pair.amount\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length\n        }\n      };\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.blockOffsetsToSelection)({\n          context: snapshot.context,\n          offsets: prefixOffsets\n        }), inlineObjectBeforePrefixFocus = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: prefixSelection ? {\n              anchor: prefixSelection.focus,\n              focus: prefixSelection.focus\n            } : null\n          }\n        }), inlineObjectBeforePrefixFocusOffset = inlineObjectBeforePrefixFocus ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.childSelectionPointToBlockOffset)({\n          context: {\n            schema: snapshot.context.schema,\n            value: snapshot.context.value\n          },\n          selectionPoint: {\n            path: inlineObjectBeforePrefixFocus.path,\n            offset: 0\n          }\n        }) : void 0;\n        if (inlineObjectBeforePrefixFocusOffset && inlineObjectBeforePrefixFocusOffset.offset > prefixOffsets.anchor.offset && inlineObjectBeforePrefixFocusOffset.offset < prefixOffsets.focus.offset)\n          return !1;\n      }\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), previousInlineObjectOffset = previousInlineObject ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.childSelectionPointToBlockOffset)({\n          context: {\n            schema: snapshot.context.schema,\n            value: snapshot.context.value\n          },\n          selectionPoint: {\n            path: previousInlineObject.path,\n            offset: 0\n          }\n        }) : void 0;\n        if (previousInlineObjectOffset && previousInlineObjectOffset.offset > suffixOffsets.anchor.offset && previousInlineObjectOffset.offset < suffixOffsets.focus.offset)\n          return !1;\n      }\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator\n      };\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({\n        event\n      }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)],\n      (_, {\n        prefixOffsets,\n        suffixOffsets,\n        decorator\n      }) => [\n        // Decorate the text between the prefix and suffix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"decorator.add\",\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor\n          }\n        }),\n        // Delete the suffix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"delete.text\",\n          at: suffixOffsets\n        }),\n        // Delete the prefix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"delete.text\",\n          at: prefixOffsets\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"decorator.remove\",\n          decorator\n        }),\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.effect)(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset: suffixOffsets.anchor.offset - (prefixOffsets.focus.offset - prefixOffsets.anchor.offset)\n          });\n        })\n      ]\n    ]\n  });\n}\nfunction DecoratorShortcutPlugin(config) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0;\n  return $[0] !== config.decorator || $[1] !== config.pair || $[2] !== editor ? (t0 = {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair\n    }\n  }, $[0] = config.decorator, $[1] = config.pair, $[2] = editor, $[3] = t0) : t0 = $[3], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_10__.useActorRef)(decoratorPairMachine, t0), null;\n}\nconst emphasisListener = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: createDecoratorPairBehavior({\n    decorator: input.decorator,\n    pair: input.pair,\n    onDecorate: (offset) => {\n      sendBack({\n        type: \"emphasis.add\",\n        blockOffset: offset\n      });\n    }\n  })\n}), selectionListenerCallback = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"select\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (!event.at)\n        return {\n          blockOffsets: void 0\n        };\n      const anchor = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: event.at.anchor\n      }), focus = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: event.at.focus\n      });\n      return !anchor || !focus ? {\n        blockOffsets: void 0\n      } : {\n        blockOffsets: {\n          anchor,\n          focus\n        }\n      };\n    },\n    actions: [({\n      event\n    }, {\n      blockOffsets\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        sendBack({\n          type: \"selection\",\n          blockOffsets\n        });\n      }\n    }, (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.forward)(event)]]\n  })\n}), deleteBackwardListenerCallback = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"delete.backward\",\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"history.undo\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.effect)(() => {\n      sendBack({\n        type: \"delete.backward\"\n      });\n    })]]\n  })\n}), decoratorPairMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_11__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  actors: {\n    \"emphasis listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(emphasisListener),\n    \"delete.backward listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(deleteBackwardListenerCallback),\n    \"selection listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(selectionListenerCallback)\n  }\n}).createMachine({\n  id: \"decorator pair\",\n  context: ({\n    input\n  }) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      invoke: [{\n        src: \"emphasis listener\",\n        input: ({\n          context\n        }) => ({\n          decorator: context.decorator,\n          editor: context.editor,\n          pair: context.pair\n        })\n      }],\n      on: {\n        \"emphasis.add\": {\n          target: \"emphasis added\",\n          actions: (0,xstate__WEBPACK_IMPORTED_MODULE_13__.a)({\n            offsetAfterEmphasis: ({\n              event\n            }) => event.blockOffset\n          })\n        }\n      }\n    },\n    \"emphasis added\": {\n      exit: [(0,xstate__WEBPACK_IMPORTED_MODULE_13__.a)({\n        offsetAfterEmphasis: void 0\n      })],\n      invoke: [{\n        src: \"selection listener\",\n        input: ({\n          context\n        }) => ({\n          editor: context.editor\n        })\n      }, {\n        src: \"delete.backward listener\",\n        input: ({\n          context\n        }) => ({\n          editor: context.editor\n        })\n      }],\n      on: {\n        selection: {\n          target: \"idle\",\n          guard: ({\n            context,\n            event\n          }) => !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n            anchor: context.offsetAfterEmphasis,\n            focus: context.offsetAfterEmphasis\n          }, event.blockOffsets)\n        },\n        \"delete.backward\": {\n          target: \"idle\"\n        }\n      }\n    }\n  }\n}), EditorRefPlugin = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((_, ref) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(2), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)(), portableTextEditorRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(editor);\n  let t0, t1;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = () => portableTextEditorRef.current, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, t0, t1), null;\n});\nEditorRefPlugin.displayName = \"EditorRefPlugin\";\nfunction EventListenerPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  return $[0] !== editor || $[1] !== props.on ? (t0 = () => {\n    const subscription = editor.on(\"*\", props.on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editor, props.on], $[0] = editor, $[1] = props.on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction createMarkdownBehaviors(config) {\n  const automaticBlockquoteOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockOffset = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (previousInlineObject || !blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(snapshot.context);\n      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {\n        focusTextBlock,\n        style: blockquoteStyle\n      } : !1;\n    },\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: \" \"\n    })], (_, {\n      focusTextBlock,\n      style\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: 2\n        }\n      }\n    })]]\n  }), automaticHr = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const hrCharacter = event.text === \"-\" ? \"-\" : event.text === \"*\" ? \"*\" : event.text === \"_\" ? \"_\" : void 0;\n      if (hrCharacter === void 0)\n        return !1;\n      const hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot);\n      if (!hrObject || !focusBlock || !selectionCollapsed)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__.getBlockTextBefore)(snapshot), hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3\n        }\n      };\n      return !previousInlineObject && textBefore === `${hrCharacter}${hrCharacter}` ? {\n        hrObject,\n        focusBlock,\n        hrCharacter,\n        hrBlockOffsets\n      } : !1;\n    },\n    actions: [(_, {\n      hrCharacter\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: hrCharacter\n    })], (_, {\n      hrObject,\n      hrBlockOffsets\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      placement: \"before\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      }\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: hrBlockOffsets\n    })]]\n  }), automaticHrOnPaste = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"clipboard.paste\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const text = event.originEvent.dataTransfer.getData(\"text/plain\"), hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusBlock)(snapshot);\n      return !hrCharacters || !hrObject || !focusBlock ? !1 : {\n        hrCharacters,\n        hrObject,\n        focusBlock\n      };\n    },\n    actions: [(_, {\n      hrCharacters\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: hrCharacters\n    })], ({\n      snapshot\n    }, {\n      hrObject,\n      focusBlock\n    }) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.isTextBlock)(snapshot.context, focusBlock.node) ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: snapshot.context.schema.block.name,\n        children: focusBlock.node.children\n      },\n      placement: \"after\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      },\n      placement: \"after\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.block\",\n      at: focusBlock.path\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      },\n      placement: \"after\"\n    })]]\n  }), automaticHeadingOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0, caretAtTheEndOfHeading = blockOffset.offset === level;\n      if (previousInlineObject || !caretAtTheEndOfHeading)\n        return !1;\n      const style = level !== void 0 ? config.headingStyle?.({\n        schema: snapshot.context.schema,\n        level\n      }) : void 0;\n      return level !== void 0 && style !== void 0 ? {\n        focusTextBlock,\n        style,\n        level\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)], (_, {\n      focusTextBlock,\n      style,\n      level\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: level + 1\n        }\n      }\n    })]]\n  }), clearStyleOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      snapshot\n    }) => {\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(snapshot.context);\n      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {\n        defaultStyle,\n        focusTextBlock\n      } : !1;\n    },\n    actions: [(_, {\n      defaultStyle,\n      focusTextBlock\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style: defaultStyle\n      },\n      at: focusTextBlock.path\n    })]]\n  }), automaticListOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockOffset = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (previousInlineObject || !blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), defaultStyle = config.defaultStyle?.(snapshot.context), looksLikeUnorderedList = /^(-|\\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(snapshot.context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;\n      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle\n        };\n      const looksLikeOrderedList = /^1\\./.test(blockText), orderedListStyle = config.orderedListStyle?.(snapshot.context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;\n      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {\n        focusTextBlock,\n        listItem: orderedListStyle,\n        listItemLength: 2,\n        style: defaultStyle\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)], (_, {\n      focusTextBlock,\n      style,\n      listItem,\n      listItemLength\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        listItem,\n        level: 1,\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: listItemLength + 1\n        }\n      }\n    })]]\n  });\n  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];\n}\nfunction MarkdownPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(17), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  $[0] !== editor || $[1] !== props.config ? (t0 = () => {\n    const unregisterBehaviors = createMarkdownBehaviors(props.config).map((behavior) => editor.registerBehavior({\n      behavior\n    }));\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors)\n        unregisterBehavior();\n    };\n  }, t1 = [editor, props.config], $[0] = editor, $[1] = props.config, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1);\n  let t2;\n  $[4] !== props.config.boldDecorator ? (t2 = props.config.boldDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.boldDecorator, pair: {\n      char: \"*\",\n      amount: 2\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.boldDecorator, pair: {\n      char: \"_\",\n      amount: 2\n    } })\n  ] }) : null, $[4] = props.config.boldDecorator, $[5] = t2) : t2 = $[5];\n  let t3;\n  $[6] !== props.config.codeDecorator ? (t3 = props.config.codeDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.codeDecorator, pair: {\n    char: \"`\",\n    amount: 1\n  } }) : null, $[6] = props.config.codeDecorator, $[7] = t3) : t3 = $[7];\n  let t4;\n  $[8] !== props.config.italicDecorator ? (t4 = props.config.italicDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.italicDecorator, pair: {\n      char: \"*\",\n      amount: 1\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.italicDecorator, pair: {\n      char: \"_\",\n      amount: 1\n    } })\n  ] }) : null, $[8] = props.config.italicDecorator, $[9] = t4) : t4 = $[9];\n  let t5;\n  $[10] !== props.config.strikeThroughDecorator ? (t5 = props.config.strikeThroughDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.strikeThroughDecorator, pair: {\n    char: \"~\",\n    amount: 2\n  } }) : null, $[10] = props.config.strikeThroughDecorator, $[11] = t5) : t5 = $[11];\n  let t6;\n  return $[12] !== t2 || $[13] !== t3 || $[14] !== t4 || $[15] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    t2,\n    t3,\n    t4,\n    t5\n  ] }), $[12] = t2, $[13] = t3, $[14] = t4, $[15] = t5, $[16] = t6) : t6 = $[16], t6;\n}\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.break\",\n    guard: ({\n      snapshot\n    }) => snapshot.context.selection && (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionExpanded)(snapshot) ? {\n      selection: snapshot.context.selection\n    } : !1,\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.break\",\n    actions: []\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    guard: ({\n      event\n    }) => event.placement === \"before\" || event.placement === \"after\",\n    actions: []\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    guard: ({\n      snapshot,\n      event\n    }) => !(!(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot) || !(0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_14__.isTextBlock)(snapshot.context, event.block)),\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: event.block,\n      placement: \"auto\",\n      select: \"end\"\n    })]]\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    actions: []\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.blocks\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const textBlocks = event.blocks.filter((block) => (0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_14__.isTextBlock)(snapshot.context, block));\n      return textBlocks.length === 0 ? !1 : textBlocks.reduce((targetBlock, incomingBlock) => (0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_14__.mergeTextBlocks)({\n        context: snapshot.context,\n        targetBlock,\n        incomingBlock\n      }));\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.raise)({\n        type: \"insert.block\",\n        block,\n        placement: \"auto\"\n      })]\n    ]\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.blocks` in case the Behavior above\n   * ends up with a falsy guard.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.blocks\",\n    actions: []\n  })\n];\nfunction OneLinePlugin() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(BehaviorPlugin, { behaviors: oneLineBehaviors }), $[0] = t0) : t0 = $[0], t0;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/plugins/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/keyboard-shortcuts/dist/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@portabletext/keyboard-shortcuts/dist/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockquote: () => (/* binding */ blockquote),\n/* harmony export */   bold: () => (/* binding */ bold),\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   createKeyboardShortcut: () => (/* binding */ createKeyboardShortcut),\n/* harmony export */   h1: () => (/* binding */ h1),\n/* harmony export */   h2: () => (/* binding */ h2),\n/* harmony export */   h3: () => (/* binding */ h3),\n/* harmony export */   h4: () => (/* binding */ h4),\n/* harmony export */   h5: () => (/* binding */ h5),\n/* harmony export */   h6: () => (/* binding */ h6),\n/* harmony export */   italic: () => (/* binding */ italic),\n/* harmony export */   link: () => (/* binding */ link),\n/* harmony export */   normal: () => (/* binding */ normal),\n/* harmony export */   redo: () => (/* binding */ redo),\n/* harmony export */   strikeThrough: () => (/* binding */ strikeThrough),\n/* harmony export */   underline: () => (/* binding */ underline),\n/* harmony export */   undo: () => (/* binding */ undo)\n/* harmony export */ });\nconst IS_APPLE = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent);\nfunction isKeyboardShortcut(definition, event) {\n  return isCorrectModifiers(definition, event) ? definition.code !== void 0 && definition.code.toLowerCase() === event.code.toLowerCase() ? !0 : definition.key !== void 0 && definition.key.toLowerCase() === event.key.toLowerCase() : !1;\n}\nfunction isCorrectModifiers(definition, event) {\n  return (definition.ctrl === event.ctrlKey || definition.ctrl === void 0) && (definition.meta === event.metaKey || definition.meta === void 0) && (definition.shift === event.shiftKey || definition.shift === void 0) && (definition.alt === event.altKey || definition.alt === void 0);\n}\nfunction createKeyboardShortcut(definition) {\n  if (IS_APPLE) {\n    const appleDefinition = definition.apple ?? definition.default, firstDefinition2 = appleDefinition.at(0);\n    return {\n      guard: (event) => appleDefinition.some((definition2) => isKeyboardShortcut(definition2, event)),\n      keys: [...firstDefinition2?.meta ? [\"\\u2318\"] : [], ...firstDefinition2?.ctrl ? [\"Ctrl\"] : [], ...firstDefinition2?.alt ? [\"Option\"] : [], ...firstDefinition2?.shift ? [\"Shift\"] : [], ...firstDefinition2?.key !== void 0 ? [firstDefinition2.key] : firstDefinition2?.code !== void 0 ? [firstDefinition2.code] : []]\n    };\n  }\n  const firstDefinition = definition.default.at(0);\n  return {\n    guard: (event) => definition.default.some((definition2) => isKeyboardShortcut(definition2, event)),\n    keys: [...firstDefinition?.meta ? [\"Meta\"] : [], ...firstDefinition?.ctrl ? [\"Ctrl\"] : [], ...firstDefinition?.alt ? [\"Alt\"] : [], ...firstDefinition?.shift ? [\"Shift\"] : [], ...firstDefinition?.key !== void 0 ? [firstDefinition.key] : firstDefinition?.code !== void 0 ? [firstDefinition.code] : []]\n  };\n}\nconst bold = createKeyboardShortcut({\n  default: [{\n    key: \"B\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"B\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), italic = createKeyboardShortcut({\n  default: [{\n    key: \"I\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"I\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), code = createKeyboardShortcut({\n  default: [{\n    key: \"'\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"'\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), underline = createKeyboardShortcut({\n  default: [{\n    key: \"U\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"U\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), strikeThrough = createKeyboardShortcut({\n  default: [{\n    key: \"X\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !0\n  }],\n  apple: [{\n    key: \"X\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !0\n  }]\n}), link = createKeyboardShortcut({\n  default: [{\n    key: \"K\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"K\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), normal = createKeyboardShortcut({\n  default: [{\n    key: \"0\",\n    code: \"Digit0\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"0\",\n    code: \"Numpad0\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"0\",\n    code: \"Digit0\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"0\",\n    code: \"Numpad0\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h1 = createKeyboardShortcut({\n  default: [{\n    key: \"1\",\n    code: \"Digit1\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"1\",\n    code: \"Numpad1\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"1\",\n    code: \"Digit1\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"1\",\n    code: \"Numpad1\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h2 = createKeyboardShortcut({\n  default: [{\n    key: \"2\",\n    code: \"Digit2\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"2\",\n    code: \"Numpad2\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"2\",\n    code: \"Digit2\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"2\",\n    code: \"Numpad2\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h3 = createKeyboardShortcut({\n  default: [{\n    key: \"3\",\n    code: \"Digit3\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"3\",\n    code: \"Numpad3\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"3\",\n    code: \"Digit3\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"3\",\n    code: \"Numpad3\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h4 = createKeyboardShortcut({\n  default: [{\n    key: \"4\",\n    code: \"Digit4\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"4\",\n    code: \"Numpad4\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"4\",\n    code: \"Digit4\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"4\",\n    code: \"Numpad4\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h5 = createKeyboardShortcut({\n  default: [{\n    key: \"5\",\n    code: \"Digit5\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"5\",\n    code: \"Numpad5\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"5\",\n    code: \"Digit5\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"5\",\n    code: \"Numpad5\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h6 = createKeyboardShortcut({\n  default: [{\n    key: \"6\",\n    code: \"Digit6\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"6\",\n    code: \"Numpad6\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"6\",\n    code: \"Digit6\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"6\",\n    code: \"Numpad6\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), blockquote = createKeyboardShortcut({\n  default: [{\n    key: \"Q\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !0\n  }]\n}), undo = createKeyboardShortcut({\n  default: [{\n    key: \"Z\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"Z\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), redo = createKeyboardShortcut({\n  default: [{\n    key: \"Y\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"Z\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !0\n  }],\n  apple: [{\n    key: \"Z\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !0\n  }]\n});\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/keyboard-shortcuts/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/patches/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/patches/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAll: () => (/* binding */ applyAll),\n/* harmony export */   diffMatchPatch: () => (/* binding */ diffMatchPatch),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   prefixPath: () => (/* binding */ prefixPath),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIfMissing: () => (/* binding */ setIfMissing),\n/* harmony export */   unset: () => (/* binding */ unset)\n/* harmony export */ });\n/* harmony import */ var lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/findIndex.js */ \"(ssr)/./node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/clone.js */ \"(ssr)/./node_modules/lodash/clone.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\n\n\n\nconst BEFORE = \"before\", AFTER = \"after\";\nfunction insert$1(array, position, index, ...args) {\n  if (position !== BEFORE && position !== AFTER)\n    throw new Error(\n      `Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`\n    );\n  const items = flatten(...args);\n  if (array.length === 0)\n    return items;\n  const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === \"after\" ? idx + 1 : idx, copy = array.slice();\n  return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;\n}\nfunction flatten(...values) {\n  return values.reduce((prev, item) => prev.concat(item), []);\n}\nfunction findTargetIndex(array, pathSegment) {\n  if (typeof pathSegment == \"number\")\n    return pathSegment;\n  const index = lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_0__(array, pathSegment);\n  return index === -1 ? !1 : index;\n}\nfunction applyPatchToArray(value, patch) {\n  const nextValue = value.slice();\n  if (patch.path.length === 0) {\n    if (patch.type === \"setIfMissing\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return value === void 0 ? patch.value : value;\n    }\n    if (patch.type === \"set\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return patch.value;\n    }\n    if (patch.type === \"unset\")\n      return;\n    throw new Error(`Invalid array operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path, index = findTargetIndex(value, head);\n  if (index === !1)\n    return nextValue;\n  if (tail.length === 0) {\n    if (patch.type === \"insert\") {\n      const { position, items } = patch;\n      return insert$1(value, position, index, items);\n    } else if (patch.type === \"unset\") {\n      if (typeof index != \"number\")\n        throw new Error(\n          `Expected array index to be a number, instead got \"${index}\"`\n        );\n      return nextValue.splice(index, 1), nextValue;\n    }\n  }\n  return nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail\n  }), nextValue;\n}\nfunction applyPatchToNumber(value, patch) {\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  if (patch.type === \"set\")\n    return patch.value;\n  if (patch.type === \"setIfMissing\")\n    return value === void 0 ? patch.value : value;\n  if (patch.type !== \"unset\") {\n    if (patch.type === \"inc\") {\n      if (typeof patch.value != \"number\")\n        throw new Error(\"Cannot increment with a non-number\");\n      return value + patch.value;\n    }\n    if (patch.type === \"dec\") {\n      if (typeof patch.value != \"number\")\n        throw new Error(\"Cannot decrement with a non-number\");\n      return value - patch.value;\n    }\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for number. This is most likely a bug.`\n    );\n  }\n}\nfunction applyPatchToObject(value, patch) {\n  const nextValue = lodash_clone_js__WEBPACK_IMPORTED_MODULE_1__(value);\n  if (patch.path.length === 0) {\n    if (patch.type === \"set\") {\n      if (typeof patch.value == \"object\" && patch.value !== null && !Array.isArray(patch.value))\n        return patch.value;\n      throw new Error(\"Cannot set value of an object to a non-object\");\n    }\n    if (patch.type === \"unset\")\n      return;\n    throw new Error(`Invalid object operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path;\n  if (typeof head != \"string\")\n    throw new Error(`Expected field name to be a string, instead got: ${head}`);\n  return tail.length === 0 && patch.type === \"unset\" ? lodash_omit_js__WEBPACK_IMPORTED_MODULE_2__(nextValue, head) : (!(head in nextValue) && tail.length > 0 || (nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail\n  })), nextValue);\n}\nfunction applyPatchToUnknown(value, patch) {\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  if (patch.type === \"set\")\n    return patch.value;\n  if (patch.type === \"setIfMissing\")\n    return value === void 0 ? patch.value : value;\n  if (patch.type !== \"unset\")\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    );\n}\nfunction applyPatchToString(value, patch) {\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${patch.type}\" and path \"${patch.path.join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  if (patch.type === \"diffMatchPatch\") {\n    const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__.applyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__.parsePatch)(patch.value), value, {\n      allowExceedingIndices: !0\n    });\n    return result;\n  }\n  if (patch.type === \"setIfMissing\")\n    return value === void 0 ? patch.value : value;\n  if (patch.type === \"set\")\n    return patch.value;\n  if (patch.type !== \"unset\")\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    );\n}\nfunction applyAll(value, patches) {\n  return patches.reduce(applyPatch, value);\n}\nfunction applyPatch(value, patch) {\n  return Array.isArray(value) ? applyPatchToArray(value, patch) : typeof value == \"string\" ? applyPatchToString(value, patch) : isObject(value) ? applyPatchToObject(value, patch) : typeof value == \"number\" ? applyPatchToNumber(value, patch) : applyPatchToUnknown(value, patch);\n}\nfunction isObject(value) {\n  return typeof value == \"object\" && value !== null && !Array.isArray(value);\n}\nfunction setIfMissing(value, path = []) {\n  return {\n    type: \"setIfMissing\",\n    path,\n    value\n  };\n}\nfunction diffMatchPatch(currentValue, nextValue, path = []) {\n  const patches = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__.makePatches)(currentValue, nextValue), patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__.stringifyPatches)(patches);\n  return { type: \"diffMatchPatch\", path, value: patch };\n}\nfunction insert(items, position, path = []) {\n  return {\n    type: \"insert\",\n    path,\n    position,\n    items\n  };\n}\nfunction set(value, path = []) {\n  return { type: \"set\", path, value };\n}\nfunction unset(path = []) {\n  return { type: \"unset\", path };\n}\nfunction prefixPath(patch, segment) {\n  return {\n    ...patch,\n    path: [segment, ...patch.path]\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/patches/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/react/node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n\nconst defaultLists = {\n  number: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ol\", { children }),\n  bullet: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", { children })\n}, DefaultListItem = ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", { children }), link = ({ children, value }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", { href: value == null ? void 0 : value.href, children }), underlineStyle = { textDecoration: \"underline\" }, defaultMarks = {\n  em: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"em\", { children }),\n  strong: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", { children }),\n  code: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", { children }),\n  underline: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { style: underlineStyle, children }),\n  \"strike-through\": ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", { children }),\n  link\n}, getTemplate = (type, prop) => `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`, unknownTypeWarning = (typeName) => getTemplate(`block type \"${typeName}\"`, \"types\"), unknownMarkWarning = (markType) => getTemplate(`mark type \"${markType}\"`, \"marks\"), unknownBlockStyleWarning = (blockStyle) => getTemplate(`block style \"${blockStyle}\"`, \"block\"), unknownListStyleWarning = (listStyle) => getTemplate(`list style \"${listStyle}\"`, \"list\"), unknownListItemStyleWarning = (listStyle) => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst hidden = { display: \"none\" }, DefaultUnknownType = ({\n  value,\n  isInline\n}) => {\n  const warning = unknownTypeWarning(value._type);\n  return isInline ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { style: hidden, children: warning }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { style: hidden, children: warning });\n}, DefaultUnknownMark = ({\n  markType,\n  children\n}) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: `unknown__pt__mark__${markType}`, children }), DefaultUnknownBlockStyle = ({\n  children\n}) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { children }), DefaultUnknownList = ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", { children }), DefaultUnknownListItem = ({\n  children\n}) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", { children }), DefaultHardBreak = () => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}), defaultBlockStyles = {\n  normal: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { children }),\n  blockquote: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"blockquote\", { children }),\n  h1: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h1\", { children }),\n  h2: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", { children }),\n  h3: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", { children }),\n  h4: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h4\", { children }),\n  h5: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h5\", { children }),\n  h6: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h6\", { children })\n}, defaultComponents = {\n  types: {},\n  block: defaultBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle\n};\nfunction mergeComponents(parent, overrides) {\n  const { block, list, listItem, marks, types, ...rest } = overrides;\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\"),\n    ...rest\n  };\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key], parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? { ...parentVal, ...override } : parentVal;\n}\nfunction PortableText({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning\n}) {\n  const handleMissingComponent = missingComponentHandler || noop, blocks = Array.isArray(input) ? input : [input], nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.LIST_NEST_MODE_HTML), components = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]), renderNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(\n    () => getNodeRenderer(components, handleMissingComponent),\n    [components, handleMissingComponent]\n  ), rendered = nested.map(\n    (node, index) => renderNode({ node, index, isInline: !1, renderNode })\n  );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: rendered });\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const { node, index, isInline } = options, key = node._key || `node-${index}`;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitList)(node) ? renderList(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextListItemBlock)(node) ? renderListItem(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitSpan)(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextBlock)(node) ? renderBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitTextNode)(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);\n  }\n  function hasCustomComponentForNode(node) {\n    return node._type in components.types;\n  }\n  function renderListItem(node, index, key) {\n    const tree = serializeBlock({ node, index, isInline: !1, renderNode }), renderer = components.listItem, Li = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const { listItem, ...blockNode } = node;\n      children = renderNode({ node: blockNode, index, isInline: !1 });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Li, { value: node, index, isInline: !1, renderNode, children }, key);\n  }\n  function renderList(node, index, key) {\n    const children = node.children.map(\n      (child, childIndex) => renderNode({\n        node: child._key ? child : { ...child, _key: `li-${index}-${childIndex}` },\n        index: childIndex,\n        isInline: !1\n      })\n    ), component = components.list, List = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (List === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), { nodeType: \"listStyle\", type: style });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, { value: node, index, isInline: !1, renderNode, children }, key);\n  }\n  function renderSpan(node, _index, key) {\n    const { markDef, markType, markKey } = node, Span = components.marks[markType] || components.unknownMark, children = node.children.map(\n      (child, childIndex) => renderNode({ node: child, index: childIndex, isInline: !0 })\n    );\n    return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), { nodeType: \"mark\", type: markType }), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\n      Span,\n      {\n        text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.spanToPlainText)(node),\n        value: markDef,\n        markType,\n        markKey,\n        renderNode,\n        children\n      },\n      key\n    );\n  }\n  function renderBlock(node, index, key, isInline) {\n    const { _key, ...props } = serializeBlock({ node, index, isInline, renderNode }), style = props.node.style || \"normal\", Block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Block, { ...props, value: props.node, renderNode }, key);\n  }\n  function renderText(node, key) {\n    if (node.text === `\n`) {\n      const HardBreak = components.hardBreak;\n      return HardBreak ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HardBreak, {}, key) : `\n`;\n    }\n    return node.text;\n  }\n  function renderUnknownType(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    };\n    handleMissingComponent(unknownTypeWarning(node._type), { nodeType: \"block\", type: node._type });\n    const UnknownType = components.unknownType;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnknownType, { ...nodeOptions }, key);\n  }\n  function renderCustomBlock(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    }, Node = components.types[node._type];\n    return Node ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Node, { ...nodeOptions }, key) : null;\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const { node, index, isInline, renderNode } = options, children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.buildMarksTree)(node).map(\n    (child, i) => renderNode({ node: child, isInline: !0, index: i, renderNode })\n  );\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/react/node_modules/@portabletext/toolkit/dist/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@portabletext/react/node_modules/@portabletext/toolkit/dist/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def) => typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks)\n    return [];\n  if (!span.marks.length)\n    return [];\n  const marks = span.marks.slice(), occurences = {};\n  return marks.forEach((mark) => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1)\n        occurences[mark]++;\n      else\n        break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA], bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences)\n    return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA), bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const { children } = block, markDefs = block.markDefs ?? [];\n  if (!children || !children.length)\n    return [];\n  const sortedMarks = children.map(sortMarksByOccurences), rootNode = {\n    _type: \"@span\",\n    children: [],\n    markType: \"<unknown>\"\n  };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span)\n      continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1)\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\", index = marksNeeded.indexOf(mark);\n        if (index === -1)\n          break;\n        marksNeeded.splice(index, 1);\n      }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find((def) => def._key === markKey), markType = markDef ? markDef._type : markKey, node = {\n          _type: \"@span\",\n          _key: span._key,\n          children: [],\n          markDef,\n          markType,\n          markKey\n        };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1; )\n          lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(\n          lines.map((text) => ({ _type: \"@text\", text }))\n        );\n      } else\n        currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1], newLastChild = {\n            ...lastListItem,\n            children: [...lastListItem.children, newList]\n          };\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else\n          currentList.children.push(\n            newList\n          );\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1], match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1], match = matchingBranch && findListMatching(matchingBranch, { level: block.level || 1 });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1, style = matching.listItem || \"normal\", filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style)\n    return rootNode;\n  if (!(\"children\" in rootNode))\n    return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach((current) => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/, trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current))\n      return;\n    let pad = !1;\n    current.children.forEach((span) => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\", LIST_NEST_MODE_DIRECT = \"direct\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/sanity-bridge/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@portabletext/sanity-bridge/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compileSchemaDefinitionToPortableTextMemberSchemaTypes: () => (/* binding */ compileSchemaDefinitionToPortableTextMemberSchemaTypes),\n/* harmony export */   createPortableTextMemberSchemaTypes: () => (/* binding */ createPortableTextMemberSchemaTypes),\n/* harmony export */   portableTextMemberSchemaTypesToSchema: () => (/* binding */ portableTextMemberSchemaTypesToSchema),\n/* harmony export */   sanitySchemaToPortableTextSchema: () => (/* binding */ sanitySchemaToPortableTextSchema)\n/* harmony export */ });\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/./node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/./node_modules/lodash.startcase/index.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n\n\n\n\nfunction createPortableTextMemberSchemaTypes(portableTextType) {\n  if (!portableTextType)\n    throw new Error(\"Parameter 'portabletextType' missing (required)\");\n  const blockType = portableTextType.of?.find(findBlockType);\n  if (!blockType)\n    throw new Error(\"Block type is not defined in this schema (required)\");\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === \"children\"\n  );\n  if (!childrenField)\n    throw new Error(\"Children field for block type found in schema (required)\");\n  const ofType = childrenField.type.of;\n  if (!ofType)\n    throw new Error(\n      \"Valid types for block children not found in schema (required)\"\n    );\n  const spanType = ofType.find((memberType) => memberType.name === \"span\");\n  if (!spanType)\n    throw new Error(\"Span type not found in schema (required)\");\n  const inlineObjectTypes = ofType.filter(\n    (memberType) => memberType.name !== \"span\"\n  ) || [], blockObjectTypes = portableTextType.of?.filter(\n    (field) => field.name !== blockType.name\n  ) || [];\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: spanType.annotations\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === \"style\"\n  );\n  if (!styleField)\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\"\n    );\n  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter(\n    (style) => style.value\n  );\n  if (!textStyles || textStyles.length === 0)\n    throw new Error(\n      \"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    );\n  return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === \"listItem\"\n  );\n  if (!listField)\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\"\n    );\n  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nfunction portableTextMemberSchemaTypesToSchema(schema) {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: annotation.title\n    })),\n    block: {\n      name: schema.block.name\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: blockObject.title\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: inlineObject.title\n    })),\n    span: {\n      name: schema.span.name\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value\n    }))\n  };\n}\nfunction sanitySchemaToPortableTextSchema(sanitySchema) {\n  const portableTextMemberSchemaTypes = createPortableTextMemberSchemaTypes(\n    sanitySchema.hasOwnProperty(\"jsonType\") ? sanitySchema : compileType(sanitySchema)\n  );\n  return portableTextMemberSchemaTypesToSchema(portableTextMemberSchemaTypes);\n}\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_1__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst keyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nconst temporaryImageBlockObjectName = `tmp-${keyGenerator()}-image`, temporaryUrlBlockObjectName = `tmp-${keyGenerator()}-url`, temporaryImageInlineObjectName = `tmp-${keyGenerator()}-image`, temporaryUrlInlineObjectName = `tmp-${keyGenerator()}-url`, temporaryBlockObjectNames = {\n  image: temporaryImageBlockObjectName,\n  url: temporaryUrlBlockObjectName\n}, temporaryInlineObjectNames = {\n  image: temporaryImageInlineObjectName,\n  url: temporaryUrlInlineObjectName\n}, blockObjectNames = {\n  [temporaryImageBlockObjectName]: \"image\",\n  [temporaryUrlBlockObjectName]: \"url\"\n}, inlineObjectNames = {\n  [temporaryImageInlineObjectName]: \"image\",\n  [temporaryUrlInlineObjectName]: \"url\"\n}, defaultObjectTitles = {\n  image: \"Image\",\n  url: \"URL\"\n};\nfunction compileSchemaDefinitionToPortableTextMemberSchemaTypes(definition) {\n  const blockObjects = definition?.blockObjects?.map(\n    (blockObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.defineType)({\n      type: \"object\",\n      // Very naive way to work around `SanitySchema.compile` adding default\n      // fields to objects with certain names.\n      name: temporaryBlockObjectNames[blockObject.name] ?? blockObject.name,\n      title: blockObject.title === void 0 ? (\n        // This avoids the default title which is a title case of the object name\n        defaultObjectTitles[blockObject.name]\n      ) : blockObject.title,\n      fields: blockObject.fields?.map((field) => ({\n        name: field.name,\n        type: field.type,\n        title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(field.name)\n      })) ?? []\n    })\n  ) ?? [], inlineObjects = definition?.inlineObjects?.map(\n    (inlineObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.defineType)({\n      type: \"object\",\n      // Very naive way to work around `SanitySchema.compile` adding default\n      // fields to objects with certain names.\n      name: temporaryInlineObjectNames[inlineObject.name] ?? inlineObject.name,\n      title: inlineObject.title === void 0 ? (\n        // This avoids the default title which is a title case of the object name\n        defaultObjectTitles[inlineObject.name]\n      ) : inlineObject.title,\n      fields: inlineObject.fields?.map((field) => ({\n        name: field.name,\n        type: field.type,\n        title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(field.name)\n      })) ?? []\n    })\n  ) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.defineField)({\n    type: \"array\",\n    name: \"portable-text\",\n    of: [\n      ...blockObjects.map((blockObject) => ({ type: blockObject.name })),\n      {\n        type: \"block\",\n        name: \"block\",\n        of: inlineObjects.map((inlineObject) => ({ type: inlineObject.name })),\n        marks: {\n          decorators: definition?.decorators?.map((decorator) => ({\n            title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(decorator.name),\n            value: decorator.name\n          })) ?? [],\n          annotations: definition?.annotations?.map((annotation) => ({\n            name: annotation.name,\n            type: \"object\",\n            title: annotation.title,\n            fields: annotation.fields?.map((field) => ({\n              name: field.name,\n              title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(field.name),\n              type: field.type\n            })) ?? []\n          })) ?? []\n        },\n        lists: definition?.lists?.map((list) => ({\n          value: list.name,\n          title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(list.name)\n        })) ?? [],\n        styles: definition?.styles?.map((style) => ({\n          value: style.name,\n          title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(style.name)\n        })) ?? []\n      }\n    ]\n  }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_1__.Schema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects]\n  }).get(\"portable-text\"), pteSchema = createPortableTextMemberSchemaTypes(schema);\n  return {\n    ...pteSchema,\n    portableText: {\n      ...pteSchema.portableText,\n      of: pteSchema.portableText.of.map((schemaType) => {\n        if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isObjectSchemaType)(schemaType))\n          return schemaType;\n        const nameMapping = blockObjectNames[schemaType.name];\n        return {\n          ...schemaType,\n          name: nameMapping ?? schemaType.name,\n          fields: schemaType.fields.map((field) => field.name !== \"children\" || !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isArraySchemaType)(field.type) ? field : {\n            ...field,\n            type: {\n              of: field.type.of.map((ofSchemaType) => {\n                const nameMapping2 = inlineObjectNames[ofSchemaType.name];\n                return nameMapping2 ? {\n                  ...ofSchemaType,\n                  name: nameMapping2\n                } : ofSchemaType;\n              })\n            }\n          })\n        };\n      })\n    },\n    blockObjects: pteSchema.blockObjects.map(\n      (blockObject) => blockObjectNames[blockObject.name] !== void 0 ? {\n        ...blockObject,\n        name: blockObjectNames[blockObject.name],\n        type: {\n          ...blockObject.type,\n          name: blockObjectNames[blockObject.name]\n        }\n      } : blockObject\n    ),\n    inlineObjects: pteSchema.inlineObjects.map(\n      (inlineObject) => inlineObjectNames[inlineObject.name] !== void 0 ? {\n        ...inlineObject,\n        name: inlineObjectNames[inlineObject.name]\n      } : inlineObject\n    )\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/sanity-bridge/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/schema/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@portabletext/schema/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compileSchema: () => (/* binding */ compileSchema),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema)\n/* harmony export */ });\nfunction compileSchema(definition) {\n  const styles = (definition.styles ?? []).map((style) => ({\n    ...style,\n    value: style.name\n  }));\n  return {\n    block: {\n      name: definition.block?.name ?? \"block\"\n    },\n    span: {\n      name: \"span\"\n    },\n    styles: styles.some((style) => style.value === \"normal\") ? styles : [{ value: \"normal\", name: \"normal\", title: \"Normal\" }, ...styles],\n    lists: (definition.lists ?? []).map((list) => ({\n      ...list,\n      value: list.name\n    })),\n    decorators: (definition.decorators ?? []).map((decorator) => ({\n      ...decorator,\n      value: decorator.name\n    })),\n    annotations: (definition.annotations ?? []).map((annotation) => ({\n      ...annotation,\n      fields: annotation.fields ?? []\n    })),\n    blockObjects: (definition.blockObjects ?? []).map((blockObject) => ({\n      ...blockObject,\n      fields: blockObject.fields ?? []\n    })),\n    inlineObjects: (definition.inlineObjects ?? []).map((inlineObject) => ({\n      ...inlineObject,\n      fields: inlineObject.fields ?? []\n    }))\n  };\n}\nfunction defineSchema(definition) {\n  return definition;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9zY2hlbWEvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMLDJFQUEyRSxrREFBa0Q7QUFDN0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxGaXJzdCBBeW9cXERlc2t0b3BcXENyYWZ0ZWQtVGVtcGxhdGVcXGNyYWZ0ZWQtc2l0ZVxcbm9kZV9tb2R1bGVzXFxAcG9ydGFibGV0ZXh0XFxzY2hlbWFcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNvbXBpbGVTY2hlbWEoZGVmaW5pdGlvbikge1xuICBjb25zdCBzdHlsZXMgPSAoZGVmaW5pdGlvbi5zdHlsZXMgPz8gW10pLm1hcCgoc3R5bGUpID0+ICh7XG4gICAgLi4uc3R5bGUsXG4gICAgdmFsdWU6IHN0eWxlLm5hbWVcbiAgfSkpO1xuICByZXR1cm4ge1xuICAgIGJsb2NrOiB7XG4gICAgICBuYW1lOiBkZWZpbml0aW9uLmJsb2NrPy5uYW1lID8/IFwiYmxvY2tcIlxuICAgIH0sXG4gICAgc3Bhbjoge1xuICAgICAgbmFtZTogXCJzcGFuXCJcbiAgICB9LFxuICAgIHN0eWxlczogc3R5bGVzLnNvbWUoKHN0eWxlKSA9PiBzdHlsZS52YWx1ZSA9PT0gXCJub3JtYWxcIikgPyBzdHlsZXMgOiBbeyB2YWx1ZTogXCJub3JtYWxcIiwgbmFtZTogXCJub3JtYWxcIiwgdGl0bGU6IFwiTm9ybWFsXCIgfSwgLi4uc3R5bGVzXSxcbiAgICBsaXN0czogKGRlZmluaXRpb24ubGlzdHMgPz8gW10pLm1hcCgobGlzdCkgPT4gKHtcbiAgICAgIC4uLmxpc3QsXG4gICAgICB2YWx1ZTogbGlzdC5uYW1lXG4gICAgfSkpLFxuICAgIGRlY29yYXRvcnM6IChkZWZpbml0aW9uLmRlY29yYXRvcnMgPz8gW10pLm1hcCgoZGVjb3JhdG9yKSA9PiAoe1xuICAgICAgLi4uZGVjb3JhdG9yLFxuICAgICAgdmFsdWU6IGRlY29yYXRvci5uYW1lXG4gICAgfSkpLFxuICAgIGFubm90YXRpb25zOiAoZGVmaW5pdGlvbi5hbm5vdGF0aW9ucyA/PyBbXSkubWFwKChhbm5vdGF0aW9uKSA9PiAoe1xuICAgICAgLi4uYW5ub3RhdGlvbixcbiAgICAgIGZpZWxkczogYW5ub3RhdGlvbi5maWVsZHMgPz8gW11cbiAgICB9KSksXG4gICAgYmxvY2tPYmplY3RzOiAoZGVmaW5pdGlvbi5ibG9ja09iamVjdHMgPz8gW10pLm1hcCgoYmxvY2tPYmplY3QpID0+ICh7XG4gICAgICAuLi5ibG9ja09iamVjdCxcbiAgICAgIGZpZWxkczogYmxvY2tPYmplY3QuZmllbGRzID8/IFtdXG4gICAgfSkpLFxuICAgIGlubGluZU9iamVjdHM6IChkZWZpbml0aW9uLmlubGluZU9iamVjdHMgPz8gW10pLm1hcCgoaW5saW5lT2JqZWN0KSA9PiAoe1xuICAgICAgLi4uaW5saW5lT2JqZWN0LFxuICAgICAgZmllbGRzOiBpbmxpbmVPYmplY3QuZmllbGRzID8/IFtdXG4gICAgfSkpXG4gIH07XG59XG5mdW5jdGlvbiBkZWZpbmVTY2hlbWEoZGVmaW5pdGlvbikge1xuICByZXR1cm4gZGVmaW5pdGlvbjtcbn1cbmV4cG9ydCB7XG4gIGNvbXBpbGVTY2hlbWEsXG4gIGRlZmluZVNjaGVtYVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/schema/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@portabletext/to-html/dist/pt-to-html.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   escapeHTML: () => (/* binding */ escapeHTML),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toHTML: () => (/* binding */ toHTML),\n/* harmony export */   uriLooksSafe: () => (/* binding */ uriLooksSafe)\n/* harmony export */ });\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\nconst _excluded = [\"block\", \"list\", \"listItem\", \"marks\", \"types\"],\n  _excluded2 = [\"listItem\"],\n  _excluded3 = [\"_key\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n\nconst allowedProtocols = [\"http\", \"https\", \"mailto\", \"tel\"],\n  charMap = {\n    \"&\": \"amp\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"'\": \"#x27\"\n  };\nfunction escapeHTML(str) {\n  return replaceMultipleSpaces(str.replace(/[&<>\"']/g, s => `&${charMap[s]};`));\n}\nfunction replaceMultipleSpaces(str) {\n  return str.replace(/ {2,}/g, match => `${\"&nbsp;\".repeat(match.length - 1)} `);\n}\nfunction uriLooksSafe(uri) {\n  const url = (uri || \"\").trim(),\n    first = url.charAt(0);\n  if (first === \"#\" || first === \"/\") return !0;\n  const colonIndex = url.indexOf(\":\");\n  if (colonIndex === -1) return !0;\n  const proto = url.slice(0, colonIndex).toLowerCase();\n  if (allowedProtocols.indexOf(proto) !== -1) return !0;\n  const queryIndex = url.indexOf(\"?\");\n  if (queryIndex !== -1 && colonIndex > queryIndex) return !0;\n  const hashIndex = url.indexOf(\"#\");\n  return hashIndex !== -1 && colonIndex > hashIndex;\n}\nconst defaultLists = {\n    number: ({\n      children\n    }) => `<ol>${children}</ol>`,\n    bullet: ({\n      children\n    }) => `<ul>${children}</ul>`\n  },\n  DefaultListItem = ({\n    children\n  }) => `<li>${children}</li>`,\n  link = ({\n    children,\n    value\n  }) => {\n    const href = (value == null ? void 0 : value.href) || \"\";\n    return uriLooksSafe(href) ? `<a href=\"${escapeHTML(href)}\">${children}</a>` : children;\n  },\n  defaultMarks = {\n    em: ({\n      children\n    }) => `<em>${children}</em>`,\n    strong: ({\n      children\n    }) => `<strong>${children}</strong>`,\n    code: ({\n      children\n    }) => `<code>${children}</code>`,\n    underline: ({\n      children\n    }) => `<span style=\"text-decoration:underline\">${children}</span>`,\n    \"strike-through\": ({\n      children\n    }) => `<del>${children}</del>`,\n    link\n  },\n  getTemplate = (type, prop) => `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` option`,\n  unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\"),\n  unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\"),\n  unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\"),\n  unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\"),\n  unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst DefaultUnknownType = ({\n    value,\n    isInline\n  }) => {\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? `<span style=\"display:none\">${warning}</span>` : `<div style=\"display:none\">${warning}</div>`;\n  },\n  DefaultUnknownMark = ({\n    markType,\n    children\n  }) => `<span class=\"unknown__pt__mark__${markType}\">${children}</span>`,\n  DefaultUnknownBlockStyle = ({\n    children\n  }) => `<p>${children}</p>`,\n  DefaultUnknownList = ({\n    children\n  }) => `<ul>${children}</ul>`,\n  DefaultUnknownListItem = ({\n    children\n  }) => `<li>${children}</li>`,\n  DefaultHardBreak = () => \"<br/>\",\n  defaultPortableTextBlockStyles = {\n    normal: ({\n      children\n    }) => `<p>${children}</p>`,\n    blockquote: ({\n      children\n    }) => `<blockquote>${children}</blockquote>`,\n    h1: ({\n      children\n    }) => `<h1>${children}</h1>`,\n    h2: ({\n      children\n    }) => `<h2>${children}</h2>`,\n    h3: ({\n      children\n    }) => `<h3>${children}</h3>`,\n    h4: ({\n      children\n    }) => `<h4>${children}</h4>`,\n    h5: ({\n      children\n    }) => `<h5>${children}</h5>`,\n    h6: ({\n      children\n    }) => `<h6>${children}</h6>`\n  },\n  defaultComponents = {\n    types: {},\n    block: defaultPortableTextBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    escapeHTML,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n  };\nfunction mergeComponents(parent, overrides) {\n  const {\n      block,\n      list,\n      listItem,\n      marks,\n      types\n    } = overrides,\n    rest = _objectWithoutProperties(overrides, _excluded);\n  return _objectSpread(_objectSpread({}, parent), {}, {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key],\n    parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction toHTML(value, options = {}) {\n  const {\n      components: componentOverrides,\n      onMissingComponent: missingComponentHandler = printWarning\n    } = options,\n    handleMissingComponent = missingComponentHandler || noop,\n    blocks = Array.isArray(value) ? value : [value],\n    nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.nestLists)(blocks, \"html\"),\n    components = componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents,\n    renderNode = getNodeRenderer(components, handleMissingComponent);\n  return nested.map((node, index) => renderNode({\n    node,\n    index,\n    isInline: !1,\n    renderNode\n  })).join(\"\");\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n      node,\n      index,\n      isInline\n    } = options;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitList)(node) ? renderList(node, index) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListItemBlock)(node) ? renderListItem(node, index) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitSpan)(node) ? renderSpan(node) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextBlock)(node) ? renderBlock(node, index, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitTextNode)(node) ? renderText(node) : renderCustomBlock(node, index, isInline);\n  }\n  function renderListItem(node, index) {\n    const tree = serializeBlock({\n        node,\n        index,\n        isInline: !1,\n        renderNode\n      }),\n      renderer = components.listItem,\n      itemHandler = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (itemHandler === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const {\n          listItem\n        } = node,\n        blockNode = _objectWithoutProperties(node, _excluded2);\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: !1\n      });\n    }\n    return itemHandler({\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    });\n  }\n  function renderList(node, index) {\n    const children = node.children.map((child, childIndex) => renderNode({\n        node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n          _key: `li-${index}-${childIndex}`\n        }),\n        index: childIndex,\n        isInline: !1\n      })),\n      component = components.list,\n      list = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (list === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n    return list({\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children: children.join(\"\")\n    });\n  }\n  function renderSpan(node) {\n    const {\n        markDef,\n        markType,\n        markKey\n      } = node,\n      span = components.marks[markType] || components.unknownMark,\n      children = node.children.map((child, childIndex) => renderNode({\n        node: child,\n        index: childIndex,\n        isInline: !0\n      }));\n    return span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n      nodeType: \"mark\",\n      type: markType\n    }), span({\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children: children.join(\"\")\n    });\n  }\n  function renderBlock(node, index, isInline) {\n    const _serializeBlock = serializeBlock({\n        node,\n        index,\n        isInline,\n        renderNode\n      }),\n      {\n        _key\n      } = _serializeBlock,\n      props = _objectWithoutProperties(_serializeBlock, _excluded3),\n      style = props.node.style || \"normal\",\n      block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), block(_objectSpread(_objectSpread({}, props), {}, {\n      value: props.node,\n      renderNode\n    }));\n  }\n  function renderText(node) {\n    if (node.text === `\n`) {\n      const hardBreak = components.hardBreak;\n      return hardBreak ? hardBreak() : `\n`;\n    }\n    return components.escapeHTML(node.text);\n  }\n  function renderCustomBlock(value, index, isInline) {\n    const node = components.types[value._type];\n    return node || handleMissingComponent(unknownTypeWarning(value._type), {\n      nodeType: \"block\",\n      type: value._type\n    }), (node || components.unknownType)({\n      value,\n      isInline,\n      index,\n      renderNode\n    });\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const {\n      node,\n      index,\n      isInline,\n      renderNode\n    } = options,\n    children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.buildMarksTree)(node).map((child, i) => renderNode({\n      node: child,\n      isInline: !0,\n      index: i,\n      renderNode\n    }));\n  return {\n    _key: node._key || `block-${index}`,\n    children: children.join(\"\"),\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {}\n\n//# sourceMappingURL=pt-to-html.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC90by1odG1sL2Rpc3QvcHQtdG8taHRtbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhLG9DQUFvQyxvRUFBb0UsMERBQTBEO0FBQ2xLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDBDQUEwQywrQkFBK0Isb0JBQW9CLG1DQUFtQyxvQ0FBb0MsdUVBQXVFO0FBQ3pRLDBDQUEwQywwQkFBMEIsbURBQW1ELG9DQUFvQyx5Q0FBeUMsWUFBWSxjQUFjLHdDQUF3QyxxREFBcUQ7QUFDM1QsK0NBQStDLDBCQUEwQixZQUFZLHVCQUF1Qiw4QkFBOEIsbUNBQW1DLGVBQWU7QUFDOEI7QUFDMU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLFlBQVk7QUFDNUU7QUFDQTtBQUNBLHdCQUF3QixHQUFHLGdCQUFnQixPQUFPLDRCQUE0QjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxZQUFZLFNBQVM7QUFDMUI7QUFDQTtBQUNBLEtBQUssWUFBWSxTQUFTO0FBQzFCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRyxZQUFZLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsNENBQTRDLGlCQUFpQixJQUFJLFNBQVM7QUFDMUUsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUssWUFBWSxTQUFTO0FBQzFCO0FBQ0E7QUFDQSxLQUFLLGdCQUFnQixTQUFTO0FB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Q0E7QUFDQSxLQUFLLHVDQUF1QyxZQUFZO0FBQ3hEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixlQUFlLHFFQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZ0NBQWdDLE1BQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0Y7QUFDaEYiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcRmlyc3QgQXlvXFxEZXNrdG9wXFxDcmFmdGVkLVRlbXBsYXRlXFxjcmFmdGVkLXNpdGVcXG5vZGVfbW9kdWxlc1xcQHBvcnRhYmxldGV4dFxcdG8taHRtbFxcZGlzdFxccHQtdG8taHRtbC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgX2V4Y2x1ZGVkID0gW1wiYmxvY2tcIiwgXCJsaXN0XCIsIFwibGlzdEl0ZW1cIiwgXCJtYXJrc1wiLCBcInR5cGVzXCJdLFxuICBfZXhjbHVkZWQyID0gW1wibGlzdEl0ZW1cIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJfa2V5XCJdO1xuZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSwgciwgdCkgeyByZXR1cm4gKHIgPSBfdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7IHZhbHVlOiB0LCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pIDogZVtyXSA9IHQsIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IHR5cGVvZiBpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgaSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZSwgdCkgeyBpZiAobnVsbCA9PSBlKSByZXR1cm4ge307IHZhciBvLCByLCBpID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoZSwgdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBuID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgZm9yIChyID0gMDsgciA8IG4ubGVuZ3RoOyByKyspIG8gPSBuW3JdLCAtMSA9PT0gdC5pbmRleE9mKG8pICYmIHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZSwgbykgJiYgKGlbb10gPSBlW29dKTsgfSByZXR1cm4gaTsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UociwgZSkgeyBpZiAobnVsbCA9PSByKSByZXR1cm4ge307IHZhciB0ID0ge307IGZvciAodmFyIG4gaW4gcikgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwociwgbikpIHsgaWYgKC0xICE9PSBlLmluZGV4T2YobikpIGNvbnRpbnVlOyB0W25dID0gcltuXTsgfSByZXR1cm4gdDsgfVxuaW1wb3J0IHsgbmVzdExpc3RzLCBpc1BvcnRhYmxlVGV4dFRvb2xraXRMaXN0LCBpc1BvcnRhYmxlVGV4dExpc3RJdGVtQmxvY2ssIGlzUG9ydGFibGVUZXh0VG9vbGtpdFNwYW4sIGlzUG9ydGFibGVUZXh0QmxvY2ssIGlzUG9ydGFibGVUZXh0VG9vbGtpdFRleHROb2RlLCBzcGFuVG9QbGFpblRleHQsIGJ1aWxkTWFya3NUcmVlIH0gZnJvbSBcIkBwb3J0YWJsZXRleHQvdG9vbGtpdFwiO1xuY29uc3QgYWxsb3dlZFByb3RvY29scyA9IFtcImh0dHBcIiwgXCJodHRwc1wiLCBcIm1haWx0b1wiLCBcInRlbFwiXSxcbiAgY2hhck1hcCA9IHtcbiAgICBcIiZcIjogXCJhbXBcIixcbiAgICBcIjxcIjogXCJsdFwiLFxuICAgIFwiPlwiOiBcImd0XCIsXG4gICAgJ1wiJzogXCJxdW90XCIsXG4gICAgXCInXCI6IFwiI3gyN1wiXG4gIH07XG5mdW5jdGlvbiBlc2NhcGVIVE1MKHN0cikge1xuICByZXR1cm4gcmVwbGFjZU11bHRpcGxlU3BhY2VzKHN0ci5yZXBsYWNlKC9bJjw+XCInXS9nLCBzID0+IGAmJHtjaGFyTWFwW3NdfTtgKSk7XG59XG5mdW5jdGlvbiByZXBsYWNlTXVsdGlwbGVTcGFjZXMoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvIHsyLH0vZywgbWF0Y2ggPT4gYCR7XCImbmJzcDtcIi5yZXBlYXQobWF0Y2gubGVuZ3RoIC0gMSl9IGApO1xufVxuZnVuY3Rpb24gdXJpTG9va3NTYWZlKHVyaSkge1xuICBjb25zdCB1cmwgPSAodXJpIHx8IFwiXCIpLnRyaW0oKSxcbiAgICBmaXJzdCA9IHVybC5jaGFyQXQoMCk7XG4gIGlmIChmaXJzdCA9PT0gXCIjXCIgfHwgZmlyc3QgPT09IFwiL1wiKSByZXR1cm4gITA7XG4gIGNvbnN0IGNvbG9uSW5kZXggPSB1cmwuaW5kZXhPZihcIjpcIik7XG4gIGlmIChjb2xvbkluZGV4ID09PSAtMSkgcmV0dXJuICEwO1xuICBjb25zdCBwcm90byA9IHVybC5zbGljZSgwLCBjb2xvbkluZGV4KS50b0xvd2VyQ2FzZSgpO1xuICBpZiAoYWxsb3dlZFByb3RvY29scy5pbmRleE9mKHByb3RvKSAhPT0gLTEpIHJldHVybiAhMDtcbiAgY29uc3QgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKFwiP1wiKTtcbiAgaWYgKHF1ZXJ5SW5kZXggIT09IC0xICYmIGNvbG9uSW5kZXggPiBxdWVyeUluZGV4KSByZXR1cm4gITA7XG4gIGNvbnN0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgcmV0dXJuIGhhc2hJbmRleCAhPT0gLTEgJiYgY29sb25JbmRleCA+IGhhc2hJbmRleDtcbn1cbmNvbnN0IGRlZmF1bHRMaXN0cyA9IHtcbiAgICBudW1iZXI6ICh7XG4gICAgICBjaGlsZHJlblxuICAgIH0pID0+IGA8b2w+JHtjaGlsZHJlbn08L29sPmAsXG4gICAgYnVsbGV0OiAoe1xuICAgICAgY2hpbGRyZW5cbiAgICB9KSA9PiBgPHVsPiR7Y2hpbGRyZW59PC91bD5gXG4gIH0sXG4gIERlZmF1bHRMaXN0SXRlbSA9ICh7XG4gICAgY2hpbGRyZW5cbiAgfSkgPT4gYDxsaT4ke2NoaWxkcmVufTwvbGk+YCxcbiAgbGluayA9ICh7XG4gICAgY2hpbGRyZW4sXG4gICAgdmFsdWVcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGhyZWYgPSAodmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLmhyZWYpIHx8IFwiXCI7XG4gICAgcmV0dXJuIHVyaUxvb2tzU2FmZShocmVmKSA/IGA8YSBocmVmPVwiJHtlc2NhcGVIVE1MKGhyZWYpfVwiPiR7Y2hpbGRyZW59PC9hPmAgOiBjaGlsZHJlbjtcbiAgfSxcbiAgZGVmYXVsdE1hcmtzID0ge1xuICAgIGVtOiAoe1xuICAgICAgY2hpbGRyZW5cbiAgICB9KSA9PiBgPGVtPiR7Y2hpbGRyZW59PC9lbT5gLFxuICAgIHN0cm9uZzogKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkgPT4gYDxzdHJvbmc+JHtjaGlsZHJlbn08L3N0cm9uZz5gLFxuICAgIGNvZGU6ICh7XG4gICAgICBjaGlsZHJlblxuICAgIH0pID0+IGA8Y29kZT4ke2NoaWxkcmVufTwvY29kZT5gLFxuICAgIHVuZGVybGluZTogKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkgPT4gYDxzcGFuIHN0eWxlPVwidGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZVwiPiR7Y2hpbGRyZW59PC9zcGFuPmAsXG4gICAgXCJzdHJpa2UtdGhyb3VnaFwiOiAoe1xuICAgICAgY2hpbGRyZW5cbiAgICB9KSA9PiBgPGRlbD4ke2NoaWxkcmVufTwvZGVsPmAsXG4gICAgbGlua1xuICB9LFxuICBnZXRUZW1wbGF0ZSA9ICh0eXBlLCBwcm9wKSA9PiBgVW5rbm93biAke3R5cGV9LCBzcGVjaWZ5IGEgY29tcG9uZW50IGZvciBpdCBpbiB0aGUgXFxgY29tcG9uZW50cy4ke3Byb3B9XFxgIG9wdGlvbmAsXG4gIHVua25vd25UeXBlV2FybmluZyA9IHR5cGVOYW1lID0+IGdldFRlbXBsYXRlKGBibG9jayB0eXBlIFwiJHt0eXBlTmFtZX1cImAsIFwidHlwZXNcIiksXG4gIHVua25vd25NYXJrV2FybmluZyA9IG1hcmtUeXBlID0+IGdldFRlbXBsYXRlKGBtYXJrIHR5cGUgXCIke21hcmtUeXBlfVwiYCwgXCJtYXJrc1wiKSxcbiAgdW5rbm93bkJsb2NrU3R5bGVXYXJuaW5nID0gYmxvY2tTdHlsZSA9PiBnZXRUZW1wbGF0ZShgYmxvY2sgc3R5bGUgXCIke2Jsb2NrU3R5bGV9XCJgLCBcImJsb2NrXCIpLFxuICB1bmtub3duTGlzdFN0eWxlV2FybmluZyA9IGxpc3RTdHlsZSA9PiBnZXRUZW1wbGF0ZShgbGlzdCBzdHlsZSBcIiR7bGlzdFN0eWxlfVwiYCwgXCJsaXN0XCIpLFxuICB1bmtub3duTGlzdEl0ZW1TdHlsZVdhcm5pbmcgPSBsaXN0U3R5bGUgPT4gZ2V0VGVtcGxhdGUoYGxpc3QgaXRlbSBzdHlsZSBcIiR7bGlzdFN0eWxlfVwiYCwgXCJsaXN0SXRlbVwiKTtcbmZ1bmN0aW9uIHByaW50V2FybmluZyhtZXNzYWdlKSB7XG4gIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn1cbmNvbnN0IERlZmF1bHRVbmtub3duVHlwZSA9ICh7XG4gICAgdmFsdWUsXG4gICAgaXNJbmxpbmVcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHdhcm5pbmcgPSB1bmtub3duVHlwZVdhcm5pbmcodmFsdWUuX3R5cGUpO1xuICAgIHJldHVybiBpc0lubGluZSA/IGA8c3BhbiBzdHlsZT1cImRpc3BsYXk6bm9uZVwiPiR7d2FybmluZ308L3NwYW4+YCA6IGA8ZGl2IHN0eWxlPVwiZGlzcGxheTpub25lXCI+JHt3YXJuaW5nfTwvZGl2PmA7XG4gIH0sXG4gIERlZmF1bHRVbmtub3duTWFyayA9ICh7XG4gICAgbWFya1R5cGUsXG4gICAgY2hpbGRyZW5cbiAgfSkgPT4gYDxzcGFuIGNsYXNzPVwidW5rbm93bl9fcHRfX21hcmtfXyR7bWFya1R5cGV9XCI+JHtjaGlsZHJlbn08L3NwYW4+YCxcbiAgRGVmYXVsdFVua25vd25CbG9ja1N0eWxlID0gKHtcbiAgICBjaGlsZHJlblxuICB9KSA9PiBgPHA+JHtjaGlsZHJlbn08L3A+YCxcbiAgRGVmYXVsdFVua25vd25MaXN0ID0gKHtcbiAgICBjaGlsZHJlblxuICB9KSA9PiBgPHVsPiR7Y2hpbGRyZW59PC91bD5gLFxuICBEZWZhdWx0VW5rbm93bkxpc3RJdGVtID0gKHtcbiAgICBjaGlsZHJlblxuICB9KSA9PiBgPGxpPiR7Y2hpbGRyZW59PC9saT5gLFxuICBEZWZhdWx0SGFyZEJyZWFrID0gKCkgPT4gXCI8YnIvPlwiLFxuICBkZWZhdWx0UG9ydGFibGVUZXh0QmxvY2tTdHlsZXMgPSB7XG4gICAgbm9ybWFsOiAoe1xuICAgICAgY2hpbGRyZW5cbiAgICB9KSA9PiBgPHA+JHtjaGlsZHJlbn08L3A+YCxcbiAgICBibG9ja3F1b3RlOiAoe1xuICAgICAgY2hpbGRyZW5cbiAgICB9KSA9PiBgPGJsb2NrcXVvdGU+JHtjaGlsZHJlbn08L2Jsb2NrcXVvdGU+YCxcbiAgICBoMTogKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkgPT4gYDxoMT4ke2NoaWxkcmVufTwvaDE+YCxcbiAgICBoMjogKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkgPT4gYDxoMj4ke2NoaWxkcmVufTwvaDI+YCxcbiAgICBoMzogKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkgPT4gYDxoMz4ke2NoaWxkcmVufTwvaDM+YCxcbiAgICBoNDogKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkgPT4gYDxoND4ke2NoaWxkcmVufTwvaDQ+YCxcbiAgICBoNTogKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkgPT4gYDxoNT4ke2NoaWxkcmVufTwvaDU+YCxcbiAgICBoNjogKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkgPT4gYDxoNj4ke2NoaWxkcmVufTwvaDY+YFxuICB9LFxuICBkZWZhdWx0Q29tcG9uZW50cyA9IHtcbiAgICB0eXBlczoge30sXG4gICAgYmxvY2s6IGRlZmF1bHRQb3J0YWJsZVRleHRCbG9ja1N0eWxlcyxcbiAgICBtYXJrczogZGVmYXVsdE1hcmtzLFxuICAgIGxpc3Q6IGRlZmF1bHRMaXN0cyxcbiAgICBsaXN0SXRlbTogRGVmYXVsdExpc3RJdGVtLFxuICAgIGhhcmRCcmVhazogRGVmYXVsdEhhcmRCcmVhayxcbiAgICBlc2NhcGVIVE1MLFxuICAgIHVua25vd25UeXBlOiBEZWZhdWx0VW5rbm93blR5cGUsXG4gICAgdW5rbm93bk1hcms6IERlZmF1bHRVbmtub3duTWFyayxcbiAgICB1bmtub3duTGlzdDogRGVmYXVsdFVua25vd25MaXN0LFxuICAgIHVua25vd25MaXN0SXRlbTogRGVmYXVsdFVua25vd25MaXN0SXRlbSxcbiAgICB1bmtub3duQmxvY2tTdHlsZTogRGVmYXVsdFVua25vd25CbG9ja1N0eWxlXG4gIH07XG5mdW5jdGlvbiBtZXJnZUNvbXBvbmVudHMocGFyZW50LCBvdmVycmlkZXMpIHtcbiAgY29uc3Qge1xuICAgICAgYmxvY2ssXG4gICAgICBsaXN0LFxuICAgICAgbGlzdEl0ZW0sXG4gICAgICBtYXJrcyxcbiAgICAgIHR5cGVzXG4gICAgfSA9IG92ZXJyaWRlcyxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG92ZXJyaWRlcywgX2V4Y2x1ZGVkKTtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcGFyZW50KSwge30sIHtcbiAgICBibG9jazogbWVyZ2VEZWVwbHkocGFyZW50LCBvdmVycmlkZXMsIFwiYmxvY2tcIiksXG4gICAgbGlzdDogbWVyZ2VEZWVwbHkocGFyZW50LCBvdmVycmlkZXMsIFwibGlzdFwiKSxcbiAgICBsaXN0SXRlbTogbWVyZ2VEZWVwbHkocGFyZW50LCBvdmVycmlkZXMsIFwibGlzdEl0ZW1cIiksXG4gICAgbWFya3M6IG1lcmdlRGVlcGx5KHBhcmVudCwgb3ZlcnJpZGVzLCBcIm1hcmtzXCIpLFxuICAgIHR5cGVzOiBtZXJnZURlZXBseShwYXJlbnQsIG92ZXJyaWRlcywgXCJ0eXBlc1wiKVxuICB9LCByZXN0KTtcbn1cbmZ1bmN0aW9uIG1lcmdlRGVlcGx5KHBhcmVudCwgb3ZlcnJpZGVzLCBrZXkpIHtcbiAgY29uc3Qgb3ZlcnJpZGUgPSBvdmVycmlkZXNba2V5XSxcbiAgICBwYXJlbnRWYWwgPSBwYXJlbnRba2V5XTtcbiAgcmV0dXJuIHR5cGVvZiBvdmVycmlkZSA9PSBcImZ1bmN0aW9uXCIgfHwgb3ZlcnJpZGUgJiYgdHlwZW9mIHBhcmVudFZhbCA9PSBcImZ1bmN0aW9uXCIgPyBvdmVycmlkZSA6IG92ZXJyaWRlID8gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwYXJlbnRWYWwpLCBvdmVycmlkZSkgOiBwYXJlbnRWYWw7XG59XG5mdW5jdGlvbiB0b0hUTUwodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgICBjb21wb25lbnRzOiBjb21wb25lbnRPdmVycmlkZXMsXG4gICAgICBvbk1pc3NpbmdDb21wb25lbnQ6IG1pc3NpbmdDb21wb25lbnRIYW5kbGVyID0gcHJpbnRXYXJuaW5nXG4gICAgfSA9IG9wdGlvbnMsXG4gICAgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCA9IG1pc3NpbmdDb21wb25lbnRIYW5kbGVyIHx8IG5vb3AsXG4gICAgYmxvY2tzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV0sXG4gICAgbmVzdGVkID0gbmVzdExpc3RzKGJsb2NrcywgXCJodG1sXCIpLFxuICAgIGNvbXBvbmVudHMgPSBjb21wb25lbnRPdmVycmlkZXMgPyBtZXJnZUNvbXBvbmVudHMoZGVmYXVsdENvbXBvbmVudHMsIGNvbXBvbmVudE92ZXJyaWRlcykgOiBkZWZhdWx0Q29tcG9uZW50cyxcbiAgICByZW5kZXJOb2RlID0gZ2V0Tm9kZVJlbmRlcmVyKGNvbXBvbmVudHMsIGhhbmRsZU1pc3NpbmdDb21wb25lbnQpO1xuICByZXR1cm4gbmVzdGVkLm1hcCgobm9kZSwgaW5kZXgpID0+IHJlbmRlck5vZGUoe1xuICAgIG5vZGUsXG4gICAgaW5kZXgsXG4gICAgaXNJbmxpbmU6ICExLFxuICAgIHJlbmRlck5vZGVcbiAgfSkpLmpvaW4oXCJcIik7XG59XG5jb25zdCBnZXROb2RlUmVuZGVyZXIgPSAoY29tcG9uZW50cywgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCkgPT4ge1xuICBmdW5jdGlvbiByZW5kZXJOb2RlKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBub2RlLFxuICAgICAgaW5kZXgsXG4gICAgICBpc0lubGluZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIHJldHVybiBpc1BvcnRhYmxlVGV4dFRvb2xraXRMaXN0KG5vZGUpID8gcmVuZGVyTGlzdChub2RlLCBpbmRleCkgOiBpc1BvcnRhYmxlVGV4dExpc3RJdGVtQmxvY2sobm9kZSkgPyByZW5kZXJMaXN0SXRlbShub2RlLCBpbmRleCkgOiBpc1BvcnRhYmxlVGV4dFRvb2xraXRTcGFuKG5vZGUpID8gcmVuZGVyU3Bhbihub2RlKSA6IGlzUG9ydGFibGVUZXh0QmxvY2sobm9kZSkgPyByZW5kZXJCbG9jayhub2RlLCBpbmRleCwgaXNJbmxpbmUpIDogaXNQb3J0YWJsZVRleHRUb29sa2l0VGV4dE5vZGUobm9kZSkgPyByZW5kZXJUZXh0KG5vZGUpIDogcmVuZGVyQ3VzdG9tQmxvY2sobm9kZSwgaW5kZXgsIGlzSW5saW5lKTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXJMaXN0SXRlbShub2RlLCBpbmRleCkge1xuICAgIGNvbnN0IHRyZWUgPSBzZXJpYWxpemVCbG9jayh7XG4gICAgICAgIG5vZGUsXG4gICAgICAgIGluZGV4LFxuICAgICAgICBpc0lubGluZTogITEsXG4gICAgICAgIHJlbmRlck5vZGVcbiAgICAgIH0pLFxuICAgICAgcmVuZGVyZXIgPSBjb21wb25lbnRzLmxpc3RJdGVtLFxuICAgICAgaXRlbUhhbmRsZXIgPSAodHlwZW9mIHJlbmRlcmVyID09IFwiZnVuY3Rpb25cIiA/IHJlbmRlcmVyIDogcmVuZGVyZXJbbm9kZS5saXN0SXRlbV0pIHx8IGNvbXBvbmVudHMudW5rbm93bkxpc3RJdGVtO1xuICAgIGlmIChpdGVtSGFuZGxlciA9PT0gY29tcG9uZW50cy51bmtub3duTGlzdEl0ZW0pIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gbm9kZS5saXN0SXRlbSB8fCBcImJ1bGxldFwiO1xuICAgICAgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCh1bmtub3duTGlzdEl0ZW1TdHlsZVdhcm5pbmcoc3R5bGUpLCB7XG4gICAgICAgIHR5cGU6IHN0eWxlLFxuICAgICAgICBub2RlVHlwZTogXCJsaXN0SXRlbVN0eWxlXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgY2hpbGRyZW4gPSB0cmVlLmNoaWxkcmVuO1xuICAgIGlmIChub2RlLnN0eWxlICYmIG5vZGUuc3R5bGUgIT09IFwibm9ybWFsXCIpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgICBsaXN0SXRlbVxuICAgICAgICB9ID0gbm9kZSxcbiAgICAgICAgYmxvY2tOb2RlID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG5vZGUsIF9leGNsdWRlZDIpO1xuICAgICAgY2hpbGRyZW4gPSByZW5kZXJOb2RlKHtcbiAgICAgICAgbm9kZTogYmxvY2tOb2RlLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgaXNJbmxpbmU6ICExXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1IYW5kbGVyKHtcbiAgICAgIHZhbHVlOiBub2RlLFxuICAgICAgaW5kZXgsXG4gICAgICBpc0lubGluZTogITEsXG4gICAgICByZW5kZXJOb2RlLFxuICAgICAgY2hpbGRyZW5cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXJMaXN0KG5vZGUsIGluZGV4KSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLm1hcCgoY2hpbGQsIGNoaWxkSW5kZXgpID0+IHJlbmRlck5vZGUoe1xuICAgICAgICBub2RlOiBjaGlsZC5fa2V5ID8gY2hpbGQgOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNoaWxkKSwge30sIHtcbiAgICAgICAgICBfa2V5OiBgbGktJHtpbmRleH0tJHtjaGlsZEluZGV4fWBcbiAgICAgICAgfSksXG4gICAgICAgIGluZGV4OiBjaGlsZEluZGV4LFxuICAgICAgICBpc0lubGluZTogITFcbiAgICAgIH0pKSxcbiAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudHMubGlzdCxcbiAgICAgIGxpc3QgPSAodHlwZW9mIGNvbXBvbmVudCA9PSBcImZ1bmN0aW9uXCIgPyBjb21wb25lbnQgOiBjb21wb25lbnRbbm9kZS5saXN0SXRlbV0pIHx8IGNvbXBvbmVudHMudW5rbm93bkxpc3Q7XG4gICAgaWYgKGxpc3QgPT09IGNvbXBvbmVudHMudW5rbm93bkxpc3QpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gbm9kZS5saXN0SXRlbSB8fCBcImJ1bGxldFwiO1xuICAgICAgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCh1bmtub3duTGlzdFN0eWxlV2FybmluZyhzdHlsZSksIHtcbiAgICAgICAgbm9kZVR5cGU6IFwibGlzdFN0eWxlXCIsXG4gICAgICAgIHR5cGU6IHN0eWxlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Qoe1xuICAgICAgdmFsdWU6IG5vZGUsXG4gICAgICBpbmRleCxcbiAgICAgIGlzSW5saW5lOiAhMSxcbiAgICAgIHJlbmRlck5vZGUsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4uam9pbihcIlwiKVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlclNwYW4obm9kZSkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgbWFya0RlZixcbiAgICAgICAgbWFya1R5cGUsXG4gICAgICAgIG1hcmtLZXlcbiAgICAgIH0gPSBub2RlLFxuICAgICAgc3BhbiA9IGNvbXBvbmVudHMubWFya3NbbWFya1R5cGVdIHx8IGNvbXBvbmVudHMudW5rbm93bk1hcmssXG4gICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4ubWFwKChjaGlsZCwgY2hpbGRJbmRleCkgPT4gcmVuZGVyTm9kZSh7XG4gICAgICAgIG5vZGU6IGNoaWxkLFxuICAgICAgICBpbmRleDogY2hpbGRJbmRleCxcbiAgICAgICAgaXNJbmxpbmU6ICEwXG4gICAgICB9KSk7XG4gICAgcmV0dXJuIHNwYW4gPT09IGNvbXBvbmVudHMudW5rbm93bk1hcmsgJiYgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCh1bmtub3duTWFya1dhcm5pbmcobWFya1R5cGUpLCB7XG4gICAgICBub2RlVHlwZTogXCJtYXJrXCIsXG4gICAgICB0eXBlOiBtYXJrVHlwZVxuICAgIH0pLCBzcGFuKHtcbiAgICAgIHRleHQ6IHNwYW5Ub1BsYWluVGV4dChub2RlKSxcbiAgICAgIHZhbHVlOiBtYXJrRGVmLFxuICAgICAgbWFya1R5cGUsXG4gICAgICBtYXJrS2V5LFxuICAgICAgcmVuZGVyTm9kZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbi5qb2luKFwiXCIpXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVuZGVyQmxvY2sobm9kZSwgaW5kZXgsIGlzSW5saW5lKSB7XG4gICAgY29uc3QgX3NlcmlhbGl6ZUJsb2NrID0gc2VyaWFsaXplQmxvY2soe1xuICAgICAgICBub2RlLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgaXNJbmxpbmUsXG4gICAgICAgIHJlbmRlck5vZGVcbiAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBfa2V5XG4gICAgICB9ID0gX3NlcmlhbGl6ZUJsb2NrLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3NlcmlhbGl6ZUJsb2NrLCBfZXhjbHVkZWQzKSxcbiAgICAgIHN0eWxlID0gcHJvcHMubm9kZS5zdHlsZSB8fCBcIm5vcm1hbFwiLFxuICAgICAgYmxvY2sgPSAodHlwZW9mIGNvbXBvbmVudHMuYmxvY2sgPT0gXCJmdW5jdGlvblwiID8gY29tcG9uZW50cy5ibG9jayA6IGNvbXBvbmVudHMuYmxvY2tbc3R5bGVdKSB8fCBjb21wb25lbnRzLnVua25vd25CbG9ja1N0eWxlO1xuICAgIHJldHVybiBibG9jayA9PT0gY29tcG9uZW50cy51bmtub3duQmxvY2tTdHlsZSAmJiBoYW5kbGVNaXNzaW5nQ29tcG9uZW50KHVua25vd25CbG9ja1N0eWxlV2FybmluZyhzdHlsZSksIHtcbiAgICAgIG5vZGVUeXBlOiBcImJsb2NrU3R5bGVcIixcbiAgICAgIHR5cGU6IHN0eWxlXG4gICAgfSksIGJsb2NrKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgICAgdmFsdWU6IHByb3BzLm5vZGUsXG4gICAgICByZW5kZXJOb2RlXG4gICAgfSkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlclRleHQobm9kZSkge1xuICAgIGlmIChub2RlLnRleHQgPT09IGBcbmApIHtcbiAgICAgIGNvbnN0IGhhcmRCcmVhayA9IGNvbXBvbmVudHMuaGFyZEJyZWFrO1xuICAgICAgcmV0dXJuIGhhcmRCcmVhayA/IGhhcmRCcmVhaygpIDogYFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudHMuZXNjYXBlSFRNTChub2RlLnRleHQpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlckN1c3RvbUJsb2NrKHZhbHVlLCBpbmRleCwgaXNJbmxpbmUpIHtcbiAgICBjb25zdCBub2RlID0gY29tcG9uZW50cy50eXBlc1t2YWx1ZS5fdHlwZV07XG4gICAgcmV0dXJuIG5vZGUgfHwgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCh1bmtub3duVHlwZVdhcm5pbmcodmFsdWUuX3R5cGUpLCB7XG4gICAgICBub2RlVHlwZTogXCJibG9ja1wiLFxuICAgICAgdHlwZTogdmFsdWUuX3R5cGVcbiAgICB9KSwgKG5vZGUgfHwgY29tcG9uZW50cy51bmtub3duVHlwZSkoe1xuICAgICAgdmFsdWUsXG4gICAgICBpc0lubGluZSxcbiAgICAgIGluZGV4LFxuICAgICAgcmVuZGVyTm9kZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiByZW5kZXJOb2RlO1xufTtcbmZ1bmN0aW9uIHNlcmlhbGl6ZUJsb2NrKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgICAgbm9kZSxcbiAgICAgIGluZGV4LFxuICAgICAgaXNJbmxpbmUsXG4gICAgICByZW5kZXJOb2RlXG4gICAgfSA9IG9wdGlvbnMsXG4gICAgY2hpbGRyZW4gPSBidWlsZE1hcmtzVHJlZShub2RlKS5tYXAoKGNoaWxkLCBpKSA9PiByZW5kZXJOb2RlKHtcbiAgICAgIG5vZGU6IGNoaWxkLFxuICAgICAgaXNJbmxpbmU6ICEwLFxuICAgICAgaW5kZXg6IGksXG4gICAgICByZW5kZXJOb2RlXG4gICAgfSkpO1xuICByZXR1cm4ge1xuICAgIF9rZXk6IG5vZGUuX2tleSB8fCBgYmxvY2stJHtpbmRleH1gLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbi5qb2luKFwiXCIpLFxuICAgIGluZGV4LFxuICAgIGlzSW5saW5lLFxuICAgIG5vZGVcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZXhwb3J0IHsgZGVmYXVsdENvbXBvbmVudHMsIGVzY2FwZUhUTUwsIG1lcmdlQ29tcG9uZW50cywgdG9IVE1MLCB1cmlMb29rc1NhZmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB0LXRvLWh0bWwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;